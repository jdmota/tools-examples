\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Jun 14 16:25:06 BST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:off , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "..";

\proofObligation "#Proof Obligation Settings
#Tue Jun 14 16:25:06 BST 2022
contract=LinkedListIterator[java.lang.Object\\:\\:<inv>()].JML accessible clause.0
name=LinkedListIterator[java.lang.Object\\:\\:<inv>()].JML accessible clause.0
class=de.uka.ilkd.key.proof.init.DependencyContractPO
";

\proof {
(keyLog "0" (keyUser "JOTA" ) (keyVersion "666bcb0c95"))
(keyLog "1" (keyUser "JOTA" ) (keyVersion "666bcb0c95"))

(autoModeTime "186053")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "self,anon_heap"))
(rule "impRight" (formula "1") (userinteraction))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "replace_known_left" (formula "8") (term "0") (ifseqformula "6") (userinteraction))
 (builtin "One Step Simplification" (formula "8"))
(rule "observerDependencyFormula" (formula "8") (inst "termWithSmallHeap=java.lang.Object::<inv>(heap, self)") (userinteraction))
(branch "Case 1"
   (rule "close" (formula "8") (ifseqformula "6") (userinteraction))
)
(branch "Case 2"
   (rule "replace_known_left" (formula "8") (term "1,0") (ifseqformula "6") (userinteraction))
    (builtin "One Step Simplification" (formula "8"))
   (rule "hide_right" (formula "9") (userinteraction))
   (rule "andRight" (formula "8") (userinteraction))
   (branch "Case 1"
      (rule "allRight" (formula "8") (inst "sk=_ov_0"))
      (rule "impRight" (formula "8"))
      (rule "orRight" (formula "9"))
      (rule "close" (formula "9") (ifseqformula "1"))
   )
   (branch "Case 2"
      (rule "allRight" (formula "8") (inst "sk=_ov_0") (userinteraction))
      (rule "allRight" (formula "8") (inst "sk=_fv_0") (userinteraction))
      (rule "impRight" (formula "8") (userinteraction))
      (rule "JML_represents_clause_for_LinkedList_footprint" (formula "1") (term "1,2") (inst "i=i") (userinteraction))
      (rule "JML_represents_clause_for_LinkedListIterator_footprint" (formula "1") (term "0,2") (userinteraction))
      (rule "elementOfUnion" (formula "1") (userinteraction))
      (rule "elementOfUnion" (formula "1") (term "0") (userinteraction))
      (rule "elementOfUnion" (formula "1") (term "0,0") (userinteraction))
      (rule "elementOfUnion" (formula "1") (term "0,0,0") (userinteraction))
      (rule "elementOfUnion" (formula "1") (term "1") (userinteraction))
      (rule "elementOfUnion" (formula "1") (term "0,1") (userinteraction))
      (rule "elementOfUnion" (formula "1") (term "0,0,1") (userinteraction))
      (rule "elementOfUnion" (formula "1") (term "0,0,0,1") (userinteraction))
      (rule "elementOfUnion" (formula "1") (term "0,0,0,0,1") (userinteraction))
      (rule "elementOfUnion" (formula "1") (term "0,0,0,0") (userinteraction))
      (rule "orLeft" (formula "1"))
      (branch " (_ov_0, _fv_0) in {(self, LinkedListIterator::$list)} | (_ov_0, _fv_0) in {(self, LinkedListIterator::$curr)} | (_ov_0, _fv_0) in {(self, LinkedListIterator::$index)} | (_ov_0, _fv_0) in {(self, LinkedListIterator::$seen)} | (_ov_0, _fv_0) in {(self, LinkedListIterator::$to_see)}"
         (rule "orLeft" (formula "1"))
         (branch " (_ov_0, _fv_0) in {(self, LinkedListIterator::$list)} | (_ov_0, _fv_0) in {(self, LinkedListIterator::$curr)} | (_ov_0, _fv_0) in {(self, LinkedListIterator::$index)} | (_ov_0, _fv_0) in {(self, LinkedListIterator::$seen)}"
            (rule "orLeft" (formula "1"))
            (branch " (_ov_0, _fv_0) in {(self, LinkedListIterator::$list)} | (_ov_0, _fv_0) in {(self, LinkedListIterator::$curr)} | (_ov_0, _fv_0) in {(self, LinkedListIterator::$index)}"
               (rule "orLeft" (formula "1"))
               (branch " (_ov_0, _fv_0) in {(self, LinkedListIterator::$list)} | (_ov_0, _fv_0) in {(self, LinkedListIterator::$curr)}"
                  (rule "orLeft" (formula "1"))
                  (branch "(_ov_0, _fv_0) in {(self, LinkedListIterator::$list)}"
                     (rule "eqSymm" (formula "9"))
                     (rule "elementOfSingleton" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "applyEq" (formula "10") (term "2,1") (ifseqformula "2"))
                     (rule "narrowSelectType" (formula "10") (term "1") (ifseqformula "3"))
                     (rule "applyEq" (formula "10") (term "1,0") (ifseqformula "1"))
                     (rule "applyEqRigid" (formula "10") (term "2,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "10") (term "1,1") (ifseqformula "1"))
                     (rule "pullOutSelect" (formula "10") (term "0") (inst "selectSK=LinkedListIterator_list_0"))
                     (rule "simplifySelectOfAnon" (formula "1"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")) (ifInst ""  (formula "6")))
                     (rule "narrowSelectType" (formula "1") (term "1,0") (ifseqformula "5"))
                     (rule "narrowSelectType" (formula "1") (term "2,0") (ifseqformula "4"))
                     (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "ifthenelse_negated" (formula "1") (term "0"))
                     (rule "elementOfUnion" (formula "1") (term "0,0"))
                     (rule "Class_invariant_axiom_for_LinkedListIterator" (formula "9") (inst "i=i") (inst "f=f") (inst "i_0=i_0") (inst "f_0=f_0"))
                     (rule "andLeft" (formula "9"))
                     (rule "notLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "eqSymm" (formula "15") (term "1"))
                     (rule "eqSymm" (formula "14"))
                     (rule "eqSymm" (formula "13"))
                     (rule "castedGetAny" (formula "15") (term "0,1"))
                     (rule "lenOfSeqSubEQ" (formula "12") (term "1,1,0,0") (ifseqformula "14"))
                     (rule "polySimp_elimSub" (formula "12") (term "1,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "12") (term "1,1,1,0,0"))
                     (rule "lenOfSeqSubEQ" (formula "11") (term "1,1,0,0") (ifseqformula "13"))
                     (rule "polySimp_elimSub" (formula "11") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,1,1,1,0,0"))
                     (rule "add_zero_right" (formula "11") (term "1,1,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "15") (term "0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "15") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,1,0,0"))
                     (rule "polySimp_addComm1" (formula "12") (term "0,0,1,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,1,0,0"))
                     (rule "add_zero_right" (formula "11") (term "0,0,1,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "10"))
                     (rule "inEqSimp_commuteLeq" (formula "9"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,1,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0,0,1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "0,0,1,1,1,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,1,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "0,0,1,1,1,0,0"))
                     (rule "getOfSeqSubEQ" (formula "12") (term "1,0,1,0,1,0") (ifseqformula "14"))
                     (rule "castDel" (formula "12") (term "2,1,0,1,0,1,0"))
                     (rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_addComm0" (formula "12") (term "1,1,1,0,1,0,1,0"))
                     (rule "polySimp_addComm0" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,1,0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulAssoc" (formula "12") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,0,0,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,1,0,1,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1,0,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "0,1,1,0,1,0,1,0,1,0"))
                     (rule "mul_literals" (formula "12") (term "0,0,1,1,0,1,0,1,0,1,0"))
                     (rule "getOfSeqSubEQ" (formula "11") (term "1,0,1,0,1,0") (ifseqformula "13"))
                     (rule "castDel" (formula "11") (term "2,1,0,1,0,1,0"))
                     (rule "add_zero_right" (formula "11") (term "1,1,1,0,1,0,1,0"))
                     (rule "polySimp_elimSub" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
                     (rule "times_zero_2" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
                     (rule "add_zero_right" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,1,0,1,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,1,0,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
                     (rule "nnf_imp2or" (formula "12") (term "0"))
                     (rule "nnf_imp2or" (formula "11") (term "0"))
                     (rule "nnf_notAnd" (formula "12") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                     (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                     (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "11") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                     (rule "JML_represents_clause_for_LinkedList_footprint" (formula "1") (term "2,1,0,0") (inst "i=i"))
                     (rule "castedGetAny" (formula "1") (term "0,1,0,1,2,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,2,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,1,2,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1,2,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,2,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,2,1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,2,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,2,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,2,1,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,2,1,0,0"))
                     (rule "elementOfUnion" (formula "1") (term "1,0,0"))
                     (rule "elementOfInfiniteUnion" (formula "1") (term "1,1,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "eqSymm" (formula "1") (term "1,0,1,1,0,0"))
                     (rule "sortsDisjointModuloNull" (formula "1") (term "1,0,1,1,0,0"))
                     (rule "replace_known_right" (formula "1") (term "1,1,0,1,1,0,0") (ifseqformula "18"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfUnion" (formula "1") (term "1,0,0"))
                     (rule "elementOfSingleton" (formula "1") (term "1,1,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfUnion" (formula "1") (term "1,0,0"))
                     (rule "elementOfSingleton" (formula "1") (term "1,1,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfUnion" (formula "1") (term "1,0,0"))
                     (rule "elementOfSingleton" (formula "1") (term "1,1,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfUnion" (formula "1") (term "1,0,0"))
                     (rule "elementOfSingleton" (formula "1") (term "1,1,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "Class_invariant_axiom_for_LinkedList" (formula "16") (inst "i=i") (inst "i_0=i_0") (inst "j=j") (inst "i_1=i_1") (inst "i_2=i_2") (inst "f=f") (inst "i_3=i_3") (inst "n=n"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "translateJavaSubInt" (formula "16") (term "1,1,0,0,1,0,0"))
                     (rule "translateJavaSubInt" (formula "16") (term "1,0,1,1,1,1,0,0,0"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "eqSymm" (formula "23") (term "0,1,0,1,0"))
                     (rule "eqSymm" (formula "23") (term "1,1,0,1,0"))
                     (rule "eqSymm" (formula "22") (term "1,0"))
                     (rule "eqSymm" (formula "21") (term "1,0,1"))
                     (rule "eqSymm" (formula "21") (term "1,1"))
                     (rule "eqSymm" (formula "17"))
                     (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "22") (term "1,1,1,0,0"))
                     (rule "polySimp_elimSub" (formula "21") (term "1,0,0,1,1"))
                     (rule "mul_literals" (formula "21") (term "1,1,0,0,1,1"))
                     (rule "polySimp_addComm0" (formula "22") (term "1,0,0,1,0"))
                     (rule "polySimp_addComm0" (formula "22") (term "1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "21") (term "1,0,0,1,1"))
                     (rule "castedGetAny" (formula "24") (term "1,1,1,0"))
                     (rule "castedGetAny" (formula "23") (term "1,0,1,0,1,0"))
                     (rule "castedGetAny" (formula "23") (term "0,0,1,0,1,0"))
                     (rule "castedGetAny" (formula "22") (term "1,1,1,0"))
                     (rule "castedGetAny" (formula "21") (term "0,1,0,1"))
                     (rule "castedGetAny" (formula "22") (term "0,1,0"))
                     (rule "eqSymm" (formula "22") (term "1,0"))
                     (rule "castedGetAny" (formula "21") (term "0,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                     (rule "applyEq" (formula "12") (term "1,1,1,1,0,0") (ifseqformula "17"))
                     (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "17"))
                     (rule "applyEq" (formula "21") (term "1,1,0,1,1") (ifseqformula "16"))
                     (rule "applyEq" (formula "14") (term "2,0") (ifseqformula "17"))
                     (rule "applyEq" (formula "18") (term "0") (ifseqformula "16"))
                     (rule "applyEq" (formula "12") (term "0,0,1,1,0,0") (ifseqformula "17"))
                     (rule "applyEq" (formula "10") (term "0") (ifseqformula "17"))
                     (rule "applyEq" (formula "12") (term "1,1,1,1,0,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                     (rule "applyEq" (formula "17") (term "1") (ifseqformula "16"))
                     (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "14") (term "2,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "12") (term "0,0,1,1,0,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "10") (term "0") (ifseqformula "16"))
                     (rule "apply_eq_monomials" (formula "20") (term "1,0,0,1,0,0") (ifseqformula "17"))
                     (rule "polySimp_rightDist" (formula "20") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "20") (term "1,0,1,0,0,1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "20") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "20") (term "1,1,1,0,0,1,0,0"))
                     (rule "times_zero_1" (formula "20") (term "1,1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "20") (term "1,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                     (rule "applyEq" (formula "12") (term "1,1,1,0,1,0,1,0,1,0") (ifseqformula "17"))
                     (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0"))
                     (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                     (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "18"))
                     (rule "polySimp_mulComm0" (formula "10") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "10") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                     (rule "polySimp_elimOne" (formula "10") (term "0"))
                     (rule "nnf_imp2or" (formula "24") (term "1,0,1,0"))
                     (rule "nnf_imp2or" (formula "20") (term "0"))
                     (rule "nnf_imp2or" (formula "23") (term "0"))
                     (rule "nnf_imp2or" (formula "21") (term "0"))
                     (rule "nnf_imp2or" (formula "25") (term "0"))
                     (rule "nnf_imp2or" (formula "24") (term "0"))
                     (rule "nnf_notAnd" (formula "20") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                     (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "20") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                     (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "23") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                     (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "23") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                     (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "21") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                     (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                     (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "25") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                     (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "25") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                     (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "24") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                     (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "24") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                     (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                     (rule "nnf_imp2or" (formula "24") (term "0,1,0"))
                     (rule "nnf_notAnd" (formula "24") (term "0,0,1,0"))
                     (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,1,0"))
                     (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,1,0"))
                     (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,1,0"))
                     (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,1,0"))
                     (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,1,0"))
                     (rule "add_literals" (formula "24") (term "0,0,0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1,0"))
                     (rule "mul_literals" (formula "24") (term "1,0,0,0,1,0"))
                     (rule "JML_represents_clause_for_LinkedListIterator_footprint" (formula "1") (term "2,0,0"))
                     (rule "elementOfUnion" (formula "1") (term "0,0"))
                     (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfUnion" (formula "1") (term "0,0"))
                     (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfUnion" (formula "1") (term "0,0"))
                     (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfUnion" (formula "1") (term "0,0"))
                     (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfSingleton" (formula "1") (term "0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEqReverse" (formula "28") (term "0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "28"))
                     (rule "closeTrue" (formula "28"))
                  )
                  (branch "(_ov_0, _fv_0) in {(self, LinkedListIterator::$curr)}"
                     (rule "eqSymm" (formula "9"))
                     (rule "elementOfSingleton" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "applyEq" (formula "10") (term "2,1") (ifseqformula "2"))
                     (rule "narrowSelectType" (formula "10") (term "1") (ifseqformula "3"))
                     (rule "applyEq" (formula "10") (term "1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "10") (term "2,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "10") (term "1,1") (ifseqformula "1"))
                     (rule "pullOutSelect" (formula "10") (term "0") (inst "selectSK=LinkedListIterator_curr_0"))
                     (rule "simplifySelectOfAnon" (formula "1"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")) (ifInst ""  (formula "6")))
                     (rule "narrowSelectType" (formula "1") (term "1,0") (ifseqformula "5"))
                     (rule "narrowSelectType" (formula "1") (term "2,0") (ifseqformula "4"))
                     (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "ifthenelse_negated" (formula "1") (term "0"))
                     (rule "elementOfUnion" (formula "1") (term "0,0"))
                     (rule "Class_invariant_axiom_for_LinkedListIterator" (formula "9") (inst "i=i") (inst "f=f") (inst "i_0=i_0") (inst "f_0=f_0"))
                     (rule "andLeft" (formula "9"))
                     (rule "notLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "eqSymm" (formula "15") (term "1"))
                     (rule "eqSymm" (formula "14"))
                     (rule "eqSymm" (formula "13"))
                     (rule "castedGetAny" (formula "15") (term "0,1"))
                     (rule "lenOfSeqSubEQ" (formula "11") (term "1,1,0,0") (ifseqformula "13"))
                     (rule "polySimp_elimSub" (formula "11") (term "1,1,1,0,0"))
                     (rule "times_zero_2" (formula "11") (term "1,1,1,1,0,0"))
                     (rule "add_zero_right" (formula "11") (term "1,1,1,0,0"))
                     (rule "lenOfSeqSubEQ" (formula "12") (term "1,1,0,0") (ifseqformula "14"))
                     (rule "polySimp_elimSub" (formula "12") (term "1,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "12") (term "1,1,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "15") (term "0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "15") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,1,0,0"))
                     (rule "add_zero_right" (formula "11") (term "0,0,1,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,1,0,0"))
                     (rule "polySimp_addComm1" (formula "12") (term "0,0,1,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "10"))
                     (rule "inEqSimp_commuteLeq" (formula "9"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,1,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,1,0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "0,0,0,1,0,0,1,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,1,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "0,0,1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                     (rule "getOfSeqSubEQ" (formula "12") (term "1,0,1,0,1,0") (ifseqformula "14"))
                     (rule "castDel" (formula "12") (term "2,1,0,1,0,1,0"))
                     (rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_addComm0" (formula "12") (term "1,1,1,0,1,0,1,0"))
                     (rule "polySimp_addComm0" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,1,0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulAssoc" (formula "12") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,0,0,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,1,0,1,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1,0,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "0,1,1,0,1,0,1,0,1,0"))
                     (rule "mul_literals" (formula "12") (term "0,0,1,1,0,1,0,1,0,1,0"))
                     (rule "getOfSeqSubEQ" (formula "11") (term "1,0,1,0,1,0") (ifseqformula "13"))
                     (rule "castDel" (formula "11") (term "2,1,0,1,0,1,0"))
                     (rule "add_zero_right" (formula "11") (term "1,1,1,0,1,0,1,0"))
                     (rule "polySimp_elimSub" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
                     (rule "times_zero_2" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
                     (rule "add_zero_right" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,1,0,1,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,1,0,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
                     (rule "nnf_imp2or" (formula "12") (term "0"))
                     (rule "nnf_imp2or" (formula "11") (term "0"))
                     (rule "nnf_notAnd" (formula "12") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                     (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                     (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "11") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                     (rule "JML_represents_clause_for_LinkedList_footprint" (formula "1") (term "2,1,0,0") (inst "i=i"))
                     (rule "castedGetAny" (formula "1") (term "0,1,0,1,2,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,2,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,1,2,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1,2,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,2,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,2,1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,2,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,2,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,2,1,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,2,1,0,0"))
                     (rule "elementOfUnion" (formula "1") (term "1,0,0"))
                     (rule "elementOfInfiniteUnion" (formula "1") (term "1,1,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "eqSymm" (formula "1") (term "1,0,1,1,0,0"))
                     (rule "sortsDisjointModuloNull" (formula "1") (term "1,0,1,1,0,0"))
                     (rule "replace_known_right" (formula "1") (term "1,1,0,1,1,0,0") (ifseqformula "18"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfUnion" (formula "1") (term "1,0,0"))
                     (rule "elementOfSingleton" (formula "1") (term "1,1,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfUnion" (formula "1") (term "1,0,0"))
                     (rule "elementOfSingleton" (formula "1") (term "1,1,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfUnion" (formula "1") (term "1,0,0"))
                     (rule "elementOfSingleton" (formula "1") (term "1,1,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfUnion" (formula "1") (term "1,0,0"))
                     (rule "elementOfSingleton" (formula "1") (term "1,1,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "Class_invariant_axiom_for_LinkedList" (formula "16") (inst "i=i") (inst "i_0=i_0") (inst "j=j") (inst "i_1=i_1") (inst "i_2=i_2") (inst "f=f") (inst "i_3=i_3") (inst "n=n"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "translateJavaSubInt" (formula "16") (term "1,1,0,0,1,0,0"))
                     (rule "translateJavaSubInt" (formula "16") (term "1,0,1,1,1,1,0,0,0"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "eqSymm" (formula "23") (term "0,1,0,1,0"))
                     (rule "eqSymm" (formula "23") (term "1,1,0,1,0"))
                     (rule "eqSymm" (formula "22") (term "1,0"))
                     (rule "eqSymm" (formula "21") (term "1,0,1"))
                     (rule "eqSymm" (formula "21") (term "1,1"))
                     (rule "eqSymm" (formula "17"))
                     (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "22") (term "1,1,1,0,0"))
                     (rule "polySimp_elimSub" (formula "21") (term "1,0,0,1,1"))
                     (rule "mul_literals" (formula "21") (term "1,1,0,0,1,1"))
                     (rule "polySimp_addComm0" (formula "22") (term "1,0,0,1,0"))
                     (rule "polySimp_addComm0" (formula "22") (term "1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "21") (term "1,0,0,1,1"))
                     (rule "castedGetAny" (formula "24") (term "1,1,1,0"))
                     (rule "castedGetAny" (formula "23") (term "1,0,1,0,1,0"))
                     (rule "castedGetAny" (formula "23") (term "0,0,1,0,1,0"))
                     (rule "castedGetAny" (formula "22") (term "1,1,1,0"))
                     (rule "castedGetAny" (formula "21") (term "0,1,0,1"))
                     (rule "castedGetAny" (formula "22") (term "0,1,0"))
                     (rule "eqSymm" (formula "22") (term "1,0"))
                     (rule "castedGetAny" (formula "21") (term "0,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                     (rule "applyEq" (formula "14") (term "2,0") (ifseqformula "17"))
                     (rule "applyEq" (formula "21") (term "1,1,0,1,1") (ifseqformula "16"))
                     (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "17"))
                     (rule "applyEq" (formula "12") (term "0,0,1,1,0,0") (ifseqformula "17"))
                     (rule "applyEq" (formula "18") (term "0") (ifseqformula "16"))
                     (rule "applyEq" (formula "12") (term "1,1,1,1,0,0") (ifseqformula "17"))
                     (rule "applyEq" (formula "10") (term "0") (ifseqformula "17"))
                     (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "17") (term "1") (ifseqformula "16"))
                     (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "14") (term "2,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "12") (term "0,0,1,1,0,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "12") (term "1,1,1,1,0,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "10") (term "0") (ifseqformula "16"))
                     (rule "apply_eq_monomials" (formula "20") (term "1,0,0,1,0,0") (ifseqformula "17"))
                     (rule "polySimp_rightDist" (formula "20") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "20") (term "1,0,1,0,0,1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "20") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "20") (term "1,1,1,0,0,1,0,0"))
                     (rule "times_zero_1" (formula "20") (term "1,1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "20") (term "1,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                     (rule "apply_eq_monomials" (formula "24") (term "1,0,0,1,0,0") (ifseqformula "17"))
                     (rule "polySimp_rightDist" (formula "24") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,0,1,0,0,1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "24") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "24") (term "1,1,1,0,0,1,0,0"))
                     (rule "times_zero_1" (formula "24") (term "1,1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "24") (term "1,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                     (rule "applyEq" (formula "12") (term "1,1,1,0,1,0,1,0,1,0") (ifseqformula "17"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0"))
                     (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                     (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "18"))
                     (rule "polySimp_mulComm0" (formula "10") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "10") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                     (rule "polySimp_elimOne" (formula "10") (term "0"))
                     (rule "nnf_imp2or" (formula "24") (term "1,0,1,0"))
                     (rule "nnf_imp2or" (formula "20") (term "0"))
                     (rule "nnf_imp2or" (formula "23") (term "0"))
                     (rule "nnf_imp2or" (formula "21") (term "0"))
                     (rule "nnf_imp2or" (formula "25") (term "0"))
                     (rule "nnf_imp2or" (formula "24") (term "0"))
                     (rule "nnf_notAnd" (formula "20") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                     (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "20") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                     (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "23") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                     (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "23") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                     (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "21") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                     (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                     (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "25") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                     (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "25") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                     (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "24") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                     (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "24") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                     (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                     (rule "nnf_imp2or" (formula "24") (term "0,1,0"))
                     (rule "JML_represents_clause_for_LinkedListIterator_footprint" (formula "1") (term "2,0,0"))
                     (rule "elementOfUnion" (formula "1") (term "0,0"))
                     (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfUnion" (formula "1") (term "0,0"))
                     (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfUnion" (formula "1") (term "0,0"))
                     (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfUnion" (formula "1") (term "0,0"))
                     (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfSingleton" (formula "1") (term "0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEqReverse" (formula "28") (term "0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "28"))
                     (rule "closeTrue" (formula "28"))
                  )
               )
               (branch "(_ov_0, _fv_0) in {(self, LinkedListIterator::$index)}"
                  (rule "eqSymm" (formula "9"))
                  (rule "elementOfSingleton" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "applyEq" (formula "10") (term "2,1") (ifseqformula "2"))
                  (rule "narrowSelectType" (formula "10") (term "1") (ifseqformula "3"))
                  (rule "applyEq" (formula "10") (term "1,0") (ifseqformula "1"))
                  (rule "applyEqRigid" (formula "10") (term "2,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "10") (term "1,1") (ifseqformula "1"))
                  (rule "pullOutSelect" (formula "10") (term "0") (inst "selectSK=LinkedListIterator_index_0"))
                  (rule "simplifySelectOfAnon" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")) (ifInst ""  (formula "6")))
                  (rule "narrowSelectType" (formula "1") (term "2,0") (ifseqformula "4"))
                  (rule "narrowSelectType" (formula "1") (term "1,0") (ifseqformula "5"))
                  (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "ifthenelse_negated" (formula "1") (term "0"))
                  (rule "elementOfUnion" (formula "1") (term "0,0"))
                  (rule "Class_invariant_axiom_for_LinkedListIterator" (formula "9") (inst "i=i") (inst "f=f") (inst "i_0=i_0") (inst "f_0=f_0"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "10"))
                  (rule "notLeft" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "eqSymm" (formula "15") (term "1"))
                  (rule "eqSymm" (formula "14"))
                  (rule "eqSymm" (formula "13"))
                  (rule "castedGetAny" (formula "15") (term "0,1"))
                  (rule "lenOfSeqSubEQ" (formula "11") (term "1,1,0,0") (ifseqformula "13"))
                  (rule "polySimp_elimSub" (formula "11") (term "1,1,1,0,0"))
                  (rule "times_zero_2" (formula "11") (term "1,1,1,1,0,0"))
                  (rule "add_zero_right" (formula "11") (term "1,1,1,0,0"))
                  (rule "lenOfSeqSubEQ" (formula "12") (term "1,1,0,0") (ifseqformula "14"))
                  (rule "polySimp_elimSub" (formula "12") (term "1,1,1,0,0"))
                  (rule "polySimp_addComm0" (formula "12") (term "1,1,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "15") (term "0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "15") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,1,0,0"))
                  (rule "add_zero_right" (formula "11") (term "0,0,1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,1,0,0"))
                  (rule "polySimp_addComm1" (formula "12") (term "0,0,1,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "10"))
                  (rule "inEqSimp_commuteLeq" (formula "9"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "0,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0,1,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,0,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,1,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0,0,1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "0,0,1,1,1,0,0"))
                  (rule "getOfSeqSubEQ" (formula "12") (term "1,0,1,0,1,0") (ifseqformula "14"))
                  (rule "castDel" (formula "12") (term "2,1,0,1,0,1,0"))
                  (rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_addComm0" (formula "12") (term "1,1,1,0,1,0,1,0"))
                  (rule "polySimp_addComm0" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,1,0,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_mulAssoc" (formula "12") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,0,0,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,1,0,1,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1,0,1,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,1,0,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "0,1,1,0,1,0,1,0,1,0"))
                  (rule "mul_literals" (formula "12") (term "0,0,1,1,0,1,0,1,0,1,0"))
                  (rule "getOfSeqSubEQ" (formula "11") (term "1,0,1,0,1,0") (ifseqformula "13"))
                  (rule "castDel" (formula "11") (term "2,1,0,1,0,1,0"))
                  (rule "add_zero_right" (formula "11") (term "1,1,1,0,1,0,1,0"))
                  (rule "polySimp_elimSub" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
                  (rule "times_zero_2" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
                  (rule "add_zero_right" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,1,0,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,1,0,1,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,1,0,1,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,1,0,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
                  (rule "nnf_imp2or" (formula "12") (term "0"))
                  (rule "nnf_imp2or" (formula "11") (term "0"))
                  (rule "nnf_notAnd" (formula "12") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                  (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                  (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "11") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                  (rule "JML_represents_clause_for_LinkedListIterator_footprint" (formula "1") (term "2,0,0,0"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0"))
                  (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0"))
                  (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0"))
                  (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "19") (term "0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "closeTrue" (formula "19"))
               )
            )
            (branch "(_ov_0, _fv_0) in {(self, LinkedListIterator::$seen)}"
               (rule "eqSymm" (formula "9"))
               (rule "elementOfSingleton" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "applyEq" (formula "10") (term "2,1") (ifseqformula "2"))
               (rule "narrowSelectType" (formula "10") (term "1") (ifseqformula "3"))
               (rule "applyEq" (formula "10") (term "1,0") (ifseqformula "1"))
               (rule "applyEqRigid" (formula "10") (term "2,0") (ifseqformula "2"))
               (rule "applyEq" (formula "10") (term "1,1") (ifseqformula "1"))
               (rule "pullOutSelect" (formula "10") (term "0") (inst "selectSK=LinkedListIterator_seen_0"))
               (rule "simplifySelectOfAnon" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")) (ifInst ""  (formula "6")))
               (rule "narrowSelectType" (formula "1") (term "1,0") (ifseqformula "5"))
               (rule "narrowSelectType" (formula "1") (term "2,0") (ifseqformula "4"))
               (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "ifthenelse_negated" (formula "1") (term "0"))
               (rule "elementOfUnion" (formula "1") (term "0,0"))
               (rule "Class_invariant_axiom_for_LinkedListIterator" (formula "9") (inst "i=i") (inst "f=f") (inst "i_0=i_0") (inst "f_0=f_0"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "10"))
               (rule "notLeft" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "eqSymm" (formula "15") (term "1"))
               (rule "eqSymm" (formula "14"))
               (rule "eqSymm" (formula "13"))
               (rule "castedGetAny" (formula "15") (term "0,1"))
               (rule "lenOfSeqSubEQ" (formula "11") (term "1,1,0,0") (ifseqformula "13"))
               (rule "polySimp_elimSub" (formula "11") (term "1,1,1,0,0"))
               (rule "times_zero_2" (formula "11") (term "1,1,1,1,0,0"))
               (rule "add_zero_right" (formula "11") (term "1,1,1,0,0"))
               (rule "lenOfSeqSubEQ" (formula "12") (term "1,1,0,0") (ifseqformula "14"))
               (rule "polySimp_elimSub" (formula "12") (term "1,1,1,0,0"))
               (rule "polySimp_addComm0" (formula "12") (term "1,1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,1,0,0"))
               (rule "add_zero_right" (formula "11") (term "0,0,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,1,0,0"))
               (rule "polySimp_addComm1" (formula "12") (term "0,0,1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "9"))
               (rule "inEqSimp_commuteLeq" (formula "10"))
               (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "0,0"))
               (rule "polySimp_elimOne" (formula "15") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,1,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "0,0,1,1,1,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,1,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "0,0,1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "0,0,1,1,1,0,0"))
               (rule "getOfSeqSubEQ" (formula "11") (term "1,0,1,0,1,0") (ifseqformula "13"))
               (rule "castDel" (formula "11") (term "2,1,0,1,0,1,0"))
               (rule "add_zero_right" (formula "11") (term "1,1,1,0,1,0,1,0"))
               (rule "polySimp_elimSub" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
               (rule "times_zero_2" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
               (rule "add_zero_right" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,1,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,1,0,1,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,1,0,1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,1,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
               (rule "mul_literals" (formula "11") (term "0,1,1,0,1,0,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
               (rule "getOfSeqSubEQ" (formula "12") (term "1,0,1,0,1,0") (ifseqformula "14"))
               (rule "castDel" (formula "12") (term "2,1,0,1,0,1,0"))
               (rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
               (rule "polySimp_addComm0" (formula "12") (term "1,1,1,0,1,0,1,0"))
               (rule "polySimp_addComm0" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,1,0,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,1,0,1,0,1,0"))
               (rule "polySimp_mulAssoc" (formula "12") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,0,0,1,0,1,0,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,1,0,1,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1,0,1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,1,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,1,0,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,1,0,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "12") (term "0,1,1,0,1,0,1,0,1,0"))
               (rule "mul_literals" (formula "12") (term "0,0,1,1,0,1,0,1,0,1,0"))
               (rule "nnf_imp2or" (formula "11") (term "0"))
               (rule "nnf_imp2or" (formula "12") (term "0"))
               (rule "nnf_notAnd" (formula "11") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
               (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
               (rule "mul_literals" (formula "11") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "12") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
               (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
               (rule "mul_literals" (formula "12") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
               (rule "JML_represents_clause_for_LinkedList_footprint" (formula "1") (term "2,1,0,0") (inst "i=i"))
               (rule "castedGetAny" (formula "1") (term "0,1,0,1,2,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,2,1,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,1,2,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1,2,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,2,1,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,2,1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,2,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,2,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,2,1,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,2,1,0,0"))
               (rule "elementOfUnion" (formula "1") (term "1,0,0"))
               (rule "elementOfInfiniteUnion" (formula "1") (term "1,1,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "eqSymm" (formula "1") (term "1,0,1,1,0,0"))
               (rule "sortsDisjointModuloNull" (formula "1") (term "1,0,1,1,0,0"))
               (rule "replace_known_right" (formula "1") (term "1,1,0,1,1,0,0") (ifseqformula "18"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnion" (formula "1") (term "1,0,0"))
               (rule "elementOfSingleton" (formula "1") (term "1,1,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnion" (formula "1") (term "1,0,0"))
               (rule "elementOfSingleton" (formula "1") (term "1,1,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnion" (formula "1") (term "1,0,0"))
               (rule "elementOfSingleton" (formula "1") (term "1,1,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnion" (formula "1") (term "1,0,0"))
               (rule "elementOfSingleton" (formula "1") (term "1,1,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "Class_invariant_axiom_for_LinkedList" (formula "16") (inst "i=i") (inst "i_0=i_0") (inst "j=j") (inst "i_1=i_1") (inst "i_2=i_2") (inst "f=f") (inst "i_3=i_3") (inst "n=n"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "translateJavaSubInt" (formula "16") (term "1,0,1,1,1,1,0,0,0"))
               (rule "translateJavaSubInt" (formula "16") (term "1,1,0,0,1,0,0"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "eqSymm" (formula "23") (term "1,1,0,1,0"))
               (rule "eqSymm" (formula "23") (term "0,1,0,1,0"))
               (rule "eqSymm" (formula "22") (term "1,0"))
               (rule "eqSymm" (formula "21") (term "1,1"))
               (rule "eqSymm" (formula "21") (term "1,0,1"))
               (rule "eqSymm" (formula "17"))
               (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0"))
               (rule "mul_literals" (formula "22") (term "1,1,1,0,0"))
               (rule "polySimp_elimSub" (formula "21") (term "1,0,0,1,1"))
               (rule "mul_literals" (formula "21") (term "1,1,0,0,1,1"))
               (rule "polySimp_addComm0" (formula "22") (term "1,0,0,1,0"))
               (rule "polySimp_addComm0" (formula "22") (term "1,1,0,0"))
               (rule "polySimp_addComm0" (formula "21") (term "1,0,0,1,1"))
               (rule "castedGetAny" (formula "24") (term "1,1,1,0"))
               (rule "castedGetAny" (formula "23") (term "1,0,1,0,1,0"))
               (rule "castedGetAny" (formula "23") (term "0,0,1,0,1,0"))
               (rule "castedGetAny" (formula "22") (term "1,1,1,0"))
               (rule "castedGetAny" (formula "21") (term "0,1,0,1"))
               (rule "castedGetAny" (formula "22") (term "0,1,0"))
               (rule "eqSymm" (formula "22") (term "1,0"))
               (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
               (rule "castedGetAny" (formula "21") (term "0,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
               (rule "applyEq" (formula "21") (term "1,1,0,1,1") (ifseqformula "16"))
               (rule "applyEq" (formula "12") (term "0,0,1,1,0,0") (ifseqformula "17"))
               (rule "applyEq" (formula "14") (term "2,0") (ifseqformula "17"))
               (rule "applyEq" (formula "12") (term "1,1,1,1,0,0") (ifseqformula "17"))
               (rule "applyEq" (formula "10") (term "0") (ifseqformula "17"))
               (rule "applyEq" (formula "18") (term "0") (ifseqformula "16"))
               (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "17"))
               (rule "applyEq" (formula "17") (term "1") (ifseqformula "16"))
               (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
               (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
               (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "16"))
               (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
               (rule "applyEq" (formula "12") (term "1,1,1,1,0,0") (ifseqformula "16"))
               (rule "applyEq" (formula "14") (term "2,0") (ifseqformula "16"))
               (rule "applyEq" (formula "12") (term "0,0,1,1,0,0") (ifseqformula "16"))
               (rule "applyEq" (formula "10") (term "0") (ifseqformula "16"))
               (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "16"))
               (rule "apply_eq_monomials" (formula "24") (term "1,0,0,1,0,0") (ifseqformula "17"))
               (rule "polySimp_rightDist" (formula "24") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "24") (term "1,0,1,0,0,1,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "24") (term "1,0,0,1,0,0"))
               (rule "add_literals" (formula "24") (term "1,1,1,0,0,1,0,0"))
               (rule "times_zero_1" (formula "24") (term "1,1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "24") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
               (rule "apply_eq_monomials" (formula "20") (term "1,0,0,1,0,0") (ifseqformula "17"))
               (rule "polySimp_rightDist" (formula "20") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "20") (term "1,0,1,0,0,1,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "20") (term "1,0,0,1,0,0"))
               (rule "add_literals" (formula "20") (term "1,1,1,0,0,1,0,0"))
               (rule "times_zero_1" (formula "20") (term "1,1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "20") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
               (rule "applyEq" (formula "12") (term "1,1,1,0,1,0,1,0,1,0") (ifseqformula "17"))
               (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
               (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
               (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0"))
               (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
               (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
               (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
               (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
               (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "18"))
               (rule "polySimp_mulComm0" (formula "10") (term "0,0"))
               (rule "polySimp_addComm0" (formula "10") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "10"))
               (rule "polySimp_mulLiterals" (formula "10") (term "0"))
               (rule "polySimp_elimOne" (formula "10") (term "0"))
               (rule "nnf_imp2or" (formula "24") (term "1,0,1,0"))
               (rule "nnf_imp2or" (formula "20") (term "0"))
               (rule "nnf_imp2or" (formula "23") (term "0"))
               (rule "nnf_imp2or" (formula "25") (term "0"))
               (rule "nnf_imp2or" (formula "21") (term "0"))
               (rule "nnf_imp2or" (formula "24") (term "0"))
               (rule "nnf_notAnd" (formula "20") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
               (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "20") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
               (rule "mul_literals" (formula "20") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "23") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
               (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
               (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "23") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
               (rule "mul_literals" (formula "23") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "25") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
               (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "25") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
               (rule "mul_literals" (formula "25") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "21") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
               (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
               (rule "mul_literals" (formula "21") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "24") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
               (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "24") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
               (rule "mul_literals" (formula "24") (term "1,0,0,0"))
               (rule "nnf_imp2or" (formula "24") (term "0,1,0"))
               (rule "JML_represents_clause_for_LinkedListIterator_footprint" (formula "1") (term "2,0,0"))
               (rule "elementOfUnion" (formula "1") (term "0,0"))
               (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnion" (formula "1") (term "0,0"))
               (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "28") (term "0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "28"))
               (rule "closeTrue" (formula "28"))
            )
         )
         (branch "(_ov_0, _fv_0) in {(self, LinkedListIterator::$to_see)}"
            (rule "eqSymm" (formula "9"))
            (rule "elementOfSingleton" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "applyEq" (formula "10") (term "2,1") (ifseqformula "2"))
            (rule "narrowSelectType" (formula "10") (term "1") (ifseqformula "3"))
            (rule "applyEq" (formula "10") (term "1,0") (ifseqformula "1"))
            (rule "applyEqRigid" (formula "10") (term "2,0") (ifseqformula "2"))
            (rule "applyEq" (formula "10") (term "1,1") (ifseqformula "1"))
            (rule "pullOutSelect" (formula "10") (term "0") (inst "selectSK=LinkedListIterator_to_see_0"))
            (rule "simplifySelectOfAnon" (formula "1"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")) (ifInst ""  (formula "6")))
            (rule "narrowSelectType" (formula "1") (term "1,0") (ifseqformula "5"))
            (rule "narrowSelectType" (formula "1") (term "2,0") (ifseqformula "4"))
            (rule "elementOfSetMinus" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "ifthenelse_negated" (formula "1") (term "0"))
            (rule "elementOfUnion" (formula "1") (term "0,0"))
            (rule "Class_invariant_axiom_for_LinkedListIterator" (formula "9") (inst "i=i") (inst "f=f") (inst "i_0=i_0") (inst "f_0=f_0"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "10"))
            (rule "notLeft" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "eqSymm" (formula "15") (term "1"))
            (rule "eqSymm" (formula "14"))
            (rule "eqSymm" (formula "13"))
            (rule "castedGetAny" (formula "15") (term "0,1"))
            (rule "lenOfSeqSubEQ" (formula "11") (term "1,1,0,0") (ifseqformula "13"))
            (rule "polySimp_elimSub" (formula "11") (term "1,1,1,0,0"))
            (rule "times_zero_2" (formula "11") (term "1,1,1,1,0,0"))
            (rule "add_zero_right" (formula "11") (term "1,1,1,0,0"))
            (rule "lenOfSeqSubEQ" (formula "12") (term "1,1,0,0") (ifseqformula "14"))
            (rule "polySimp_elimSub" (formula "12") (term "1,1,1,0,0"))
            (rule "polySimp_addComm0" (formula "12") (term "1,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "15") (term "0"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
            (rule "polySimp_addComm1" (formula "15") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,1,0,0"))
            (rule "add_zero_right" (formula "11") (term "0,0,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,1,0,0"))
            (rule "polySimp_addComm1" (formula "12") (term "0,0,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "9"))
            (rule "inEqSimp_commuteLeq" (formula "10"))
            (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0"))
            (rule "polySimp_mulLiterals" (formula "15") (term "0,0"))
            (rule "polySimp_elimOne" (formula "15") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,1,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "0,0,1,1,1,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,1,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "0,0,1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "0,0,1,1,1,0,0"))
            (rule "getOfSeqSubEQ" (formula "11") (term "1,0,1,0,1,0") (ifseqformula "13"))
            (rule "castDel" (formula "11") (term "2,1,0,1,0,1,0"))
            (rule "add_zero_right" (formula "11") (term "1,1,1,0,1,0,1,0"))
            (rule "polySimp_elimSub" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
            (rule "times_zero_2" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
            (rule "add_zero_right" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,1,0,1,0,1,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,1,0,1,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,1,0,1,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,1,0,1,0,1,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
            (rule "mul_literals" (formula "11") (term "0,1,1,0,1,0,1,0,1,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
            (rule "getOfSeqSubEQ" (formula "12") (term "1,0,1,0,1,0") (ifseqformula "14"))
            (rule "castDel" (formula "12") (term "2,1,0,1,0,1,0"))
            (rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
            (rule "polySimp_addComm0" (formula "12") (term "1,1,1,0,1,0,1,0"))
            (rule "polySimp_addComm0" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,1,0,1,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,1,0,1,0,1,0"))
            (rule "polySimp_mulAssoc" (formula "12") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,0,0,1,0,1,0,1,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,1,0,1,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1,0,1,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,1,0,1,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,1,0,1,0,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,1,0,1,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "0,1,1,0,1,0,1,0,1,0"))
            (rule "mul_literals" (formula "12") (term "0,0,1,1,0,1,0,1,0,1,0"))
            (rule "nnf_imp2or" (formula "11") (term "0"))
            (rule "nnf_imp2or" (formula "12") (term "0"))
            (rule "nnf_notAnd" (formula "11") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
            (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
            (rule "mul_literals" (formula "11") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
            (rule "JML_represents_clause_for_LinkedList_footprint" (formula "1") (term "2,1,0,0") (inst "i=i"))
            (rule "castedGetAny" (formula "1") (term "0,1,0,1,2,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,2,1,0,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,1,2,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1,2,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,2,1,0,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,2,1,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,2,1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,2,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,2,1,0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,2,1,0,0"))
            (rule "elementOfUnion" (formula "1") (term "1,0,0"))
            (rule "elementOfInfiniteUnion" (formula "1") (term "1,1,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "eqSymm" (formula "1") (term "1,0,1,1,0,0"))
            (rule "sortsDisjointModuloNull" (formula "1") (term "1,0,1,1,0,0"))
            (rule "replace_known_right" (formula "1") (term "1,1,0,1,1,0,0") (ifseqformula "18"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfUnion" (formula "1") (term "1,0,0"))
            (rule "elementOfSingleton" (formula "1") (term "1,1,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfUnion" (formula "1") (term "1,0,0"))
            (rule "elementOfSingleton" (formula "1") (term "1,1,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfUnion" (formula "1") (term "1,0,0"))
            (rule "elementOfSingleton" (formula "1") (term "1,1,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfUnion" (formula "1") (term "1,0,0"))
            (rule "elementOfSingleton" (formula "1") (term "1,1,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "Class_invariant_axiom_for_LinkedList" (formula "16") (inst "i=i") (inst "i_0=i_0") (inst "j=j") (inst "i_1=i_1") (inst "i_2=i_2") (inst "f=f") (inst "i_3=i_3") (inst "n=n"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "translateJavaSubInt" (formula "16") (term "1,0,1,1,1,1,0,0,0"))
            (rule "translateJavaSubInt" (formula "16") (term "1,1,0,0,1,0,0"))
            (rule "andLeft" (formula "16"))
            (rule "andLeft" (formula "16"))
            (rule "andLeft" (formula "16"))
            (rule "andLeft" (formula "16"))
            (rule "andLeft" (formula "16"))
            (rule "andLeft" (formula "16"))
            (rule "andLeft" (formula "16"))
            (rule "andLeft" (formula "16"))
            (rule "eqSymm" (formula "23") (term "1,1,0,1,0"))
            (rule "eqSymm" (formula "23") (term "0,1,0,1,0"))
            (rule "eqSymm" (formula "22") (term "1,0"))
            (rule "eqSymm" (formula "21") (term "1,1"))
            (rule "eqSymm" (formula "21") (term "1,0,1"))
            (rule "eqSymm" (formula "17"))
            (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0"))
            (rule "mul_literals" (formula "22") (term "1,1,1,0,0"))
            (rule "polySimp_elimSub" (formula "21") (term "1,0,0,1,1"))
            (rule "mul_literals" (formula "21") (term "1,1,0,0,1,1"))
            (rule "polySimp_addComm0" (formula "22") (term "1,0,0,1,0"))
            (rule "polySimp_addComm0" (formula "22") (term "1,1,0,0"))
            (rule "polySimp_addComm0" (formula "21") (term "1,0,0,1,1"))
            (rule "castedGetAny" (formula "24") (term "1,1,1,0"))
            (rule "castedGetAny" (formula "23") (term "1,0,1,0,1,0"))
            (rule "castedGetAny" (formula "23") (term "0,0,1,0,1,0"))
            (rule "castedGetAny" (formula "22") (term "1,1,1,0"))
            (rule "castedGetAny" (formula "21") (term "0,1,0,1"))
            (rule "castedGetAny" (formula "22") (term "0,1,0"))
            (rule "eqSymm" (formula "22") (term "1,0"))
            (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
            (rule "castedGetAny" (formula "21") (term "0,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
            (rule "applyEq" (formula "21") (term "1,1,0,1,1") (ifseqformula "16"))
            (rule "applyEq" (formula "12") (term "0,0,1,1,0,0") (ifseqformula "17"))
            (rule "applyEq" (formula "14") (term "2,0") (ifseqformula "17"))
            (rule "applyEq" (formula "12") (term "1,1,1,1,0,0") (ifseqformula "17"))
            (rule "applyEq" (formula "10") (term "0") (ifseqformula "17"))
            (rule "applyEq" (formula "18") (term "0") (ifseqformula "16"))
            (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "17"))
            (rule "applyEq" (formula "17") (term "1") (ifseqformula "16"))
            (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
            (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
            (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "16"))
            (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
            (rule "applyEq" (formula "12") (term "1,1,1,1,0,0") (ifseqformula "16"))
            (rule "applyEq" (formula "14") (term "2,0") (ifseqformula "16"))
            (rule "applyEq" (formula "12") (term "0,0,1,1,0,0") (ifseqformula "16"))
            (rule "applyEq" (formula "10") (term "0") (ifseqformula "16"))
            (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "16"))
            (rule "apply_eq_monomials" (formula "24") (term "1,0,0,1,0,0") (ifseqformula "17"))
            (rule "polySimp_rightDist" (formula "24") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "24") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "24") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "24") (term "1,1,1,0,0,1,0,0"))
            (rule "times_zero_1" (formula "24") (term "1,1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "24") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
            (rule "apply_eq_monomials" (formula "20") (term "1,0,0,1,0,0") (ifseqformula "17"))
            (rule "polySimp_rightDist" (formula "20") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "20") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "20") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "20") (term "1,1,1,0,0,1,0,0"))
            (rule "times_zero_1" (formula "20") (term "1,1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "20") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
            (rule "applyEq" (formula "12") (term "1,1,1,0,1,0,1,0,1,0") (ifseqformula "17"))
            (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
            (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
            (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0"))
            (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
            (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
            (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
            (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
            (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "18"))
            (rule "polySimp_mulComm0" (formula "10") (term "0,0"))
            (rule "polySimp_addComm0" (formula "10") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "10"))
            (rule "polySimp_mulLiterals" (formula "10") (term "0"))
            (rule "polySimp_elimOne" (formula "10") (term "0"))
            (rule "nnf_imp2or" (formula "24") (term "1,0,1,0"))
            (rule "nnf_imp2or" (formula "20") (term "0"))
            (rule "nnf_imp2or" (formula "23") (term "0"))
            (rule "nnf_imp2or" (formula "25") (term "0"))
            (rule "nnf_imp2or" (formula "21") (term "0"))
            (rule "nnf_imp2or" (formula "24") (term "0"))
            (rule "nnf_notAnd" (formula "20") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
            (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "20") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
            (rule "mul_literals" (formula "20") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "23") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
            (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
            (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "23") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
            (rule "mul_literals" (formula "23") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "25") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
            (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "25") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
            (rule "mul_literals" (formula "25") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "21") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
            (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
            (rule "mul_literals" (formula "21") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "24") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
            (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "24") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
            (rule "mul_literals" (formula "24") (term "1,0,0,0"))
            (rule "nnf_imp2or" (formula "24") (term "0,1,0"))
            (rule "JML_represents_clause_for_LinkedListIterator_footprint" (formula "1") (term "2,0,0"))
            (rule "elementOfUnion" (formula "1") (term "0,0"))
            (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "28") (term "0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "28"))
            (rule "closeTrue" (formula "28"))
         )
      )
      (branch " (_ov_0, _fv_0) in {(self.list, LinkedList::$size)} | (_ov_0, _fv_0) in {(self.list, LinkedList::$head)} | (_ov_0, _fv_0) in {(self.list, LinkedList::$tail)} | (_ov_0, _fv_0) in {(self.list, LinkedList::$nodeList)} | (_ov_0, _fv_0) in {(self.list, LinkedList::$values)} | (_ov_0, _fv_0) in infiniteUnion{int i;}(if ( 0 <= i & i < self.list.nodeList.length) then ((Node)(self.list.nodeList[i]).*) else ({}))"
         (rule "orLeft" (formula "1"))
         (branch " (_ov_0, _fv_0) in {(self.list, LinkedList::$size)} | (_ov_0, _fv_0) in {(self.list, LinkedList::$head)} | (_ov_0, _fv_0) in {(self.list, LinkedList::$tail)} | (_ov_0, _fv_0) in {(self.list, LinkedList::$nodeList)} | (_ov_0, _fv_0) in {(self.list, LinkedList::$values)}"
            (rule "orLeft" (formula "1"))
            (branch " (_ov_0, _fv_0) in {(self.list, LinkedList::$size)} | (_ov_0, _fv_0) in {(self.list, LinkedList::$head)} | (_ov_0, _fv_0) in {(self.list, LinkedList::$tail)} | (_ov_0, _fv_0) in {(self.list, LinkedList::$nodeList)}"
               (rule "orLeft" (formula "1"))
               (branch " (_ov_0, _fv_0) in {(self.list, LinkedList::$size)} | (_ov_0, _fv_0) in {(self.list, LinkedList::$head)} | (_ov_0, _fv_0) in {(self.list, LinkedList::$tail)}"
                  (rule "orLeft" (formula "1"))
                  (branch " (_ov_0, _fv_0) in {(self.list, LinkedList::$size)} | (_ov_0, _fv_0) in {(self.list, LinkedList::$head)}"
                     (rule "orLeft" (formula "1"))
                     (branch "(_ov_0, _fv_0) in {(self.list, LinkedList::$size)}"
                        (rule "eqSymm" (formula "9"))
                        (rule "elementOfSingleton" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "applyEq" (formula "10") (term "1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "10") (term "1,1") (ifseqformula "1"))
                        (rule "applyEqRigid" (formula "10") (term "2,1") (ifseqformula "2"))
                        (rule "narrowSelectType" (formula "10") (term "1") (ifseqformula "3"))
                        (rule "applyEqRigid" (formula "10") (term "2,0") (ifseqformula "2"))
                        (rule "pullOutSelect" (formula "10") (term "0") (inst "selectSK=LinkedList_size_0"))
                        (rule "simplifySelectOfAnon" (formula "1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "narrowSelectType" (formula "1") (term "1,0") (ifseqformula "5"))
                        (rule "narrowSelectType" (formula "1") (term "2,0") (ifseqformula "4"))
                        (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                        (rule "Class_invariant_axiom_for_LinkedListIterator" (formula "9") (inst "i=i") (inst "f=f") (inst "i_0=i_0") (inst "f_0=f_0"))
                        (rule "andLeft" (formula "9"))
                        (rule "andLeft" (formula "10"))
                        (rule "notLeft" (formula "9"))
                        (rule "andLeft" (formula "9"))
                        (rule "andLeft" (formula "9"))
                        (rule "andLeft" (formula "9"))
                        (rule "andLeft" (formula "9"))
                        (rule "andLeft" (formula "9"))
                        (rule "andLeft" (formula "9"))
                        (rule "eqSymm" (formula "15") (term "1"))
                        (rule "eqSymm" (formula "14"))
                        (rule "eqSymm" (formula "13"))
                        (rule "replace_known_right" (formula "1") (term "0,0,1,0,0") (ifseqformula "17"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "castedGetAny" (formula "15") (term "0,1"))
                        (rule "lenOfSeqSubEQ" (formula "12") (term "1,1,0,0") (ifseqformula "14"))
                        (rule "polySimp_elimSub" (formula "12") (term "1,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "12") (term "1,1,1,0,0"))
                        (rule "lenOfSeqSubEQ" (formula "11") (term "1,1,0,0") (ifseqformula "13"))
                        (rule "polySimp_elimSub" (formula "11") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "11") (term "1,1,1,1,0,0"))
                        (rule "add_zero_right" (formula "11") (term "1,1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "15") (term "0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "15") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,1,0,0"))
                        (rule "polySimp_addComm1" (formula "12") (term "0,0,1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,1,0,0"))
                        (rule "add_zero_right" (formula "11") (term "0,0,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "9"))
                        (rule "inEqSimp_commuteLeq" (formula "10"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "0,0,0,1,0,0,1,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                        (rule "getOfSeqSubEQ" (formula "11") (term "1,0,1,0,1,0") (ifseqformula "13"))
                        (rule "castDel" (formula "11") (term "2,1,0,1,0,1,0"))
                        (rule "add_zero_right" (formula "11") (term "1,1,1,0,1,0,1,0"))
                        (rule "polySimp_elimSub" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
                        (rule "mul_literals" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
                        (rule "add_zero_right" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,1,0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,1,0,1,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,1,0,1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,1,0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,1,0,1,0,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
                        (rule "getOfSeqSubEQ" (formula "12") (term "1,0,1,0,1,0") (ifseqformula "14"))
                        (rule "castDel" (formula "12") (term "2,1,0,1,0,1,0"))
                        (rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
                        (rule "polySimp_addComm0" (formula "12") (term "1,1,1,0,1,0,1,0"))
                        (rule "polySimp_addComm0" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,1,0,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,1,0,1,0,1,0"))
                        (rule "polySimp_mulAssoc" (formula "12") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,0,0,1,0,1,0,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,1,0,1,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1,0,1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,1,0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,1,0,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,1,0,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "0,1,1,0,1,0,1,0,1,0"))
                        (rule "mul_literals" (formula "12") (term "0,0,1,1,0,1,0,1,0,1,0"))
                        (rule "nnf_imp2or" (formula "11") (term "0"))
                        (rule "nnf_imp2or" (formula "12") (term "0"))
                        (rule "nnf_notAnd" (formula "11") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                        (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "12") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                        (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                        (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                        (rule "Class_invariant_axiom_for_LinkedList" (formula "16") (inst "i=i") (inst "i_0=i_0") (inst "j=j") (inst "i_1=i_1") (inst "i_2=i_2") (inst "f=f") (inst "i_3=i_3") (inst "n=n"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "translateJavaSubInt" (formula "16") (term "1,1,0,0,1,0,0"))
                        (rule "translateJavaSubInt" (formula "16") (term "1,0,1,1,1,1,0,0,0"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "16"))
                        (rule "eqSymm" (formula "23") (term "1,1,0,1,0"))
                        (rule "eqSymm" (formula "23") (term "0,1,0,1,0"))
                        (rule "eqSymm" (formula "22") (term "1,0"))
                        (rule "eqSymm" (formula "21") (term "1,0,1"))
                        (rule "eqSymm" (formula "21") (term "1,1"))
                        (rule "eqSymm" (formula "17"))
                        (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "22") (term "1,1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "21") (term "1,0,0,1,1"))
                        (rule "mul_literals" (formula "21") (term "1,1,0,0,1,1"))
                        (rule "polySimp_addComm0" (formula "22") (term "1,0,0,1,0"))
                        (rule "polySimp_addComm0" (formula "22") (term "1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "21") (term "1,0,0,1,1"))
                        (rule "castedGetAny" (formula "24") (term "1,1,1,0"))
                        (rule "castedGetAny" (formula "23") (term "0,0,1,0,1,0"))
                        (rule "castedGetAny" (formula "23") (term "1,0,1,0,1,0"))
                        (rule "castedGetAny" (formula "22") (term "1,1,1,0"))
                        (rule "castedGetAny" (formula "21") (term "0,1,0,1"))
                        (rule "castedGetAny" (formula "22") (term "0,1,0"))
                        (rule "eqSymm" (formula "22") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                        (rule "castedGetAny" (formula "21") (term "0,1,1"))
                        (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                        (rule "applyEq" (formula "10") (term "0") (ifseqformula "17"))
                        (rule "applyEq" (formula "12") (term "1,1,1,1,0,0") (ifseqformula "17"))
                        (rule "applyEq" (formula "12") (term "0,0,1,1,0,0") (ifseqformula "17"))
                        (rule "applyEq" (formula "21") (term "1,1,0,1,1") (ifseqformula "16"))
                        (rule "applyEq" (formula "14") (term "2,0") (ifseqformula "17"))
                        (rule "applyEq" (formula "18") (term "0") (ifseqformula "16"))
                        (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "17"))
                        (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "16"))
                        (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                        (rule "applyEq" (formula "17") (term "1") (ifseqformula "16"))
                        (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                        (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                        (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                        (rule "applyEq" (formula "10") (term "0") (ifseqformula "16"))
                        (rule "applyEq" (formula "14") (term "2,0") (ifseqformula "16"))
                        (rule "applyEq" (formula "12") (term "1,1,1,1,0,0") (ifseqformula "16"))
                        (rule "applyEq" (formula "12") (term "0,0,1,1,0,0") (ifseqformula "16"))
                        (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "16"))
                        (rule "apply_eq_monomials" (formula "20") (term "1,0,0,1,0,0") (ifseqformula "17"))
                        (rule "polySimp_rightDist" (formula "20") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0,0,1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "20") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "20") (term "1,1,1,0,0,1,0,0"))
                        (rule "times_zero_1" (formula "20") (term "1,1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "20") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                        (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                        (rule "applyEq" (formula "12") (term "1,1,1,0,1,0,1,0,1,0") (ifseqformula "17"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                        (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "18"))
                        (rule "polySimp_mulComm0" (formula "10") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "10") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                        (rule "polySimp_elimOne" (formula "10") (term "0"))
                        (rule "nnf_imp2or" (formula "24") (term "1,0,1,0"))
                        (rule "nnf_imp2or" (formula "23") (term "0"))
                        (rule "nnf_imp2or" (formula "20") (term "0"))
                        (rule "nnf_imp2or" (formula "21") (term "0"))
                        (rule "nnf_imp2or" (formula "25") (term "0"))
                        (rule "nnf_imp2or" (formula "24") (term "0"))
                        (rule "JML_represents_clause_for_LinkedListIterator_footprint" (formula "1") (term "2,0,0,0,0,0"))
                        (rule "elementOfUnion" (formula "1") (term "0,0,0,0,0"))
                        (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfUnion" (formula "1") (term "0,0,0,0,0"))
                        (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfUnion" (formula "1") (term "0,0,0,0,0"))
                        (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfUnion" (formula "1") (term "0,0,0,0,0"))
                        (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "nnf_notAnd" (formula "23") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                        (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                        (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                        (rule "nnf_notAnd" (formula "20") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                        (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                        (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "21") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                        (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                        (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "25") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                        (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                        (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "24") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                        (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                        (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                        (rule "nnf_imp2or" (formula "24") (term "0,1,0"))
                        (rule "nnf_notAnd" (formula "24") (term "0,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,1,0"))
                        (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,1,0"))
                        (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,1,0"))
                        (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1,0"))
                        (rule "mul_literals" (formula "24") (term "1,0,0,0,1,0"))
                        (rule "commute_and" (formula "22") (term "0,0"))
                        (rule "commute_and" (formula "12") (term "1,0,1,0"))
                        (rule "commute_and" (formula "12") (term "0,0,1,0"))
                        (rule "commute_and" (formula "13") (term "0,0,1,0"))
                        (rule "JML_represents_clause_for_LinkedList_footprint" (formula "1") (term "2,0,0,0,0") (inst "i=i"))
                        (rule "castedGetAny" (formula "1") (term "0,1,0,1,2,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,2,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,1,2,0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1,2,0,0,0,0"))
                        (rule "applyEq" (formula "1") (term "0,1,0,0,1,0,0,1,2,0,0,0,0") (ifseqformula "17"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,2,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,2,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,2,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,2,0,0,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,2,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,2,0,0,0,0"))
                        (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                        (rule "elementOfInfiniteUnion" (formula "1") (term "1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,0,1,0,0,0,0"))
                        (rule "sortsDisjointModuloNull" (formula "1") (term "1,0,1,0,0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "1,1,0,1,0,0,0,0") (ifseqformula "26"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                        (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                        (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                        (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                        (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "ifthenelse_negated" (formula "1") (term "0"))
                        (rule "commute_and" (formula "22") (term "0,0,0,0,1"))
                        (rule "commute_or_2" (formula "23") (term "0"))
                        (rule "commute_and" (formula "13") (term "1,0,1,0"))
                        (rule "commute_or_2" (formula "25") (term "0"))
                        (rule "equalityToSeqGetAndSeqLenLeft" (formula "14") (inst "iv=iv"))
                        (rule "andLeft" (formula "14"))
                        (rule "lenOfSeqSub" (formula "14") (term "0"))
                        (rule "polySimp_elimSub" (formula "14") (term "1,0"))
                        (rule "times_zero_2" (formula "14") (term "1,1,0"))
                        (rule "add_zero_right" (formula "14") (term "1,0"))
                        (rule "lenOfSeqSubEQ" (formula "14") (term "1") (ifseqformula "16"))
                        (rule "eqSymm" (formula "14"))
                        (rule "polySimp_elimSub" (formula "14") (term "1,0"))
                        (rule "mul_literals" (formula "14") (term "1,1,0"))
                        (rule "add_zero_right" (formula "14") (term "1,0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "true_left" (formula "14"))
                        (rule "lenOfSeqSub" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "14") (term "1,1,1,0,0"))
                        (rule "times_zero_2" (formula "14") (term "1,1,1,1,0,0"))
                        (rule "add_zero_right" (formula "14") (term "1,1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1,1,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                        (rule "applyEq" (formula "14") (term "0,0,1,0") (ifseqformula "15"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "true_left" (formula "14"))
                        (rule "seqGetAlphaCast" (formula "16") (term "0,1"))
                        (rule "castedGetAny" (formula "16") (term "0"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "commute_and" (formula "20") (term "1,0,1,0"))
                        (rule "commute_and" (formula "20") (term "0,0,1,0"))
                        (rule "commute_and" (formula "21") (term "1,0,1,0"))
                        (rule "commute_and" (formula "21") (term "0,0,1,0"))
                        (rule "ifthenelse_split" (formula "12") (term "1,1,0,0"))
                        (branch "self.index >= 1 TRUE"
                           (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "12"))
                           (rule "leq_literals" (formula "9") (term "0"))
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "true_left" (formula "9"))
                           (rule "commute_and_2" (formula "22") (term "0"))
                           (rule "commute_or" (formula "23") (term "0,0"))
                           (rule "commute_or" (formula "25") (term "0,0"))
                           (rule "shift_paren_or" (formula "24") (term "0,1,0"))
                           (rule "ifthenelse_split_for" (formula "16"))
                           (branch "self.list.size >= 1 + self.index TRUE"
                              (rule "replace_known_left" (formula "13") (term "0,1,1,0,0") (ifseqformula "16"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "16"))
                              (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0"))
                              (rule "add_literals" (formula "10") (term "0,0"))
                              (rule "qeq_literals" (formula "10") (term "0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "true_left" (formula "10"))
                              (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "19"))
                              (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                              (rule "mul_literals" (formula "15") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "15") (term "0"))
                              (rule "add_literals" (formula "15") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "15"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                              (rule "polySimp_elimOne" (formula "15") (term "0"))
                              (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "15"))
                              (rule "leq_literals" (formula "9") (term "0"))
                               (builtin "One Step Simplification" (formula "9"))
                              (rule "true_left" (formula "9"))
                              (rule "applyEq_and_gen2" (formula "10") (term "1,0,1,0"))
                              (rule "ifEqualsNull" (formula "10") (term "0,0,1,0,1,0"))
                              (rule "nnf_notOr" (formula "10") (term "0,1,0,1,0"))
                              (rule "nnf_notAnd" (formula "10") (term "0,0,1,0,1,0"))
                              (rule "nnf_notAnd" (formula "10") (term "1,0,1,0,1,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "nnf_notAnd" (formula "10") (term "0,0,0,1,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0,1,0,1,0"))
                              (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0,1,0,1,0"))
                              (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,0,1,0,1,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,0,1,0,1,0"))
                              (rule "add_zero_right" (formula "10") (term "0,0,0,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "10") (term "1,0,0,0,0,1,0,1,0"))
                              (rule "lenNonNegative" (formula "17") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "17"))
                              (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                              (rule "lenNonNegative" (formula "19") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "19"))
                              (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                              (rule "seqGetAlphaCast" (formula "23") (term "0,1,0,1"))
                              (rule "castedGetAny" (formula "23") (term "0"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "cnf_rightDist" (formula "23"))
                              (rule "andLeft" (formula "23"))
                              (rule "commute_or_2" (formula "26") (term "0,0,1,0"))
                              (rule "applyEq_and_gen2" (formula "22") (term "1,0,1,0"))
                              (rule "equalityToSeqGetAndSeqLenLeft" (formula "13") (inst "iv=iv"))
                              (rule "andLeft" (formula "13"))
                              (rule "lenOfSeqSub" (formula "14") (term "1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "14") (term "1,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "14") (term "1,1,1,0,0"))
                              (rule "lenOfSeqSub" (formula "13") (term "0"))
                              (rule "polySimp_elimSub" (formula "13") (term "1,0"))
                              (rule "polySimp_addComm0" (formula "13") (term "1,0"))
                              (rule "lenOfSeqSubEQ" (formula "13") (term "1") (ifseqformula "15"))
                              (rule "eqSymm" (formula "13"))
                              (rule "polySimp_elimSub" (formula "13") (term "1,0"))
                              (rule "polySimp_addComm0" (formula "13") (term "1,0"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "true_left" (formula "13"))
                              (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,1,0,0"))
                              (rule "polySimp_addComm1" (formula "13") (term "0,0,1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                              (rule "applyEq" (formula "13") (term "0,0,1,0") (ifseqformula "14"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "true_left" (formula "13"))
                              (rule "applyEq_and_gen2" (formula "11") (term "1,0,1,0"))
                              (rule "ifEqualsNull" (formula "11") (term "0,0,1,0,1,0"))
                              (rule "nnf_notOr" (formula "11") (term "0,1,0,1,0"))
                              (rule "nnf_notAnd" (formula "11") (term "0,0,1,0,1,0"))
                              (rule "nnf_notAnd" (formula "11") (term "1,0,1,0,1,0"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "nnf_notAnd" (formula "11") (term "0,0,0,1,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0,1,0,1,0"))
                              (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,0,1,0,1,0"))
                              (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "11") (term "1,0,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "11") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,1,0,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "11") (term "0,0,1,0,0,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "11") (term "1,0,1,0,0,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,0,0,0,1,0,1,0"))
                              (rule "add_literals" (formula "11") (term "0,0,0,0,1,0,0,0,1,0,1,0"))
                              (rule "add_zero_left" (formula "11") (term "0,0,0,1,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "0,1,1,0,0,0,1,0,1,0"))
                              (rule "cnf_rightDist" (formula "24"))
                              (rule "andLeft" (formula "24"))
                              (rule "cnf_rightDist" (formula "23"))
                              (rule "andLeft" (formula "23"))
                              (rule "shift_paren_and" (formula "21") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "castedGetAny" (formula "21") (term "0,0,1,0,0,1,0"))
                              (rule "castedGetAny" (formula "21") (term "1,0,1,1,0,0,1,0"))
                              (rule "castedGetAny" (formula "21") (term "0,0,0,0,0,1,0"))
                              (rule "castedGetAny" (formula "21") (term "1,0,0,1,0,1,0"))
                              (rule "commute_or" (formula "10") (term "1,0,1,0,1,0"))
                              (rule "commute_or" (formula "28") (term "0,0,0,1,0"))
                              (rule "cnf_rightDist" (formula "25"))
                              (rule "andLeft" (formula "25"))
                              (rule "commute_or" (formula "25"))
                              (rule "cnf_rightDist" (formula "24"))
                              (rule "andLeft" (formula "24"))
                              (rule "commute_or_2" (formula "10") (term "0,0,1,0,1,0"))
                              (rule "cnf_rightDist" (formula "24"))
                              (rule "andLeft" (formula "24"))
                              (rule "commute_or" (formula "24"))
                              (rule "cnf_rightDist" (formula "23"))
                              (rule "andLeft" (formula "23"))
                              (rule "cnf_rightDist" (formula "24"))
                              (rule "andLeft" (formula "24"))
                              (rule "commute_or" (formula "25"))
                              (rule "cnf_rightDist" (formula "24"))
                              (rule "andLeft" (formula "24"))
                              (rule "commute_or" (formula "24"))
                              (rule "cnf_rightDist" (formula "21") (term "0"))
                              (rule "distr_forallAnd" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "shift_paren_or" (formula "22") (term "0"))
                              (rule "commute_and_2" (formula "24") (term "1"))
                              (rule "commute_or" (formula "11") (term "1,0,1,0,1,0"))
                              (rule "shift_paren_and" (formula "23") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "castedGetAny" (formula "23") (term "0,0,1,0,0,1,0"))
                              (rule "castedGetAny" (formula "23") (term "0,0,0,0,0,1,0"))
                              (rule "castedGetAny" (formula "23") (term "1,0,1,1,0,0,1,0"))
                              (rule "cnf_rightDist" (formula "24"))
                              (rule "andLeft" (formula "24"))
                              (rule "cnf_rightDist" (formula "25"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "cnf_rightDist" (formula "25"))
                              (rule "andLeft" (formula "25"))
                              (rule "commute_or" (formula "25"))
                              (rule "cnf_rightDist" (formula "21") (term "0"))
                              (rule "distr_forallAnd" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "shift_paren_or" (formula "22") (term "0"))
                              (rule "cnf_rightDist" (formula "25"))
                              (rule "andLeft" (formula "25"))
                              (rule "commute_or" (formula "25"))
                              (rule "cnf_rightDist" (formula "26"))
                              (rule "andLeft" (formula "26"))
                              (rule "commute_or" (formula "27"))
                              (rule "cnf_rightDist" (formula "25"))
                              (rule "andLeft" (formula "25"))
                              (rule "commute_or" (formula "26"))
                              (rule "cnf_rightDist" (formula "27"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "commute_or" (formula "27"))
                              (rule "cnf_rightDist" (formula "25"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "commute_or" (formula "25"))
                              (rule "cnf_rightDist" (formula "24") (term "0"))
                              (rule "distr_forallAnd" (formula "24"))
                              (rule "andLeft" (formula "24"))
                              (rule "shift_paren_or" (formula "25") (term "0"))
                              (rule "ifthenelse_split" (formula "1") (term "0"))
                              (branch "self.list.<created> = TRUE TRUE"
                                 (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "47"))
                                 (rule "closeTrue" (formula "47"))
                              )
                              (branch "self.list.<created> = TRUE FALSE"
                                 (rule "referencedObjectIsCreatedRight" (formula "44") (ifseqformula "45"))
                                 (rule "close" (formula "44") (ifseqformula "4"))
                              )
                           )
                           (branch "self.list.size >= 1 + self.index FALSE"
                              (rule "replace_known_right" (formula "13") (term "0,1,1,0,0") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "inEqSimp_geqRight" (formula "26"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1"))
                              (rule "inEqSimp_antiSymm" (formula "11") (ifseqformula "1"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "11"))
                              (rule "inEqSimp_homoInEq1" (formula "12"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0"))
                              (rule "add_literals" (formula "12") (term "1,0"))
                              (rule "times_zero_1" (formula "12") (term "0"))
                              (rule "leq_literals" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "applyEq" (formula "24") (term "1,1,1,0") (ifseqformula "11"))
                              (rule "applyEq" (formula "23") (term "1,1,0,1,1") (ifseqformula "11"))
                              (rule "applyEq" (formula "22") (term "1,1,0,0") (ifseqformula "11"))
                              (rule "applyEq" (formula "16") (term "2,0") (ifseqformula "11"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "eqSymm" (formula "16"))
                              (rule "applyEq" (formula "21") (term "1,1,0,0") (ifseqformula "11"))
                              (rule "applyEq" (formula "25") (term "1,1,0,0") (ifseqformula "11"))
                              (rule "applyEq" (formula "1") (term "0") (ifseqformula "11"))
                              (rule "inEqSimp_homoInEq0" (formula "1"))
                              (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "1,0"))
                              (rule "times_zero_1" (formula "1") (term "0"))
                              (rule "qeq_literals" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "applyEq" (formula "24") (term "1,1,0,0,0,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "19") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "18") (term "1") (ifseqformula "10"))
                              (rule "applyEq" (formula "17") (term "1") (ifseqformula "10"))
                              (rule "applyEq" (formula "13") (term "1,1,1,0,1,1,1,0,1,0") (ifseqformula "10"))
                              (rule "polySimp_pullOutFactor2b" (formula "13") (term "1,1,0,1,1,1,0,1,0"))
                              (rule "add_literals" (formula "13") (term "1,1,1,1,0,1,1,1,0,1,0"))
                              (rule "times_zero_1" (formula "13") (term "1,1,1,0,1,1,1,0,1,0"))
                              (rule "add_zero_right" (formula "13") (term "1,1,0,1,1,1,0,1,0"))
                              (rule "applyEq" (formula "27") (term "1") (ifseqformula "10"))
                              (rule "inEqSimp_or_tautInEq0" (formula "13") (term "0,0"))
                              (rule "add_zero_right" (formula "13") (term "1,1,0,0"))
                              (rule "qeq_literals" (formula "13") (term "1,0,0"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "true_left" (formula "13"))
                              (rule "applyEq_and_gen2" (formula "12") (term "1,0,1,0"))
                              (rule "ifEqualsNull" (formula "12") (term "0,0,1,0,1,0"))
                              (rule "nnf_notOr" (formula "12") (term "0,1,0,1,0"))
                              (rule "nnf_notAnd" (formula "12") (term "0,0,1,0,1,0"))
                              (rule "nnf_notAnd" (formula "12") (term "1,0,1,0,1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "nnf_notAnd" (formula "12") (term "0,0,0,1,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,1,0,1,0"))
                              (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,1,0,1,0"))
                              (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0,1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0,1,0,1,0"))
                              (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "12") (term "1,0,0,0,0,1,0,1,0"))
                              (rule "lenNonNegative" (formula "16") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "16"))
                              (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                              (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "11"))
                              (rule "leq_literals" (formula "16") (term "0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "true_left" (formula "16"))
                              (rule "lenNonNegative" (formula "17") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "17"))
                              (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                              (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "11"))
                              (rule "leq_literals" (formula "17") (term "0"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "true_left" (formula "17"))
                              (rule "seqGetAlphaCast" (formula "20") (term "0,1,0,1"))
                              (rule "castedGetAny" (formula "20") (term "0"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "true_left" (formula "20"))
                              (rule "commute_and_2" (formula "20") (term "0,0,0,1"))
                              (rule "applyEq_and_gen2" (formula "19") (term "1,0,1,0"))
                              (rule "commute_or_2" (formula "22") (term "0,0,1,0"))
                              (rule "shift_paren_and" (formula "18") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "castedGetAny" (formula "18") (term "0,0,1,0,0,1,0"))
                              (rule "castedGetAny" (formula "18") (term "1,0,1,1,0,0,1,0"))
                              (rule "castedGetAny" (formula "18") (term "1,0,0,1,0,1,0"))
                              (rule "castedGetAny" (formula "18") (term "0,0,0,0,0,1,0"))
                              (rule "cnf_rightDist" (formula "20"))
                              (rule "andLeft" (formula "20"))
                              (rule "cnf_rightDist" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "cnf_rightDist" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "commute_or" (formula "21"))
                              (rule "cnf_rightDist" (formula "20"))
                              (rule "andLeft" (formula "20"))
                              (rule "cnf_rightDist" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "cnf_rightDist" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "commute_or" (formula "21"))
                              (rule "commute_and_2" (formula "20") (term "1"))
                              (rule "cnf_rightDist" (formula "18") (term "0"))
                              (rule "distr_forallAnd" (formula "18"))
                              (rule "andLeft" (formula "18"))
                              (rule "shift_paren_or" (formula "19") (term "0"))
                              (rule "commute_or" (formula "12") (term "1,0,1,0,1,0"))
                              (rule "cnf_rightDist" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "cnf_rightDist" (formula "22"))
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "cnf_rightDist" (formula "22"))
                              (rule "andLeft" (formula "22"))
                              (rule "commute_or" (formula "22"))
                              (rule "cnf_rightDist" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "cnf_rightDist" (formula "22"))
                              (rule "andLeft" (formula "22"))
                              (rule "commute_or" (formula "23"))
                              (rule "cnf_rightDist" (formula "22"))
                              (rule "andLeft" (formula "22"))
                              (rule "commute_or" (formula "22"))
                              (rule "cnf_rightDist" (formula "18") (term "0"))
                              (rule "distr_forallAnd" (formula "18"))
                              (rule "andLeft" (formula "18"))
                              (rule "shift_paren_or" (formula "19") (term "0"))
                              (rule "commute_or_2" (formula "12") (term "0,0,1,0,1,0"))
                              (rule "cnf_rightDist" (formula "22"))
                              (rule "andLeft" (formula "22"))
                              (rule "commute_or" (formula "22"))
                              (rule "cnf_rightDist" (formula "23"))
                              (rule "andLeft" (formula "23"))
                              (rule "commute_or" (formula "24"))
                              (rule "cnf_rightDist" (formula "22"))
                              (rule "andLeft" (formula "22"))
                              (rule "commute_or" (formula "23"))
                              (rule "commute_or" (formula "38") (term "0,0,0,1,0"))
                              (rule "cnf_rightDist" (formula "24"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "commute_or" (formula "24"))
                              (rule "cnf_rightDist" (formula "22"))
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "commute_or" (formula "22"))
                              (rule "cnf_rightDist" (formula "18") (term "0"))
                              (rule "distr_forallAnd" (formula "18"))
                              (rule "andLeft" (formula "18"))
                              (rule "commute_or_2" (formula "18") (term "0"))
                              (rule "shift_paren_or" (formula "19") (term "0"))
                              (rule "commute_or" (formula "18") (term "0,0"))
                              (rule "shift_paren_and" (formula "22") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "castedGetAny" (formula "22") (term "0,0,1,0,0,1,0"))
                              (rule "castedGetAny" (formula "22") (term "1,0,1,1,0,0,1,0"))
                              (rule "castedGetAny" (formula "22") (term "0,0,0,0,0,1,0"))
                              (rule "cnf_rightDist" (formula "22") (term "0"))
                              (rule "distr_forallAnd" (formula "22"))
                              (rule "andLeft" (formula "22"))
                              (rule "shift_paren_or" (formula "23") (term "0"))
                              (rule "cnf_rightDist" (formula "22") (term "0"))
                              (rule "distr_forallAnd" (formula "22"))
                              (rule "andLeft" (formula "22"))
                              (rule "shift_paren_or" (formula "23") (term "0"))
                              (rule "cnf_rightDist" (formula "22") (term "0"))
                              (rule "distr_forallAnd" (formula "22"))
                              (rule "andLeft" (formula "22"))
                              (rule "commute_or_2" (formula "22") (term "0"))
                              (rule "shift_paren_or" (formula "23") (term "0"))
                              (rule "commute_or" (formula "22") (term "0,0"))
                              (rule "ifthenelse_to_or_right" (formula "12") (term "1,1,0,1,0"))
                              (rule "nnf_notAnd" (formula "12") (term "0,0,1,1,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,1,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1,1,0,1,0"))
                              (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,1,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,1,0,1,0"))
                              (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,1,1,0,1,0"))
                              (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,1,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,1,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1,1,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,1,1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,1,1,0,1,0"))
                              (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,1,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,1,0,1,0"))
                              (rule "mul_literals" (formula "12") (term "1,0,0,0,1,1,0,1,0"))
                              (rule "commute_or" (formula "12") (term "0,0,0,1,0,1,0"))
                              (rule "cnf_rightDist" (formula "12") (term "1,0,1,0,1,0"))
                              (rule "commute_or" (formula "12") (term "1,1,1,0,1,0"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "44") (term "0") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "45"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "47"))
                              (rule "closeTrue" (formula "47"))
                           )
                        )
                        (branch "self.index >= 1 FALSE"
                           (rule "inEqSimp_geqRight" (formula "26"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "1"))
                           (rule "leq_literals" (formula "11") (term "0"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "true_left" (formula "11"))
                           (rule "inEqSimp_antiSymm" (formula "10") (ifseqformula "1"))
                           (rule "applyEq" (formula "14") (term "1,1,0,1,1,0,0") (ifseqformula "10"))
                           (rule "add_literals" (formula "14") (term "1,0,1,1,0,0"))
                           (rule "applyEq" (formula "11") (term "0") (ifseqformula "10"))
                           (rule "qeq_literals" (formula "11"))
                           (rule "true_left" (formula "11"))
                           (rule "applyEq" (formula "16") (term "1,1,0") (ifseqformula "10"))
                           (rule "add_zero_right" (formula "16") (term "1,0"))
                           (rule "applyEq" (formula "14") (term "2,0") (ifseqformula "10"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "eqSymm" (formula "14"))
                           (rule "applyEq" (formula "11") (term "1") (ifseqformula "10"))
                           (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "10"))
                           (rule "leq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyEq" (formula "15") (term "1,0,1") (ifseqformula "9"))
                           (rule "applyEq" (formula "11") (term "1,1,1,0,1,1,1,0,1,0") (ifseqformula "9"))
                           (rule "add_zero_right" (formula "11") (term "1,1,0,1,1,1,0,1,0"))
                           (rule "applyEq" (formula "12") (term "0,0,1,1,1,0,0") (ifseqformula "9"))
                           (rule "times_zero_2" (formula "12") (term "0,1,1,1,0,0"))
                           (rule "add_zero_left" (formula "12") (term "1,1,1,0,0"))
                           (rule "applyEq" (formula "12") (term "0,1,1,1,1,1,0,1,0") (ifseqformula "9"))
                           (rule "add_zero_left" (formula "12") (term "1,1,1,1,1,0,1,0"))
                           (rule "applyEq" (formula "12") (term "0,1,0,1,1,0,1,1,1,0,1,0") (ifseqformula "9"))
                           (rule "times_zero_2" (formula "12") (term "1,0,1,1,0,1,1,1,0,1,0"))
                           (rule "add_zero_right" (formula "12") (term "0,1,1,0,1,1,1,0,1,0"))
                           (rule "inEqSimp_or_tautInEq0" (formula "11") (term "0,0"))
                           (rule "add_zero_right" (formula "11") (term "1,1,0,0"))
                           (rule "qeq_literals" (formula "11") (term "1,0,0"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "true_left" (formula "11"))
                           (rule "commute_and_2" (formula "20") (term "0"))
                           (rule "commute_or" (formula "21") (term "0,0"))
                           (rule "commute_or" (formula "23") (term "0,0"))
                           (rule "shift_paren_or" (formula "22") (term "0,1,0"))
                           (rule "lenNonNegative" (formula "15") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "15"))
                           (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                           (rule "lenNonNegative" (formula "16") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "16"))
                           (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                           (rule "seqGetAlphaCast" (formula "20") (term "0,1,0,1"))
                           (rule "castedGetAny" (formula "20") (term "0"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "commute_and_2" (formula "20") (term "0,0,0,1"))
                           (rule "seqGetAlphaCast" (formula "20") (term "0,1,1"))
                           (rule "castedGetAny" (formula "20") (term "0"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "applyEq_and_gen2" (formula "19") (term "1,0,1,0"))
                           (rule "cnf_rightDist" (formula "20"))
                           (rule "andLeft" (formula "20"))
                           (rule "cnf_rightDist" (formula "21"))
                           (rule "andLeft" (formula "21"))
                           (rule "cnf_rightDist" (formula "21"))
                           (rule "andLeft" (formula "21"))
                           (rule "commute_or" (formula "21"))
                           (rule "commute_or_2" (formula "25") (term "0,0,1,0"))
                           (rule "cnf_rightDist" (formula "20"))
                           (rule "andLeft" (formula "20"))
                           (rule "cnf_rightDist" (formula "21"))
                           (rule "andLeft" (formula "21"))
                           (rule "cnf_rightDist" (formula "21"))
                           (rule "andLeft" (formula "21"))
                           (rule "commute_or" (formula "21"))
                           (rule "commute_and_2" (formula "20") (term "1"))
                           (rule "applyEq_and_gen2" (formula "11") (term "1,0,1,0"))
                           (rule "ifEqualsNull" (formula "11") (term "0,0,1,0,1,0"))
                           (rule "nnf_notOr" (formula "11") (term "0,1,0,1,0"))
                           (rule "nnf_notAnd" (formula "11") (term "1,0,1,0,1,0"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "nnf_notAnd" (formula "11") (term "0,0,1,0,1,0"))
                           (rule "nnf_notAnd" (formula "11") (term "0,0,0,1,0,1,0"))
                           (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0,1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0,1,0,1,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0,1,0,1,0"))
                           (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0,1,0,1,0"))
                           (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,0,1,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0,1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0,1,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0,1,0"))
                           (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0,1,0,1,0"))
                           (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,0,1,0,1,0"))
                           (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,0,1,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,1,0,1,0"))
                           (rule "mul_literals" (formula "11") (term "1,0,0,0,0,1,0,1,0"))
                           (rule "cnf_rightDist" (formula "20"))
                           (rule "andLeft" (formula "20"))
                           (rule "shift_paren_and" (formula "18") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "castedGetAny" (formula "18") (term "0,0,0,0,0,1,0"))
                           (rule "castedGetAny" (formula "18") (term "0,0,1,0,0,1,0"))
                           (rule "castedGetAny" (formula "18") (term "1,0,1,1,0,0,1,0"))
                           (rule "castedGetAny" (formula "18") (term "1,0,0,1,0,1,0"))
                           (rule "cnf_rightDist" (formula "21"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "cnf_rightDist" (formula "21"))
                           (rule "andLeft" (formula "21"))
                           (rule "commute_or" (formula "21"))
                           (rule "cnf_rightDist" (formula "20"))
                           (rule "andLeft" (formula "20"))
                           (rule "cnf_rightDist" (formula "21"))
                           (rule "andLeft" (formula "21"))
                           (rule "commute_or" (formula "22"))
                           (rule "cnf_rightDist" (formula "21"))
                           (rule "andLeft" (formula "21"))
                           (rule "commute_or" (formula "21"))
                           (rule "commute_or" (formula "33") (term "0,0,0,1,0"))
                           (rule "cnf_rightDist" (formula "18") (term "0"))
                           (rule "distr_forallAnd" (formula "18"))
                           (rule "andLeft" (formula "18"))
                           (rule "shift_paren_or" (formula "19") (term "0"))
                           (rule "cnf_rightDist" (formula "21"))
                           (rule "andLeft" (formula "21"))
                           (rule "commute_or" (formula "21"))
                           (rule "cnf_rightDist" (formula "22"))
                           (rule "andLeft" (formula "22"))
                           (rule "commute_or" (formula "23"))
                           (rule "cnf_rightDist" (formula "21"))
                           (rule "andLeft" (formula "21"))
                           (rule "commute_or" (formula "22"))
                           (rule "cnf_rightDist" (formula "23"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "commute_or" (formula "23"))
                           (rule "cnf_rightDist" (formula "21"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "commute_or" (formula "21"))
                           (rule "cnf_rightDist" (formula "18") (term "0"))
                           (rule "distr_forallAnd" (formula "18"))
                           (rule "andLeft" (formula "18"))
                           (rule "shift_paren_or" (formula "19") (term "0"))
                           (rule "commute_or" (formula "11") (term "1,0,1,0,1,0"))
                           (rule "shift_paren_and" (formula "21") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "castedGetAny" (formula "21") (term "1,0,1,1,0,0,1,0"))
                           (rule "castedGetAny" (formula "21") (term "0,0,1,0,0,1,0"))
                           (rule "castedGetAny" (formula "21") (term "0,0,0,0,0,1,0"))
                           (rule "cnf_rightDist" (formula "18") (term "0"))
                           (rule "distr_forallAnd" (formula "18"))
                           (rule "andLeft" (formula "18"))
                           (rule "commute_or_2" (formula "18") (term "0"))
                           (rule "shift_paren_or" (formula "19") (term "0"))
                           (rule "commute_or" (formula "18") (term "0,0"))
                           (rule "commute_or_2" (formula "11") (term "0,0,1,0,1,0"))
                           (rule "cnf_rightDist" (formula "22") (term "0"))
                           (rule "distr_forallAnd" (formula "22"))
                           (rule "andLeft" (formula "22"))
                           (rule "shift_paren_or" (formula "23") (term "0"))
                           (rule "cnf_rightDist" (formula "22") (term "0"))
                           (rule "distr_forallAnd" (formula "22"))
                           (rule "andLeft" (formula "22"))
                           (rule "shift_paren_or" (formula "23") (term "0"))
                           (rule "cnf_rightDist" (formula "22") (term "0"))
                           (rule "distr_forallAnd" (formula "22"))
                           (rule "andLeft" (formula "22"))
                           (rule "commute_or_2" (formula "22") (term "0"))
                           (rule "shift_paren_or" (formula "23") (term "0"))
                           (rule "commute_or" (formula "22") (term "0,0"))
                           (rule "ifthenelse_split" (formula "1") (term "0"))
                           (branch "self.list.<created> = TRUE TRUE"
                              (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "47"))
                              (rule "closeTrue" (formula "47"))
                           )
                           (branch "self.list.<created> = TRUE FALSE"
                              (rule "referencedObjectIsCreatedRight" (formula "44") (ifseqformula "45"))
                              (rule "close" (formula "44") (ifseqformula "4"))
                           )
                        )
                     )
                     (branch "(_ov_0, _fv_0) in {(self.list, LinkedList::$head)}"
                        (rule "eqSymm" (formula "9"))
                        (rule "elementOfSingleton" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "applyEqRigid" (formula "10") (term "2,1") (ifseqformula "2"))
                        (rule "narrowSelectType" (formula "10") (term "1") (ifseqformula "3"))
                        (rule "applyEq" (formula "10") (term "1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "10") (term "2,0") (ifseqformula "2"))
                        (rule "applyEq" (formula "10") (term "1,1") (ifseqformula "1"))
                        (rule "pullOutSelect" (formula "10") (term "0") (inst "selectSK=LinkedList_head_0"))
                        (rule "simplifySelectOfAnon" (formula "1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "narrowSelectType" (formula "1") (term "1,0") (ifseqformula "5"))
                        (rule "narrowSelectType" (formula "1") (term "2,0") (ifseqformula "4"))
                        (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                        (rule "Class_invariant_axiom_for_LinkedListIterator" (formula "9") (inst "i=i") (inst "f=f") (inst "i_0=i_0") (inst "f_0=f_0"))
                        (rule "andLeft" (formula "9"))
                        (rule "notLeft" (formula "9"))
                        (rule "andLeft" (formula "9"))
                        (rule "andLeft" (formula "9"))
                        (rule "andLeft" (formula "9"))
                        (rule "andLeft" (formula "9"))
                        (rule "andLeft" (formula "9"))
                        (rule "andLeft" (formula "9"))
                        (rule "andLeft" (formula "9"))
                        (rule "eqSymm" (formula "15") (term "1"))
                        (rule "eqSymm" (formula "14"))
                        (rule "eqSymm" (formula "13"))
                        (rule "replace_known_right" (formula "1") (term "0,0,1,0,0") (ifseqformula "17"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "castedGetAny" (formula "15") (term "0,1"))
                        (rule "lenOfSeqSubEQ" (formula "11") (term "1,1,0,0") (ifseqformula "13"))
                        (rule "polySimp_elimSub" (formula "11") (term "1,1,1,0,0"))
                        (rule "times_zero_2" (formula "11") (term "1,1,1,1,0,0"))
                        (rule "add_zero_right" (formula "11") (term "1,1,1,0,0"))
                        (rule "lenOfSeqSubEQ" (formula "12") (term "1,1,0,0") (ifseqformula "14"))
                        (rule "polySimp_elimSub" (formula "12") (term "1,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "12") (term "1,1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "15") (term "0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "15") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,1,0,0"))
                        (rule "add_zero_right" (formula "11") (term "0,0,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,1,0,0"))
                        (rule "polySimp_addComm1" (formula "12") (term "0,0,1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "10"))
                        (rule "inEqSimp_commuteLeq" (formula "9"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,1,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "0,0,1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "0,0,1,1,1,0,0"))
                        (rule "getOfSeqSubEQ" (formula "11") (term "1,0,1,0,1,0") (ifseqformula "13"))
                        (rule "castDel" (formula "11") (term "2,1,0,1,0,1,0"))
                        (rule "add_zero_right" (formula "11") (term "1,1,1,0,1,0,1,0"))
                        (rule "polySimp_elimSub" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
                        (rule "mul_literals" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
                        (rule "add_zero_right" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,1,0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,1,0,1,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,1,0,1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,1,0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,1,0,1,0,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
                        (rule "getOfSeqSubEQ" (formula "12") (term "1,0,1,0,1,0") (ifseqformula "14"))
                        (rule "castDel" (formula "12") (term "2,1,0,1,0,1,0"))
                        (rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
                        (rule "polySimp_addComm0" (formula "12") (term "1,1,1,0,1,0,1,0"))
                        (rule "polySimp_addComm0" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,1,0,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,1,0,1,0,1,0"))
                        (rule "polySimp_mulAssoc" (formula "12") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,0,0,1,0,1,0,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,1,0,1,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1,0,1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,1,0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,1,0,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,1,0,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "0,1,1,0,1,0,1,0,1,0"))
                        (rule "mul_literals" (formula "12") (term "0,0,1,1,0,1,0,1,0,1,0"))
                        (rule "nnf_imp2or" (formula "11") (term "0"))
                        (rule "nnf_imp2or" (formula "12") (term "0"))
                        (rule "nnf_notAnd" (formula "11") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                        (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                        (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "12") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                        (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                        (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                        (rule "Class_invariant_axiom_for_LinkedList" (formula "16") (inst "i=i") (inst "i_0=i_0") (inst "j=j") (inst "i_1=i_1") (inst "i_2=i_2") (inst "f=f") (inst "i_3=i_3") (inst "n=n"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "translateJavaSubInt" (formula "16") (term "1,1,0,0,1,0,0"))
                        (rule "translateJavaSubInt" (formula "16") (term "1,0,1,1,1,1,0,0,0"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "16"))
                        (rule "eqSymm" (formula "23") (term "1,1,0,1,0"))
                        (rule "eqSymm" (formula "23") (term "0,1,0,1,0"))
                        (rule "eqSymm" (formula "22") (term "1,0"))
                        (rule "eqSymm" (formula "21") (term "1,0,1"))
                        (rule "eqSymm" (formula "21") (term "1,1"))
                        (rule "eqSymm" (formula "17"))
                        (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "22") (term "1,1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "21") (term "1,0,0,1,1"))
                        (rule "mul_literals" (formula "21") (term "1,1,0,0,1,1"))
                        (rule "polySimp_addComm0" (formula "22") (term "1,0,0,1,0"))
                        (rule "polySimp_addComm0" (formula "22") (term "1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "21") (term "1,0,0,1,1"))
                        (rule "castedGetAny" (formula "24") (term "1,1,1,0"))
                        (rule "castedGetAny" (formula "23") (term "1,0,1,0,1,0"))
                        (rule "castedGetAny" (formula "23") (term "0,0,1,0,1,0"))
                        (rule "castedGetAny" (formula "22") (term "1,1,1,0"))
                        (rule "castedGetAny" (formula "21") (term "0,1,0,1"))
                        (rule "castedGetAny" (formula "22") (term "0,1,0"))
                        (rule "eqSymm" (formula "22") (term "1,0"))
                        (rule "castedGetAny" (formula "21") (term "0,1,1"))
                        (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                        (rule "applyEq" (formula "14") (term "2,0") (ifseqformula "17"))
                        (rule "applyEq" (formula "12") (term "0,0,1,1,0,0") (ifseqformula "17"))
                        (rule "applyEq" (formula "10") (term "0") (ifseqformula "17"))
                        (rule "applyEq" (formula "12") (term "1,1,1,1,0,0") (ifseqformula "17"))
                        (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "17"))
                        (rule "applyEq" (formula "21") (term "1,1,0,1,1") (ifseqformula "16"))
                        (rule "applyEq" (formula "18") (term "0") (ifseqformula "16"))
                        (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                        (rule "applyEq" (formula "17") (term "1") (ifseqformula "16"))
                        (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                        (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                        (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                        (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "16"))
                        (rule "applyEq" (formula "14") (term "2,0") (ifseqformula "16"))
                        (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "16"))
                        (rule "applyEq" (formula "10") (term "0") (ifseqformula "16"))
                        (rule "applyEq" (formula "12") (term "0,0,1,1,0,0") (ifseqformula "16"))
                        (rule "applyEq" (formula "12") (term "1,1,1,1,0,0") (ifseqformula "16"))
                        (rule "apply_eq_monomials" (formula "24") (term "1,0,0,1,0,0") (ifseqformula "17"))
                        (rule "polySimp_rightDist" (formula "24") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,0,0,1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "24") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "24") (term "1,1,1,0,0,1,0,0"))
                        (rule "times_zero_1" (formula "24") (term "1,1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "24") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                        (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                        (rule "applyEq" (formula "12") (term "1,1,1,0,1,0,1,0,1,0") (ifseqformula "17"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                        (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "18"))
                        (rule "polySimp_mulComm0" (formula "10") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "10") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                        (rule "polySimp_elimOne" (formula "10") (term "0"))
                        (rule "nnf_imp2or" (formula "24") (term "1,0,1,0"))
                        (rule "nnf_imp2or" (formula "23") (term "0"))
                        (rule "nnf_imp2or" (formula "20") (term "0"))
                        (rule "nnf_imp2or" (formula "25") (term "0"))
                        (rule "nnf_imp2or" (formula "21") (term "0"))
                        (rule "nnf_imp2or" (formula "24") (term "0"))
                        (rule "JML_represents_clause_for_LinkedList_footprint" (formula "1") (term "2,1,0,0,0,0") (inst "i=i"))
                        (rule "castedGetAny" (formula "1") (term "0,1,0,1,2,1,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,2,1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,1,2,1,0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1,2,1,0,0,0,0"))
                        (rule "applyEq" (formula "1") (term "0,1,0,0,1,0,0,1,2,1,0,0,0,0") (ifseqformula "17"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,2,1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,2,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,2,1,0,0,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,2,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,2,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,2,1,0,0,0,0"))
                        (rule "elementOfUnion" (formula "1") (term "1,0,0,0,0"))
                        (rule "elementOfInfiniteUnion" (formula "1") (term "1,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,0,1,1,0,0,0,0"))
                        (rule "sortsDisjointModuloNull" (formula "1") (term "1,0,1,1,0,0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "1,1,0,1,1,0,0,0,0") (ifseqformula "26"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfUnion" (formula "1") (term "1,0,0,0,0"))
                        (rule "elementOfSingleton" (formula "1") (term "1,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfUnion" (formula "1") (term "1,0,0,0,0"))
                        (rule "elementOfSingleton" (formula "1") (term "1,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfUnion" (formula "1") (term "1,0,0,0,0"))
                        (rule "elementOfSingleton" (formula "1") (term "1,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfUnion" (formula "1") (term "1,0,0,0,0"))
                        (rule "elementOfSingleton" (formula "1") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "ifthenelse_negated" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "23") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                        (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                        (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "20") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                        (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                        (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "25") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                        (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                        (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "21") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                        (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                        (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "24") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                        (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                        (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                        (rule "nnf_imp2or" (formula "24") (term "0,1,0"))
                        (rule "nnf_notAnd" (formula "24") (term "0,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,1,0"))
                        (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,1,0"))
                        (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,1,0"))
                        (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1,0"))
                        (rule "mul_literals" (formula "24") (term "1,0,0,0,1,0"))
                        (rule "commute_and" (formula "22") (term "0,0"))
                        (rule "commute_and" (formula "12") (term "1,0,1,0"))
                        (rule "commute_and" (formula "12") (term "0,0,1,0"))
                        (rule "commute_and" (formula "13") (term "0,0,1,0"))
                        (rule "commute_and" (formula "22") (term "0,0,0,0,1"))
                        (rule "commute_or_2" (formula "23") (term "0"))
                        (rule "commute_and" (formula "13") (term "1,0,1,0"))
                        (rule "commute_or_2" (formula "25") (term "0"))
                        (rule "equalityToSeqGetAndSeqLenLeft" (formula "14") (inst "iv=iv"))
                        (rule "andLeft" (formula "14"))
                        (rule "lenOfSeqSub" (formula "15") (term "1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "15") (term "1,1,1,0,0"))
                        (rule "times_zero_2" (formula "15") (term "1,1,1,1,0,0"))
                        (rule "add_zero_right" (formula "15") (term "1,1,1,0,0"))
                        (rule "lenOfSeqSubEQ" (formula "14") (term "1") (ifseqformula "16"))
                        (rule "eqSymm" (formula "14"))
                        (rule "polySimp_elimSub" (formula "14") (term "1,0"))
                        (rule "times_zero_2" (formula "14") (term "1,1,0"))
                        (rule "add_zero_right" (formula "14") (term "1,0"))
                        (rule "lenOfSeqSub" (formula "14") (term "1"))
                        (rule "eqSymm" (formula "14"))
                        (rule "polySimp_elimSub" (formula "14") (term "1,0"))
                        (rule "times_zero_2" (formula "14") (term "1,1,0"))
                        (rule "add_zero_right" (formula "14") (term "1,0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "true_left" (formula "14"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1,1,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                        (rule "applyEq" (formula "14") (term "0,0,1,0") (ifseqformula "15"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "true_left" (formula "14"))
                        (rule "seqGetAlphaCast" (formula "16") (term "0,1"))
                        (rule "castedGetAny" (formula "16") (term "0"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "commute_and" (formula "20") (term "0,0,1,0"))
                        (rule "commute_and" (formula "20") (term "1,0,1,0"))
                        (rule "commute_and" (formula "21") (term "1,0,1,0"))
                        (rule "commute_and" (formula "21") (term "0,0,1,0"))
                        (rule "ifthenelse_split" (formula "12") (term "1,1,0,0"))
                        (branch "self.index >= 1 TRUE"
                           (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "12"))
                           (rule "leq_literals" (formula "9") (term "0"))
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "true_left" (formula "9"))
                           (rule "commute_or" (formula "23") (term "0,0"))
                           (rule "commute_or" (formula "25") (term "0,0"))
                           (rule "commute_and_2" (formula "22") (term "0"))
                           (rule "shift_paren_or" (formula "24") (term "0,1,0"))
                           (rule "ifthenelse_split" (formula "13") (term "1,1,0,0"))
                           (branch "self.list.size >= 1 + self.index TRUE"
                              (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "13"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "13"))
                              (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0"))
                              (rule "add_literals" (formula "10") (term "0,0"))
                              (rule "qeq_literals" (formula "10") (term "0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "true_left" (formula "10"))
                              (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "19"))
                              (rule "polySimp_rightDist" (formula "12") (term "0,0"))
                              (rule "mul_literals" (formula "12") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "12") (term "0"))
                              (rule "add_literals" (formula "12") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "12"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                              (rule "polySimp_elimOne" (formula "12") (term "0"))
                              (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "12"))
                              (rule "leq_literals" (formula "9") (term "0"))
                               (builtin "One Step Simplification" (formula "9"))
                              (rule "true_left" (formula "9"))
                              (rule "applyEq_and_gen2" (formula "10") (term "1,0,1,0"))
                              (rule "ifEqualsNull" (formula "10") (term "0,0,1,0,1,0"))
                              (rule "nnf_notOr" (formula "10") (term "0,1,0,1,0"))
                              (rule "nnf_notAnd" (formula "10") (term "0,0,1,0,1,0"))
                              (rule "nnf_notAnd" (formula "10") (term "1,0,1,0,1,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "nnf_notAnd" (formula "10") (term "0,0,0,1,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0,1,0,1,0"))
                              (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0,1,0,1,0"))
                              (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,0,1,0,1,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,0,1,0,1,0"))
                              (rule "add_zero_right" (formula "10") (term "0,0,0,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "10") (term "1,0,0,0,0,1,0,1,0"))
                              (rule "lenNonNegative" (formula "17") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "17"))
                              (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                              (rule "applyEq_and_gen2" (formula "13") (term "1,0,1,0"))
                              (rule "ifEqualsNull" (formula "13") (term "0,0,1,0,1,0"))
                              (rule "nnf_notOr" (formula "13") (term "0,1,0,1,0"))
                              (rule "nnf_notAnd" (formula "13") (term "1,0,1,0,1,0"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "nnf_notAnd" (formula "13") (term "0,0,1,0,1,0"))
                              (rule "nnf_notAnd" (formula "13") (term "0,0,0,1,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0,1,0,1,0"))
                              (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,0,1,0,1,0"))
                              (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "13") (term "1,0,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,0,1,0,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "13") (term "0,0,1,0,0,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,0,1,0,0,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,0,0,0,1,0,1,0"))
                              (rule "add_literals" (formula "13") (term "0,0,0,0,1,0,0,0,1,0,1,0"))
                              (rule "add_zero_left" (formula "13") (term "0,0,0,1,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "0,1,1,0,0,0,1,0,1,0"))
                              (rule "lenNonNegative" (formula "19") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "19"))
                              (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                              (rule "cnf_rightDist" (formula "23"))
                              (rule "andLeft" (formula "23"))
                              (rule "commute_or_2" (formula "26") (term "0,0,1,0"))
                              (rule "applyEq_and_gen2" (formula "22") (term "1,0,1,0"))
                              (rule "equalityToSeqGetAndSeqLenLeft" (formula "15") (inst "iv=iv"))
                              (rule "andLeft" (formula "15"))
                              (rule "lenOfSeqSub" (formula "15") (term "0"))
                              (rule "polySimp_elimSub" (formula "15") (term "1,0"))
                              (rule "polySimp_addComm0" (formula "15") (term "1,0"))
                              (rule "lenOfSeqSub" (formula "16") (term "1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "16") (term "1,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "16") (term "1,1,1,0,0"))
                              (rule "lenOfSeqSubEQ" (formula "15") (term "1") (ifseqformula "17"))
                              (rule "eqSymm" (formula "15"))
                              (rule "polySimp_elimSub" (formula "15") (term "1,0"))
                              (rule "polySimp_addComm0" (formula "15") (term "1,0"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "true_left" (formula "15"))
                              (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,1,1,0,0"))
                              (rule "polySimp_addComm1" (formula "15") (term "0,0,1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                              (rule "applyEq" (formula "15") (term "0,0,1,0") (ifseqformula "16"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "true_left" (formula "15"))
                              (rule "ifthenelse_split" (formula "1") (term "0"))
                              (branch "self.list.<created> = TRUE TRUE"
                                 (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "31"))
                                 (rule "closeTrue" (formula "31"))
                              )
                              (branch "self.list.<created> = TRUE FALSE"
                                 (rule "referencedObjectIsCreatedRight" (formula "28") (ifseqformula "29"))
                                 (rule "close" (formula "28") (ifseqformula "4"))
                              )
                           )
                           (branch "self.list.size >= 1 + self.index FALSE"
                              (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "inEqSimp_geqRight" (formula "26"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1"))
                              (rule "inEqSimp_antiSymm" (formula "11") (ifseqformula "1"))
                              (rule "applyEq" (formula "24") (term "1,1,0,1,1") (ifseqformula "11"))
                              (rule "applyEq" (formula "22") (term "1,1,0,0") (ifseqformula "11"))
                              (rule "applyEq" (formula "26") (term "1,1,0,0") (ifseqformula "11"))
                              (rule "applyEq" (formula "25") (term "1,1,1,0") (ifseqformula "11"))
                              (rule "applyEq" (formula "26") (term "1,1,0,0,0,1,0") (ifseqformula "11"))
                              (rule "applyEq" (formula "1") (term "0") (ifseqformula "11"))
                              (rule "inEqSimp_homoInEq0" (formula "1"))
                              (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "1,0"))
                              (rule "times_zero_1" (formula "1") (term "0"))
                              (rule "qeq_literals" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "applyEq" (formula "22") (term "1,1,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "16") (term "2,0") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "eqSymm" (formula "16"))
                              (rule "applyEq" (formula "20") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "11") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "11"))
                              (rule "polySimp_pullOutFactor1" (formula "11") (term "0"))
                              (rule "add_literals" (formula "11") (term "1,0"))
                              (rule "times_zero_1" (formula "11") (term "0"))
                              (rule "leq_literals" (formula "11"))
                              (rule "true_left" (formula "11"))
                              (rule "applyEq" (formula "13") (term "1,1,1,0,1,1,1,0,1,0") (ifseqformula "10"))
                              (rule "polySimp_pullOutFactor2b" (formula "13") (term "1,1,0,1,1,1,0,1,0"))
                              (rule "add_literals" (formula "13") (term "1,1,1,1,0,1,1,1,0,1,0"))
                              (rule "times_zero_1" (formula "13") (term "1,1,1,0,1,1,1,0,1,0"))
                              (rule "add_zero_right" (formula "13") (term "1,1,0,1,1,1,0,1,0"))
                              (rule "applyEq" (formula "17") (term "1") (ifseqformula "10"))
                              (rule "applyEq" (formula "18") (term "1") (ifseqformula "10"))
                              (rule "inEqSimp_or_tautInEq0" (formula "13") (term "0,0"))
                              (rule "add_zero_right" (formula "13") (term "1,1,0,0"))
                              (rule "qeq_literals" (formula "13") (term "1,0,0"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "true_left" (formula "13"))
                              (rule "applyEq_and_gen2" (formula "12") (term "1,0,1,0"))
                              (rule "ifEqualsNull" (formula "12") (term "0,0,1,0,1,0"))
                              (rule "nnf_notOr" (formula "12") (term "0,1,0,1,0"))
                              (rule "nnf_notAnd" (formula "12") (term "1,0,1,0,1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "nnf_notAnd" (formula "12") (term "0,0,1,0,1,0"))
                              (rule "nnf_notAnd" (formula "12") (term "0,0,0,1,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,1,0,1,0"))
                              (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,1,0,1,0"))
                              (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,0,1,0,1,0"))
                              (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "12") (term "1,0,0,0,0,1,0,1,0"))
                              (rule "lenNonNegative" (formula "16") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "16"))
                              (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                              (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "11"))
                              (rule "leq_literals" (formula "16") (term "0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "true_left" (formula "16"))
                              (rule "lenNonNegative" (formula "17") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "17"))
                              (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                              (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "11"))
                              (rule "leq_literals" (formula "17") (term "0"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "true_left" (formula "17"))
                              (rule "seqGetAlphaCast" (formula "20") (term "0,1,0,1"))
                              (rule "castedGetAny" (formula "20") (term "0"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "true_left" (formula "20"))
                              (rule "commute_and_2" (formula "20") (term "0,0,0,1"))
                              (rule "applyEq_and_gen2" (formula "19") (term "1,0,1,0"))
                              (rule "commute_or_2" (formula "22") (term "0,0,1,0"))
                              (rule "ifthenelse_split" (formula "1") (term "0"))
                              (branch "self.list.<created> = TRUE TRUE"
                                 (rule "applyEqReverse" (formula "27") (term "0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "closeTrue" (formula "27"))
                              )
                              (branch "self.list.<created> = TRUE FALSE"
                                 (rule "referencedObjectIsCreatedRight" (formula "24") (ifseqformula "25"))
                                 (rule "close" (formula "24") (ifseqformula "4"))
                              )
                           )
                        )
                        (branch "self.index >= 1 FALSE"
                           (rule "inEqSimp_geqRight" (formula "26"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "1"))
                           (rule "leq_literals" (formula "11") (term "0"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "true_left" (formula "11"))
                           (rule "inEqSimp_antiSymm" (formula "10") (ifseqformula "1"))
                           (rule "applyEq" (formula "17") (term "1,1,0") (ifseqformula "10"))
                           (rule "add_zero_right" (formula "17") (term "1,0"))
                           (rule "applyEq" (formula "15") (term "2,0") (ifseqformula "10"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "eqSymm" (formula "15"))
                           (rule "applyEq" (formula "14") (term "1,1,0,1,1,0,0") (ifseqformula "10"))
                           (rule "add_literals" (formula "14") (term "1,0,1,1,0,0"))
                           (rule "applyEq" (formula "17") (term "1,0,1") (ifseqformula "10"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "10"))
                           (rule "leq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "9"))
                           (rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
                           (rule "qeq_literals" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "applyEq" (formula "10") (term "1") (ifseqformula "9"))
                           (rule "applyEq" (formula "11") (term "1,1,1,0,1,1,1,0,1,0") (ifseqformula "9"))
                           (rule "add_zero_right" (formula "11") (term "1,1,0,1,1,1,0,1,0"))
                           (rule "applyEq" (formula "12") (term "0,0,1,1,1,0,0") (ifseqformula "9"))
                           (rule "mul_literals" (formula "12") (term "0,1,1,1,0,0"))
                           (rule "add_zero_left" (formula "12") (term "1,1,1,0,0"))
                           (rule "applyEq" (formula "12") (term "0,1,0,1,1,0,1,1,1,0,1,0") (ifseqformula "9"))
                           (rule "mul_literals" (formula "12") (term "1,0,1,1,0,1,1,1,0,1,0"))
                           (rule "add_zero_right" (formula "12") (term "0,1,1,0,1,1,1,0,1,0"))
                           (rule "applyEq" (formula "12") (term "0,1,1,1,1,1,0,1,0") (ifseqformula "9"))
                           (rule "add_zero_left" (formula "12") (term "1,1,1,1,1,0,1,0"))
                           (rule "inEqSimp_or_tautInEq0" (formula "11") (term "0,0"))
                           (rule "add_zero_right" (formula "11") (term "1,1,0,0"))
                           (rule "qeq_literals" (formula "11") (term "1,0,0"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "true_left" (formula "11"))
                           (rule "commute_or" (formula "21") (term "0,0"))
                           (rule "commute_or" (formula "23") (term "0,0"))
                           (rule "commute_and_2" (formula "20") (term "0"))
                           (rule "shift_paren_or" (formula "22") (term "0,1,0"))
                           (rule "lenNonNegative" (formula "15") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "15"))
                           (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                           (rule "lenNonNegative" (formula "16") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "16"))
                           (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                           (rule "seqGetAlphaCast" (formula "20") (term "0,1,0,1"))
                           (rule "castedGetAny" (formula "20") (term "0"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "commute_and_2" (formula "20") (term "0,0,0,1"))
                           (rule "applyEq_and_gen2" (formula "19") (term "1,0,1,0"))
                           (rule "seqGetAlphaCast" (formula "20") (term "0,1,1"))
                           (rule "castedGetAny" (formula "20") (term "0"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "cnf_rightDist" (formula "20"))
                           (rule "andLeft" (formula "20"))
                           (rule "cnf_rightDist" (formula "21"))
                           (rule "andLeft" (formula "21"))
                           (rule "cnf_rightDist" (formula "21"))
                           (rule "andLeft" (formula "21"))
                           (rule "commute_or" (formula "21"))
                           (rule "commute_or_2" (formula "25") (term "0,0,1,0"))
                           (rule "cnf_rightDist" (formula "20"))
                           (rule "andLeft" (formula "20"))
                           (rule "cnf_rightDist" (formula "21"))
                           (rule "andLeft" (formula "21"))
                           (rule "cnf_rightDist" (formula "21"))
                           (rule "andLeft" (formula "21"))
                           (rule "commute_or" (formula "21"))
                           (rule "commute_and_2" (formula "20") (term "1"))
                           (rule "applyEq_and_gen2" (formula "11") (term "1,0,1,0"))
                           (rule "ifEqualsNull" (formula "11") (term "0,0,1,0,1,0"))
                           (rule "nnf_notOr" (formula "11") (term "0,1,0,1,0"))
                           (rule "nnf_notAnd" (formula "11") (term "0,0,1,0,1,0"))
                           (rule "nnf_notAnd" (formula "11") (term "1,0,1,0,1,0"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "nnf_notAnd" (formula "11") (term "0,0,0,1,0,1,0"))
                           (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0,1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0,1,0,1,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0,1,0,1,0"))
                           (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0,1,0,1,0"))
                           (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,0,1,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0,1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0,1,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0,1,0"))
                           (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0,1,0,1,0"))
                           (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,0,1,0,1,0"))
                           (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,0,1,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,1,0,1,0"))
                           (rule "mul_literals" (formula "11") (term "1,0,0,0,0,1,0,1,0"))
                           (rule "ifthenelse_split" (formula "1") (term "0"))
                           (branch "self.list.<created> = TRUE TRUE"
                              (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "33"))
                              (rule "closeTrue" (formula "33"))
                           )
                           (branch "self.list.<created> = TRUE FALSE"
                              (rule "referencedObjectIsCreatedRight" (formula "30") (ifseqformula "31"))
                              (rule "close" (formula "30") (ifseqformula "4"))
                           )
                        )
                     )
                  )
                  (branch "(_ov_0, _fv_0) in {(self.list, LinkedList::$tail)}"
                     (rule "eqSymm" (formula "9"))
                     (rule "elementOfSingleton" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "applyEq" (formula "10") (term "1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "10") (term "1,1") (ifseqformula "1"))
                     (rule "applyEqRigid" (formula "10") (term "2,1") (ifseqformula "2"))
                     (rule "narrowSelectType" (formula "10") (term "1") (ifseqformula "3"))
                     (rule "applyEqRigid" (formula "10") (term "2,0") (ifseqformula "2"))
                     (rule "pullOutSelect" (formula "10") (term "0") (inst "selectSK=LinkedList_tail_0"))
                     (rule "simplifySelectOfAnon" (formula "1"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "narrowSelectType" (formula "1") (term "1,0") (ifseqformula "5"))
                     (rule "narrowSelectType" (formula "1") (term "2,0") (ifseqformula "4"))
                     (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                     (rule "Class_invariant_axiom_for_LinkedListIterator" (formula "9") (inst "i=i") (inst "f=f") (inst "i_0=i_0") (inst "f_0=f_0"))
                     (rule "andLeft" (formula "9"))
                     (rule "notLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "eqSymm" (formula "15") (term "1"))
                     (rule "eqSymm" (formula "14"))
                     (rule "eqSymm" (formula "13"))
                     (rule "replace_known_right" (formula "1") (term "0,0,1,0,0") (ifseqformula "17"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "castedGetAny" (formula "15") (term "0,1"))
                     (rule "lenOfSeqSubEQ" (formula "11") (term "1,1,0,0") (ifseqformula "13"))
                     (rule "polySimp_elimSub" (formula "11") (term "1,1,1,0,0"))
                     (rule "times_zero_2" (formula "11") (term "1,1,1,1,0,0"))
                     (rule "add_zero_right" (formula "11") (term "1,1,1,0,0"))
                     (rule "lenOfSeqSubEQ" (formula "12") (term "1,1,0,0") (ifseqformula "14"))
                     (rule "polySimp_elimSub" (formula "12") (term "1,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "12") (term "1,1,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "15") (term "0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "15") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,1,0,0"))
                     (rule "add_zero_right" (formula "11") (term "0,0,1,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,1,0,0"))
                     (rule "polySimp_addComm1" (formula "12") (term "0,0,1,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "10"))
                     (rule "inEqSimp_commuteLeq" (formula "9"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0,1,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,1,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0,0,1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "0,0,1,1,1,0,0"))
                     (rule "getOfSeqSubEQ" (formula "12") (term "1,0,1,0,1,0") (ifseqformula "14"))
                     (rule "castDel" (formula "12") (term "2,1,0,1,0,1,0"))
                     (rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_addComm0" (formula "12") (term "1,1,1,0,1,0,1,0"))
                     (rule "polySimp_addComm0" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,1,0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulAssoc" (formula "12") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,0,0,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,1,0,1,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1,0,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "0,1,1,0,1,0,1,0,1,0"))
                     (rule "mul_literals" (formula "12") (term "0,0,1,1,0,1,0,1,0,1,0"))
                     (rule "getOfSeqSubEQ" (formula "11") (term "1,0,1,0,1,0") (ifseqformula "13"))
                     (rule "castDel" (formula "11") (term "2,1,0,1,0,1,0"))
                     (rule "add_zero_right" (formula "11") (term "1,1,1,0,1,0,1,0"))
                     (rule "polySimp_elimSub" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
                     (rule "times_zero_2" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
                     (rule "add_zero_right" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,1,0,1,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,1,0,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
                     (rule "nnf_imp2or" (formula "12") (term "0"))
                     (rule "nnf_imp2or" (formula "11") (term "0"))
                     (rule "nnf_notAnd" (formula "12") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                     (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                     (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "11") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                     (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                     (rule "Class_invariant_axiom_for_LinkedList" (formula "16") (inst "i=i") (inst "i_0=i_0") (inst "j=j") (inst "i_1=i_1") (inst "i_2=i_2") (inst "f=f") (inst "i_3=i_3") (inst "n=n"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "translateJavaSubInt" (formula "16") (term "1,1,0,0,1,0,0"))
                     (rule "translateJavaSubInt" (formula "16") (term "1,0,1,1,1,1,0,0,0"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "eqSymm" (formula "23") (term "1,1,0,1,0"))
                     (rule "eqSymm" (formula "23") (term "0,1,0,1,0"))
                     (rule "eqSymm" (formula "22") (term "1,0"))
                     (rule "eqSymm" (formula "21") (term "1,0,1"))
                     (rule "eqSymm" (formula "21") (term "1,1"))
                     (rule "eqSymm" (formula "17"))
                     (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "22") (term "1,1,1,0,0"))
                     (rule "polySimp_elimSub" (formula "21") (term "1,0,0,1,1"))
                     (rule "mul_literals" (formula "21") (term "1,1,0,0,1,1"))
                     (rule "polySimp_addComm0" (formula "22") (term "1,0,0,1,0"))
                     (rule "polySimp_addComm0" (formula "22") (term "1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "21") (term "1,0,0,1,1"))
                     (rule "castedGetAny" (formula "24") (term "1,1,1,0"))
                     (rule "castedGetAny" (formula "23") (term "1,0,1,0,1,0"))
                     (rule "castedGetAny" (formula "23") (term "0,0,1,0,1,0"))
                     (rule "castedGetAny" (formula "22") (term "1,1,1,0"))
                     (rule "castedGetAny" (formula "21") (term "0,1,0,1"))
                     (rule "castedGetAny" (formula "22") (term "0,1,0"))
                     (rule "eqSymm" (formula "22") (term "1,0"))
                     (rule "castedGetAny" (formula "21") (term "0,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                     (rule "applyEq" (formula "21") (term "1,1,0,1,1") (ifseqformula "16"))
                     (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "17"))
                     (rule "applyEq" (formula "14") (term "2,0") (ifseqformula "17"))
                     (rule "applyEq" (formula "12") (term "1,1,1,1,0,0") (ifseqformula "17"))
                     (rule "applyEq" (formula "12") (term "0,0,1,1,0,0") (ifseqformula "17"))
                     (rule "applyEq" (formula "10") (term "0") (ifseqformula "17"))
                     (rule "applyEq" (formula "18") (term "0") (ifseqformula "16"))
                     (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                     (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                     (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "12") (term "1,1,1,0,1,0,1,0,1,0") (ifseqformula "17"))
                     (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "17") (term "1") (ifseqformula "16"))
                     (rule "applyEq" (formula "14") (term "2,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "12") (term "1,1,1,1,0,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "12") (term "0,0,1,1,0,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "10") (term "0") (ifseqformula "16"))
                     (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "12") (term "1,1,1,0,1,0,1,0,1,0") (ifseqformula "16"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0"))
                     (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                     (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "18"))
                     (rule "polySimp_mulComm0" (formula "10") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "10") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                     (rule "polySimp_elimOne" (formula "10") (term "0"))
                     (rule "nnf_imp2or" (formula "24") (term "1,0,1,0"))
                     (rule "nnf_imp2or" (formula "23") (term "0"))
                     (rule "nnf_imp2or" (formula "20") (term "0"))
                     (rule "nnf_imp2or" (formula "21") (term "0"))
                     (rule "nnf_imp2or" (formula "25") (term "0"))
                     (rule "nnf_imp2or" (formula "24") (term "0"))
                     (rule "JML_represents_clause_for_LinkedList_footprint" (formula "1") (term "2,1,0,0,0,0") (inst "i=i"))
                     (rule "castedGetAny" (formula "1") (term "0,1,0,1,2,1,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,2,1,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,1,2,1,0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1,2,1,0,0,0,0"))
                     (rule "applyEq" (formula "1") (term "0,1,0,0,1,0,0,1,2,1,0,0,0,0") (ifseqformula "17"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,2,1,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,2,1,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,2,1,0,0,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,2,1,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,2,1,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,2,1,0,0,0,0"))
                     (rule "elementOfUnion" (formula "1") (term "1,0,0,0,0"))
                     (rule "elementOfInfiniteUnion" (formula "1") (term "1,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "eqSymm" (formula "1") (term "1,0,1,1,0,0,0,0"))
                     (rule "sortsDisjointModuloNull" (formula "1") (term "1,0,1,1,0,0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "1,1,0,1,1,0,0,0,0") (ifseqformula "26"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfUnion" (formula "1") (term "1,0,0,0,0"))
                     (rule "elementOfSingleton" (formula "1") (term "1,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfUnion" (formula "1") (term "1,0,0,0,0"))
                     (rule "elementOfSingleton" (formula "1") (term "1,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfUnion" (formula "1") (term "1,0,0,0,0"))
                     (rule "elementOfSingleton" (formula "1") (term "1,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "ifthenelse_negated" (formula "1") (term "0"))
                     (rule "nnf_notAnd" (formula "23") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                     (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                     (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "20") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                     (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                     (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "21") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                     (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                     (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "25") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                     (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                     (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "24") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                     (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                     (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                     (rule "nnf_imp2or" (formula "24") (term "0,1,0"))
                     (rule "nnf_notAnd" (formula "24") (term "0,0,1,0"))
                     (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,1,0"))
                     (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,1,0"))
                     (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,1,0"))
                     (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,1,0"))
                     (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,1,0"))
                     (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1,0"))
                     (rule "mul_literals" (formula "24") (term "1,0,0,0,1,0"))
                     (rule "commute_and" (formula "22") (term "0,0"))
                     (rule "commute_and" (formula "13") (term "0,0,1,0"))
                     (rule "commute_and" (formula "12") (term "1,0,1,0"))
                     (rule "commute_and" (formula "12") (term "0,0,1,0"))
                     (rule "commute_and" (formula "22") (term "0,0,0,0,1"))
                     (rule "commute_or_2" (formula "23") (term "0"))
                     (rule "commute_and" (formula "13") (term "1,0,1,0"))
                     (rule "equalityToSeqGetAndSeqLenLeft" (formula "14") (inst "iv=iv"))
                     (rule "andLeft" (formula "14"))
                     (rule "lenOfSeqSub" (formula "15") (term "1,1,0,0"))
                     (rule "polySimp_elimSub" (formula "15") (term "1,1,1,0,0"))
                     (rule "times_zero_2" (formula "15") (term "1,1,1,1,0,0"))
                     (rule "add_zero_right" (formula "15") (term "1,1,1,0,0"))
                     (rule "lenOfSeqSubEQ" (formula "14") (term "1") (ifseqformula "16"))
                     (rule "eqSymm" (formula "14"))
                     (rule "polySimp_elimSub" (formula "14") (term "1,0"))
                     (rule "times_zero_2" (formula "14") (term "1,1,0"))
                     (rule "add_zero_right" (formula "14") (term "1,0"))
                     (rule "lenOfSeqSub" (formula "14") (term "1"))
                     (rule "eqSymm" (formula "14"))
                     (rule "polySimp_elimSub" (formula "14") (term "1,0"))
                     (rule "times_zero_2" (formula "14") (term "1,1,0"))
                     (rule "add_zero_right" (formula "14") (term "1,0"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "true_left" (formula "14"))
                     (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1,1,0,0"))
                     (rule "add_zero_right" (formula "14") (term "0,0,1,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                     (rule "applyEq" (formula "14") (term "0,0,1,0") (ifseqformula "15"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "true_left" (formula "14"))
                     (rule "commute_or_2" (formula "25") (term "0"))
                     (rule "seqGetAlphaCast" (formula "16") (term "0,1"))
                     (rule "castedGetAny" (formula "16") (term "0"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "commute_and" (formula "20") (term "0,0,1,0"))
                     (rule "commute_and" (formula "20") (term "1,0,1,0"))
                     (rule "commute_and" (formula "21") (term "1,0,1,0"))
                     (rule "commute_and" (formula "21") (term "0,0,1,0"))
                     (rule "ifthenelse_split" (formula "12") (term "1,1,0,0"))
                     (branch "self.index >= 1 TRUE"
                        (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "12"))
                        (rule "leq_literals" (formula "9") (term "0"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "true_left" (formula "9"))
                        (rule "commute_or" (formula "23") (term "0,0"))
                        (rule "commute_and_2" (formula "22") (term "0"))
                        (rule "commute_or" (formula "25") (term "0,0"))
                        (rule "shift_paren_or" (formula "24") (term "0,1,0"))
                        (rule "ifthenelse_split" (formula "13") (term "1,1,0,0"))
                        (branch "self.list.size >= 1 + self.index TRUE"
                           (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "13"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "13"))
                           (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
                           (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
                           (rule "add_literals" (formula "10") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "10") (term "1,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0"))
                           (rule "qeq_literals" (formula "10") (term "0"))
                            (builtin "One Step Simplification" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "19"))
                           (rule "polySimp_rightDist" (formula "12") (term "0,0"))
                           (rule "mul_literals" (formula "12") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "12") (term "0"))
                           (rule "add_literals" (formula "12") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "12"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                           (rule "polySimp_elimOne" (formula "12") (term "0"))
                           (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "12"))
                           (rule "leq_literals" (formula "9") (term "0"))
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "true_left" (formula "9"))
                           (rule "applyEq_and_gen2" (formula "10") (term "1,0,1,0"))
                           (rule "ifEqualsNull" (formula "10") (term "0,0,1,0,1,0"))
                           (rule "nnf_notOr" (formula "10") (term "0,1,0,1,0"))
                           (rule "nnf_notAnd" (formula "10") (term "1,0,1,0,1,0"))
                            (builtin "One Step Simplification" (formula "10"))
                           (rule "nnf_notAnd" (formula "10") (term "0,0,1,0,1,0"))
                           (rule "nnf_notAnd" (formula "10") (term "0,0,0,1,0,1,0"))
                           (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,0,1,0,1,0"))
                           (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,0,1,0,1,0"))
                           (rule "add_zero_right" (formula "10") (term "0,0,0,0,0,0,1,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,1,0,1,0"))
                           (rule "mul_literals" (formula "10") (term "1,0,0,0,0,1,0,1,0"))
                           (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0,1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0,1,0,1,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0,1,0,1,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0,1,0,1,0"))
                           (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,0,1,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0,1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,1,0,1,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,1,0,1,0"))
                           (rule "applyEq_and_gen2" (formula "13") (term "1,0,1,0"))
                           (rule "ifEqualsNull" (formula "13") (term "0,0,1,0,1,0"))
                           (rule "nnf_notOr" (formula "13") (term "0,1,0,1,0"))
                           (rule "nnf_notAnd" (formula "13") (term "0,0,1,0,1,0"))
                           (rule "nnf_notAnd" (formula "13") (term "1,0,1,0,1,0"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "nnf_notAnd" (formula "13") (term "0,0,0,1,0,1,0"))
                           (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0,1,0,1,0"))
                           (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,0,1,0,1,0"))
                           (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,0,1,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,1,0,1,0"))
                           (rule "mul_literals" (formula "13") (term "1,0,0,0,0,1,0,1,0"))
                           (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0,1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0,1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
                           (rule "mul_literals" (formula "13") (term "0,0,1,0,0,1,0,0,0,1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,0,1,0,0,0,1,0,1,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,0,1,0,0,1,0,0,0,1,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,1,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,0,0,0,1,0,1,0"))
                           (rule "add_literals" (formula "13") (term "0,0,0,0,1,0,0,0,1,0,1,0"))
                           (rule "add_zero_left" (formula "13") (term "0,0,0,1,0,0,0,1,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0,1,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0,1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0,1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0,1,0,1,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0,1,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "0,1,1,0,0,0,1,0,1,0"))
                           (rule "lenNonNegative" (formula "17") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "17"))
                           (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                           (rule "cnf_rightDist" (formula "23"))
                           (rule "andLeft" (formula "23"))
                           (rule "lenNonNegative" (formula "19") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "19"))
                           (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                           (rule "commute_or_2" (formula "26") (term "0,0,1,0"))
                           (rule "applyEq_and_gen2" (formula "22") (term "1,0,1,0"))
                           (rule "equalityToSeqGetAndSeqLenLeft" (formula "15") (inst "iv=iv"))
                           (rule "andLeft" (formula "15"))
                           (rule "lenOfSeqSub" (formula "15") (term "0"))
                           (rule "polySimp_elimSub" (formula "15") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "15") (term "1,0"))
                           (rule "lenOfSeqSub" (formula "16") (term "1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "16") (term "1,1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "16") (term "1,1,1,0,0"))
                           (rule "lenOfSeqSubEQ" (formula "15") (term "1") (ifseqformula "17"))
                           (rule "eqSymm" (formula "15"))
                           (rule "polySimp_elimSub" (formula "15") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "15") (term "1,0"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "true_left" (formula "15"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,1,1,0,0"))
                           (rule "polySimp_addComm1" (formula "15") (term "0,0,1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                           (rule "applyEq" (formula "15") (term "0,0,1,0") (ifseqformula "16"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "true_left" (formula "15"))
                           (rule "cnf_rightDist" (formula "24"))
                           (rule "andLeft" (formula "24"))
                           (rule "ifthenelse_split" (formula "1") (term "0"))
                           (branch "self.list.<created> = TRUE TRUE"
                              (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "closeTrue" (formula "32"))
                           )
                           (branch "self.list.<created> = TRUE FALSE"
                              (rule "referencedObjectIsCreatedRight" (formula "29") (ifseqformula "30"))
                              (rule "close" (formula "29") (ifseqformula "4"))
                           )
                        )
                        (branch "self.list.size >= 1 + self.index FALSE"
                           (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "inEqSimp_geqRight" (formula "26"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1"))
                           (rule "inEqSimp_antiSymm" (formula "11") (ifseqformula "1"))
                           (rule "applyEq" (formula "26") (term "1,1,0,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "25") (term "1,1,1,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "22") (term "1,1,0,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "26") (term "1,1,0,0,0,1,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "12") (term "0") (ifseqformula "11"))
                           (rule "inEqSimp_homoInEq1" (formula "12"))
                           (rule "polySimp_pullOutFactor1" (formula "12") (term "0"))
                           (rule "add_literals" (formula "12") (term "1,0"))
                           (rule "times_zero_1" (formula "12") (term "0"))
                           (rule "leq_literals" (formula "12"))
                           (rule "true_left" (formula "12"))
                           (rule "applyEq" (formula "26") (term "1,1,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "11"))
                           (rule "inEqSimp_homoInEq0" (formula "1"))
                           (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,0"))
                           (rule "times_zero_1" (formula "1") (term "0"))
                           (rule "qeq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyEq" (formula "21") (term "1,1,0,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "19") (term "0") (ifseqformula "10"))
                           (rule "applyEq" (formula "15") (term "2,0") (ifseqformula "10"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "eqSymm" (formula "15"))
                           (rule "applyEq" (formula "21") (term "1,1,0,1,1") (ifseqformula "10"))
                           (rule "applyEq" (formula "13") (term "1,1,1,0,1,1,1,0,1,0") (ifseqformula "10"))
                           (rule "polySimp_pullOutFactor2b" (formula "13") (term "1,1,0,1,1,1,0,1,0"))
                           (rule "add_literals" (formula "13") (term "1,1,1,1,0,1,1,1,0,1,0"))
                           (rule "times_zero_1" (formula "13") (term "1,1,1,0,1,1,1,0,1,0"))
                           (rule "add_zero_right" (formula "13") (term "1,1,0,1,1,1,0,1,0"))
                           (rule "applyEq" (formula "18") (term "1") (ifseqformula "10"))
                           (rule "applyEq" (formula "17") (term "1") (ifseqformula "10"))
                           (rule "inEqSimp_or_tautInEq0" (formula "13") (term "0,0"))
                           (rule "add_zero_right" (formula "13") (term "1,1,0,0"))
                           (rule "qeq_literals" (formula "13") (term "1,0,0"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "true_left" (formula "13"))
                           (rule "applyEq_and_gen2" (formula "12") (term "1,0,1,0"))
                           (rule "ifEqualsNull" (formula "12") (term "0,0,1,0,1,0"))
                           (rule "nnf_notOr" (formula "12") (term "0,1,0,1,0"))
                           (rule "nnf_notAnd" (formula "12") (term "1,0,1,0,1,0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "nnf_notAnd" (formula "12") (term "0,0,1,0,1,0"))
                           (rule "nnf_notAnd" (formula "12") (term "0,0,0,1,0,1,0"))
                           (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,1,0,1,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,1,0,1,0"))
                           (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,1,0,1,0"))
                           (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,1,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,1,0,1,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,1,0,1,0"))
                           (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0,1,0,1,0"))
                           (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0,1,0,1,0"))
                           (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,0,1,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,1,0,1,0"))
                           (rule "mul_literals" (formula "12") (term "1,0,0,0,0,1,0,1,0"))
                           (rule "lenNonNegative" (formula "16") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "16"))
                           (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                           (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "11"))
                           (rule "leq_literals" (formula "16") (term "0"))
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "lenNonNegative" (formula "17") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "17"))
                           (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                           (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "11"))
                           (rule "leq_literals" (formula "17") (term "0"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "true_left" (formula "17"))
                           (rule "commute_and_2" (formula "20") (term "0,0,0,1"))
                           (rule "seqGetAlphaCast" (formula "20") (term "0,1,0,1"))
                           (rule "castedGetAny" (formula "20") (term "0"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "applyEq_and_gen2" (formula "19") (term "1,0,1,0"))
                           (rule "commute_or_2" (formula "22") (term "0,0,1,0"))
                           (rule "ifthenelse_split" (formula "1") (term "0"))
                           (branch "self.list.<created> = TRUE TRUE"
                              (rule "applyEqReverse" (formula "27") (term "0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "closeTrue" (formula "27"))
                           )
                           (branch "self.list.<created> = TRUE FALSE"
                              (rule "referencedObjectIsCreatedRight" (formula "24") (ifseqformula "25"))
                              (rule "close" (formula "24") (ifseqformula "4"))
                           )
                        )
                     )
                     (branch "self.index >= 1 FALSE"
                        (rule "inEqSimp_geqRight" (formula "26"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "1"))
                        (rule "leq_literals" (formula "11") (term "0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "inEqSimp_antiSymm" (formula "10") (ifseqformula "1"))
                        (rule "applyEq" (formula "14") (term "1,1,0,1,1,0,0") (ifseqformula "10"))
                        (rule "add_zero_right" (formula "14") (term "1,0,1,1,0,0"))
                        (rule "applyEq" (formula "1") (term "0") (ifseqformula "10"))
                        (rule "leq_literals" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "applyEq" (formula "16") (term "1,1,0") (ifseqformula "9"))
                        (rule "add_zero_right" (formula "16") (term "1,0"))
                        (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "9"))
                        (rule "applyEq" (formula "16") (term "1,0,1") (ifseqformula "9"))
                        (rule "applyEq" (formula "11") (term "1") (ifseqformula "9"))
                        (rule "applyEq" (formula "14") (term "2,0") (ifseqformula "9"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "eqSymm" (formula "14"))
                        (rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
                        (rule "qeq_literals" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "applyEq" (formula "12") (term "0,0,1,1,1,0,0") (ifseqformula "9"))
                        (rule "mul_literals" (formula "12") (term "0,1,1,1,0,0"))
                        (rule "add_zero_left" (formula "12") (term "1,1,1,0,0"))
                        (rule "applyEq" (formula "11") (term "1,1,1,0,1,1,1,0,1,0") (ifseqformula "9"))
                        (rule "add_zero_right" (formula "11") (term "1,1,0,1,1,1,0,1,0"))
                        (rule "applyEq" (formula "12") (term "0,1,0,1,1,0,1,1,1,0,1,0") (ifseqformula "9"))
                        (rule "mul_literals" (formula "12") (term "1,0,1,1,0,1,1,1,0,1,0"))
                        (rule "add_zero_right" (formula "12") (term "0,1,1,0,1,1,1,0,1,0"))
                        (rule "applyEq" (formula "12") (term "0,1,1,1,1,1,0,1,0") (ifseqformula "9"))
                        (rule "add_zero_left" (formula "12") (term "1,1,1,1,1,0,1,0"))
                        (rule "inEqSimp_or_tautInEq0" (formula "11") (term "0,0"))
                        (rule "add_zero_right" (formula "11") (term "1,1,0,0"))
                        (rule "qeq_literals" (formula "11") (term "1,0,0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "commute_or" (formula "21") (term "0,0"))
                        (rule "commute_and_2" (formula "20") (term "0"))
                        (rule "commute_or" (formula "23") (term "0,0"))
                        (rule "shift_paren_or" (formula "22") (term "0,1,0"))
                        (rule "lenNonNegative" (formula "15") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "15"))
                        (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                        (rule "lenNonNegative" (formula "16") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "16"))
                        (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                        (rule "commute_and_2" (formula "20") (term "0,0,0,1"))
                        (rule "seqGetAlphaCast" (formula "20") (term "0,1,0,1"))
                        (rule "castedGetAny" (formula "20") (term "0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "applyEq_and_gen2" (formula "19") (term "1,0,1,0"))
                        (rule "seqGetAlphaCast" (formula "20") (term "0,1,1"))
                        (rule "castedGetAny" (formula "20") (term "0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "cnf_rightDist" (formula "20"))
                        (rule "andLeft" (formula "20"))
                        (rule "cnf_rightDist" (formula "21"))
                        (rule "andLeft" (formula "21"))
                        (rule "cnf_rightDist" (formula "21"))
                        (rule "andLeft" (formula "21"))
                        (rule "commute_or" (formula "21"))
                        (rule "commute_or_2" (formula "25") (term "0,0,1,0"))
                        (rule "cnf_rightDist" (formula "20"))
                        (rule "andLeft" (formula "20"))
                        (rule "cnf_rightDist" (formula "21"))
                        (rule "andLeft" (formula "21"))
                        (rule "cnf_rightDist" (formula "21"))
                        (rule "andLeft" (formula "21"))
                        (rule "commute_or" (formula "21"))
                        (rule "commute_and_2" (formula "20") (term "1"))
                        (rule "applyEq_and_gen2" (formula "11") (term "1,0,1,0"))
                        (rule "ifEqualsNull" (formula "11") (term "0,0,1,0,1,0"))
                        (rule "nnf_notOr" (formula "11") (term "0,1,0,1,0"))
                        (rule "nnf_notAnd" (formula "11") (term "0,0,1,0,1,0"))
                        (rule "nnf_notAnd" (formula "11") (term "1,0,1,0,1,0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "nnf_notAnd" (formula "11") (term "0,0,0,1,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0,1,0,1,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0,1,0,1,0"))
                        (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0,1,0,1,0"))
                        (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,0,1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0,1,0,1,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,0,1,0,1,0"))
                        (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,0,1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,1,0,1,0"))
                        (rule "mul_literals" (formula "11") (term "1,0,0,0,0,1,0,1,0"))
                        (rule "ifthenelse_split" (formula "1") (term "0"))
                        (branch "self.list.<created> = TRUE TRUE"
                           (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "closeTrue" (formula "33"))
                        )
                        (branch "self.list.<created> = TRUE FALSE"
                           (rule "referencedObjectIsCreatedRight" (formula "30") (ifseqformula "31"))
                           (rule "close" (formula "30") (ifseqformula "4"))
                        )
                     )
                  )
               )
               (branch "(_ov_0, _fv_0) in {(self.list, LinkedList::$nodeList)}"
                  (rule "eqSymm" (formula "9"))
                  (rule "elementOfSingleton" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "applyEqRigid" (formula "10") (term "2,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "10") (term "1,1") (ifseqformula "1"))
                  (rule "applyEqRigid" (formula "10") (term "2,1") (ifseqformula "2"))
                  (rule "narrowSelectType" (formula "10") (term "1") (ifseqformula "3"))
                  (rule "applyEq" (formula "10") (term "1,0") (ifseqformula "1"))
                  (rule "pullOutSelect" (formula "10") (term "0") (inst "selectSK=LinkedList_nodeList_0"))
                  (rule "simplifySelectOfAnon" (formula "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "narrowSelectType" (formula "1") (term "1,0") (ifseqformula "5"))
                  (rule "narrowSelectType" (formula "1") (term "2,0") (ifseqformula "4"))
                  (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                  (rule "Class_invariant_axiom_for_LinkedListIterator" (formula "9") (inst "i=i") (inst "f=f") (inst "i_0=i_0") (inst "f_0=f_0"))
                  (rule "andLeft" (formula "9"))
                  (rule "notLeft" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "eqSymm" (formula "15") (term "1"))
                  (rule "eqSymm" (formula "14"))
                  (rule "eqSymm" (formula "13"))
                  (rule "replace_known_right" (formula "1") (term "0,0,1,0,0") (ifseqformula "17"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "castedGetAny" (formula "15") (term "0,1"))
                  (rule "lenOfSeqSubEQ" (formula "12") (term "1,1,0,0") (ifseqformula "14"))
                  (rule "polySimp_elimSub" (formula "12") (term "1,1,1,0,0"))
                  (rule "polySimp_addComm0" (formula "12") (term "1,1,1,0,0"))
                  (rule "lenOfSeqSubEQ" (formula "11") (term "1,1,0,0") (ifseqformula "13"))
                  (rule "polySimp_elimSub" (formula "11") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,1,1,1,0,0"))
                  (rule "add_zero_right" (formula "11") (term "1,1,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "15") (term "0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "15") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,1,0,0"))
                  (rule "polySimp_addComm1" (formula "12") (term "0,0,1,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,1,0,0"))
                  (rule "add_zero_right" (formula "11") (term "0,0,1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "9"))
                  (rule "inEqSimp_commuteLeq" (formula "10"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "0,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,1,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,1,0,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "0,0,0,1,0,0,1,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0,1,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,0,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                  (rule "getOfSeqSubEQ" (formula "11") (term "1,0,1,0,1,0") (ifseqformula "13"))
                  (rule "castDel" (formula "11") (term "2,1,0,1,0,1,0"))
                  (rule "add_zero_right" (formula "11") (term "1,1,1,0,1,0,1,0"))
                  (rule "polySimp_elimSub" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
                  (rule "mul_literals" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
                  (rule "add_zero_right" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,1,0,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,1,0,1,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,1,0,1,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,1,0,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
                  (rule "getOfSeqSubEQ" (formula "12") (term "1,0,1,0,1,0") (ifseqformula "14"))
                  (rule "castDel" (formula "12") (term "2,1,0,1,0,1,0"))
                  (rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_addComm0" (formula "12") (term "1,1,1,0,1,0,1,0"))
                  (rule "polySimp_addComm0" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,1,0,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_mulAssoc" (formula "12") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,0,0,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,1,0,1,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1,0,1,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,1,0,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "0,1,1,0,1,0,1,0,1,0"))
                  (rule "mul_literals" (formula "12") (term "0,0,1,1,0,1,0,1,0,1,0"))
                  (rule "nnf_imp2or" (formula "11") (term "0"))
                  (rule "nnf_imp2or" (formula "12") (term "0"))
                  (rule "nnf_notAnd" (formula "11") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "12") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                  (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                  (rule "Class_invariant_axiom_for_LinkedList" (formula "16") (inst "i=i") (inst "i_0=i_0") (inst "j=j") (inst "i_1=i_1") (inst "i_2=i_2") (inst "f=f") (inst "i_3=i_3") (inst "n=n"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "translateJavaSubInt" (formula "16") (term "1,1,0,0,1,0,0"))
                  (rule "translateJavaSubInt" (formula "16") (term "1,0,1,1,1,1,0,0,0"))
                  (rule "andLeft" (formula "16"))
                  (rule "andLeft" (formula "16"))
                  (rule "andLeft" (formula "16"))
                  (rule "andLeft" (formula "16"))
                  (rule "andLeft" (formula "16"))
                  (rule "andLeft" (formula "16"))
                  (rule "andLeft" (formula "16"))
                  (rule "andLeft" (formula "16"))
                  (rule "eqSymm" (formula "23") (term "0,1,0,1,0"))
                  (rule "eqSymm" (formula "23") (term "1,1,0,1,0"))
                  (rule "eqSymm" (formula "22") (term "1,0"))
                  (rule "eqSymm" (formula "21") (term "1,0,1"))
                  (rule "eqSymm" (formula "21") (term "1,1"))
                  (rule "eqSymm" (formula "17"))
                  (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "22") (term "1,1,1,0,0"))
                  (rule "polySimp_elimSub" (formula "21") (term "1,0,0,1,1"))
                  (rule "mul_literals" (formula "21") (term "1,1,0,0,1,1"))
                  (rule "polySimp_addComm0" (formula "22") (term "1,0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "22") (term "1,1,0,0"))
                  (rule "polySimp_addComm0" (formula "21") (term "1,0,0,1,1"))
                  (rule "castedGetAny" (formula "24") (term "1,1,1,0"))
                  (rule "castedGetAny" (formula "23") (term "0,0,1,0,1,0"))
                  (rule "castedGetAny" (formula "23") (term "1,0,1,0,1,0"))
                  (rule "castedGetAny" (formula "22") (term "1,1,1,0"))
                  (rule "castedGetAny" (formula "21") (term "0,1,0,1"))
                  (rule "castedGetAny" (formula "22") (term "0,1,0"))
                  (rule "eqSymm" (formula "22") (term "1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                  (rule "castedGetAny" (formula "21") (term "0,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                  (rule "applyEq" (formula "14") (term "2,0") (ifseqformula "17"))
                  (rule "applyEq" (formula "10") (term "0") (ifseqformula "17"))
                  (rule "applyEq" (formula "21") (term "1,1,0,1,1") (ifseqformula "16"))
                  (rule "applyEq" (formula "12") (term "1,1,1,1,0,0") (ifseqformula "17"))
                  (rule "applyEq" (formula "18") (term "0") (ifseqformula "16"))
                  (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "17"))
                  (rule "applyEq" (formula "12") (term "0,0,1,1,0,0") (ifseqformula "17"))
                  (rule "applyEq" (formula "14") (term "2,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "12") (term "1,1,1,0,1,0,1,0,1,0") (ifseqformula "17"))
                  (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "17") (term "1") (ifseqformula "16"))
                  (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "10") (term "0") (ifseqformula "16"))
                  (rule "applyEq" (formula "12") (term "1,1,1,1,0,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "12") (term "0,0,1,1,0,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "16"))
                  (rule "apply_eq_monomials" (formula "20") (term "1,0,0,1,0,0") (ifseqformula "17"))
                  (rule "polySimp_rightDist" (formula "20") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0,0,1,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "20") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "20") (term "1,1,1,0,0,1,0,0"))
                  (rule "times_zero_1" (formula "20") (term "1,1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "20") (term "1,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                  (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                  (rule "applyEq" (formula "12") (term "1,1,1,0,1,0,1,0,1,0") (ifseqformula "16"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                  (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "18"))
                  (rule "polySimp_mulComm0" (formula "10") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "10") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                  (rule "polySimp_elimOne" (formula "10") (term "0"))
                  (rule "nnf_imp2or" (formula "24") (term "1,0,1,0"))
                  (rule "nnf_imp2or" (formula "20") (term "0"))
                  (rule "nnf_imp2or" (formula "23") (term "0"))
                  (rule "nnf_imp2or" (formula "21") (term "0"))
                  (rule "nnf_imp2or" (formula "25") (term "0"))
                  (rule "nnf_imp2or" (formula "24") (term "0"))
                  (rule "JML_represents_clause_for_LinkedListIterator_footprint" (formula "1") (term "2,0,0,0,0,0"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0,0,0"))
                  (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0,0,0"))
                  (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0,0,0"))
                  (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0,0,0"))
                  (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "20") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                  (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                  (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "23") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "21") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                  (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                  (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "25") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                  (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                  (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "24") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                  (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                  (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                  (rule "nnf_imp2or" (formula "24") (term "0,1,0"))
                  (rule "nnf_notAnd" (formula "24") (term "0,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,1,0"))
                  (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,1,0"))
                  (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,1,0"))
                  (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,1,0"))
                  (rule "add_literals" (formula "24") (term "0,0,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1,0"))
                  (rule "mul_literals" (formula "24") (term "1,0,0,0,1,0"))
                  (rule "commute_and" (formula "22") (term "0,0"))
                  (rule "commute_and" (formula "12") (term "0,0,1,0"))
                  (rule "commute_and" (formula "12") (term "1,0,1,0"))
                  (rule "commute_and" (formula "13") (term "0,0,1,0"))
                  (rule "JML_represents_clause_for_LinkedList_footprint" (formula "1") (term "2,0,0,0,0") (inst "i=i"))
                  (rule "castedGetAny" (formula "1") (term "0,1,0,1,2,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,2,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,1,2,0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1,2,0,0,0,0"))
                  (rule "applyEq" (formula "1") (term "0,1,0,0,1,0,0,1,2,0,0,0,0") (ifseqformula "17"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,2,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,2,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,2,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,2,0,0,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,2,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,2,0,0,0,0"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                  (rule "elementOfInfiniteUnion" (formula "1") (term "1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,0,1,0,0,0,0"))
                  (rule "sortsDisjointModuloNull" (formula "1") (term "1,0,1,0,0,0,0"))
                  (rule "replace_known_right" (formula "1") (term "1,1,0,1,0,0,0,0") (ifseqformula "26"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                  (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                  (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "ifthenelse_negated" (formula "1") (term "0"))
                  (rule "commute_and" (formula "22") (term "0,0,0,0,1"))
                  (rule "commute_or_2" (formula "23") (term "0"))
                  (rule "commute_and" (formula "13") (term "1,0,1,0"))
                  (rule "commute_or_2" (formula "25") (term "0"))
                  (rule "equalityToSeqGetAndSeqLenLeft" (formula "14") (inst "iv=iv"))
                  (rule "andLeft" (formula "14"))
                  (rule "lenOfSeqSub" (formula "15") (term "1,1,0,0"))
                  (rule "polySimp_elimSub" (formula "15") (term "1,1,1,0,0"))
                  (rule "times_zero_2" (formula "15") (term "1,1,1,1,0,0"))
                  (rule "add_zero_right" (formula "15") (term "1,1,1,0,0"))
                  (rule "lenOfSeqSubEQ" (formula "14") (term "1") (ifseqformula "16"))
                  (rule "eqSymm" (formula "14"))
                  (rule "polySimp_elimSub" (formula "14") (term "1,0"))
                  (rule "times_zero_2" (formula "14") (term "1,1,0"))
                  (rule "add_zero_right" (formula "14") (term "1,0"))
                  (rule "lenOfSeqSub" (formula "14") (term "1"))
                  (rule "eqSymm" (formula "14"))
                  (rule "polySimp_elimSub" (formula "14") (term "1,0"))
                  (rule "times_zero_2" (formula "14") (term "1,1,0"))
                  (rule "add_zero_right" (formula "14") (term "1,0"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1,1,0,0"))
                  (rule "add_zero_right" (formula "14") (term "0,0,1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                  (rule "applyEq" (formula "14") (term "0,0,1,0") (ifseqformula "15"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "seqGetAlphaCast" (formula "16") (term "0,1"))
                  (rule "castedGetAny" (formula "16") (term "0"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "true_left" (formula "16"))
                  (rule "commute_and" (formula "20") (term "1,0,1,0"))
                  (rule "commute_and" (formula "20") (term "0,0,1,0"))
                  (rule "commute_and" (formula "21") (term "1,0,1,0"))
                  (rule "commute_and" (formula "21") (term "0,0,1,0"))
                  (rule "ifthenelse_split" (formula "12") (term "1,1,0,0"))
                  (branch "self.index >= 1 TRUE"
                     (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "12"))
                     (rule "leq_literals" (formula "9") (term "0"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "true_left" (formula "9"))
                     (rule "commute_and_2" (formula "22") (term "0"))
                     (rule "commute_or" (formula "23") (term "0,0"))
                     (rule "commute_or" (formula "25") (term "0,0"))
                     (rule "shift_paren_or" (formula "24") (term "0,1,0"))
                     (rule "ifthenelse_split_for" (formula "16"))
                     (branch "self.list.size >= 1 + self.index TRUE"
                        (rule "replace_known_left" (formula "13") (term "0,1,1,0,0") (ifseqformula "16"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "16"))
                        (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
                        (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
                        (rule "add_literals" (formula "10") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0"))
                        (rule "qeq_literals" (formula "10") (term "0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "19"))
                        (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                        (rule "mul_literals" (formula "15") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "15"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                        (rule "polySimp_elimOne" (formula "15") (term "0"))
                        (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "15"))
                        (rule "leq_literals" (formula "9") (term "0"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "true_left" (formula "9"))
                        (rule "applyEq_and_gen2" (formula "10") (term "1,0,1,0"))
                        (rule "ifEqualsNull" (formula "10") (term "0,0,1,0,1,0"))
                        (rule "nnf_notOr" (formula "10") (term "0,1,0,1,0"))
                        (rule "nnf_notAnd" (formula "10") (term "0,0,1,0,1,0"))
                        (rule "nnf_notAnd" (formula "10") (term "1,0,1,0,1,0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "nnf_notAnd" (formula "10") (term "0,0,0,1,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,0,1,0,1,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,0,1,0,1,0"))
                        (rule "add_zero_right" (formula "10") (term "0,0,0,0,0,0,1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,1,0,1,0"))
                        (rule "mul_literals" (formula "10") (term "1,0,0,0,0,1,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0,1,0,1,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0,1,0,1,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0,1,0,1,0"))
                        (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,0,1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,1,0,1,0"))
                        (rule "lenNonNegative" (formula "17") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "17"))
                        (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                        (rule "lenNonNegative" (formula "19") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "19"))
                        (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                        (rule "cnf_rightDist" (formula "23"))
                        (rule "andLeft" (formula "23"))
                        (rule "commute_or_2" (formula "26") (term "0,0,1,0"))
                        (rule "applyEq_and_gen2" (formula "22") (term "1,0,1,0"))
                        (rule "equalityToSeqGetAndSeqLenLeft" (formula "13") (inst "iv=iv"))
                        (rule "andLeft" (formula "13"))
                        (rule "lenOfSeqSub" (formula "13") (term "0"))
                        (rule "polySimp_elimSub" (formula "13") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "13") (term "1,0"))
                        (rule "lenOfSeqSub" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "14") (term "1,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "1,1,1,0,0"))
                        (rule "lenOfSeqSubEQ" (formula "13") (term "1") (ifseqformula "15"))
                        (rule "eqSymm" (formula "13"))
                        (rule "polySimp_elimSub" (formula "13") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "13") (term "1,0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "true_left" (formula "13"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,1,0,0"))
                        (rule "polySimp_addComm1" (formula "13") (term "0,0,1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                        (rule "applyEq" (formula "13") (term "0,0,1,0") (ifseqformula "14"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "true_left" (formula "13"))
                        (rule "cnf_rightDist" (formula "24"))
                        (rule "andLeft" (formula "24"))
                        (rule "applyEq_and_gen2" (formula "11") (term "1,0,1,0"))
                        (rule "ifEqualsNull" (formula "11") (term "0,0,1,0,1,0"))
                        (rule "nnf_notOr" (formula "11") (term "0,1,0,1,0"))
                        (rule "nnf_notAnd" (formula "11") (term "1,0,1,0,1,0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "nnf_notAnd" (formula "11") (term "0,0,1,0,1,0"))
                        (rule "nnf_notAnd" (formula "11") (term "0,0,0,1,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0,1,0,1,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,0,1,0,1,0"))
                        (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,0,1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,1,0,1,0"))
                        (rule "mul_literals" (formula "11") (term "1,0,0,0,0,1,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
                        (rule "mul_literals" (formula "11") (term "0,0,1,0,0,1,0,0,0,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,1,0,0,0,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,0,1,0,0,1,0,0,0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,0,0,0,1,0,1,0"))
                        (rule "add_literals" (formula "11") (term "0,0,0,0,1,0,0,0,1,0,1,0"))
                        (rule "add_zero_left" (formula "11") (term "0,0,0,1,0,0,0,1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "0,1,1,0,0,0,1,0,1,0"))
                        (rule "cnf_rightDist" (formula "23"))
                        (rule "andLeft" (formula "23"))
                        (rule "cnf_rightDist" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "commute_or" (formula "25"))
                        (rule "shift_paren_and" (formula "21") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "castedGetAny" (formula "21") (term "1,0,0,1,0,1,0"))
                        (rule "castedGetAny" (formula "21") (term "1,0,1,1,0,0,1,0"))
                        (rule "castedGetAny" (formula "21") (term "0,0,1,0,0,1,0"))
                        (rule "castedGetAny" (formula "21") (term "0,0,0,0,0,1,0"))
                        (rule "commute_or" (formula "10") (term "1,0,1,0,1,0"))
                        (rule "commute_or" (formula "29") (term "0,0,0,1,0"))
                        (rule "cnf_rightDist" (formula "24"))
                        (rule "andLeft" (formula "24"))
                        (rule "commute_or_2" (formula "10") (term "0,0,1,0,1,0"))
                        (rule "cnf_rightDist" (formula "24"))
                        (rule "andLeft" (formula "24"))
                        (rule "commute_or" (formula "24"))
                        (rule "cnf_rightDist" (formula "23"))
                        (rule "andLeft" (formula "23"))
                        (rule "cnf_rightDist" (formula "24"))
                        (rule "andLeft" (formula "24"))
                        (rule "commute_or" (formula "25"))
                        (rule "cnf_rightDist" (formula "24"))
                        (rule "andLeft" (formula "24"))
                        (rule "commute_or" (formula "24"))
                        (rule "cnf_rightDist" (formula "21") (term "0"))
                        (rule "distr_forallAnd" (formula "21"))
                        (rule "andLeft" (formula "21"))
                        (rule "shift_paren_or" (formula "22") (term "0"))
                        (rule "commute_and_2" (formula "24") (term "1"))
                        (rule "commute_or" (formula "11") (term "1,0,1,0,1,0"))
                        (rule "cnf_rightDist" (formula "24"))
                        (rule "andLeft" (formula "24"))
                        (rule "cnf_rightDist" (formula "25"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "cnf_rightDist" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "commute_or" (formula "25"))
                        (rule "shift_paren_and" (formula "23") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "castedGetAny" (formula "23") (term "0,0,1,0,0,1,0"))
                        (rule "castedGetAny" (formula "23") (term "1,0,1,1,0,0,1,0"))
                        (rule "castedGetAny" (formula "23") (term "0,0,0,0,0,1,0"))
                        (rule "cnf_rightDist" (formula "21") (term "0"))
                        (rule "distr_forallAnd" (formula "21"))
                        (rule "andLeft" (formula "21"))
                        (rule "shift_paren_or" (formula "22") (term "0"))
                        (rule "cnf_rightDist" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "commute_or" (formula "25"))
                        (rule "cnf_rightDist" (formula "26"))
                        (rule "andLeft" (formula "26"))
                        (rule "commute_or" (formula "27"))
                        (rule "cnf_rightDist" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "commute_or" (formula "26"))
                        (rule "cnf_rightDist" (formula "27"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "commute_or" (formula "27"))
                        (rule "cnf_rightDist" (formula "25"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "commute_or" (formula "25"))
                        (rule "cnf_rightDist" (formula "24") (term "0"))
                        (rule "distr_forallAnd" (formula "24"))
                        (rule "andLeft" (formula "24"))
                        (rule "shift_paren_or" (formula "25") (term "0"))
                        (rule "cnf_rightDist" (formula "21") (term "0"))
                        (rule "distr_forallAnd" (formula "21"))
                        (rule "andLeft" (formula "21"))
                        (rule "commute_or_2" (formula "21") (term "0"))
                        (rule "shift_paren_or" (formula "22") (term "0"))
                        (rule "commute_or" (formula "21") (term "0,0"))
                        (rule "commute_or_2" (formula "11") (term "0,0,1,0,1,0"))
                        (rule "ifthenelse_split" (formula "1") (term "0"))
                        (branch "self.list.<created> = TRUE TRUE"
                           (rule "applyEqReverse" (formula "48") (term "0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "48"))
                           (rule "closeTrue" (formula "48"))
                        )
                        (branch "self.list.<created> = TRUE FALSE"
                           (rule "referencedObjectIsCreatedRight" (formula "45") (ifseqformula "46"))
                           (rule "close" (formula "45") (ifseqformula "4"))
                        )
                     )
                     (branch "self.list.size >= 1 + self.index FALSE"
                        (rule "replace_known_right" (formula "13") (term "0,1,1,0,0") (ifseqformula "26"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "inEqSimp_geqRight" (formula "26"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1"))
                        (rule "inEqSimp_antiSymm" (formula "11") (ifseqformula "1"))
                        (rule "applyEq" (formula "24") (term "1,1,0,1,1") (ifseqformula "11"))
                        (rule "applyEq" (formula "12") (term "0") (ifseqformula "11"))
                        (rule "inEqSimp_homoInEq1" (formula "12"))
                        (rule "polySimp_pullOutFactor1" (formula "12") (term "0"))
                        (rule "add_literals" (formula "12") (term "1,0"))
                        (rule "times_zero_1" (formula "12") (term "0"))
                        (rule "leq_literals" (formula "12"))
                        (rule "true_left" (formula "12"))
                        (rule "applyEq" (formula "22") (term "1,1,0,0") (ifseqformula "11"))
                        (rule "applyEq" (formula "25") (term "1,1,0,0,0,1,0") (ifseqformula "11"))
                        (rule "applyEq" (formula "1") (term "0") (ifseqformula "11"))
                        (rule "inEqSimp_homoInEq0" (formula "1"))
                        (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "1,0"))
                        (rule "times_zero_1" (formula "1") (term "0"))
                        (rule "qeq_literals" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "applyEq" (formula "19") (term "0") (ifseqformula "10"))
                        (rule "applyEq" (formula "22") (term "1,1,1,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "23") (term "1,1,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "15") (term "2,0") (ifseqformula "10"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "eqSymm" (formula "15"))
                        (rule "applyEq" (formula "19") (term "1,1,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "18") (term "1") (ifseqformula "10"))
                        (rule "applyEq" (formula "13") (term "1,1,1,0,1,1,1,0,1,0") (ifseqformula "10"))
                        (rule "polySimp_pullOutFactor2b" (formula "13") (term "1,1,0,1,1,1,0,1,0"))
                        (rule "add_literals" (formula "13") (term "1,1,1,1,0,1,1,1,0,1,0"))
                        (rule "times_zero_1" (formula "13") (term "1,1,1,0,1,1,1,0,1,0"))
                        (rule "add_zero_right" (formula "13") (term "1,1,0,1,1,1,0,1,0"))
                        (rule "applyEq" (formula "17") (term "1") (ifseqformula "10"))
                        (rule "inEqSimp_or_tautInEq0" (formula "13") (term "0,0"))
                        (rule "add_zero_right" (formula "13") (term "1,1,0,0"))
                        (rule "qeq_literals" (formula "13") (term "1,0,0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "true_left" (formula "13"))
                        (rule "applyEq_and_gen2" (formula "12") (term "1,0,1,0"))
                        (rule "ifEqualsNull" (formula "12") (term "0,0,1,0,1,0"))
                        (rule "nnf_notOr" (formula "12") (term "0,1,0,1,0"))
                        (rule "nnf_notAnd" (formula "12") (term "1,0,1,0,1,0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "nnf_notAnd" (formula "12") (term "0,0,1,0,1,0"))
                        (rule "nnf_notAnd" (formula "12") (term "0,0,0,1,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,1,0,1,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,1,0,1,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,1,0,1,0"))
                        (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,1,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0,1,0,1,0"))
                        (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0,1,0,1,0"))
                        (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,0,1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,1,0,1,0"))
                        (rule "mul_literals" (formula "12") (term "1,0,0,0,0,1,0,1,0"))
                        (rule "lenNonNegative" (formula "16") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "16"))
                        (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                        (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "11"))
                        (rule "leq_literals" (formula "16") (term "0"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "lenNonNegative" (formula "17") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "17"))
                        (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                        (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "11"))
                        (rule "leq_literals" (formula "17") (term "0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "seqGetAlphaCast" (formula "20") (term "0,1,0,1"))
                        (rule "castedGetAny" (formula "20") (term "0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "commute_and_2" (formula "20") (term "0,0,0,1"))
                        (rule "applyEq_and_gen2" (formula "19") (term "1,0,1,0"))
                        (rule "commute_or_2" (formula "22") (term "0,0,1,0"))
                        (rule "shift_paren_and" (formula "18") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "castedGetAny" (formula "18") (term "1,0,1,1,0,0,1,0"))
                        (rule "castedGetAny" (formula "18") (term "0,0,0,0,0,1,0"))
                        (rule "castedGetAny" (formula "18") (term "0,0,1,0,0,1,0"))
                        (rule "castedGetAny" (formula "18") (term "1,0,0,1,0,1,0"))
                        (rule "cnf_rightDist" (formula "20"))
                        (rule "andLeft" (formula "20"))
                        (rule "cnf_rightDist" (formula "21"))
                        (rule "andLeft" (formula "21"))
                        (rule "cnf_rightDist" (formula "21"))
                        (rule "andLeft" (formula "21"))
                        (rule "commute_or" (formula "21"))
                        (rule "cnf_rightDist" (formula "20"))
                        (rule "andLeft" (formula "20"))
                        (rule "cnf_rightDist" (formula "21"))
                        (rule "andLeft" (formula "21"))
                        (rule "cnf_rightDist" (formula "21"))
                        (rule "andLeft" (formula "21"))
                        (rule "commute_or" (formula "21"))
                        (rule "commute_and_2" (formula "20") (term "1"))
                        (rule "cnf_rightDist" (formula "18") (term "0"))
                        (rule "distr_forallAnd" (formula "18"))
                        (rule "andLeft" (formula "18"))
                        (rule "shift_paren_or" (formula "19") (term "0"))
                        (rule "commute_or" (formula "12") (term "1,0,1,0,1,0"))
                        (rule "cnf_rightDist" (formula "21"))
                        (rule "andLeft" (formula "21"))
                        (rule "cnf_rightDist" (formula "22"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "cnf_rightDist" (formula "22"))
                        (rule "andLeft" (formula "22"))
                        (rule "commute_or" (formula "22"))
                        (rule "cnf_rightDist" (formula "21"))
                        (rule "andLeft" (formula "21"))
                        (rule "cnf_rightDist" (formula "22"))
                        (rule "andLeft" (formula "22"))
                        (rule "commute_or" (formula "23"))
                        (rule "cnf_rightDist" (formula "22"))
                        (rule "andLeft" (formula "22"))
                        (rule "commute_or" (formula "22"))
                        (rule "cnf_rightDist" (formula "18") (term "0"))
                        (rule "distr_forallAnd" (formula "18"))
                        (rule "andLeft" (formula "18"))
                        (rule "shift_paren_or" (formula "19") (term "0"))
                        (rule "commute_or_2" (formula "12") (term "0,0,1,0,1,0"))
                        (rule "commute_or" (formula "35") (term "0,0,0,1,0"))
                        (rule "cnf_rightDist" (formula "22"))
                        (rule "andLeft" (formula "22"))
                        (rule "commute_or" (formula "22"))
                        (rule "cnf_rightDist" (formula "23"))
                        (rule "andLeft" (formula "23"))
                        (rule "commute_or" (formula "24"))
                        (rule "cnf_rightDist" (formula "22"))
                        (rule "andLeft" (formula "22"))
                        (rule "commute_or" (formula "23"))
                        (rule "cnf_rightDist" (formula "24"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "commute_or" (formula "24"))
                        (rule "cnf_rightDist" (formula "22"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "commute_or" (formula "22"))
                        (rule "cnf_rightDist" (formula "18") (term "0"))
                        (rule "distr_forallAnd" (formula "18"))
                        (rule "andLeft" (formula "18"))
                        (rule "commute_or_2" (formula "18") (term "0"))
                        (rule "shift_paren_or" (formula "19") (term "0"))
                        (rule "commute_or" (formula "18") (term "0,0"))
                        (rule "ifthenelse_split" (formula "1") (term "0"))
                        (branch "self.list.<created> = TRUE TRUE"
                           (rule "applyEqReverse" (formula "44") (term "0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "44"))
                           (rule "closeTrue" (formula "44"))
                        )
                        (branch "self.list.<created> = TRUE FALSE"
                           (rule "referencedObjectIsCreatedRight" (formula "41") (ifseqformula "42"))
                           (rule "close" (formula "41") (ifseqformula "4"))
                        )
                     )
                  )
                  (branch "self.index >= 1 FALSE"
                     (rule "inEqSimp_geqRight" (formula "26"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "1"))
                     (rule "leq_literals" (formula "11") (term "0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "true_left" (formula "11"))
                     (rule "inEqSimp_antiSymm" (formula "10") (ifseqformula "1"))
                     (rule "applyEq" (formula "14") (term "1,1,0,1,1,0,0") (ifseqformula "10"))
                     (rule "add_zero_right" (formula "14") (term "1,0,1,1,0,0"))
                     (rule "applyEq" (formula "17") (term "1,0,1") (ifseqformula "10"))
                     (rule "applyEq" (formula "15") (term "2,0") (ifseqformula "10"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "eqSymm" (formula "15"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "10"))
                     (rule "leq_literals" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "applyEq" (formula "16") (term "1,1,0") (ifseqformula "9"))
                     (rule "add_literals" (formula "16") (term "1,0"))
                     (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "11") (term "1") (ifseqformula "9"))
                     (rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
                     (rule "qeq_literals" (formula "10"))
                     (rule "true_left" (formula "10"))
                     (rule "applyEq" (formula "11") (term "1,1,1,0,1,1,1,0,1,0") (ifseqformula "9"))
                     (rule "add_zero_right" (formula "11") (term "1,1,0,1,1,1,0,1,0"))
                     (rule "applyEq" (formula "12") (term "0,0,1,1,1,0,0") (ifseqformula "9"))
                     (rule "times_zero_2" (formula "12") (term "0,1,1,1,0,0"))
                     (rule "add_zero_left" (formula "12") (term "1,1,1,0,0"))
                     (rule "applyEq" (formula "12") (term "0,1,1,1,1,1,0,1,0") (ifseqformula "9"))
                     (rule "add_zero_left" (formula "12") (term "1,1,1,1,1,0,1,0"))
                     (rule "applyEq" (formula "12") (term "0,1,0,1,1,0,1,1,1,0,1,0") (ifseqformula "9"))
                     (rule "times_zero_2" (formula "12") (term "1,0,1,1,0,1,1,1,0,1,0"))
                     (rule "add_zero_right" (formula "12") (term "0,1,1,0,1,1,1,0,1,0"))
                     (rule "inEqSimp_or_tautInEq0" (formula "11") (term "0,0"))
                     (rule "add_zero_right" (formula "11") (term "1,1,0,0"))
                     (rule "qeq_literals" (formula "11") (term "1,0,0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "true_left" (formula "11"))
                     (rule "commute_and_2" (formula "20") (term "0"))
                     (rule "commute_or" (formula "21") (term "0,0"))
                     (rule "commute_or" (formula "23") (term "0,0"))
                     (rule "shift_paren_or" (formula "22") (term "0,1,0"))
                     (rule "lenNonNegative" (formula "15") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "15"))
                     (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                     (rule "lenNonNegative" (formula "16") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "16"))
                     (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                     (rule "seqGetAlphaCast" (formula "20") (term "0,1,0,1"))
                     (rule "castedGetAny" (formula "20") (term "0"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "true_left" (formula "20"))
                     (rule "commute_and_2" (formula "20") (term "0,0,0,1"))
                     (rule "applyEq_and_gen2" (formula "19") (term "1,0,1,0"))
                     (rule "seqGetAlphaCast" (formula "20") (term "0,1,1"))
                     (rule "castedGetAny" (formula "20") (term "0"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "true_left" (formula "20"))
                     (rule "cnf_rightDist" (formula "20"))
                     (rule "andLeft" (formula "20"))
                     (rule "cnf_rightDist" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "cnf_rightDist" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "commute_or" (formula "21"))
                     (rule "commute_or_2" (formula "25") (term "0,0,1,0"))
                     (rule "cnf_rightDist" (formula "20"))
                     (rule "andLeft" (formula "20"))
                     (rule "cnf_rightDist" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "cnf_rightDist" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "commute_or" (formula "21"))
                     (rule "commute_and_2" (formula "20") (term "1"))
                     (rule "applyEq_and_gen2" (formula "11") (term "1,0,1,0"))
                     (rule "ifEqualsNull" (formula "11") (term "0,0,1,0,1,0"))
                     (rule "nnf_notOr" (formula "11") (term "0,1,0,1,0"))
                     (rule "nnf_notAnd" (formula "11") (term "0,0,1,0,1,0"))
                     (rule "nnf_notAnd" (formula "11") (term "1,0,1,0,1,0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "nnf_notAnd" (formula "11") (term "0,0,0,1,0,1,0"))
                     (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0,1,0,1,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0,1,0,1,0"))
                     (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0,1,0,1,0"))
                     (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,0,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0,1,0,1,0"))
                     (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,0,1,0,1,0"))
                     (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,0,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,1,0,1,0"))
                     (rule "mul_literals" (formula "11") (term "1,0,0,0,0,1,0,1,0"))
                     (rule "cnf_rightDist" (formula "20"))
                     (rule "andLeft" (formula "20"))
                     (rule "shift_paren_and" (formula "18") (term "0,1,0"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "castedGetAny" (formula "18") (term "0,0,1,0,0,1,0"))
                     (rule "castedGetAny" (formula "18") (term "1,0,0,1,0,1,0"))
                     (rule "castedGetAny" (formula "18") (term "0,0,0,0,0,1,0"))
                     (rule "castedGetAny" (formula "18") (term "1,0,1,1,0,0,1,0"))
                     (rule "cnf_rightDist" (formula "21"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "cnf_rightDist" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "commute_or" (formula "21"))
                     (rule "cnf_rightDist" (formula "20"))
                     (rule "andLeft" (formula "20"))
                     (rule "cnf_rightDist" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "commute_or" (formula "22"))
                     (rule "cnf_rightDist" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "commute_or" (formula "21"))
                     (rule "commute_or" (formula "33") (term "0,0,0,1,0"))
                     (rule "cnf_rightDist" (formula "18") (term "0"))
                     (rule "distr_forallAnd" (formula "18"))
                     (rule "andLeft" (formula "18"))
                     (rule "shift_paren_or" (formula "19") (term "0"))
                     (rule "cnf_rightDist" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "commute_or" (formula "21"))
                     (rule "cnf_rightDist" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "commute_or" (formula "23"))
                     (rule "cnf_rightDist" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "commute_or" (formula "22"))
                     (rule "cnf_rightDist" (formula "23"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "commute_or" (formula "23"))
                     (rule "cnf_rightDist" (formula "21"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "commute_or" (formula "21"))
                     (rule "cnf_rightDist" (formula "18") (term "0"))
                     (rule "distr_forallAnd" (formula "18"))
                     (rule "andLeft" (formula "18"))
                     (rule "shift_paren_or" (formula "19") (term "0"))
                     (rule "commute_or" (formula "11") (term "1,0,1,0,1,0"))
                     (rule "shift_paren_and" (formula "21") (term "0,1,0"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "castedGetAny" (formula "21") (term "0,0,0,0,0,1,0"))
                     (rule "castedGetAny" (formula "21") (term "1,0,1,1,0,0,1,0"))
                     (rule "castedGetAny" (formula "21") (term "0,0,1,0,0,1,0"))
                     (rule "cnf_rightDist" (formula "18") (term "0"))
                     (rule "distr_forallAnd" (formula "18"))
                     (rule "andLeft" (formula "18"))
                     (rule "commute_or_2" (formula "18") (term "0"))
                     (rule "shift_paren_or" (formula "19") (term "0"))
                     (rule "commute_or" (formula "18") (term "0,0"))
                     (rule "commute_or_2" (formula "11") (term "0,0,1,0,1,0"))
                     (rule "cnf_rightDist" (formula "22") (term "0"))
                     (rule "distr_forallAnd" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "shift_paren_or" (formula "23") (term "0"))
                     (rule "cnf_rightDist" (formula "22") (term "0"))
                     (rule "distr_forallAnd" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "shift_paren_or" (formula "23") (term "0"))
                     (rule "cnf_rightDist" (formula "22") (term "0"))
                     (rule "distr_forallAnd" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "commute_or_2" (formula "22") (term "0"))
                     (rule "shift_paren_or" (formula "23") (term "0"))
                     (rule "commute_or" (formula "22") (term "0,0"))
                     (rule "ifthenelse_split" (formula "1") (term "0"))
                     (branch "self.list.<created> = TRUE TRUE"
                        (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "47"))
                        (rule "closeTrue" (formula "47"))
                     )
                     (branch "self.list.<created> = TRUE FALSE"
                        (rule "referencedObjectIsCreatedRight" (formula "44") (ifseqformula "45"))
                        (rule "close" (formula "44") (ifseqformula "4"))
                     )
                  )
               )
            )
            (branch "(_ov_0, _fv_0) in {(self.list, LinkedList::$values)}"
               (rule "eqSymm" (formula "9"))
               (rule "elementOfSingleton" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "applyEq" (formula "10") (term "1,0") (ifseqformula "1"))
               (rule "applyEq" (formula "10") (term "1,1") (ifseqformula "1"))
               (rule "applyEqRigid" (formula "10") (term "2,1") (ifseqformula "2"))
               (rule "narrowSelectType" (formula "10") (term "1") (ifseqformula "3"))
               (rule "applyEqRigid" (formula "10") (term "2,0") (ifseqformula "2"))
               (rule "pullOutSelect" (formula "10") (term "0") (inst "selectSK=LinkedList_values_0"))
               (rule "simplifySelectOfAnon" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "narrowSelectType" (formula "1") (term "1,0") (ifseqformula "5"))
               (rule "narrowSelectType" (formula "1") (term "2,0") (ifseqformula "4"))
               (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
               (rule "Class_invariant_axiom_for_LinkedListIterator" (formula "9") (inst "i=i") (inst "f=f") (inst "i_0=i_0") (inst "f_0=f_0"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "10"))
               (rule "notLeft" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "eqSymm" (formula "15") (term "1"))
               (rule "eqSymm" (formula "14"))
               (rule "eqSymm" (formula "13"))
               (rule "replace_known_right" (formula "1") (term "0,0,1,0,0") (ifseqformula "17"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "castedGetAny" (formula "15") (term "0,1"))
               (rule "lenOfSeqSubEQ" (formula "11") (term "1,1,0,0") (ifseqformula "13"))
               (rule "polySimp_elimSub" (formula "11") (term "1,1,1,0,0"))
               (rule "times_zero_2" (formula "11") (term "1,1,1,1,0,0"))
               (rule "add_zero_right" (formula "11") (term "1,1,1,0,0"))
               (rule "lenOfSeqSubEQ" (formula "12") (term "1,1,0,0") (ifseqformula "14"))
               (rule "polySimp_elimSub" (formula "12") (term "1,1,1,0,0"))
               (rule "polySimp_addComm0" (formula "12") (term "1,1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,1,0,0"))
               (rule "add_zero_right" (formula "11") (term "0,0,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,1,0,0"))
               (rule "polySimp_addComm1" (formula "12") (term "0,0,1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "9"))
               (rule "inEqSimp_commuteLeq" (formula "10"))
               (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "0,0"))
               (rule "polySimp_elimOne" (formula "15") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0,1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,0,0,1,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "0,0,0,1,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
               (rule "getOfSeqSubEQ" (formula "11") (term "1,0,1,0,1,0") (ifseqformula "13"))
               (rule "castDel" (formula "11") (term "2,1,0,1,0,1,0"))
               (rule "add_zero_right" (formula "11") (term "1,1,1,0,1,0,1,0"))
               (rule "polySimp_elimSub" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
               (rule "mul_literals" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
               (rule "add_zero_right" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,1,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,1,0,1,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,1,0,1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,1,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
               (rule "mul_literals" (formula "11") (term "0,1,1,0,1,0,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
               (rule "getOfSeqSubEQ" (formula "12") (term "1,0,1,0,1,0") (ifseqformula "14"))
               (rule "castDel" (formula "12") (term "2,1,0,1,0,1,0"))
               (rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
               (rule "polySimp_addComm0" (formula "12") (term "1,1,1,0,1,0,1,0"))
               (rule "polySimp_addComm0" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,1,0,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,1,0,1,0,1,0"))
               (rule "polySimp_mulAssoc" (formula "12") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,0,0,1,0,1,0,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,1,0,1,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1,0,1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,1,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,1,0,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,1,0,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "12") (term "0,1,1,0,1,0,1,0,1,0"))
               (rule "mul_literals" (formula "12") (term "0,0,1,1,0,1,0,1,0,1,0"))
               (rule "nnf_imp2or" (formula "11") (term "0"))
               (rule "nnf_imp2or" (formula "12") (term "0"))
               (rule "nnf_notAnd" (formula "11") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
               (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
               (rule "mul_literals" (formula "11") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
               (rule "nnf_notAnd" (formula "12") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
               (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
               (rule "mul_literals" (formula "12") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
               (rule "Class_invariant_axiom_for_LinkedList" (formula "16") (inst "i=i") (inst "i_0=i_0") (inst "j=j") (inst "i_1=i_1") (inst "i_2=i_2") (inst "f=f") (inst "i_3=i_3") (inst "n=n"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "translateJavaSubInt" (formula "16") (term "1,1,0,0,1,0,0"))
               (rule "translateJavaSubInt" (formula "16") (term "1,0,1,1,1,1,0,0,0"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "eqSymm" (formula "23") (term "0,1,0,1,0"))
               (rule "eqSymm" (formula "23") (term "1,1,0,1,0"))
               (rule "eqSymm" (formula "22") (term "1,0"))
               (rule "eqSymm" (formula "21") (term "1,0,1"))
               (rule "eqSymm" (formula "21") (term "1,1"))
               (rule "eqSymm" (formula "17"))
               (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0"))
               (rule "mul_literals" (formula "22") (term "1,1,1,0,0"))
               (rule "polySimp_elimSub" (formula "21") (term "1,0,0,1,1"))
               (rule "mul_literals" (formula "21") (term "1,1,0,0,1,1"))
               (rule "polySimp_addComm0" (formula "22") (term "1,0,0,1,0"))
               (rule "polySimp_addComm0" (formula "22") (term "1,1,0,0"))
               (rule "polySimp_addComm0" (formula "21") (term "1,0,0,1,1"))
               (rule "castedGetAny" (formula "24") (term "1,1,1,0"))
               (rule "castedGetAny" (formula "23") (term "0,0,1,0,1,0"))
               (rule "castedGetAny" (formula "23") (term "1,0,1,0,1,0"))
               (rule "castedGetAny" (formula "22") (term "1,1,1,0"))
               (rule "castedGetAny" (formula "21") (term "0,1,0,1"))
               (rule "castedGetAny" (formula "22") (term "0,1,0"))
               (rule "eqSymm" (formula "22") (term "1,0"))
               (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
               (rule "castedGetAny" (formula "21") (term "0,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
               (rule "applyEq" (formula "14") (term "2,0") (ifseqformula "17"))
               (rule "applyEq" (formula "10") (term "0") (ifseqformula "17"))
               (rule "applyEq" (formula "12") (term "0,0,1,1,0,0") (ifseqformula "17"))
               (rule "applyEq" (formula "12") (term "1,1,1,1,0,0") (ifseqformula "17"))
               (rule "applyEq" (formula "21") (term "1,1,0,1,1") (ifseqformula "16"))
               (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "17"))
               (rule "applyEq" (formula "18") (term "0") (ifseqformula "16"))
               (rule "applyEq" (formula "14") (term "2,0") (ifseqformula "16"))
               (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
               (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
               (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
               (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
               (rule "applyEq" (formula "12") (term "1,1,1,0,1,0,1,0,1,0") (ifseqformula "17"))
               (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
               (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "16"))
               (rule "applyEq" (formula "17") (term "1") (ifseqformula "16"))
               (rule "applyEq" (formula "10") (term "0") (ifseqformula "16"))
               (rule "applyEq" (formula "12") (term "1,1,1,1,0,0") (ifseqformula "16"))
               (rule "applyEq" (formula "12") (term "0,0,1,1,0,0") (ifseqformula "16"))
               (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "16"))
               (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
               (rule "applyEq" (formula "12") (term "1,1,1,0,1,0,1,0,1,0") (ifseqformula "16"))
               (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
               (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
               (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0"))
               (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
               (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "18"))
               (rule "polySimp_mulComm0" (formula "10") (term "0,0"))
               (rule "polySimp_addComm0" (formula "10") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "10"))
               (rule "polySimp_mulLiterals" (formula "10") (term "0"))
               (rule "polySimp_elimOne" (formula "10") (term "0"))
               (rule "nnf_imp2or" (formula "24") (term "1,0,1,0"))
               (rule "nnf_imp2or" (formula "23") (term "0"))
               (rule "nnf_imp2or" (formula "20") (term "0"))
               (rule "nnf_imp2or" (formula "21") (term "0"))
               (rule "nnf_imp2or" (formula "25") (term "0"))
               (rule "nnf_imp2or" (formula "24") (term "0"))
               (rule "JML_represents_clause_for_LinkedListIterator_footprint" (formula "1") (term "2,0,0,0,0,0"))
               (rule "elementOfUnion" (formula "1") (term "0,0,0,0,0"))
               (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnion" (formula "1") (term "0,0,0,0,0"))
               (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnion" (formula "1") (term "0,0,0,0,0"))
               (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnion" (formula "1") (term "0,0,0,0,0"))
               (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "nnf_notAnd" (formula "23") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
               (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
               (rule "mul_literals" (formula "23") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "20") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
               (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
               (rule "mul_literals" (formula "20") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "21") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
               (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
               (rule "mul_literals" (formula "21") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "25") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
               (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
               (rule "mul_literals" (formula "25") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "24") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
               (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
               (rule "mul_literals" (formula "24") (term "1,0,0,0"))
               (rule "nnf_imp2or" (formula "24") (term "0,1,0"))
               (rule "nnf_notAnd" (formula "24") (term "0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,1,0"))
               (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,1,0"))
               (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,1,0"))
               (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,1,0"))
               (rule "add_literals" (formula "24") (term "0,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1,0"))
               (rule "mul_literals" (formula "24") (term "1,0,0,0,1,0"))
               (rule "commute_and" (formula "22") (term "0,0"))
               (rule "commute_and" (formula "12") (term "1,0,1,0"))
               (rule "commute_and" (formula "12") (term "0,0,1,0"))
               (rule "commute_and" (formula "13") (term "0,0,1,0"))
               (rule "JML_represents_clause_for_LinkedList_footprint" (formula "1") (term "2,0,0,0,0") (inst "i=i"))
               (rule "castedGetAny" (formula "1") (term "0,1,0,1,2,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,2,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,1,2,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1,2,0,0,0,0"))
               (rule "applyEq" (formula "1") (term "0,1,0,0,1,0,0,1,2,0,0,0,0") (ifseqformula "17"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,2,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,2,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,2,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,2,0,0,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,2,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,2,0,0,0,0"))
               (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
               (rule "elementOfInfiniteUnion" (formula "1") (term "1,0,0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "eqSymm" (formula "1") (term "1,0,1,0,0,0,0"))
               (rule "sortsDisjointModuloNull" (formula "1") (term "1,0,1,0,0,0,0"))
               (rule "replace_known_right" (formula "1") (term "1,1,0,1,0,0,0,0") (ifseqformula "26"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
               (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "ifthenelse_negated" (formula "1") (term "0"))
               (rule "commute_and" (formula "22") (term "0,0,0,0,1"))
               (rule "commute_or_2" (formula "23") (term "0"))
               (rule "commute_and" (formula "13") (term "1,0,1,0"))
               (rule "commute_or_2" (formula "25") (term "0"))
               (rule "equalityToSeqGetAndSeqLenLeft" (formula "14") (inst "iv=iv"))
               (rule "andLeft" (formula "14"))
               (rule "lenOfSeqSub" (formula "15") (term "1,1,0,0"))
               (rule "polySimp_elimSub" (formula "15") (term "1,1,1,0,0"))
               (rule "times_zero_2" (formula "15") (term "1,1,1,1,0,0"))
               (rule "add_zero_right" (formula "15") (term "1,1,1,0,0"))
               (rule "lenOfSeqSubEQ" (formula "14") (term "1") (ifseqformula "16"))
               (rule "eqSymm" (formula "14"))
               (rule "polySimp_elimSub" (formula "14") (term "1,0"))
               (rule "times_zero_2" (formula "14") (term "1,1,0"))
               (rule "add_zero_right" (formula "14") (term "1,0"))
               (rule "lenOfSeqSub" (formula "14") (term "1"))
               (rule "eqSymm" (formula "14"))
               (rule "polySimp_elimSub" (formula "14") (term "1,0"))
               (rule "times_zero_2" (formula "14") (term "1,1,0"))
               (rule "add_zero_right" (formula "14") (term "1,0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "true_left" (formula "14"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1,1,0,0"))
               (rule "add_zero_right" (formula "14") (term "0,0,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
               (rule "applyEq" (formula "14") (term "0,0,1,0") (ifseqformula "15"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "true_left" (formula "14"))
               (rule "seqGetAlphaCast" (formula "16") (term "0,1"))
               (rule "castedGetAny" (formula "16") (term "0"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "true_left" (formula "16"))
               (rule "commute_and" (formula "20") (term "1,0,1,0"))
               (rule "commute_and" (formula "20") (term "0,0,1,0"))
               (rule "commute_and" (formula "21") (term "1,0,1,0"))
               (rule "commute_and" (formula "21") (term "0,0,1,0"))
               (rule "ifthenelse_split" (formula "12") (term "1,1,0,0"))
               (branch "self.index >= 1 TRUE"
                  (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "12"))
                  (rule "leq_literals" (formula "9") (term "0"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "true_left" (formula "9"))
                  (rule "commute_and_2" (formula "22") (term "0"))
                  (rule "commute_or" (formula "23") (term "0,0"))
                  (rule "commute_or" (formula "25") (term "0,0"))
                  (rule "shift_paren_or" (formula "24") (term "0,1,0"))
                  (rule "applyEq_and_gen2" (formula "12") (term "1,0,1,0"))
                  (rule "ifEqualsNull" (formula "12") (term "0,0,1,0,1,0"))
                  (rule "nnf_notOr" (formula "12") (term "0,1,0,1,0"))
                  (rule "nnf_notAnd" (formula "12") (term "0,0,1,0,1,0"))
                  (rule "nnf_notAnd" (formula "12") (term "1,0,1,0,1,0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "nnf_notAnd" (formula "12") (term "0,0,0,1,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0,1,0,1,0"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0,1,0,1,0"))
                  (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,0,1,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,1,0,1,0"))
                  (rule "mul_literals" (formula "12") (term "1,0,0,0,0,1,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,1,0,1,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,1,0,1,0"))
                  (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,1,0,1,0"))
                  (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,1,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,1,0,1,0"))
                  (rule "ifthenelse_split_for" (formula "16"))
                  (branch "self.list.size >= 1 + self.index TRUE"
                     (rule "replace_known_left" (formula "13") (term "0,1,1,0,0") (ifseqformula "16"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "16"))
                     (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
                     (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
                     (rule "add_literals" (formula "10") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "10") (term "1,0,0"))
                     (rule "add_literals" (formula "10") (term "0,0"))
                     (rule "qeq_literals" (formula "10") (term "0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "true_left" (formula "10"))
                     (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "19"))
                     (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                     (rule "mul_literals" (formula "15") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "15") (term "0"))
                     (rule "add_literals" (formula "15") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "15"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                     (rule "polySimp_elimOne" (formula "15") (term "0"))
                     (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "15"))
                     (rule "leq_literals" (formula "9") (term "0"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "true_left" (formula "9"))
                     (rule "lenNonNegative" (formula "17") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "17"))
                     (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                     (rule "lenNonNegative" (formula "19") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "19"))
                     (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                     (rule "cnf_rightDist" (formula "23"))
                     (rule "andLeft" (formula "23"))
                     (rule "commute_or_2" (formula "26") (term "0,0,1,0"))
                     (rule "applyEq_and_gen2" (formula "22") (term "1,0,1,0"))
                     (rule "cnf_rightDist" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "equalityToSeqGetAndSeqLenLeft" (formula "13") (inst "iv=iv"))
                     (rule "andLeft" (formula "13"))
                     (rule "lenOfSeqSub" (formula "13") (term "0"))
                     (rule "polySimp_elimSub" (formula "13") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "13") (term "1,0"))
                     (rule "lenOfSeqSub" (formula "14") (term "1,1,0,0"))
                     (rule "polySimp_elimSub" (formula "14") (term "1,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "14") (term "1,1,1,0,0"))
                     (rule "lenOfSeqSubEQ" (formula "13") (term "1") (ifseqformula "15"))
                     (rule "eqSymm" (formula "13"))
                     (rule "polySimp_elimSub" (formula "13") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "13") (term "1,0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "true_left" (formula "13"))
                     (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,1,0,0"))
                     (rule "polySimp_addComm1" (formula "13") (term "0,0,1,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                     (rule "applyEq" (formula "13") (term "0,0,1,0") (ifseqformula "14"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "true_left" (formula "13"))
                     (rule "cnf_rightDist" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "commute_or" (formula "24"))
                     (rule "cnf_rightDist" (formula "23"))
                     (rule "andLeft" (formula "23"))
                     (rule "applyEq_and_gen2" (formula "11") (term "1,0,1,0"))
                     (rule "ifEqualsNull" (formula "11") (term "0,0,1,0,1,0"))
                     (rule "nnf_notOr" (formula "11") (term "0,1,0,1,0"))
                     (rule "nnf_notAnd" (formula "11") (term "1,0,1,0,1,0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "nnf_notAnd" (formula "11") (term "0,0,1,0,1,0"))
                     (rule "nnf_notAnd" (formula "11") (term "0,0,0,1,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0,1,0,1,0"))
                     (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,0,1,0,1,0"))
                     (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,0,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,1,0,1,0"))
                     (rule "mul_literals" (formula "11") (term "1,0,0,0,0,1,0,1,0"))
                     (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
                     (rule "mul_literals" (formula "11") (term "0,0,1,0,0,1,0,0,0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,1,0,0,0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,0,1,0,0,1,0,0,0,1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0,1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,0,0,0,1,0,1,0"))
                     (rule "add_literals" (formula "11") (term "0,0,0,0,1,0,0,0,1,0,1,0"))
                     (rule "add_zero_left" (formula "11") (term "0,0,0,1,0,0,0,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "0,1,1,0,0,0,1,0,1,0"))
                     (rule "commute_or" (formula "10") (term "1,0,1,0,1,0"))
                     (rule "cnf_rightDist" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "shift_paren_and" (formula "21") (term "0,1,0"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "castedGetAny" (formula "21") (term "0,0,0,0,0,1,0"))
                     (rule "castedGetAny" (formula "21") (term "1,0,0,1,0,1,0"))
                     (rule "castedGetAny" (formula "21") (term "0,0,1,0,0,1,0"))
                     (rule "castedGetAny" (formula "21") (term "1,0,1,1,0,0,1,0"))
                     (rule "commute_or_2" (formula "10") (term "0,0,1,0,1,0"))
                     (rule "cnf_rightDist" (formula "23"))
                     (rule "andLeft" (formula "23"))
                     (rule "commute_or" (formula "31") (term "0,0,0,1,0"))
                     (rule "cnf_rightDist" (formula "25"))
                     (rule "andLeft" (formula "25"))
                     (rule "commute_or" (formula "25"))
                     (rule "cnf_rightDist" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "commute_or" (formula "25"))
                     (rule "cnf_rightDist" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "commute_or" (formula "24"))
                     (rule "commute_and_2" (formula "23") (term "1"))
                     (rule "cnf_rightDist" (formula "21") (term "0"))
                     (rule "distr_forallAnd" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "shift_paren_or" (formula "22") (term "0"))
                     (rule "cnf_rightDist" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "cnf_rightDist" (formula "25"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "cnf_rightDist" (formula "25"))
                     (rule "andLeft" (formula "25"))
                     (rule "commute_or" (formula "25"))
                     (rule "shift_paren_and" (formula "23") (term "0,1,0"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "castedGetAny" (formula "23") (term "0,0,1,0,0,1,0"))
                     (rule "castedGetAny" (formula "23") (term "1,0,1,1,0,0,1,0"))
                     (rule "castedGetAny" (formula "23") (term "0,0,0,0,0,1,0"))
                     (rule "ifthenelse_to_or_right" (formula "10") (term "1,1,0,1,0"))
                     (rule "nnf_notAnd" (formula "10") (term "0,0,1,1,0,1,0"))
                     (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,1,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,1,1,0,1,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,1,1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,1,1,0,1,0"))
                     (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,1,1,0,1,0"))
                     (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,1,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,1,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,1,1,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,1,1,0,1,0"))
                     (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,1,1,0,1,0"))
                     (rule "add_zero_right" (formula "10") (term "0,0,0,0,0,1,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1,1,0,1,0"))
                     (rule "mul_literals" (formula "10") (term "1,0,0,0,1,1,0,1,0"))
                     (rule "cnf_rightDist" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "commute_or" (formula "24"))
                     (rule "cnf_rightDist" (formula "21") (term "0"))
                     (rule "distr_forallAnd" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "commute_or" (formula "11") (term "1,0,1,0,1,0"))
                     (rule "shift_paren_or" (formula "22") (term "0"))
                     (rule "cnf_rightDist" (formula "26"))
                     (rule "andLeft" (formula "26"))
                     (rule "commute_or" (formula "27"))
                     (rule "cnf_rightDist" (formula "25"))
                     (rule "andLeft" (formula "25"))
                     (rule "commute_or" (formula "26"))
                     (rule "cnf_rightDist" (formula "24") (term "0"))
                     (rule "distr_forallAnd" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "shift_paren_or" (formula "25") (term "0"))
                     (rule "cnf_rightDist" (formula "28"))
                      (builtin "One Step Simplification" (formula "28"))
                     (rule "commute_or" (formula "28"))
                     (rule "ifthenelse_split" (formula "1") (term "0"))
                     (branch "self.list.<created> = TRUE TRUE"
                        (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "47"))
                        (rule "closeTrue" (formula "47"))
                     )
                     (branch "self.list.<created> = TRUE FALSE"
                        (rule "referencedObjectIsCreatedRight" (formula "44") (ifseqformula "45"))
                        (rule "close" (formula "44") (ifseqformula "4"))
                     )
                  )
                  (branch "self.list.size >= 1 + self.index FALSE"
                     (rule "replace_known_right" (formula "13") (term "0,1,1,0,0") (ifseqformula "26"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "inEqSimp_geqRight" (formula "26"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1"))
                     (rule "inEqSimp_antiSymm" (formula "11") (ifseqformula "1"))
                     (rule "applyEq" (formula "22") (term "1,1,0,0") (ifseqformula "11"))
                     (rule "applyEq" (formula "26") (term "1,1,0,0,0,1,0") (ifseqformula "11"))
                     (rule "applyEq" (formula "17") (term "2,0") (ifseqformula "11"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "eqSymm" (formula "17"))
                     (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "11"))
                     (rule "applyEq" (formula "25") (term "1,1,1,0") (ifseqformula "11"))
                     (rule "applyEq" (formula "26") (term "1,1,0,0") (ifseqformula "11"))
                     (rule "applyEq" (formula "24") (term "1,1,0,1,1") (ifseqformula "11"))
                     (rule "applyEq" (formula "21") (term "0") (ifseqformula "11"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "11"))
                     (rule "inEqSimp_homoInEq0" (formula "1"))
                     (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,0"))
                     (rule "times_zero_1" (formula "1") (term "0"))
                     (rule "qeq_literals" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "applyEq" (formula "11") (term "0") (ifseqformula "10"))
                     (rule "inEqSimp_homoInEq1" (formula "11"))
                     (rule "polySimp_pullOutFactor1" (formula "11") (term "0"))
                     (rule "add_literals" (formula "11") (term "1,0"))
                     (rule "times_zero_1" (formula "11") (term "0"))
                     (rule "leq_literals" (formula "11"))
                     (rule "true_left" (formula "11"))
                     (rule "applyEq" (formula "20") (term "1,1,0,0") (ifseqformula "10"))
                     (rule "applyEq" (formula "17") (term "1") (ifseqformula "10"))
                     (rule "applyEq" (formula "18") (term "1") (ifseqformula "10"))
                     (rule "applyEq" (formula "13") (term "1,1,1,0,1,1,1,0,1,0") (ifseqformula "10"))
                     (rule "polySimp_pullOutFactor2b" (formula "13") (term "1,1,0,1,1,1,0,1,0"))
                     (rule "add_literals" (formula "13") (term "1,1,1,1,0,1,1,1,0,1,0"))
                     (rule "times_zero_1" (formula "13") (term "1,1,1,0,1,1,1,0,1,0"))
                     (rule "add_zero_right" (formula "13") (term "1,1,0,1,1,1,0,1,0"))
                     (rule "inEqSimp_or_tautInEq0" (formula "13") (term "0,0"))
                     (rule "add_zero_right" (formula "13") (term "1,1,0,0"))
                     (rule "qeq_literals" (formula "13") (term "1,0,0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "true_left" (formula "13"))
                     (rule "lenNonNegative" (formula "16") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "16"))
                     (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                     (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "11"))
                     (rule "leq_literals" (formula "16") (term "0"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "lenNonNegative" (formula "17") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "17"))
                     (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                     (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "11"))
                     (rule "leq_literals" (formula "17") (term "0"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "true_left" (formula "17"))
                     (rule "seqGetAlphaCast" (formula "20") (term "0,1,0,1"))
                     (rule "castedGetAny" (formula "20") (term "0"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "true_left" (formula "20"))
                     (rule "commute_and_2" (formula "20") (term "0,0,0,1"))
                     (rule "applyEq_and_gen2" (formula "19") (term "1,0,1,0"))
                     (rule "commute_or_2" (formula "22") (term "0,0,1,0"))
                     (rule "commute_or" (formula "12") (term "1,0,1,0,1,0"))
                     (rule "shift_paren_and" (formula "18") (term "0,1,0"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "castedGetAny" (formula "18") (term "1,0,1,1,0,0,1,0"))
                     (rule "castedGetAny" (formula "18") (term "0,0,0,0,0,1,0"))
                     (rule "castedGetAny" (formula "18") (term "0,0,1,0,0,1,0"))
                     (rule "castedGetAny" (formula "18") (term "1,0,0,1,0,1,0"))
                     (rule "commute_or_2" (formula "12") (term "0,0,1,0,1,0"))
                     (rule "cnf_rightDist" (formula "20"))
                     (rule "andLeft" (formula "20"))
                     (rule "cnf_rightDist" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "cnf_rightDist" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "commute_or" (formula "21"))
                     (rule "cnf_rightDist" (formula "20"))
                     (rule "andLeft" (formula "20"))
                     (rule "cnf_rightDist" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "cnf_rightDist" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "commute_or" (formula "21"))
                     (rule "cnf_rightDist" (formula "18") (term "0"))
                     (rule "distr_forallAnd" (formula "18"))
                     (rule "andLeft" (formula "18"))
                     (rule "shift_paren_or" (formula "19") (term "0"))
                     (rule "commute_and_2" (formula "21") (term "1"))
                     (rule "cnf_rightDist" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "cnf_rightDist" (formula "22"))
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "cnf_rightDist" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "commute_or" (formula "22"))
                     (rule "cnf_rightDist" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "cnf_rightDist" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "commute_or" (formula "23"))
                     (rule "cnf_rightDist" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "commute_or" (formula "22"))
                     (rule "cnf_rightDist" (formula "18") (term "0"))
                     (rule "distr_forallAnd" (formula "18"))
                     (rule "andLeft" (formula "18"))
                     (rule "shift_paren_or" (formula "19") (term "0"))
                     (rule "commute_or" (formula "35") (term "0,0,0,1,0"))
                     (rule "cnf_rightDist" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "commute_or" (formula "22"))
                     (rule "cnf_rightDist" (formula "23"))
                     (rule "andLeft" (formula "23"))
                     (rule "commute_or" (formula "24"))
                     (rule "cnf_rightDist" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "commute_or" (formula "23"))
                     (rule "cnf_rightDist" (formula "24"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "commute_or" (formula "24"))
                     (rule "cnf_rightDist" (formula "22"))
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "commute_or" (formula "22"))
                     (rule "ifthenelse_to_or_right" (formula "12") (term "1,1,0,1,0"))
                     (rule "nnf_notAnd" (formula "12") (term "0,0,1,1,0,1,0"))
                     (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,1,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1,1,0,1,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,1,1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,1,0,1,0"))
                     (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,1,1,0,1,0"))
                     (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,1,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,1,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1,1,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,1,1,0,1,0"))
                     (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,1,1,0,1,0"))
                     (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,1,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,1,0,1,0"))
                     (rule "mul_literals" (formula "12") (term "1,0,0,0,1,1,0,1,0"))
                     (rule "cnf_rightDist" (formula "18") (term "0"))
                     (rule "distr_forallAnd" (formula "18"))
                     (rule "andLeft" (formula "18"))
                     (rule "commute_or_2" (formula "18") (term "0"))
                     (rule "shift_paren_or" (formula "19") (term "0"))
                     (rule "commute_or" (formula "18") (term "0,0"))
                     (rule "ifthenelse_split" (formula "1") (term "0"))
                     (branch "self.list.<created> = TRUE TRUE"
                        (rule "applyEqReverse" (formula "44") (term "0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "44"))
                        (rule "closeTrue" (formula "44"))
                     )
                     (branch "self.list.<created> = TRUE FALSE"
                        (rule "referencedObjectIsCreatedRight" (formula "41") (ifseqformula "42"))
                        (rule "close" (formula "41") (ifseqformula "4"))
                     )
                  )
               )
               (branch "self.index >= 1 FALSE"
                  (rule "inEqSimp_geqRight" (formula "26"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "1"))
                  (rule "leq_literals" (formula "11") (term "0"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "inEqSimp_antiSymm" (formula "10") (ifseqformula "1"))
                  (rule "applyEq" (formula "14") (term "1,1,0,1,1,0,0") (ifseqformula "10"))
                  (rule "add_zero_right" (formula "14") (term "1,0,1,1,0,0"))
                  (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "17") (term "1,0,1") (ifseqformula "10"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "10"))
                  (rule "leq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "applyEq" (formula "14") (term "2,0") (ifseqformula "9"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "eqSymm" (formula "14"))
                  (rule "applyEq" (formula "16") (term "1,1,0") (ifseqformula "9"))
                  (rule "add_literals" (formula "16") (term "1,0"))
                  (rule "applyEq" (formula "11") (term "1") (ifseqformula "9"))
                  (rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
                  (rule "qeq_literals" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "applyEq" (formula "11") (term "1,1,1,0,1,1,1,0,1,0") (ifseqformula "9"))
                  (rule "add_zero_right" (formula "11") (term "1,1,0,1,1,1,0,1,0"))
                  (rule "applyEq" (formula "12") (term "0,0,1,1,1,0,0") (ifseqformula "9"))
                  (rule "mul_literals" (formula "12") (term "0,1,1,1,0,0"))
                  (rule "add_zero_left" (formula "12") (term "1,1,1,0,0"))
                  (rule "applyEq" (formula "12") (term "0,1,1,1,1,1,0,1,0") (ifseqformula "9"))
                  (rule "add_zero_left" (formula "12") (term "1,1,1,1,1,0,1,0"))
                  (rule "applyEq" (formula "12") (term "0,1,0,1,1,0,1,1,1,0,1,0") (ifseqformula "9"))
                  (rule "times_zero_2" (formula "12") (term "1,0,1,1,0,1,1,1,0,1,0"))
                  (rule "add_zero_right" (formula "12") (term "0,1,1,0,1,1,1,0,1,0"))
                  (rule "inEqSimp_or_tautInEq0" (formula "11") (term "0,0"))
                  (rule "add_zero_right" (formula "11") (term "1,1,0,0"))
                  (rule "qeq_literals" (formula "11") (term "1,0,0"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "commute_and_2" (formula "20") (term "0"))
                  (rule "commute_or" (formula "21") (term "0,0"))
                  (rule "commute_or" (formula "23") (term "0,0"))
                  (rule "shift_paren_or" (formula "22") (term "0,1,0"))
                  (rule "lenNonNegative" (formula "15") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "15"))
                  (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                  (rule "lenNonNegative" (formula "16") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "16"))
                  (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                  (rule "seqGetAlphaCast" (formula "20") (term "0,1,0,1"))
                  (rule "castedGetAny" (formula "20") (term "0"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "true_left" (formula "20"))
                  (rule "commute_and_2" (formula "20") (term "0,0,0,1"))
                  (rule "applyEq_and_gen2" (formula "19") (term "1,0,1,0"))
                  (rule "seqGetAlphaCast" (formula "20") (term "0,1,1"))
                  (rule "castedGetAny" (formula "20") (term "0"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "true_left" (formula "20"))
                  (rule "cnf_rightDist" (formula "20"))
                  (rule "andLeft" (formula "20"))
                  (rule "cnf_rightDist" (formula "21"))
                  (rule "andLeft" (formula "21"))
                  (rule "cnf_rightDist" (formula "21"))
                  (rule "andLeft" (formula "21"))
                  (rule "commute_or" (formula "21"))
                  (rule "commute_or_2" (formula "25") (term "0,0,1,0"))
                  (rule "cnf_rightDist" (formula "20"))
                  (rule "andLeft" (formula "20"))
                  (rule "cnf_rightDist" (formula "21"))
                  (rule "andLeft" (formula "21"))
                  (rule "cnf_rightDist" (formula "21"))
                  (rule "andLeft" (formula "21"))
                  (rule "commute_or" (formula "21"))
                  (rule "commute_and_2" (formula "20") (term "1"))
                  (rule "applyEq_and_gen2" (formula "11") (term "1,0,1,0"))
                  (rule "ifEqualsNull" (formula "11") (term "0,0,1,0,1,0"))
                  (rule "nnf_notOr" (formula "11") (term "0,1,0,1,0"))
                  (rule "nnf_notAnd" (formula "11") (term "0,0,1,0,1,0"))
                  (rule "nnf_notAnd" (formula "11") (term "1,0,1,0,1,0"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "nnf_notAnd" (formula "11") (term "0,0,0,1,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0,1,0,1,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0,1,0,1,0"))
                  (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0,1,0,1,0"))
                  (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,0,1,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0,1,0,1,0"))
                  (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,0,1,0,1,0"))
                  (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,0,1,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,1,0,1,0"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,0,0,1,0,1,0"))
                  (rule "cnf_rightDist" (formula "20"))
                  (rule "andLeft" (formula "20"))
                  (rule "shift_paren_and" (formula "18") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "castedGetAny" (formula "18") (term "0,0,1,0,0,1,0"))
                  (rule "castedGetAny" (formula "18") (term "1,0,0,1,0,1,0"))
                  (rule "castedGetAny" (formula "18") (term "0,0,0,0,0,1,0"))
                  (rule "castedGetAny" (formula "18") (term "1,0,1,1,0,0,1,0"))
                  (rule "cnf_rightDist" (formula "21"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "cnf_rightDist" (formula "21"))
                  (rule "andLeft" (formula "21"))
                  (rule "commute_or" (formula "21"))
                  (rule "cnf_rightDist" (formula "20"))
                  (rule "andLeft" (formula "20"))
                  (rule "cnf_rightDist" (formula "21"))
                  (rule "andLeft" (formula "21"))
                  (rule "commute_or" (formula "22"))
                  (rule "cnf_rightDist" (formula "21"))
                  (rule "andLeft" (formula "21"))
                  (rule "commute_or" (formula "21"))
                  (rule "commute_or" (formula "33") (term "0,0,0,1,0"))
                  (rule "cnf_rightDist" (formula "18") (term "0"))
                  (rule "distr_forallAnd" (formula "18"))
                  (rule "andLeft" (formula "18"))
                  (rule "shift_paren_or" (formula "19") (term "0"))
                  (rule "cnf_rightDist" (formula "21"))
                  (rule "andLeft" (formula "21"))
                  (rule "commute_or" (formula "21"))
                  (rule "cnf_rightDist" (formula "22"))
                  (rule "andLeft" (formula "22"))
                  (rule "commute_or" (formula "23"))
                  (rule "cnf_rightDist" (formula "21"))
                  (rule "andLeft" (formula "21"))
                  (rule "commute_or" (formula "22"))
                  (rule "cnf_rightDist" (formula "23"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "commute_or" (formula "23"))
                  (rule "cnf_rightDist" (formula "21"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "commute_or" (formula "21"))
                  (rule "cnf_rightDist" (formula "18") (term "0"))
                  (rule "distr_forallAnd" (formula "18"))
                  (rule "andLeft" (formula "18"))
                  (rule "shift_paren_or" (formula "19") (term "0"))
                  (rule "commute_or" (formula "11") (term "1,0,1,0,1,0"))
                  (rule "shift_paren_and" (formula "21") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "castedGetAny" (formula "21") (term "0,0,0,0,0,1,0"))
                  (rule "castedGetAny" (formula "21") (term "1,0,1,1,0,0,1,0"))
                  (rule "castedGetAny" (formula "21") (term "0,0,1,0,0,1,0"))
                  (rule "cnf_rightDist" (formula "18") (term "0"))
                  (rule "distr_forallAnd" (formula "18"))
                  (rule "andLeft" (formula "18"))
                  (rule "commute_or_2" (formula "18") (term "0"))
                  (rule "shift_paren_or" (formula "19") (term "0"))
                  (rule "commute_or" (formula "18") (term "0,0"))
                  (rule "commute_or_2" (formula "11") (term "0,0,1,0,1,0"))
                  (rule "cnf_rightDist" (formula "22") (term "0"))
                  (rule "distr_forallAnd" (formula "22"))
                  (rule "andLeft" (formula "22"))
                  (rule "shift_paren_or" (formula "23") (term "0"))
                  (rule "cnf_rightDist" (formula "22") (term "0"))
                  (rule "distr_forallAnd" (formula "22"))
                  (rule "andLeft" (formula "22"))
                  (rule "shift_paren_or" (formula "23") (term "0"))
                  (rule "cnf_rightDist" (formula "22") (term "0"))
                  (rule "distr_forallAnd" (formula "22"))
                  (rule "andLeft" (formula "22"))
                  (rule "commute_or_2" (formula "22") (term "0"))
                  (rule "shift_paren_or" (formula "23") (term "0"))
                  (rule "commute_or" (formula "22") (term "0,0"))
                  (rule "ifthenelse_split" (formula "1") (term "0"))
                  (branch "self.list.<created> = TRUE TRUE"
                     (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "2"))
                      (builtin "One Step Simplification" (formula "47"))
                     (rule "closeTrue" (formula "47"))
                  )
                  (branch "self.list.<created> = TRUE FALSE"
                     (rule "referencedObjectIsCreatedRight" (formula "44") (ifseqformula "45"))
                     (rule "close" (formula "44") (ifseqformula "4"))
                  )
               )
            )
         )
         (branch "(_ov_0, _fv_0) in infiniteUnion{int i;}(if ( 0 <= i & i < self.list.nodeList.length) then ((Node)(self.list.nodeList[i]).*) else ({}))"
            (rule "JML_represents_clause_for_LinkedList_footprint" (formula "9") (term "1,1,1,0,1") (inst "i=i") (userinteraction))
            (rule "JML_represents_clause_for_LinkedListIterator_footprint" (formula "9") (term "0,1,1,0,1") (userinteraction))
            (rule "selectOfAnon" (formula "9") (term "1") (userinteraction))
             (builtin "One Step Simplification" (formula "9"))
            (rule "elementOfSetMinus" (formula "9") (term "0,0,0,1") (userinteraction))
            (rule "ifthenelse_split" (formula "9") (term "1") (userinteraction))
            (branch " (_ov_0, _fv_0) in allLocs & !(_ov_0, _fv_0) in {(self, LinkedListIterator::$list)} cup {(self, LinkedListIterator::$curr)} cup {(self, LinkedListIterator::$index)} cup {(self, LinkedListIterator::$seen)} cup {(self, LinkedListIterator::$to_see)} cup {(self.list, LinkedList::$size)} cup {(self.list, LinkedList::$head)} cup {(self.list, LinkedList::$tail)} cup {(self.list, LinkedList::$nodeList)} cup {(self.list, LinkedList::$values)} cup infiniteUnion{int i;}(if ( 0 <= i & i < self.list.nodeList.length) then ((Node)(self.list.nodeList[i]).*) else ({})) & !_fv_0 = java.lang.Object::<created> | !_ov_0 = null & !_ov_0.<created> = TRUE TRUE"
                (builtin "One Step Simplification" (formula "1"))
               (rule "orLeft" (formula "1") (userinteraction))
               (branch " !(_ov_0, _fv_0) in {(self, LinkedListIterator::$list)} cup {(self, LinkedListIterator::$curr)} cup {(self, LinkedListIterator::$index)} cup {(self, LinkedListIterator::$seen)} cup {(self, LinkedListIterator::$to_see)} cup {(self.list, LinkedList::$size)} cup {(self.list, LinkedList::$head)} cup {(self.list, LinkedList::$tail)} cup {(self.list, LinkedList::$nodeList)} cup {(self.list, LinkedList::$values)} cup infiniteUnion{int i;}(if ( 0 <= i & i < self.list.nodeList.length) then ((Node)(self.list.nodeList[i]).*) else ({})) & !_fv_0 = java.lang.Object::<created>"
                  (rule "andLeft" (formula "1") (userinteraction))
                  (rule "notLeft" (formula "2") (userinteraction))
                  (rule "notLeft" (formula "1") (userinteraction))
                  (rule "elementOfUnion" (formula "8") (userinteraction))
                  (rule "elementOfUnion" (formula "8") (term "0") (userinteraction))
                  (rule "elementOfUnion" (formula "8") (term "0,0") (userinteraction))
                  (rule "elementOfUnion" (formula "8") (term "1") (userinteraction))
                  (rule "replace_known_left" (formula "8") (term "1,1") (ifseqformula "1") (userinteraction))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "closeTrue" (formula "8") (userinteraction))
               )
               (branch "!_ov_0 = null & !_ov_0.<created> = TRUE"
                  (rule "andLeft" (formula "1") (userinteraction))
                  (rule "notLeft" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "eqSymm" (formula "11"))
                  (rule "elementOfInfiniteUnion" (formula "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "exLeft" (formula "1") (inst "sk=i_0"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "eqSymm" (formula "3"))
                  (rule "castedGetAny" (formula "3") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "Class_invariant_axiom_for_LinkedListIterator" (formula "9") (inst "i=i") (inst "f=f") (inst "i_0=i_0") (inst "f_0=f_0"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "10"))
                  (rule "notLeft" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "eqSymm" (formula "15") (term "1"))
                  (rule "eqSymm" (formula "14"))
                  (rule "eqSymm" (formula "13"))
                  (rule "castedGetAny" (formula "15") (term "0,1"))
                  (rule "lenOfSeqSubEQ" (formula "11") (term "1,1,0,0") (ifseqformula "13"))
                  (rule "polySimp_elimSub" (formula "11") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,1,1,1,0,0"))
                  (rule "add_zero_right" (formula "11") (term "1,1,1,0,0"))
                  (rule "lenOfSeqSubEQ" (formula "12") (term "1,1,0,0") (ifseqformula "14"))
                  (rule "polySimp_elimSub" (formula "12") (term "1,1,1,0,0"))
                  (rule "polySimp_addComm0" (formula "12") (term "1,1,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "15") (term "0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "15") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,1,0,0"))
                  (rule "add_zero_right" (formula "11") (term "0,0,1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,1,0,0"))
                  (rule "polySimp_addComm1" (formula "12") (term "0,0,1,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "10"))
                  (rule "inEqSimp_commuteLeq" (formula "9"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "0,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0,1,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,0,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,1,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0,0,1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "0,0,1,1,1,0,0"))
                  (rule "getOfSeqSubEQ" (formula "11") (term "1,0,1,0,1,0") (ifseqformula "13"))
                  (rule "castDel" (formula "11") (term "2,1,0,1,0,1,0"))
                  (rule "add_zero_right" (formula "11") (term "1,1,1,0,1,0,1,0"))
                  (rule "polySimp_elimSub" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
                  (rule "times_zero_2" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
                  (rule "add_zero_right" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,1,0,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,1,0,1,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,1,0,1,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,1,0,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
                  (rule "getOfSeqSubEQ" (formula "12") (term "1,0,1,0,1,0") (ifseqformula "14"))
                  (rule "castDel" (formula "12") (term "2,1,0,1,0,1,0"))
                  (rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_addComm0" (formula "12") (term "1,1,1,0,1,0,1,0"))
                  (rule "polySimp_addComm0" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,1,0,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_mulAssoc" (formula "12") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,0,0,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,1,0,1,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1,0,1,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,1,0,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "0,1,1,0,1,0,1,0,1,0"))
                  (rule "mul_literals" (formula "12") (term "0,0,1,1,0,1,0,1,0,1,0"))
                  (rule "nnf_imp2or" (formula "11") (term "0"))
                  (rule "nnf_imp2or" (formula "12") (term "0"))
                  (rule "nnf_notAnd" (formula "11") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                  (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "12") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                  (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                  (rule "Class_invariant_axiom_for_LinkedList" (formula "16") (inst "i=i") (inst "i_0=i_0") (inst "j=j") (inst "i_1=i_1") (inst "i_2=i_2") (inst "f=f") (inst "i_3=i_3") (inst "n=n"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "translateJavaSubInt" (formula "16") (term "1,0,1,1,1,1,0,0,0"))
                  (rule "translateJavaSubInt" (formula "16") (term "1,1,0,0,1,0,0"))
                  (rule "andLeft" (formula "16"))
                  (rule "andLeft" (formula "16"))
                  (rule "andLeft" (formula "16"))
                  (rule "andLeft" (formula "16"))
                  (rule "andLeft" (formula "16"))
                  (rule "andLeft" (formula "16"))
                  (rule "andLeft" (formula "16"))
                  (rule "andLeft" (formula "16"))
                  (rule "eqSymm" (formula "23") (term "0,1,0,1,0"))
                  (rule "eqSymm" (formula "23") (term "1,1,0,1,0"))
                  (rule "eqSymm" (formula "22") (term "1,0"))
                  (rule "eqSymm" (formula "21") (term "1,1"))
                  (rule "eqSymm" (formula "21") (term "1,0,1"))
                  (rule "eqSymm" (formula "17"))
                  (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "22") (term "1,1,1,0,0"))
                  (rule "polySimp_elimSub" (formula "21") (term "1,0,0,1,1"))
                  (rule "mul_literals" (formula "21") (term "1,1,0,0,1,1"))
                  (rule "polySimp_addComm0" (formula "22") (term "1,0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "22") (term "1,1,0,0"))
                  (rule "polySimp_addComm0" (formula "21") (term "1,0,0,1,1"))
                  (rule "castedGetAny" (formula "24") (term "1,1,1,0"))
                  (rule "castedGetAny" (formula "23") (term "1,0,1,0,1,0"))
                  (rule "castedGetAny" (formula "23") (term "0,0,1,0,1,0"))
                  (rule "castedGetAny" (formula "22") (term "1,1,1,0"))
                  (rule "castedGetAny" (formula "21") (term "0,1,0,1"))
                  (rule "castedGetAny" (formula "22") (term "0,1,0"))
                  (rule "eqSymm" (formula "22") (term "1,0"))
                  (rule "castedGetAny" (formula "21") (term "0,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                  (rule "applyEq" (formula "18") (term "0") (ifseqformula "16"))
                  (rule "applyEq" (formula "10") (term "0") (ifseqformula "17"))
                  (rule "applyEq" (formula "14") (term "2,0") (ifseqformula "17"))
                  (rule "applyEq" (formula "12") (term "1,1,1,1,0,0") (ifseqformula "17"))
                  (rule "applyEq" (formula "21") (term "1,1,0,1,1") (ifseqformula "16"))
                  (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "17"))
                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "16"))
                  (rule "applyEq" (formula "12") (term "0,0,1,1,0,0") (ifseqformula "17"))
                  (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "17") (term "1") (ifseqformula "16"))
                  (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "12") (term "1,1,1,1,0,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "10") (term "0") (ifseqformula "16"))
                  (rule "applyEq" (formula "14") (term "2,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "12") (term "0,0,1,1,0,0") (ifseqformula "16"))
                  (rule "apply_eq_monomials" (formula "24") (term "1,0,0,1,0,0") (ifseqformula "17"))
                  (rule "polySimp_rightDist" (formula "24") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,0,0,1,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "24") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "24") (term "1,1,1,0,0,1,0,0"))
                  (rule "times_zero_1" (formula "24") (term "1,1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "24") (term "1,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                  (rule "apply_eq_monomials" (formula "20") (term "1,0,0,1,0,0") (ifseqformula "17"))
                  (rule "polySimp_rightDist" (formula "20") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "1,0,1,0,0,1,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "20") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "20") (term "1,1,1,0,0,1,0,0"))
                  (rule "times_zero_1" (formula "20") (term "1,1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "20") (term "1,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                  (rule "applyEq" (formula "12") (term "1,1,1,0,1,0,1,0,1,0") (ifseqformula "17"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                  (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "18"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                  (rule "mul_literals" (formula "2") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "add_literals" (formula "2") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "19"))
                  (rule "polySimp_mulComm0" (formula "11") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "11") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                  (rule "polySimp_elimOne" (formula "11") (term "0"))
                  (rule "nnf_imp2or" (formula "25") (term "1,0,1,0"))
                  (rule "nnf_imp2or" (formula "24") (term "0"))
                  (rule "nnf_imp2or" (formula "21") (term "0"))
                  (rule "nnf_imp2or" (formula "26") (term "0"))
                  (rule "nnf_imp2or" (formula "22") (term "0"))
                  (rule "nnf_imp2or" (formula "25") (term "0"))
                  (rule "nnf_notAnd" (formula "24") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                  (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                  (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "21") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                  (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                  (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "26") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                  (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                  (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "22") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                  (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                  (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "25") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                  (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                  (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                  (rule "nnf_imp2or" (formula "25") (term "0,1,0"))
                  (rule "nnf_notAnd" (formula "25") (term "0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0,1,0"))
                  (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0,1,0"))
                  (rule "add_zero_right" (formula "25") (term "0,0,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,1,0"))
                  (rule "mul_literals" (formula "25") (term "1,0,0,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,1,0"))
                  (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,1,0"))
                  (rule "add_zero_left" (formula "25") (term "0,0,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,1,0"))
                  (rule "commute_and" (formula "23") (term "0,0"))
                  (rule "commute_and" (formula "13") (term "0,0,1,0"))
                  (rule "commute_and" (formula "13") (term "1,0,1,0"))
                  (rule "commute_and" (formula "14") (term "0,0,1,0"))
                  (rule "commute_and" (formula "23") (term "0,0,0,0,1"))
                  (rule "commute_or_2" (formula "24") (term "0"))
                  (rule "commute_and" (formula "14") (term "1,0,1,0"))
                  (rule "commute_or_2" (formula "26") (term "0"))
                  (rule "seqGetAlphaCast" (formula "4") (term "0"))
                  (rule "castedGetAny" (formula "4") (term "0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "equalityToSeqGetAndSeqLenLeft" (formula "15") (inst "iv=iv"))
                  (rule "andLeft" (formula "15"))
                  (rule "lenOfSeqSub" (formula "15") (term "0"))
                  (rule "polySimp_elimSub" (formula "15") (term "1,0"))
                  (rule "times_zero_2" (formula "15") (term "1,1,0"))
                  (rule "add_zero_right" (formula "15") (term "1,0"))
                  (rule "lenOfSeqSub" (formula "16") (term "1,1,0,0"))
                  (rule "polySimp_elimSub" (formula "16") (term "1,1,1,0,0"))
                  (rule "times_zero_2" (formula "16") (term "1,1,1,1,0,0"))
                  (rule "add_zero_right" (formula "16") (term "1,1,1,0,0"))
                  (rule "lenOfSeqSubEQ" (formula "15") (term "1") (ifseqformula "17"))
                  (rule "eqSymm" (formula "15"))
                  (rule "polySimp_elimSub" (formula "15") (term "1,0"))
                  (rule "mul_literals" (formula "15") (term "1,1,0"))
                  (rule "add_zero_right" (formula "15") (term "1,0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "true_left" (formula "15"))
                  (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,1,0,0"))
                  (rule "add_zero_right" (formula "15") (term "0,0,1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                  (rule "applyEq" (formula "15") (term "0,0,1,0") (ifseqformula "16"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "true_left" (formula "15"))
                  (rule "seqGetAlphaCast" (formula "17") (term "0,1"))
                  (rule "castedGetAny" (formula "17") (term "0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "true_left" (formula "17"))
                  (rule "ifthenelse_split" (formula "13") (term "1,1,0,0"))
                  (branch "self.index >= 1 TRUE"
                     (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "13"))
                     (rule "leq_literals" (formula "10") (term "0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "true_left" (formula "10"))
                     (rule "commute_and" (formula "21") (term "1,0,1,0"))
                     (rule "commute_and" (formula "21") (term "0,0,1,0"))
                     (rule "commute_and" (formula "22") (term "0,0,1,0"))
                     (rule "commute_and" (formula "22") (term "1,0,1,0"))
                     (rule "commute_or" (formula "24") (term "0,0"))
                     (rule "commute_or" (formula "26") (term "0,0"))
                     (rule "commute_and_2" (formula "23") (term "0"))
                     (rule "shift_paren_or" (formula "25") (term "0,1,0"))
                     (rule "ifthenelse_split" (formula "14") (term "1,1,0,0"))
                     (branch "self.list.size >= 1 + self.index TRUE"
                        (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "14"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "14"))
                        (rule "inEqSimp_homoInEq0" (formula "11") (term "0"))
                        (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
                        (rule "add_literals" (formula "11") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0"))
                        (rule "add_zero_right" (formula "11") (term "0,0"))
                        (rule "qeq_literals" (formula "11") (term "0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "20"))
                        (rule "polySimp_rightDist" (formula "13") (term "0,0"))
                        (rule "mul_literals" (formula "13") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "13") (term "0"))
                        (rule "add_literals" (formula "13") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "13"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                        (rule "polySimp_elimOne" (formula "13") (term "0"))
                        (rule "inEqSimp_subsumption0" (formula "10") (ifseqformula "13"))
                        (rule "leq_literals" (formula "10") (term "0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "applyEq_and_gen2" (formula "11") (term "1,0,1,0"))
                        (rule "ifEqualsNull" (formula "11") (term "0,0,1,0,1,0"))
                        (rule "nnf_notOr" (formula "11") (term "0,1,0,1,0"))
                        (rule "nnf_notAnd" (formula "11") (term "1,0,1,0,1,0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "nnf_notAnd" (formula "11") (term "0,0,1,0,1,0"))
                        (rule "nnf_notAnd" (formula "11") (term "0,0,0,1,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0,1,0,1,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,0,1,0,1,0"))
                        (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,0,1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,1,0,1,0"))
                        (rule "mul_literals" (formula "11") (term "1,0,0,0,0,1,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0,1,0,1,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0,1,0,1,0"))
                        (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0,1,0,1,0"))
                        (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,0,1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0,1,0"))
                        (rule "applyEq_and_gen2" (formula "14") (term "1,0,1,0"))
                        (rule "ifEqualsNull" (formula "14") (term "0,0,1,0,1,0"))
                        (rule "nnf_notOr" (formula "14") (term "0,1,0,1,0"))
                        (rule "nnf_notAnd" (formula "14") (term "1,0,1,0,1,0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "nnf_notAnd" (formula "14") (term "0,0,1,0,1,0"))
                        (rule "nnf_notAnd" (formula "14") (term "0,0,0,1,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,0,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,0,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0,0,1,0,0,0,1,0,1,0"))
                        (rule "mul_literals" (formula "14") (term "0,0,1,0,0,1,0,0,0,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,0,1,0,0,1,0,0,0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,1,0,0,0,1,0,1,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,0,1,0,0,0,1,0,1,0"))
                        (rule "add_zero_left" (formula "14") (term "0,0,0,1,0,0,0,1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,0,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,0,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,0,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "0,1,1,0,0,0,1,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,0,1,0,1,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,0,1,0,1,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0,0,0,0,0,1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,1,0,1,0"))
                        (rule "mul_literals" (formula "14") (term "1,0,0,0,0,1,0,1,0"))
                        (rule "cnf_rightDist" (formula "23"))
                        (rule "andLeft" (formula "23"))
                        (rule "lenNonNegative" (formula "18") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "18"))
                        (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                        (rule "lenNonNegative" (formula "20") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "20"))
                        (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                        (rule "commute_or_2" (formula "27") (term "0,0,1,0"))
                        (rule "applyEq_and_gen2" (formula "23") (term "1,0,1,0"))
                        (rule "cnf_rightDist" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "equalityToSeqGetAndSeqLenLeft" (formula "16") (inst "iv=iv"))
                        (rule "andLeft" (formula "16"))
                        (rule "lenOfSeqSub" (formula "16") (term "0"))
                        (rule "polySimp_elimSub" (formula "16") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "16") (term "1,0"))
                        (rule "lenOfSeqSub" (formula "17") (term "1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "17") (term "1,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "17") (term "1,1,1,0,0"))
                        (rule "lenOfSeqSubEQ" (formula "16") (term "1") (ifseqformula "18"))
                        (rule "eqSymm" (formula "16"))
                        (rule "polySimp_elimSub" (formula "16") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "16") (term "1,0"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "0,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,1,0,0"))
                        (rule "polySimp_addComm1" (formula "16") (term "0,0,1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                        (rule "applyEq" (formula "16") (term "0,0,1,0") (ifseqformula "17"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "cnf_rightDist" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "commute_or" (formula "25"))
                        (rule "cnf_rightDist" (formula "24"))
                        (rule "andLeft" (formula "24"))
                        (rule "shift_paren_and" (formula "22") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "castedGetAny" (formula "22") (term "1,0,1,1,0,0,1,0"))
                        (rule "castedGetAny" (formula "22") (term "1,0,0,1,0,1,0"))
                        (rule "castedGetAny" (formula "22") (term "0,0,1,0,0,1,0"))
                        (rule "castedGetAny" (formula "22") (term "0,0,0,0,0,1,0"))
                        (rule "commute_or" (formula "11") (term "1,0,1,0,1,0"))
                        (rule "cnf_rightDist" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "commute_or_2" (formula "11") (term "0,0,1,0,1,0"))
                        (rule "commute_or" (formula "14") (term "1,0,1,0,1,0"))
                        (rule "cnf_rightDist" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "commute_or" (formula "25"))
                        (rule "cnf_rightDist" (formula "24"))
                        (rule "andLeft" (formula "24"))
                        (rule "cnf_rightDist" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "commute_or" (formula "26"))
                        (rule "cnf_rightDist" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "commute_or" (formula "25"))
                        (rule "commute_or" (formula "35") (term "0,0,0,1,0"))
                        (rule "cnf_rightDist" (formula "22") (term "0"))
                        (rule "distr_forallAnd" (formula "22"))
                        (rule "andLeft" (formula "22"))
                        (rule "shift_paren_or" (formula "23") (term "0"))
                        (rule "commute_and_2" (formula "25") (term "1"))
                        (rule "commute_or_2" (formula "14") (term "0,0,1,0,1,0"))
                        (rule "cnf_rightDist" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "cnf_rightDist" (formula "26"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "cnf_rightDist" (formula "26"))
                        (rule "andLeft" (formula "26"))
                        (rule "commute_or" (formula "26"))
                        (rule "cnf_rightDist" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "commute_or" (formula "25"))
                        (rule "cnf_rightDist" (formula "26"))
                        (rule "andLeft" (formula "26"))
                        (rule "commute_or" (formula "27"))
                        (rule "cnf_rightDist" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "commute_or" (formula "26"))
                        (rule "cnf_rightDist" (formula "27"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "commute_or" (formula "27"))
                        (rule "cnf_rightDist" (formula "25"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "commute_or" (formula "25"))
                        (rule "cnf_rightDist" (formula "22") (term "0"))
                        (rule "distr_forallAnd" (formula "22"))
                        (rule "andLeft" (formula "22"))
                        (rule "shift_paren_or" (formula "23") (term "0"))
                        (rule "ifthenelse_to_or_right" (formula "11") (term "1,1,0,1,0"))
                        (rule "nnf_notAnd" (formula "11") (term "0,0,1,1,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,1,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,1,0,1,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,1,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,1,0,1,0"))
                        (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,1,1,0,1,0"))
                        (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,1,1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,1,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1,1,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,1,1,0,1,0"))
                        (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0,1,1,0,1,0"))
                        (rule "add_literals" (formula "11") (term "0,0,0,0,0,1,1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,1,0,1,0"))
                        (rule "mul_literals" (formula "11") (term "1,0,0,0,1,1,0,1,0"))
                        (rule "shift_paren_and" (formula "25") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "castedGetAny" (formula "25") (term "0,0,0,0,0,1,0"))
                        (rule "castedGetAny" (formula "25") (term "0,0,1,0,0,1,0"))
                        (rule "castedGetAny" (formula "25") (term "1,0,1,1,0,0,1,0"))
                        (rule "cnf_rightDist" (formula "22") (term "0"))
                        (rule "distr_forallAnd" (formula "22"))
                        (rule "andLeft" (formula "22"))
                        (rule "commute_or_2" (formula "22") (term "0"))
                        (rule "shift_paren_or" (formula "23") (term "0"))
                        (rule "commute_or" (formula "22") (term "0,0"))
                        (rule "ifthenelse_to_or_right" (formula "14") (term "1,1,0,1,0"))
                        (rule "nnf_notAnd" (formula "14") (term "0,0,1,1,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,1,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,1,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,1,0,0,1,0,0,1,1,0,1,0"))
                        (rule "mul_literals" (formula "14") (term "0,0,1,0,0,1,0,0,1,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0,0,1,0,0,1,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,0,1,0,0,1,0,0,1,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,1,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,1,0,0,1,1,0,1,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,0,1,0,0,1,1,0,1,0"))
                        (rule "add_zero_left" (formula "14") (term "0,0,0,1,0,0,1,1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,1,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "0,1,1,0,0,1,1,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,1,1,0,1,0"))
                        (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0,1,1,0,1,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,0,0,1,1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,1,0,1,0"))
                        (rule "mul_literals" (formula "14") (term "1,0,0,0,1,1,0,1,0"))
                        (rule "cnf_rightDist" (formula "26") (term "0"))
                        (rule "distr_forallAnd" (formula "26"))
                        (rule "andLeft" (formula "26"))
                        (rule "shift_paren_or" (formula "27") (term "0"))
                        (rule "commute_or" (formula "11") (term "0,0,0,1,0,1,0"))
                        (rule "commute_or" (formula "14") (term "0,0,0,1,0,1,0"))
                        (rule "commute_or" (formula "11") (term "1,1,1,0,1,0"))
                        (rule "cnf_rightDist" (formula "11") (term "1,0,1,0,1,0"))
                        (rule "cnf_rightDist" (formula "26") (term "0"))
                        (rule "distr_forallAnd" (formula "26"))
                        (rule "andLeft" (formula "26"))
                        (rule "shift_paren_or" (formula "27") (term "0"))
                        (rule "cnf_rightDist" (formula "14") (term "1,0,1,0,1,0"))
                        (rule "cnf_rightDist" (formula "26") (term "0"))
                        (rule "distr_forallAnd" (formula "26"))
                        (rule "andLeft" (formula "26"))
                        (rule "commute_or_2" (formula "26") (term "0"))
                        (rule "shift_paren_or" (formula "27") (term "0"))
                        (rule "commute_or" (formula "26") (term "0,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "1,0,0") (ifseqformula "5"))
                        (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "49"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "commute_or_2" (formula "12") (term "0,1,1,0,1,0"))
                        (rule "commute_or" (formula "15") (term "1,1,1,0,1,0"))
                        (rule "commute_or_2" (formula "15") (term "0,1,1,0,1,0"))
                        (rule "all_pull_out3" (formula "47") (term "0"))
                        (rule "shift_paren_or" (formula "47") (term "0,0"))
                        (rule "shift_paren_or" (formula "47") (term "0,0,0"))
                        (rule "shift_paren_or" (formula "47") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "47") (term "0,0,0,0,0"))
                        (rule "commute_or" (formula "12") (term "0,1,0,1,0,1,0"))
                        (rule "commute_or" (formula "47") (term "0,0,0,0,0,0"))
                        (rule "commute_or" (formula "15") (term "0,1,0,1,0,1,0"))
                        (rule "commute_or" (formula "12") (term "0,0,1,1,0,1,0"))
                        (rule "commute_or" (formula "15") (term "0,0,1,1,0,1,0"))
                        (rule "cnf_rightDist" (formula "12") (term "1,1,1,0,1,0"))
                        (rule "commute_or" (formula "12") (term "1,1,1,1,0,1,0"))
                        (rule "cnf_rightDist" (formula "15") (term "1,1,1,0,1,0"))
                        (rule "commute_or" (formula "15") (term "1,1,1,1,0,1,0"))
                        (rule "cut_direct" (formula "45") (term "0"))
                        (branch "CUT: self.list.nodeList = seqEmpty TRUE"
                            (builtin "One Step Simplification" (formula "46"))
                           (rule "true_left" (formula "46"))
                           (rule "replace_known_left" (formula "36") (term "0,1") (ifseqformula "45"))
                            (builtin "One Step Simplification" (formula "36"))
                           (rule "replace_known_left" (formula "34") (term "1") (ifseqformula "45"))
                            (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "36")))
                           (rule "true_left" (formula "34"))
                           (rule "replace_known_left" (formula "38") (term "1") (ifseqformula "44"))
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "true_left" (formula "38"))
                           (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "43"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "true_left" (formula "32"))
                           (rule "replace_known_left" (formula "39") (term "0") (ifseqformula "42"))
                            (builtin "One Step Simplification" (formula "39"))
                           (rule "true_left" (formula "39"))
                           (rule "replace_known_left" (formula "33") (term "0,1") (ifseqformula "41"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "replace_known_left" (formula "40") (term "0") (ifseqformula "34"))
                            (builtin "One Step Simplification" (formula "40"))
                           (rule "true_left" (formula "40"))
                           (rule "replace_known_left" (formula "32") (term "0,1") (ifseqformula "34"))
                            (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "33")))
                           (rule "true_left" (formula "32"))
                           (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "33"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "true_left" (formula "35"))
                           (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "33"))
                            (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "32")))
                           (rule "true_left" (formula "31"))
                           (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "32"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "true_left" (formula "35"))
                           (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "31"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "true_left" (formula "35"))
                           (rule "replace_known_left" (formula "33") (term "0") (ifseqformula "31"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "true_left" (formula "33"))
                           (rule "replace_known_left" (formula "33") (term "0") (ifseqformula "31"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "true_left" (formula "33"))
                           (rule "applyEq" (formula "24") (term "0,1,0,1,0,0,0") (ifseqformula "33"))
                           (rule "applyEq" (formula "36") (term "0,1,1,0,0,0") (ifseqformula "33"))
                           (rule "applyEq" (formula "34") (term "0,1,0,0,0,0") (ifseqformula "33"))
                           (rule "applyEq" (formula "35") (term "0,0,0,0,0,0,0,0,0,0") (ifseqformula "33"))
                           (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "33"))
                           (rule "eqSymm" (formula "5"))
                           (rule "applyEq" (formula "25") (term "0,1,0,0,0,0,0") (ifseqformula "33"))
                           (rule "applyEq" (formula "34") (term "0,1,0,0,0") (ifseqformula "33"))
                           (rule "applyEq" (formula "24") (term "0,0,0,0,0,0") (ifseqformula "33"))
                           (rule "applyEq" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "33"))
                           (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "33"))
                           (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "33"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "eqSymm" (formula "20"))
                           (rule "applyEq" (formula "35") (term "0,1,0,0,0,0,0,0,0,0") (ifseqformula "33"))
                           (rule "applyEq" (formula "23") (term "0,0,0,0,0,0") (ifseqformula "33"))
                           (rule "applyEq" (formula "15") (term "1,1,1,0,0") (ifseqformula "20"))
                           (rule "add_zero_right" (formula "15") (term "1,1,0,0"))
                           (rule "applyEq" (formula "36") (term "1,1,0") (ifseqformula "20"))
                           (rule "applyEqRigid" (formula "38") (term "1,0") (ifseqformula "5"))
                           (rule "applyEq" (formula "17") (term "2,0") (ifseqformula "20"))
                           (rule "applyEqRigid" (formula "39") (term "0") (ifseqformula "5"))
                           (rule "applyEq" (formula "41") (term "1,1") (ifseqformula "5"))
                           (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "20"))
                           (rule "applyEq" (formula "22") (term "0") (ifseqformula "20"))
                           (rule "leq_literals" (formula "22"))
                           (rule "true_left" (formula "22"))
                           (rule "applyEq" (formula "34") (term "1,1,0,0,0") (ifseqformula "20"))
                           (rule "applyEq" (formula "26") (term "1,1,0") (ifseqformula "20"))
                           (rule "applyEq" (formula "29") (term "1,1,0") (ifseqformula "20"))
                           (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "20"))
                           (rule "applyEq" (formula "15") (term "1,1,1,0,0,1,0,1,0") (ifseqformula "20"))
                           (rule "add_zero_right" (formula "15") (term "1,1,0,0,1,0,1,0"))
                           (rule "applyEq" (formula "15") (term "1,1,1,1,1,1,1,0,1,0") (ifseqformula "20"))
                           (rule "add_zero_right" (formula "15") (term "1,1,1,1,1,1,0,1,0"))
                           (rule "applyEq" (formula "34") (term "1,1,0,0,0,0,0") (ifseqformula "20"))
                           (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "20"))
                           (rule "applyEq" (formula "23") (term "1,1,0") (ifseqformula "20"))
                           (rule "applyEqRigid" (formula "40") (term "1,0") (ifseqformula "5"))
                           (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "20"))
                           (rule "applyEq" (formula "14") (term "0") (ifseqformula "20"))
                           (rule "inEqSimp_homoInEq1" (formula "14"))
                           (rule "times_zero_2" (formula "14") (term "1,0"))
                           (rule "add_zero_right" (formula "14") (term "0"))
                           (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "20"))
                           (rule "applyEq" (formula "33") (term "1,1,1,0") (ifseqformula "20"))
                           (rule "add_zero_right" (formula "33") (term "1,1,0"))
                           (rule "applyEq" (formula "3") (term "0") (ifseqformula "20"))
                           (rule "inEqSimp_homoInEq1" (formula "3"))
                           (rule "times_zero_2" (formula "3") (term "1,0"))
                           (rule "add_zero_right" (formula "3") (term "0"))
                           (rule "applyEq" (formula "15") (term "1,1,0,1,1,0,1,0,1,0") (ifseqformula "20"))
                           (rule "add_zero_right" (formula "15") (term "1,0,1,1,0,1,0,1,0"))
                           (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                           (rule "qeq_literals" (formula "19"))
                           (rule "true_left" (formula "19"))
                           (rule "applyEq" (formula "15") (term "1,1,1,0,1,1,0,1,0") (ifseqformula "19"))
                           (rule "add_zero_right" (formula "15") (term "1,1,0,1,1,0,1,0"))
                           (rule "applyEq" (formula "20") (term "1") (ifseqformula "19"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "14"))
                           (rule "mul_literals" (formula "14") (term "1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "mul_literals" (formula "3") (term "1"))
                           (rule "inEqSimp_subsumption0" (formula "13") (ifseqformula "14"))
                           (rule "leq_literals" (formula "13") (term "0"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "true_left" (formula "13"))
                           (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "13"))
                           (rule "qeq_literals" (formula "11") (term "0"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "closeFalse" (formula "11"))
                        )
                        (branch "CUT: self.list.nodeList = seqEmpty FALSE"
                            (builtin "One Step Simplification" (formula "45"))
                           (rule "replace_known_right" (formula "42") (term "0") (ifseqformula "49"))
                            (builtin "One Step Simplification" (formula "42"))
                           (rule "replace_known_left" (formula "44") (term "1") (ifseqformula "45"))
                            (builtin "One Step Simplification" (formula "44"))
                           (rule "true_left" (formula "44"))
                           (rule "replace_known_right" (formula "35") (term "0,1") (ifseqformula "48"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "true_left" (formula "35"))
                           (rule "replace_known_left" (formula "42") (term "1") (ifseqformula "43"))
                            (builtin "One Step Simplification" (formula "42"))
                           (rule "true_left" (formula "42"))
                           (rule "replace_known_right" (formula "38") (term "1") (ifseqformula "46"))
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "replace_known_right" (formula "35") (term "0,1") (ifseqformula "46"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "true_left" (formula "35"))
                           (rule "replace_known_right" (formula "34") (term "1") (ifseqformula "45"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "notLeft" (formula "34"))
                           (rule "replace_known_right" (formula "32") (term "1") (ifseqformula "45"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "notLeft" (formula "32"))
                           (rule "replace_known_left" (formula "36") (term "1") (ifseqformula "38"))
                            (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "43")))
                           (rule "true_left" (formula "36"))
                           (rule "replace_known_left" (formula "36") (term "1") (ifseqformula "37"))
                            (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "43")))
                           (rule "true_left" (formula "36"))
                           (rule "replace_known_right" (formula "33") (term "0") (ifseqformula "41"))
                            (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "35")))
                           (rule "true_left" (formula "33"))
                           (rule "replace_known_left" (formula "33") (term "1") (ifseqformula "34"))
                            (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "41")))
                           (rule "true_left" (formula "33"))
                           (rule "replace_known_right" (formula "31") (term "1") (ifseqformula "40"))
                            (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "39")))
                           (rule "true_left" (formula "31"))
                           (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "38"))
                            (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "39")))
                           (rule "true_left" (formula "31"))
                           (rule "equalityToSeqGetAndSeqLenRight" (formula "39") (inst "iv=iv"))
                            (builtin "One Step Simplification" (formula "39"))
                           (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0,1"))
                           (rule "applyEq" (formula "39") (term "0,0") (ifseqformula "20"))
                           (rule "applyEq" (formula "39") (term "0,1,0,0,1,0,0,1") (ifseqformula "20"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0,1"))
                           (rule "mul_literals" (formula "39") (term "0,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0,1"))
                           (rule "nnf_imp2or" (formula "39") (term "0,1"))
                           (rule "nnf_notAnd" (formula "39") (term "0,0,1"))
                           (rule "inEqSimp_notGeq" (formula "39") (term "0,0,0,1"))
                           (rule "mul_literals" (formula "39") (term "1,0,0,0,0,0,1"))
                           (rule "add_zero_right" (formula "39") (term "0,0,0,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,0,0,1"))
                           (rule "mul_literals" (formula "39") (term "1,0,0,0,1"))
                           (rule "inEqSimp_notLeq" (formula "39") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0,0,1"))
                           (rule "mul_literals" (formula "39") (term "0,1,0,0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0,1"))
                           (rule "add_literals" (formula "39") (term "0,0,0,1,0,0,1"))
                           (rule "add_zero_left" (formula "39") (term "0,0,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0,1"))
                           (rule "shift_paren_and" (formula "12") (term "0,1,0,1,0"))
                           (rule "shift_paren_and" (formula "15") (term "0,1,0,1,0"))
                           (rule "shift_paren_and" (formula "12") (term "1,1,0,1,0"))
                           (rule "shift_paren_and" (formula "15") (term "1,1,0,1,0"))
                           (rule "allLeft" (formula "36") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                           (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                           (rule "applyEq" (formula "36") (term "1,1,0,0") (ifseqformula "18"))
                           (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "14"))
                           (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                           (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                           (rule "add_literals" (formula "36") (term "0,0,1"))
                           (rule "leq_literals" (formula "36") (term "0,1"))
                            (builtin "One Step Simplification" (formula "36"))
                           (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "11"))
                           (rule "qeq_literals" (formula "36") (term "0,1"))
                            (builtin "One Step Simplification" (formula "36"))
                           (rule "allLeft" (formula "37") (inst "t=i_0"))
                           (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                           (rule "applyEq" (formula "37") (term "1,1,0,0") (ifseqformula "5"))
                           (rule "inEqSimp_contradInEq1" (formula "37") (term "1,0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "37") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "37"))
                           (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "3"))
                           (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                           (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                           (rule "add_literals" (formula "37") (term "0,0,1"))
                           (rule "leq_literals" (formula "37") (term "0,1"))
                            (builtin "One Step Simplification" (formula "37"))
                           (rule "shift_paren_and" (formula "12") (term "1,0,1,0"))
                           (rule "shift_paren_and" (formula "15") (term "1,0,1,0"))
                           (rule "shift_paren_and" (formula "12") (term "0,1,0,1,0"))
                           (rule "shift_paren_and" (formula "12") (term "0,1,0"))
                           (rule "shift_paren_and" (formula "12") (term "0,0,1,0"))
                           (rule "shift_paren_and" (formula "15") (term "0,1,0,1,0"))
                           (rule "shift_paren_and" (formula "15") (term "0,1,0"))
                           (rule "shift_paren_and" (formula "15") (term "0,0,1,0"))
                           (rule "shift_paren_and" (formula "12") (term "0,0,0,1,0"))
                           (rule "shift_paren_and" (formula "15") (term "0,0,0,1,0"))
                           (rule "shift_paren_and" (formula "12") (term "0,0,0,0,1,0"))
                           (rule "shift_paren_and" (formula "15") (term "0,0,0,0,1,0"))
                           (rule "allLeft" (formula "25") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                           (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                           (rule "applyEq" (formula "25") (term "1,0,0,0,0") (ifseqformula "18"))
                           (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "14"))
                           (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                           (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                           (rule "add_literals" (formula "25") (term "0,0,1"))
                           (rule "leq_literals" (formula "25") (term "0,1"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "11"))
                           (rule "qeq_literals" (formula "25") (term "0,1"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "notLeft" (formula "25"))
                           (rule "allLeft" (formula "25") (inst "t=i_0"))
                           (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                           (rule "applyEq" (formula "25") (term "1,0,0,0,0") (ifseqformula "5"))
                           (rule "inEqSimp_contradInEq1" (formula "25") (term "1,0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "25") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "3"))
                           (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                           (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "25") (term "0,0,1"))
                           (rule "leq_literals" (formula "25") (term "0,1"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "notLeft" (formula "25"))
                           (rule "allLeft" (formula "23") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                           (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                           (rule "applyEq" (formula "23") (term "0,0,0,0") (ifseqformula "18"))
                           (rule "inEqSimp_contradInEq1" (formula "23") (term "1,0") (ifseqformula "11"))
                           (rule "qeq_literals" (formula "23") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "14"))
                           (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
                           (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                           (rule "add_literals" (formula "23") (term "0,0,1"))
                           (rule "leq_literals" (formula "23") (term "0,1"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "notLeft" (formula "23"))
                           (rule "allLeft" (formula "23") (inst "t=i_0"))
                           (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                           (rule "applyEq" (formula "23") (term "0,0,0,0") (ifseqformula "5"))
                           (rule "replace_known_right" (formula "23") (term "0,0,0") (ifseqformula "48"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "true_left" (formula "23"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "1") (ifseqformula "6"))
                           (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "40"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "shift_paren_and" (formula "12") (term "0,0,0,0,0,1,0"))
                           (rule "shift_paren_and" (formula "15") (term "0,0,0,0,0,1,0"))
                           (rule "seqGetAlphaCast" (formula "34") (term "0"))
                           (rule "castedGetAny" (formula "34") (term "0"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "true_left" (formula "34"))
                           (rule "seqGetAlphaCast" (formula "33") (term "0"))
                           (rule "castedGetAny" (formula "33") (term "0"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "true_left" (formula "33"))
                           (rule "allLeft" (formula "30") (inst "t=i_0"))
                           (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                           (rule "applyEq" (formula "30") (term "0,0,0,0") (ifseqformula "39"))
                           (rule "replace_known_right" (formula "30") (term "0,0,0") (ifseqformula "42"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "allLeft" (formula "31") (inst "t=i_0"))
                           (rule "typeEqDerived" (formula "31") (term "0,0,0") (ifseqformula "39"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "true_left" (formula "31"))
                           (rule "allLeft" (formula "31") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                           (rule "typeEqDerived" (formula "31") (term "0,0,0") (ifseqformula "38"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "true_left" (formula "31"))
                           (rule "allLeft" (formula "30") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                           (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                           (rule "applyEq" (formula "30") (term "0,0,0,0") (ifseqformula "38"))
                           (rule "replace_known_right" (formula "30") (term "0,0,0") (ifseqformula "43"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "ex_pull_out3" (formula "12") (term "0"))
                           (rule "cnf_rightDist" (formula "12") (term "0,0"))
                           (rule "shift_paren_or" (formula "12") (term "1,0,0"))
                           (rule "commute_or_2" (formula "12") (term "0,1,0,0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "12") (term "1,0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "12") (term "1,1,0,0"))
                           (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,1,0,0"))
                           (rule "add_literals" (formula "12") (term "1,0,1,1,0,0"))
                           (rule "times_zero_1" (formula "12") (term "0,1,1,0,0"))
                           (rule "leq_literals" (formula "12") (term "1,1,0,0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "cnf_rightDist" (formula "12") (term "0,0"))
                           (rule "shift_paren_or" (formula "12") (term "1,0,0"))
                           (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0,1,0,0"))
                           (rule "add_zero_right" (formula "12") (term "1,1,0,1,0,0"))
                           (rule "qeq_literals" (formula "12") (term "1,0,1,0,0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "cnf_rightDist" (formula "12") (term "0,0"))
                           (rule "shift_paren_or" (formula "12") (term "1,0,0"))
                           (rule "commute_or_2" (formula "12") (term "0,1,0,0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                           (rule "commute_or_2" (formula "12") (term "1,0,0,0"))
                           (rule "shift_paren_or" (formula "12") (term "0,1,0,0,0"))
                           (rule "commute_or" (formula "12") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "12") (term "0,1,0,0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0,1,0,0,0"))
                           (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0,1,0,0,0"))
                           (rule "add_literals" (formula "12") (term "1,0,1,0,1,0,0,0"))
                           (rule "times_zero_1" (formula "12") (term "0,1,0,1,0,0,0"))
                           (rule "leq_literals" (formula "12") (term "1,0,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                           (rule "commute_or_2" (formula "12") (term "1,0,0,0"))
                           (rule "shift_paren_or" (formula "12") (term "0,1,0,0,0"))
                           (rule "inEqSimp_or_tautInEq2" (formula "12") (term "0,0,1,0,0,0"))
                           (rule "add_literals" (formula "12") (term "1,1,0,0,1,0,0,0"))
                           (rule "qeq_literals" (formula "12") (term "1,0,0,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                           (rule "shift_paren_or" (formula "12") (term "1,0,0,0"))
                           (rule "commute_or_2" (formula "12") (term "0,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "cnf_rightDist" (formula "12") (term "0,0,0,0"))
                           (rule "commute_or_2" (formula "12") (term "0,0,0,0,0"))
                           (rule "shift_paren_or" (formula "12") (term "1,0,0,0,0"))
                           (rule "commute_or" (formula "12") (term "0,0,0,0,0,0"))
                           (rule "ex_pull_out3" (formula "15") (term "0"))
                           (rule "cnf_rightDist" (formula "15") (term "0,0"))
                           (rule "shift_paren_or" (formula "15") (term "1,0,0"))
                           (rule "commute_or_2" (formula "15") (term "0,1,0,0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "15") (term "1,0,0"))
                           (rule "polySimp_addAssoc" (formula "15") (term "1,1,1,0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "15") (term "1,1,0,0"))
                           (rule "polySimp_pullOutFactor1" (formula "15") (term "0,1,1,0,0"))
                           (rule "add_literals" (formula "15") (term "1,0,1,1,0,0"))
                           (rule "times_zero_1" (formula "15") (term "0,1,1,0,0"))
                           (rule "leq_literals" (formula "15") (term "1,1,0,0"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "cnf_rightDist" (formula "15") (term "0,0"))
                           (rule "shift_paren_or" (formula "15") (term "1,0,0"))
                           (rule "inEqSimp_or_tautInEq3" (formula "15") (term "0,1,0,0"))
                           (rule "add_zero_right" (formula "15") (term "1,1,0,1,0,0"))
                           (rule "qeq_literals" (formula "15") (term "1,0,1,0,0"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "cnf_rightDist" (formula "15") (term "0,0"))
                           (rule "shift_paren_or" (formula "15") (term "1,0,0"))
                           (rule "commute_or_2" (formula "15") (term "0,1,0,0"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "cnf_rightDist" (formula "15") (term "0,0,0"))
                           (rule "commute_or_2" (formula "15") (term "1,0,0,0"))
                           (rule "shift_paren_or" (formula "15") (term "0,1,0,0,0"))
                           (rule "commute_or" (formula "15") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "15") (term "0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "15") (term "1,1,0,1,0,0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "15") (term "1,0,1,0,0,0"))
                           (rule "polySimp_pullOutFactor1" (formula "15") (term "0,1,0,1,0,0,0"))
                           (rule "add_literals" (formula "15") (term "1,0,1,0,1,0,0,0"))
                           (rule "times_zero_1" (formula "15") (term "0,1,0,1,0,0,0"))
                           (rule "leq_literals" (formula "15") (term "1,0,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "cnf_rightDist" (formula "15") (term "0,0,0"))
                           (rule "commute_or_2" (formula "15") (term "1,0,0,0"))
                           (rule "cut_direct" (formula "45") (term "0"))
                           (branch "CUT: self.list.size = 0 TRUE"
                               (builtin "One Step Simplification" (formula "46"))
                              (rule "allRight" (formula "46") (inst "sk=iv_0"))
                              (rule "orRight" (formula "46"))
                              (rule "orRight" (formula "46"))
                              (rule "inEqSimp_geqRight" (formula "47"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "47"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "29") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "38") (term "1,1,1,0") (ifseqformula "3"))
                              (rule "add_zero_right" (formula "38") (term "1,1,0"))
                              (rule "applyEq" (formula "31") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "42") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "37") (term "1,1,0") (ifseqformula "3"))
                              (rule "add_literals" (formula "37") (term "1,0"))
                              (rule "applyEq" (formula "6") (term "0") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "6"))
                              (rule "times_zero_2" (formula "6") (term "1,0"))
                              (rule "add_zero_right" (formula "6") (term "0"))
                              (rule "applyEq" (formula "34") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "39") (term "1,1,0,0,0,0,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "30") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "18") (term "1,1,1,1,0,0") (ifseqformula "3"))
                              (rule "add_zero_right" (formula "18") (term "1,1,1,0,0"))
                              (rule "applyEq" (formula "33") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "32") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "18") (term "1,1,1,0,0,0,0,0") (ifseqformula "3"))
                              (rule "add_zero_right" (formula "18") (term "1,1,0,0,0,0,0"))
                              (rule "applyEq" (formula "26") (term "0") (ifseqformula "3"))
                              (rule "leq_literals" (formula "26"))
                              (rule "true_left" (formula "26"))
                              (rule "applyEq" (formula "38") (term "1,1,0,0,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "23") (term "0") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEq" (formula "20") (term "2,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "18") (term "1,1,1,1,1,0,0,0,0") (ifseqformula "3"))
                              (rule "add_zero_right" (formula "18") (term "1,1,1,1,0,0,0,0"))
                              (rule "applyEq" (formula "17") (term "0") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "17"))
                              (rule "times_zero_2" (formula "17") (term "1,0"))
                              (rule "add_zero_right" (formula "17") (term "0"))
                              (rule "applyEq" (formula "18") (term "1,1,1,1,0,1,0,0,0") (ifseqformula "3"))
                              (rule "add_zero_right" (formula "18") (term "1,1,1,0,1,0,0,0"))
                              (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "3"))
                              (rule "times_zero_2" (formula "2") (term "1,0"))
                              (rule "add_zero_right" (formula "2") (term "0"))
                              (rule "applyEq" (formula "24") (term "1") (ifseqformula "3"))
                              (rule "applyEq" (formula "23") (term "1") (ifseqformula "3"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                              (rule "mul_literals" (formula "6") (term "1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "17"))
                              (rule "mul_literals" (formula "17") (term "1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                              (rule "mul_literals" (formula "2") (term "1"))
                              (rule "inEqSimp_subsumption0" (formula "16") (ifseqformula "17"))
                              (rule "leq_literals" (formula "16") (term "0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "true_left" (formula "16"))
                              (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "2") (term "0"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "closeFalse" (formula "2"))
                           )
                           (branch "CUT: self.list.size = 0 FALSE"
                               (builtin "One Step Simplification" (formula "46"))
                              (rule "false_right" (formula "46"))
                              (rule "inEqSimp_strengthen1" (formula "20") (ifseqformula "45"))
                              (rule "add_literals" (formula "20") (term "1"))
                              (rule "inEqSimp_contradEq7" (formula "45") (ifseqformula "20"))
                              (rule "times_zero_1" (formula "45") (term "1,0,0"))
                              (rule "add_literals" (formula "45") (term "0,0"))
                              (rule "leq_literals" (formula "45") (term "0"))
                               (builtin "One Step Simplification" (formula "45"))
                              (rule "false_right" (formula "45"))
                              (rule "allLeft" (formula "35") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                              (rule "inEqSimp_homoInEq1" (formula "35") (term "1"))
                              (rule "polySimp_addComm1" (formula "35") (term "0,1"))
                              (rule "applyEq" (formula "35") (term "1,0,0,0") (ifseqformula "19"))
                              (rule "eqSymm" (formula "35") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1"))
                              (rule "polySimp_mulComm0" (formula "35") (term "1,1"))
                              (rule "polySimp_rightDist" (formula "35") (term "1,1"))
                              (rule "mul_literals" (formula "35") (term "0,1,1"))
                              (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1"))
                              (rule "polySimp_elimOne" (formula "35") (term "1,1,1"))
                              (rule "inEqSimp_contradInEq1" (formula "35") (term "1,0") (ifseqformula "11"))
                              (rule "qeq_literals" (formula "35") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "allLeft" (formula "40") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                              (rule "inEqSimp_homoInEq0" (formula "40") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "40") (term "1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "40") (term "1,0,1,0"))
                              (rule "mul_literals" (formula "40") (term "0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "40") (term "0,1,0"))
                              (rule "add_literals" (formula "40") (term "0,0,1,0"))
                              (rule "add_zero_left" (formula "40") (term "0,1,0"))
                              (rule "inEqSimp_homoInEq1" (formula "40") (term "1"))
                              (rule "polySimp_mulComm0" (formula "40") (term "1,0,1"))
                              (rule "polySimp_rightDist" (formula "40") (term "1,0,1"))
                              (rule "mul_literals" (formula "40") (term "0,1,0,1"))
                              (rule "polySimp_addAssoc" (formula "40") (term "0,1"))
                              (rule "polySimp_addComm0" (formula "40") (term "0,0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "40") (term "0,1"))
                              (rule "add_literals" (formula "40") (term "1,1,0,1"))
                              (rule "times_zero_1" (formula "40") (term "1,0,1"))
                              (rule "add_zero_right" (formula "40") (term "0,1"))
                              (rule "leq_literals" (formula "40") (term "1"))
                               (builtin "One Step Simplification" (formula "40"))
                              (rule "applyEq" (formula "40") (term "1,1,0") (ifseqformula "34"))
                              (rule "inEqSimp_invertInEq1" (formula "40") (term "1"))
                              (rule "times_zero_2" (formula "40") (term "1,1"))
                              (rule "polySimp_mulLiterals" (formula "40") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "40") (term "0,1"))
                              (rule "inEqSimp_contradInEq1" (formula "40") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "40") (term "0,1"))
                               (builtin "One Step Simplification" (formula "40"))
                              (rule "allLeft" (formula "36") (inst "t=Z(0(#))"))
                              (rule "leq_literals" (formula "36") (term "1,0"))
                               (builtin "One Step Simplification" (formula "36"))
                              (rule "add_literals" (formula "36") (term "1,1,0"))
                              (rule "inEqSimp_homoInEq1" (formula "36") (term "1"))
                              (rule "mul_literals" (formula "36") (term "1,0,1"))
                              (rule "add_zero_right" (formula "36") (term "0,1"))
                              (rule "applyEq" (formula "36") (term "1,0,0") (ifseqformula "33"))
                              (rule "eqSymm" (formula "36") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1"))
                              (rule "mul_literals" (formula "36") (term "1,1"))
                              (rule "allLeft" (formula "42") (inst "t=Z(0(#))"))
                              (rule "leq_literals" (formula "42") (term "1,0"))
                               (builtin "One Step Simplification" (formula "42"))
                              (rule "inEqSimp_commuteGeq" (formula "42") (term "1"))
                              (rule "applyEq" (formula "42") (term "1,1,0") (ifseqformula "33"))
                              (rule "inEqSimp_contradInEq1" (formula "42") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "42") (term "0,1"))
                               (builtin "One Step Simplification" (formula "42"))
                              (rule "allLeft" (formula "37") (inst "t=i_0"))
                              (rule "inEqSimp_homoInEq1" (formula "37") (term "1"))
                              (rule "polySimp_addComm1" (formula "37") (term "0,1"))
                              (rule "applyEq" (formula "37") (term "1,0,0,0") (ifseqformula "5"))
                              (rule "eqSymm" (formula "37") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1"))
                              (rule "polySimp_mulComm0" (formula "37") (term "1,1"))
                              (rule "polySimp_rightDist" (formula "37") (term "1,1"))
                              (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1"))
                              (rule "mul_literals" (formula "37") (term "0,1,1"))
                              (rule "polySimp_elimOne" (formula "37") (term "1,1,1"))
                              (rule "inEqSimp_contradInEq1" (formula "37") (term "1,0") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "37") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "37"))
                              (rule "shift_paren_or" (formula "15") (term "0,1,0,0,0"))
                              (rule "inEqSimp_or_tautInEq2" (formula "15") (term "0,0,1,0,0,0"))
                              (rule "add_zero_right" (formula "15") (term "1,1,0,0,1,0,0,0"))
                              (rule "qeq_literals" (formula "15") (term "1,0,0,1,0,0,0"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "seqGetAlphaCast" (formula "40") (term "0"))
                              (rule "castDel" (formula "40") (term "0"))
                               (builtin "One Step Simplification" (formula "40"))
                              (rule "true_left" (formula "40"))
                              (rule "seqGetAlphaCast" (formula "41") (term "0"))
                              (rule "castDel" (formula "41") (term "0"))
                               (builtin "One Step Simplification" (formula "41"))
                              (rule "true_left" (formula "41"))
                              (rule "cnf_rightDist" (formula "15") (term "0,0,0"))
                              (rule "shift_paren_or" (formula "15") (term "1,0,0,0"))
                              (rule "commute_or_2" (formula "15") (term "0,1,0,0,0"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "commute_and_2" (formula "12") (term "0,0,0"))
                              (rule "cnf_rightDist" (formula "15") (term "0,0,0,0"))
                              (rule "commute_or_2" (formula "15") (term "0,0,0,0,0"))
                              (rule "shift_paren_or" (formula "15") (term "1,0,0,0,0"))
                              (rule "commute_or" (formula "15") (term "0,0,0,0,0,0"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "34") (term "1") (ifseqformula "6"))
                              (rule "replace_known_right" (formula "34") (term "0") (ifseqformula "50"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "33") (term "1") (ifseqformula "6"))
                              (rule "replace_known_right" (formula "33") (term "0") (ifseqformula "50"))
                               (builtin "One Step Simplification" (formula "33"))
                              (rule "allLeft" (formula "26") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                              (rule "inEqSimp_homoInEq0" (formula "26") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,0,1,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "26") (term "0,1,0"))
                              (rule "add_literals" (formula "26") (term "0,0,1,0"))
                              (rule "add_zero_left" (formula "26") (term "0,1,0"))
                              (rule "inEqSimp_homoInEq1" (formula "26") (term "1"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,0,1"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,0,1"))
                              (rule "mul_literals" (formula "26") (term "0,1,0,1"))
                              (rule "polySimp_addAssoc" (formula "26") (term "0,1"))
                              (rule "polySimp_addComm0" (formula "26") (term "0,0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,1"))
                              (rule "add_literals" (formula "26") (term "1,1,0,1"))
                              (rule "times_zero_1" (formula "26") (term "1,0,1"))
                              (rule "add_zero_right" (formula "26") (term "0,1"))
                              (rule "leq_literals" (formula "26") (term "1"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "applyEq" (formula "26") (term "1,0,0,0") (ifseqformula "37"))
                              (rule "inEqSimp_invertInEq1" (formula "26") (term "1"))
                              (rule "times_zero_2" (formula "26") (term "1,1"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "26") (term "0,1"))
                              (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "26") (term "0,1"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "notLeft" (formula "26"))
                              (rule "allLeft" (formula "26") (inst "t=Z(0(#))"))
                              (rule "leq_literals" (formula "26") (term "1,0"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                              (rule "applyEq" (formula "26") (term "1,0,0,0") (ifseqformula "35"))
                              (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "26") (term "0,1"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "notLeft" (formula "26"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "1,0,1,0,0") (ifseqformula "19"))
                              (rule "replace_known_left" (formula "25") (term "1,0,0") (ifseqformula "18"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "true_left" (formula "25"))
                              (rule "allLeft" (formula "25") (inst "t=i_0"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "1,0,1,0,0") (ifseqformula "5"))
                              (rule "replace_known_right" (formula "25") (term "1,0,0") (ifseqformula "56"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "applyEq" (formula "25") (term "0,0,0") (ifseqformula "5"))
                              (rule "replace_known_right" (formula "25") (term "0,0") (ifseqformula "57"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_subsumption0" (formula "2") (ifseqformula "25"))
                              (rule "leq_literals" (formula "2") (term "0"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "24"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                     )
                     (branch "self.list.size >= 1 + self.index FALSE"
                        (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "27"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "inEqSimp_geqRight" (formula "27"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1"))
                        (rule "inEqSimp_antiSymm" (formula "12") (ifseqformula "1"))
                        (rule "applyEq" (formula "4") (term "0") (ifseqformula "12"))
                        (rule "applyEq" (formula "25") (term "1,1,0,1,1") (ifseqformula "12"))
                        (rule "applyEq" (formula "18") (term "2,0") (ifseqformula "12"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "eqSymm" (formula "18"))
                        (rule "applyEq" (formula "26") (term "1,1,1,0") (ifseqformula "12"))
                        (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "12"))
                        (rule "applyEq" (formula "13") (term "0") (ifseqformula "12"))
                        (rule "inEqSimp_homoInEq1" (formula "13"))
                        (rule "polySimp_pullOutFactor1" (formula "13") (term "0"))
                        (rule "add_literals" (formula "13") (term "1,0"))
                        (rule "times_zero_1" (formula "13") (term "0"))
                        (rule "leq_literals" (formula "13"))
                        (rule "true_left" (formula "13"))
                        (rule "applyEq" (formula "26") (term "1,1,0,0") (ifseqformula "12"))
                        (rule "applyEq" (formula "23") (term "1,1,0,0") (ifseqformula "12"))
                        (rule "applyEq" (formula "1") (term "0") (ifseqformula "12"))
                        (rule "inEqSimp_homoInEq0" (formula "1"))
                        (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "1,0"))
                        (rule "times_zero_1" (formula "1") (term "0"))
                        (rule "qeq_literals" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "applyEq" (formula "21") (term "1,1,0,0") (ifseqformula "11"))
                        (rule "applyEq" (formula "25") (term "1,1,0,0,0,1,0") (ifseqformula "11"))
                        (rule "applyEq" (formula "20") (term "0") (ifseqformula "11"))
                        (rule "applyEq" (formula "18") (term "1") (ifseqformula "11"))
                        (rule "applyEq" (formula "14") (term "1,1,1,0,1,1,1,0,1,0") (ifseqformula "11"))
                        (rule "polySimp_pullOutFactor2b" (formula "14") (term "1,1,0,1,1,1,0,1,0"))
                        (rule "add_literals" (formula "14") (term "1,1,1,1,0,1,1,1,0,1,0"))
                        (rule "times_zero_1" (formula "14") (term "1,1,1,0,1,1,1,0,1,0"))
                        (rule "add_zero_right" (formula "14") (term "1,1,0,1,1,1,0,1,0"))
                        (rule "applyEq" (formula "19") (term "1") (ifseqformula "11"))
                        (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "10"))
                        (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                        (rule "mul_literals" (formula "3") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "add_literals" (formula "3") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "polySimp_elimOne" (formula "3") (term "0"))
                        (rule "inEqSimp_or_tautInEq0" (formula "14") (term "0,0"))
                        (rule "add_zero_right" (formula "14") (term "1,1,0,0"))
                        (rule "qeq_literals" (formula "14") (term "1,0,0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "true_left" (formula "14"))
                        (rule "applyEq_and_gen2" (formula "13") (term "1,0,1,0"))
                        (rule "ifEqualsNull" (formula "13") (term "0,0,1,0,1,0"))
                        (rule "nnf_notOr" (formula "13") (term "0,1,0,1,0"))
                        (rule "nnf_notAnd" (formula "13") (term "0,0,1,0,1,0"))
                        (rule "nnf_notAnd" (formula "13") (term "1,0,1,0,1,0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "nnf_notAnd" (formula "13") (term "0,0,0,1,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0,1,0,1,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0,1,0,1,0"))
                        (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,0,1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,1,0,1,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,0,0,0,1,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0,1,0,1,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,1,0,1,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0,1,0,1,0"))
                        (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,0,1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,1,0,1,0"))
                        (rule "lenNonNegative" (formula "17") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "17"))
                        (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                        (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "12"))
                        (rule "leq_literals" (formula "17") (term "0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "commute_and_2" (formula "21") (term "0,0,0,1"))
                        (rule "lenNonNegative" (formula "18") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "18"))
                        (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                        (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "12"))
                        (rule "leq_literals" (formula "18") (term "0"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "true_left" (formula "18"))
                        (rule "seqGetAlphaCast" (formula "21") (term "0,1,0,1"))
                        (rule "castedGetAny" (formula "21") (term "0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "true_left" (formula "21"))
                        (rule "applyEq_and_gen2" (formula "20") (term "1,0,1,0"))
                        (rule "commute_or_2" (formula "23") (term "0,0,1,0"))
                        (rule "shift_paren_and" (formula "19") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "castedGetAny" (formula "19") (term "0,0,1,0,0,1,0"))
                        (rule "castedGetAny" (formula "19") (term "0,0,0,0,0,1,0"))
                        (rule "castedGetAny" (formula "19") (term "1,0,1,1,0,0,1,0"))
                        (rule "castedGetAny" (formula "19") (term "1,0,0,1,0,1,0"))
                        (rule "cnf_rightDist" (formula "21"))
                        (rule "andLeft" (formula "21"))
                        (rule "cnf_rightDist" (formula "22"))
                        (rule "andLeft" (formula "22"))
                        (rule "cnf_rightDist" (formula "22"))
                        (rule "andLeft" (formula "22"))
                        (rule "commute_or" (formula "22"))
                        (rule "cnf_rightDist" (formula "21"))
                        (rule "andLeft" (formula "21"))
                        (rule "cnf_rightDist" (formula "22"))
                        (rule "andLeft" (formula "22"))
                        (rule "cnf_rightDist" (formula "22"))
                        (rule "andLeft" (formula "22"))
                        (rule "commute_or" (formula "22"))
                        (rule "commute_and_2" (formula "21") (term "1"))
                        (rule "cnf_rightDist" (formula "19") (term "0"))
                        (rule "distr_forallAnd" (formula "19"))
                        (rule "andLeft" (formula "19"))
                        (rule "shift_paren_or" (formula "20") (term "0"))
                        (rule "commute_or" (formula "13") (term "1,0,1,0,1,0"))
                        (rule "cnf_rightDist" (formula "22"))
                        (rule "andLeft" (formula "22"))
                        (rule "cnf_rightDist" (formula "23"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "cnf_rightDist" (formula "23"))
                        (rule "andLeft" (formula "23"))
                        (rule "commute_or" (formula "23"))
                        (rule "cnf_rightDist" (formula "22"))
                        (rule "andLeft" (formula "22"))
                        (rule "cnf_rightDist" (formula "23"))
                        (rule "andLeft" (formula "23"))
                        (rule "commute_or" (formula "24"))
                        (rule "cnf_rightDist" (formula "23"))
                        (rule "andLeft" (formula "23"))
                        (rule "commute_or" (formula "23"))
                        (rule "cnf_rightDist" (formula "19") (term "0"))
                        (rule "distr_forallAnd" (formula "19"))
                        (rule "andLeft" (formula "19"))
                        (rule "shift_paren_or" (formula "20") (term "0"))
                        (rule "commute_or_2" (formula "13") (term "0,0,1,0,1,0"))
                        (rule "commute_or" (formula "36") (term "0,0,0,1,0"))
                        (rule "cnf_rightDist" (formula "23"))
                        (rule "andLeft" (formula "23"))
                        (rule "commute_or" (formula "23"))
                        (rule "cnf_rightDist" (formula "24"))
                        (rule "andLeft" (formula "24"))
                        (rule "commute_or" (formula "25"))
                        (rule "cnf_rightDist" (formula "23"))
                        (rule "andLeft" (formula "23"))
                        (rule "commute_or" (formula "24"))
                        (rule "cnf_rightDist" (formula "25"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "commute_or" (formula "25"))
                        (rule "cnf_rightDist" (formula "23"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "commute_or" (formula "23"))
                        (rule "cnf_rightDist" (formula "19") (term "0"))
                        (rule "distr_forallAnd" (formula "19"))
                        (rule "andLeft" (formula "19"))
                        (rule "commute_or_2" (formula "19") (term "0"))
                        (rule "shift_paren_or" (formula "20") (term "0"))
                        (rule "commute_or" (formula "19") (term "0,0"))
                        (rule "shift_paren_and" (formula "23") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "castedGetAny" (formula "23") (term "1,0,1,1,0,0,1,0"))
                        (rule "castedGetAny" (formula "23") (term "0,0,0,0,0,1,0"))
                        (rule "castedGetAny" (formula "23") (term "0,0,1,0,0,1,0"))
                        (rule "cnf_rightDist" (formula "23") (term "0"))
                        (rule "distr_forallAnd" (formula "23"))
                        (rule "andLeft" (formula "23"))
                        (rule "shift_paren_or" (formula "24") (term "0"))
                        (rule "cnf_rightDist" (formula "23") (term "0"))
                        (rule "distr_forallAnd" (formula "23"))
                        (rule "andLeft" (formula "23"))
                        (rule "shift_paren_or" (formula "24") (term "0"))
                        (rule "cnf_rightDist" (formula "23") (term "0"))
                        (rule "distr_forallAnd" (formula "23"))
                        (rule "andLeft" (formula "23"))
                        (rule "commute_or_2" (formula "23") (term "0"))
                        (rule "shift_paren_or" (formula "24") (term "0"))
                        (rule "commute_or" (formula "23") (term "0,0"))
                        (rule "ifthenelse_to_or_right" (formula "13") (term "1,1,0,1,0"))
                        (rule "nnf_notAnd" (formula "13") (term "0,0,1,1,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,1,1,0,1,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,1,1,0,1,0"))
                        (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,1,1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,1,0,1,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,0,0,1,1,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,1,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,1,1,0,1,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,1,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1,1,0,1,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,1,1,0,1,0"))
                        (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,1,1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,1,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1,1,0,1,0"))
                        (rule "commute_or" (formula "13") (term "0,0,0,1,0,1,0"))
                        (rule "cnf_rightDist" (formula "13") (term "1,0,1,0,1,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "1,0,0") (ifseqformula "5"))
                        (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "46"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "commute_or" (formula "14") (term "1,1,1,0,1,0"))
                        (rule "commute_or_2" (formula "14") (term "0,1,1,0,1,0"))
                        (rule "commute_or" (formula "14") (term "0,1,0,1,0,1,0"))
                        (rule "commute_or" (formula "14") (term "0,0,1,1,0,1,0"))
                        (rule "equalityToSeqGetAndSeqLenLeft" (formula "16") (inst "iv=iv"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "andLeft" (formula "16"))
                        (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                        (rule "applyEq" (formula "17") (term "0,0,1,0") (ifseqformula "18"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "17"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "all_pull_out3" (formula "44") (term "0"))
                        (rule "shift_paren_or" (formula "44") (term "0,0"))
                        (rule "shift_paren_or" (formula "44") (term "0,0,0"))
                        (rule "shift_paren_or" (formula "44") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "44") (term "0,0,0,0,0"))
                        (rule "commute_or" (formula "44") (term "0,0,0,0,0,0"))
                        (rule "cnf_rightDist" (formula "14") (term "1,1,1,0,1,0"))
                        (rule "commute_or" (formula "14") (term "1,1,1,1,0,1,0"))
                        (rule "shift_paren_and" (formula "14") (term "0,1,0,1,0"))
                        (rule "shift_paren_and" (formula "14") (term "1,1,0,1,0"))
                        (rule "shift_paren_and" (formula "14") (term "1,0,1,0"))
                        (rule "shift_paren_and" (formula "14") (term "0,1,0,1,0"))
                        (rule "shift_paren_and" (formula "14") (term "0,1,0"))
                        (rule "shift_paren_and" (formula "14") (term "0,0,1,0"))
                        (rule "shift_paren_and" (formula "14") (term "0,0,0,1,0"))
                        (rule "cut_direct" (formula "31") (term "0,0"))
                        (branch "CUT: self.list.tail = null TRUE"
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "replace_known_left" (formula "42") (term "0") (ifseqformula "31"))
                            (builtin "One Step Simplification" (formula "42"))
                           (rule "true_left" (formula "42"))
                           (rule "replace_known_left" (formula "36") (term "0,1") (ifseqformula "32"))
                            (builtin "One Step Simplification" (formula "36"))
                           (rule "replace_known_left" (formula "39") (term "0") (ifseqformula "31"))
                            (builtin "One Step Simplification" (formula "39"))
                           (rule "true_left" (formula "39"))
                           (rule "replace_known_left" (formula "30") (term "0,1") (ifseqformula "31"))
                            (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "36")))
                           (rule "true_left" (formula "30"))
                           (rule "replace_known_left" (formula "36") (term "0") (ifseqformula "30"))
                            (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "31")))
                           (rule "true_left" (formula "36"))
                           (rule "replace_known_left" (formula "34") (term "1") (ifseqformula "31"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "true_left" (formula "34"))
                           (rule "replace_known_left" (formula "29") (term "1") (ifseqformula "31"))
                            (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "34")))
                           (rule "true_left" (formula "29"))
                           (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "33")))
                           (rule "true_left" (formula "28"))
                           (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "true_left" (formula "31"))
                           (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "true_left" (formula "35"))
                           (rule "replace_known_left" (formula "33") (term "0") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "true_left" (formula "33"))
                           (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "31"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "true_left" (formula "32"))
                           (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "31"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "30"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "true_left" (formula "31"))
                           (rule "applyEq" (formula "33") (term "0,1,1,0,0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "32") (term "0,1,0,0,0,0,0,0,0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "31") (term "0,1,0,0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "29"))
                           (rule "eqSymm" (formula "5"))
                           (rule "applyEq" (formula "21") (term "0,0,0,0,0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "20") (term "0,0,0,0,0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "31") (term "0,1,0,0,0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "eqSymm" (formula "18"))
                           (rule "applyEq" (formula "32") (term "0,0,0,0,0,0,0,0,0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "23") (term "0,0,0,0,0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "21") (term "0,1,0,1,0,0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "22") (term "0,1,0,0,0,0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "38") (term "1,0") (ifseqformula "5"))
                           (rule "applyEq" (formula "36") (term "0") (ifseqformula "5"))
                           (rule "applyEq" (formula "14") (term "1,1,1,1,0,1,0") (ifseqformula "18"))
                           (rule "add_zero_right" (formula "14") (term "1,1,1,0,1,0"))
                           (rule "applyEq" (formula "15") (term "2,0") (ifseqformula "18"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "eqSymm" (formula "15"))
                           (rule "applyEq" (formula "20") (term "1,1,0") (ifseqformula "18"))
                           (rule "applyEq" (formula "23") (term "1,1,0") (ifseqformula "18"))
                           (rule "applyEq" (formula "31") (term "1,1,1,0") (ifseqformula "18"))
                           (rule "add_zero_right" (formula "31") (term "1,1,0"))
                           (rule "applyEq" (formula "32") (term "1,1,0,0,0") (ifseqformula "18"))
                           (rule "applyEq" (formula "3") (term "0") (ifseqformula "18"))
                           (rule "inEqSimp_homoInEq1" (formula "3"))
                           (rule "times_zero_2" (formula "3") (term "1,0"))
                           (rule "add_zero_right" (formula "3") (term "0"))
                           (rule "applyEqRigid" (formula "35") (term "1,0") (ifseqformula "5"))
                           (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "18"))
                           (rule "applyEq" (formula "13") (term "0") (ifseqformula "18"))
                           (rule "qeq_literals" (formula "13"))
                           (rule "closeFalse" (formula "13"))
                        )
                        (branch "CUT: self.list.tail = null FALSE"
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "true_left" (formula "31"))
                           (rule "replace_known_right" (formula "40") (term "0") (ifseqformula "45"))
                            (builtin "One Step Simplification" (formula "40"))
                           (rule "replace_known_right" (formula "28") (term "1") (ifseqformula "45"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "notLeft" (formula "28"))
                           (rule "replace_known_right" (formula "29") (term "0,1") (ifseqformula "45"))
                            (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "44")))
                           (rule "true_left" (formula "29"))
                           (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "44"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "replace_known_right" (formula "35") (term "0") (ifseqformula "44"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "replace_known_right" (formula "33") (term "0") (ifseqformula "44"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "notLeft" (formula "33"))
                           (rule "replace_known_left" (formula "36") (term "1") (ifseqformula "37"))
                            (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "43")))
                           (rule "true_left" (formula "36"))
                           (rule "replace_known_left" (formula "37") (term "1") (ifseqformula "36"))
                            (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "41")))
                           (rule "true_left" (formula "37"))
                           (rule "replace_known_right" (formula "32") (term "0") (ifseqformula "41"))
                            (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "40")))
                           (rule "true_left" (formula "32"))
                           (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "30"))
                            (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "39")))
                           (rule "true_left" (formula "31"))
                           (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "32"))
                            (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "39")))
                           (rule "true_left" (formula "31"))
                           (rule "replace_known_right" (formula "28") (term "0,0") (ifseqformula "38"))
                            (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "37")))
                           (rule "true_left" (formula "28"))
                           (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "37"))
                            (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "29")))
                           (rule "true_left" (formula "28"))
                           (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "35")))
                           (rule "true_left" (formula "30"))
                           (rule "equalityToSeqGetAndSeqLenRight" (formula "34") (inst "iv=iv"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,1"))
                           (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "18"))
                           (rule "applyEq" (formula "34") (term "0,1,0,0,1,0,0,1") (ifseqformula "18"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,1"))
                           (rule "mul_literals" (formula "34") (term "0,1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,1"))
                           (rule "inEqSimp_contradEq7" (formula "34") (term "0") (ifseqformula "13"))
                           (rule "times_zero_1" (formula "34") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "34") (term "0,0,0"))
                           (rule "leq_literals" (formula "34") (term "0,0"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "false_right" (formula "34"))
                           (rule "shift_paren_and" (formula "14") (term "0,0,0,0,1,0"))
                           (rule "allLeft" (formula "33") (inst "t=Z(0(#))"))
                           (rule "leq_literals" (formula "33") (term "1,0"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                           (rule "applyEq" (formula "33") (term "1,1,0") (ifseqformula "29"))
                           (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "13"))
                           (rule "qeq_literals" (formula "33") (term "0,1"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "allLeft" (formula "34") (inst "t=add(Z(neglit(1(#))),
    int::select(heap, self, LinkedListIterator::$index))"))
                           (rule "inEqSimp_homoInEq1" (formula "34") (term "1"))
                           (rule "polySimp_mulComm0" (formula "34") (term "1,0,1"))
                           (rule "polySimp_rightDist" (formula "34") (term "1,0,1"))
                           (rule "mul_literals" (formula "34") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "34") (term "0,1"))
                           (rule "polySimp_addComm0" (formula "34") (term "0,0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,1"))
                           (rule "add_literals" (formula "34") (term "1,1,0,1"))
                           (rule "times_zero_1" (formula "34") (term "1,0,1"))
                           (rule "add_zero_right" (formula "34") (term "0,1"))
                           (rule "leq_literals" (formula "34") (term "1"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "inEqSimp_homoInEq0" (formula "34") (term "1"))
                           (rule "polySimp_mulComm0" (formula "34") (term "1,0,1"))
                           (rule "polySimp_rightDist" (formula "34") (term "1,0,1"))
                           (rule "mul_literals" (formula "34") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "34") (term "0,1"))
                           (rule "add_literals" (formula "34") (term "0,0,1"))
                           (rule "add_zero_left" (formula "34") (term "0,1"))
                           (rule "applyEq" (formula "34") (term "1,1,0") (ifseqformula "30"))
                           (rule "inEqSimp_invertInEq1" (formula "34") (term "1"))
                           (rule "times_zero_2" (formula "34") (term "1,1"))
                           (rule "polySimp_mulLiterals" (formula "34") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "34") (term "0,1"))
                           (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "13"))
                           (rule "qeq_literals" (formula "34") (term "0,1"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "allLeft" (formula "35") (inst "t=i_0"))
                           (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                           (rule "applyEq" (formula "35") (term "1,1,0,0") (ifseqformula "5"))
                           (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "3"))
                           (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                           (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "35") (term "0,0,1"))
                           (rule "leq_literals" (formula "35") (term "0,1"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "35") (term "0,1"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "allLeft" (formula "22") (inst "t=Z(0(#))"))
                           (rule "leq_literals" (formula "22") (term "1,0"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                           (rule "applyEq" (formula "22") (term "1,0,0,0") (ifseqformula "30"))
                           (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "13"))
                           (rule "qeq_literals" (formula "22") (term "0,1"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "notLeft" (formula "22"))
                           (rule "allLeft" (formula "22") (inst "t=add(Z(neglit(1(#))),
    int::select(heap, self, LinkedListIterator::$index))"))
                           (rule "inEqSimp_homoInEq0" (formula "22") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "22") (term "1,0,1,0"))
                           (rule "mul_literals" (formula "22") (term "0,1,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "22") (term "0,1,0"))
                           (rule "add_literals" (formula "22") (term "0,0,1,0"))
                           (rule "add_zero_left" (formula "22") (term "0,1,0"))
                           (rule "inEqSimp_homoInEq1" (formula "22") (term "1"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,1"))
                           (rule "polySimp_rightDist" (formula "22") (term "1,0,1"))
                           (rule "mul_literals" (formula "22") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                           (rule "polySimp_addComm0" (formula "22") (term "0,0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,1"))
                           (rule "add_literals" (formula "22") (term "1,1,0,1"))
                           (rule "times_zero_1" (formula "22") (term "1,0,1"))
                           (rule "add_zero_right" (formula "22") (term "0,1"))
                           (rule "leq_literals" (formula "22") (term "1"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "applyEq" (formula "22") (term "1,0,0,0") (ifseqformula "31"))
                           (rule "inEqSimp_invertInEq1" (formula "22") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "0,1"))
                           (rule "times_zero_2" (formula "22") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "22") (term "0,1"))
                           (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "13"))
                           (rule "qeq_literals" (formula "22") (term "0,1"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "notLeft" (formula "22"))
                           (rule "allLeft" (formula "22") (inst "t=i_0"))
                           (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                           (rule "applyEq" (formula "22") (term "1,0,0,0,0") (ifseqformula "5"))
                           (rule "inEqSimp_contradInEq1" (formula "22") (term "1,0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "22") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "3"))
                           (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                           (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "22") (term "0,0,1"))
                           (rule "leq_literals" (formula "22") (term "0,1"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "notLeft" (formula "22"))
                           (rule "allLeft" (formula "20") (inst "t=Z(0(#))"))
                           (rule "leq_literals" (formula "20") (term "1,0"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                           (rule "applyEq" (formula "20") (term "0,0,0") (ifseqformula "30"))
                           (rule "replace_known_right" (formula "20") (term "0,0") (ifseqformula "41"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "allLeft" (formula "20") (inst "t=add(Z(neglit(1(#))),
    int::select(heap, self, LinkedListIterator::$index))"))
                           (rule "inEqSimp_homoInEq0" (formula "20") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0,1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1,0"))
                           (rule "add_literals" (formula "20") (term "0,0,1,0"))
                           (rule "add_zero_left" (formula "20") (term "0,1,0"))
                           (rule "inEqSimp_homoInEq1" (formula "20") (term "1"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,1"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0,1"))
                           (rule "mul_literals" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "polySimp_addComm0" (formula "20") (term "0,0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "1,1,0,1"))
                           (rule "times_zero_1" (formula "20") (term "1,0,1"))
                           (rule "add_zero_right" (formula "20") (term "0,1"))
                           (rule "leq_literals" (formula "20") (term "1"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "applyEq" (formula "20") (term "0,0,0") (ifseqformula "31"))
                           (rule "replace_known_right" (formula "20") (term "0,0") (ifseqformula "42"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "allLeft" (formula "20") (inst "t=i_0"))
                           (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                           (rule "applyEq" (formula "20") (term "0,0,0,0") (ifseqformula "5"))
                           (rule "replace_known_right" (formula "20") (term "0,0,0") (ifseqformula "45"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "shift_paren_and" (formula "14") (term "0,0,0,0,0,1,0"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "0") (ifseqformula "6"))
                           (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "18"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "true_left" (formula "17"))
                           (rule "seqGetAlphaCast" (formula "30") (term "0"))
                           (rule "castedGetAny" (formula "30") (term "0"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "allLeft" (formula "27") (inst "t=i_0"))
                           (rule "typeEqDerived" (formula "27") (term "0,0,0") (ifseqformula "36"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "allLeft" (formula "27") (inst "t=add(Z(neglit(1(#))),
    int::select(heap, self, LinkedListIterator::$index))"))
                           (rule "typeEqDerived" (formula "27") (term "0,0,0") (ifseqformula "35"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "allLeft" (formula "27") (inst "t=Z(0(#))"))
                           (rule "typeEqDerived" (formula "27") (term "0,0,0") (ifseqformula "34"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "ex_pull_out3" (formula "14") (term "0"))
                           (rule "cnf_rightDist" (formula "14") (term "0,0"))
                           (rule "shift_paren_or" (formula "14") (term "1,0,0"))
                           (rule "commute_or_2" (formula "14") (term "0,1,0,0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "14") (term "1,0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "14") (term "1,1,0,0"))
                           (rule "polySimp_pullOutFactor1" (formula "14") (term "0,1,1,0,0"))
                           (rule "add_literals" (formula "14") (term "1,0,1,1,0,0"))
                           (rule "times_zero_1" (formula "14") (term "0,1,1,0,0"))
                           (rule "leq_literals" (formula "14") (term "1,1,0,0"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "cnf_rightDist" (formula "14") (term "0,0"))
                           (rule "shift_paren_or" (formula "14") (term "1,0,0"))
                           (rule "inEqSimp_or_tautInEq3" (formula "14") (term "0,1,0,0"))
                           (rule "add_zero_right" (formula "14") (term "1,1,0,1,0,0"))
                           (rule "qeq_literals" (formula "14") (term "1,0,1,0,0"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "cnf_rightDist" (formula "14") (term "0,0"))
                           (rule "shift_paren_or" (formula "14") (term "1,0,0"))
                           (rule "commute_or_2" (formula "14") (term "0,1,0,0"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "cnf_rightDist" (formula "14") (term "0,0,0"))
                           (rule "commute_or_2" (formula "14") (term "1,0,0,0"))
                           (rule "shift_paren_or" (formula "14") (term "0,1,0,0,0"))
                           (rule "commute_or" (formula "14") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "14") (term "0,1,0,0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "14") (term "1,0,1,0,0,0"))
                           (rule "polySimp_pullOutFactor1" (formula "14") (term "0,1,0,1,0,0,0"))
                           (rule "add_literals" (formula "14") (term "1,0,1,0,1,0,0,0"))
                           (rule "times_zero_1" (formula "14") (term "0,1,0,1,0,0,0"))
                           (rule "leq_literals" (formula "14") (term "1,0,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "cnf_rightDist" (formula "14") (term "0,0,0"))
                           (rule "commute_or_2" (formula "14") (term "1,0,0,0"))
                           (rule "shift_paren_or" (formula "14") (term "0,1,0,0,0"))
                           (rule "inEqSimp_or_tautInEq2" (formula "14") (term "0,0,1,0,0,0"))
                           (rule "add_zero_right" (formula "14") (term "1,1,0,0,1,0,0,0"))
                           (rule "qeq_literals" (formula "14") (term "1,0,0,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "cnf_rightDist" (formula "14") (term "0,0,0"))
                           (rule "shift_paren_or" (formula "14") (term "1,0,0,0"))
                           (rule "commute_or_2" (formula "14") (term "0,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "cnf_rightDist" (formula "14") (term "0,0,0,0"))
                           (rule "commute_or_2" (formula "14") (term "0,0,0,0,0"))
                           (rule "shift_paren_or" (formula "14") (term "1,0,0,0,0"))
                           (rule "commute_or" (formula "14") (term "0,0,0,0,0,0"))
                           (rule "seqGetAlphaCast" (formula "33") (term "0"))
                           (rule "castDel" (formula "33") (term "0"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "true_left" (formula "33"))
                           (rule "allLeft" (formula "31") (inst "t=Z(0(#))"))
                           (rule "add_zero_right" (formula "31") (term "1,1,0,0"))
                           (rule "leq_literals" (formula "31") (term "1,0"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "inEqSimp_homoInEq1" (formula "31") (term "1"))
                           (rule "times_zero_2" (formula "31") (term "1,0,1"))
                           (rule "add_zero_right" (formula "31") (term "0,1"))
                           (rule "applyEq" (formula "31") (term "1,0,0") (ifseqformula "29"))
                           (rule "eqSymm" (formula "31") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1"))
                           (rule "mul_literals" (formula "31") (term "1,1"))
                           (rule "allLeft" (formula "32") (inst "t=i_0"))
                           (rule "inEqSimp_homoInEq1" (formula "32") (term "1"))
                           (rule "polySimp_addComm1" (formula "32") (term "0,1"))
                           (rule "applyEq" (formula "32") (term "1,0,0,0") (ifseqformula "5"))
                           (rule "eqSymm" (formula "32") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,1"))
                           (rule "mul_literals" (formula "32") (term "0,1,1"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1"))
                           (rule "polySimp_elimOne" (formula "32") (term "1,1,1"))
                           (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "32") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "seqGetAlphaCast" (formula "36") (term "0"))
                           (rule "castDel" (formula "36") (term "0"))
                            (builtin "One Step Simplification" (formula "36"))
                           (rule "true_left" (formula "36"))
                           (rule "allLeft" (formula "21") (inst "t=add(Z(neglit(1(#))),
    int::select(heap, self, LinkedListIterator::$index))"))
                           (rule "inEqSimp_homoInEq1" (formula "21") (term "1"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,1"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,1"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,1"))
                           (rule "polySimp_addComm0" (formula "21") (term "0,0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,1"))
                           (rule "add_literals" (formula "21") (term "1,1,0,1"))
                           (rule "times_zero_1" (formula "21") (term "1,0,1"))
                           (rule "add_literals" (formula "21") (term "0,1"))
                           (rule "leq_literals" (formula "21") (term "1"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "inEqSimp_homoInEq0" (formula "21") (term "1"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,1"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,1"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,1"))
                           (rule "add_literals" (formula "21") (term "0,0,1"))
                           (rule "add_zero_left" (formula "21") (term "0,1"))
                           (rule "applyEq" (formula "21") (term "1,0,1,0") (ifseqformula "31"))
                           (rule "applyEq" (formula "21") (term "0,0,0") (ifseqformula "31"))
                           (rule "replace_known_right" (formula "21") (term "0,0") (ifseqformula "44"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "inEqSimp_invertInEq1" (formula "21") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "0,1"))
                           (rule "times_zero_2" (formula "21") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "21") (term "0,1"))
                           (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "13"))
                           (rule "qeq_literals" (formula "21") (term "0,1"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "allLeft" (formula "22") (inst "t=Z(0(#))"))
                           (rule "leq_literals" (formula "22") (term "1,0"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                           (rule "applyEq" (formula "22") (term "0,0,0") (ifseqformula "31"))
                           (rule "replace_known_right" (formula "22") (term "0,0") (ifseqformula "44"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "applyEq" (formula "22") (term "1,0,0") (ifseqformula "31"))
                           (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "13"))
                           (rule "qeq_literals" (formula "22") (term "0,1"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "allLeft" (formula "23") (inst "t=i_0"))
                           (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                           (rule "applyEq" (formula "23") (term "0,0,0,0") (ifseqformula "5"))
                           (rule "replace_known_right" (formula "23") (term "0,0,0") (ifseqformula "49"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "applyEq" (formula "23") (term "1,0,0,0") (ifseqformula "5"))
                           (rule "replace_known_right" (formula "23") (term "0,0") (ifseqformula "48"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "inEqSimp_contradInEq1" (formula "23") (term "0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "23") (term "0,0"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "inEqSimp_subsumption0" (formula "35") (term "1") (ifseqformula "23"))
                           (rule "inEqSimp_homoInEq0" (formula "35") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                           (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "35") (term "0,0,1"))
                           (rule "qeq_literals" (formula "35") (term "0,1"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "true_left" (formula "35"))
                           (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "23"))
                           (rule "andLeft" (formula "3"))
                           (rule "inEqSimp_homoInEq1" (formula "3"))
                           (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                           (rule "add_literals" (formula "3") (term "1,1,0"))
                           (rule "times_zero_1" (formula "3") (term "1,0"))
                           (rule "add_literals" (formula "3") (term "0"))
                           (rule "leq_literals" (formula "3"))
                           (rule "closeFalse" (formula "3"))
                        )
                     )
                  )
                  (branch "self.index >= 1 FALSE"
                     (rule "inEqSimp_geqRight" (formula "27"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_subsumption0" (formula "12") (ifseqformula "1"))
                     (rule "leq_literals" (formula "12") (term "0"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "true_left" (formula "12"))
                     (rule "inEqSimp_antiSymm" (formula "11") (ifseqformula "1"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "11"))
                     (rule "leq_literals" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "applyEq" (formula "17") (term "1,1,0") (ifseqformula "10"))
                     (rule "add_zero_right" (formula "17") (term "1,0"))
                     (rule "applyEq" (formula "15") (term "2,0") (ifseqformula "10"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "eqSymm" (formula "15"))
                     (rule "applyEq" (formula "11") (term "0") (ifseqformula "10"))
                     (rule "qeq_literals" (formula "11"))
                     (rule "true_left" (formula "11"))
                     (rule "applyEq" (formula "13") (term "1,1,0,1,1,0,0") (ifseqformula "10"))
                     (rule "add_zero_right" (formula "13") (term "1,0,1,1,0,0"))
                     (rule "applyEq" (formula "16") (term "1,0,1") (ifseqformula "10"))
                     (rule "applyEq" (formula "11") (term "1") (ifseqformula "10"))
                     (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "10"))
                     (rule "applyEq" (formula "13") (term "0,0,1,1,1,0,0") (ifseqformula "10"))
                     (rule "mul_literals" (formula "13") (term "0,1,1,1,0,0"))
                     (rule "add_zero_left" (formula "13") (term "1,1,1,0,0"))
                     (rule "applyEq" (formula "12") (term "1,1,1,0,1,1,1,0,1,0") (ifseqformula "10"))
                     (rule "add_zero_right" (formula "12") (term "1,1,0,1,1,1,0,1,0"))
                     (rule "applyEq" (formula "13") (term "0,1,1,1,1,1,0,1,0") (ifseqformula "10"))
                     (rule "add_zero_left" (formula "13") (term "1,1,1,1,1,0,1,0"))
                     (rule "applyEq" (formula "13") (term "0,1,0,1,1,0,1,1,1,0,1,0") (ifseqformula "10"))
                     (rule "times_zero_2" (formula "13") (term "1,0,1,1,0,1,1,1,0,1,0"))
                     (rule "add_literals" (formula "13") (term "0,1,1,0,1,1,1,0,1,0"))
                     (rule "inEqSimp_or_tautInEq0" (formula "12") (term "0,0"))
                     (rule "add_zero_right" (formula "12") (term "1,1,0,0"))
                     (rule "qeq_literals" (formula "12") (term "1,0,0"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "true_left" (formula "12"))
                     (rule "commute_and" (formula "19") (term "1,0,1,0"))
                     (rule "commute_and" (formula "19") (term "0,0,1,0"))
                     (rule "commute_and" (formula "20") (term "0,0,1,0"))
                     (rule "commute_and" (formula "20") (term "1,0,1,0"))
                     (rule "commute_or" (formula "22") (term "0,0"))
                     (rule "commute_or" (formula "24") (term "0,0"))
                     (rule "commute_and_2" (formula "21") (term "0"))
                     (rule "shift_paren_or" (formula "23") (term "0,1,0"))
                     (rule "lenNonNegative" (formula "16") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "16"))
                     (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                     (rule "commute_and_2" (formula "21") (term "0,0,0,1"))
                     (rule "lenNonNegative" (formula "17") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "17"))
                     (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                     (rule "seqGetAlphaCast" (formula "21") (term "0,1,0,1"))
                     (rule "castedGetAny" (formula "21") (term "0"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "true_left" (formula "21"))
                     (rule "cnf_rightDist" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "cnf_rightDist" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "cnf_rightDist" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "commute_or" (formula "22"))
                     (rule "cnf_rightDist" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "cnf_rightDist" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "cnf_rightDist" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "commute_or" (formula "22"))
                     (rule "commute_and_2" (formula "21") (term "1"))
                     (rule "commute_or_2" (formula "29") (term "0,0,1,0"))
                     (rule "applyEq_and_gen2" (formula "12") (term "1,0,1,0"))
                     (rule "ifEqualsNull" (formula "12") (term "0,0,1,0,1,0"))
                     (rule "nnf_notOr" (formula "12") (term "0,1,0,1,0"))
                     (rule "nnf_notAnd" (formula "12") (term "1,0,1,0,1,0"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "nnf_notAnd" (formula "12") (term "0,0,1,0,1,0"))
                     (rule "nnf_notAnd" (formula "12") (term "0,0,0,1,0,1,0"))
                     (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,1,0,1,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,1,0,1,0"))
                     (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,1,0,1,0"))
                     (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,1,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0,1,0,1,0"))
                     (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0,1,0,1,0"))
                     (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,0,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,1,0,1,0"))
                     (rule "mul_literals" (formula "12") (term "1,0,0,0,0,1,0,1,0"))
                     (rule "cnf_rightDist" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "applyEq_and_gen2" (formula "20") (term "1,0,1,0"))
                     (rule "cnf_rightDist" (formula "22"))
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "cnf_rightDist" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "commute_or" (formula "22"))
                     (rule "cnf_rightDist" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "cnf_rightDist" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "commute_or" (formula "23"))
                     (rule "cnf_rightDist" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "commute_or" (formula "22"))
                     (rule "cnf_rightDist" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "commute_or" (formula "21"))
                     (rule "cnf_rightDist" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "commute_or" (formula "23"))
                     (rule "cnf_rightDist" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "commute_or" (formula "22"))
                     (rule "cnf_rightDist" (formula "23"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "commute_or" (formula "23"))
                     (rule "cnf_rightDist" (formula "21"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "commute_or" (formula "21"))
                     (rule "commute_or" (formula "37") (term "0,0,0,1,0"))
                     (rule "shift_paren_and" (formula "19") (term "0,1,0"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "castedGetAny" (formula "19") (term "1,0,1,1,0,0,1,0"))
                     (rule "castedGetAny" (formula "19") (term "0,0,0,0,0,1,0"))
                     (rule "castedGetAny" (formula "19") (term "1,0,0,1,0,1,0"))
                     (rule "castedGetAny" (formula "19") (term "0,0,1,0,0,1,0"))
                     (rule "commute_or" (formula "12") (term "1,0,1,0,1,0"))
                     (rule "cnf_rightDist" (formula "19") (term "0"))
                     (rule "distr_forallAnd" (formula "19"))
                     (rule "andLeft" (formula "19"))
                     (rule "shift_paren_or" (formula "20") (term "0"))
                     (rule "cnf_rightDist" (formula "19") (term "0"))
                     (rule "distr_forallAnd" (formula "19"))
                     (rule "andLeft" (formula "19"))
                     (rule "shift_paren_or" (formula "20") (term "0"))
                     (rule "cnf_rightDist" (formula "19") (term "0"))
                     (rule "distr_forallAnd" (formula "19"))
                     (rule "andLeft" (formula "19"))
                     (rule "commute_or_2" (formula "19") (term "0"))
                     (rule "shift_paren_or" (formula "20") (term "0"))
                     (rule "commute_or" (formula "19") (term "0,0"))
                     (rule "commute_or_2" (formula "12") (term "0,0,1,0,1,0"))
                     (rule "shift_paren_and" (formula "23") (term "0,1,0"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "castedGetAny" (formula "23") (term "0,0,0,0,0,1,0"))
                     (rule "castedGetAny" (formula "23") (term "1,0,1,1,0,0,1,0"))
                     (rule "castedGetAny" (formula "23") (term "0,0,1,0,0,1,0"))
                     (rule "cnf_rightDist" (formula "23") (term "0"))
                     (rule "distr_forallAnd" (formula "23"))
                     (rule "andLeft" (formula "23"))
                     (rule "shift_paren_or" (formula "24") (term "0"))
                     (rule "cnf_rightDist" (formula "23") (term "0"))
                     (rule "distr_forallAnd" (formula "23"))
                     (rule "andLeft" (formula "23"))
                     (rule "shift_paren_or" (formula "24") (term "0"))
                     (rule "cnf_rightDist" (formula "23") (term "0"))
                     (rule "distr_forallAnd" (formula "23"))
                     (rule "andLeft" (formula "23"))
                     (rule "commute_or_2" (formula "23") (term "0"))
                     (rule "shift_paren_or" (formula "24") (term "0"))
                     (rule "commute_or" (formula "23") (term "0,0"))
                     (rule "ifthenelse_to_or_right" (formula "12") (term "1,1,0,1,0"))
                     (rule "nnf_notAnd" (formula "12") (term "0,0,1,1,0,1,0"))
                     (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,1,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1,1,0,1,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,1,1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,1,0,1,0"))
                     (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,1,1,0,1,0"))
                     (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,1,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,1,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1,1,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,1,1,0,1,0"))
                     (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,1,1,0,1,0"))
                     (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,1,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,1,0,1,0"))
                     (rule "mul_literals" (formula "12") (term "1,0,0,0,1,1,0,1,0"))
                     (rule "ifthenelse_split_for" (formula "15"))
                     (branch "self.list.size >= 1 TRUE"
                        (rule "replace_known_left" (formula "12") (term "0,1,1,0,0") (ifseqformula "15"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "applyEq" (formula "37") (term "0,1") (ifseqformula "16"))
                        (rule "eqSymm" (formula "37") (term "1"))
                        (rule "applyEq" (formula "39") (term "0,1") (ifseqformula "16"))
                        (rule "eqSymm" (formula "39") (term "1"))
                        (rule "applyEq" (formula "38") (term "0,1") (ifseqformula "16"))
                        (rule "eqSymm" (formula "38") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "15"))
                        (rule "leq_literals" (formula "11") (term "0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "commute_or" (formula "38"))
                        (rule "commute_or" (formula "37"))
                        (rule "commute_or_2" (formula "11") (term "0,1,1,0,1,0"))
                        (rule "commute_or" (formula "11") (term "1,1,1,0,1,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "1,0,0") (ifseqformula "5"))
                        (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "46"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "commute_or" (formula "12") (term "0,0,0,1,0,1,0"))
                        (rule "commute_or" (formula "12") (term "0,0,1,1,0,1,0"))
                        (rule "all_pull_out3" (formula "44") (term "0"))
                        (rule "shift_paren_or" (formula "44") (term "0,0"))
                        (rule "shift_paren_or" (formula "44") (term "0,0,0"))
                        (rule "shift_paren_or" (formula "44") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "44") (term "0,0,0,0,0"))
                        (rule "commute_or" (formula "44") (term "0,0,0,0,0,0"))
                        (rule "cnf_rightDist" (formula "12") (term "1,0,1,0,1,0"))
                        (rule "commute_or" (formula "12") (term "0,1,0,1,0,1,0"))
                        (rule "equalityToSeqGetAndSeqLenLeft" (formula "13") (inst "iv=iv"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "andLeft" (formula "13"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                        (rule "applyEq" (formula "14") (term "0,0,1,0,0,1,0,0") (ifseqformula "15"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "times_zero_2" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0,1,0,0"))
                        (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "15"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "true_left" (formula "13"))
                        (rule "applyEq" (formula "13") (term "0,0,1,0") (ifseqformula "14"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "true_left" (formula "13"))
                        (rule "cnf_rightDist" (formula "12") (term "1,1,1,0,1,0"))
                        (rule "commute_or" (formula "12") (term "1,1,1,1,0,1,0"))
                        (rule "equalityToSeqGetAndSeqLenLeft" (formula "14") (inst "iv=iv"))
                        (rule "andLeft" (formula "14"))
                        (rule "lenOfSeqSub" (formula "15") (term "1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "15") (term "1,1,1,0,0"))
                        (rule "times_zero_2" (formula "15") (term "1,1,1,1,0,0"))
                        (rule "add_zero_right" (formula "15") (term "1,1,1,0,0"))
                        (rule "lenOfSeqSubEQ" (formula "14") (term "1") (ifseqformula "16"))
                        (rule "eqSymm" (formula "14"))
                        (rule "polySimp_elimSub" (formula "14") (term "1,0"))
                        (rule "times_zero_2" (formula "14") (term "1,1,0"))
                        (rule "add_zero_right" (formula "14") (term "1,0"))
                        (rule "lenOfSeqSub" (formula "14") (term "1"))
                        (rule "eqSymm" (formula "14"))
                        (rule "polySimp_elimSub" (formula "14") (term "1,0"))
                        (rule "times_zero_2" (formula "14") (term "1,1,0"))
                        (rule "add_zero_right" (formula "14") (term "1,0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "true_left" (formula "14"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1,1,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                        (rule "applyEq" (formula "14") (term "0,0,1,0") (ifseqformula "15"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "true_left" (formula "14"))
                        (rule "cut_direct" (formula "37") (term "0"))
                        (branch "CUT: self.list.head = null TRUE"
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "true_left" (formula "38"))
                           (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "37"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "replace_known_left" (formula "29") (term "0,0") (ifseqformula "36"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "replace_known_left" (formula "39") (term "0") (ifseqformula "36"))
                            (builtin "One Step Simplification" (formula "39"))
                           (rule "true_left" (formula "39"))
                           (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "36"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "36"))
                            (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "29")))
                           (rule "true_left" (formula "34"))
                           (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "35"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "true_left" (formula "31"))
                           (rule "replace_known_left" (formula "36") (term "1") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "36"))
                           (rule "true_left" (formula "36"))
                           (rule "replace_known_left" (formula "30") (term "0,0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "29")))
                           (rule "true_left" (formula "30"))
                           (rule "replace_known_left" (formula "36") (term "0") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "36"))
                           (rule "true_left" (formula "36"))
                           (rule "replace_known_left" (formula "32") (term "0,1") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "28")))
                           (rule "true_left" (formula "32"))
                           (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "true_left" (formula "34"))
                           (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "true_left" (formula "32"))
                           (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "eqSymm" (formula "17"))
                           (rule "applyEq" (formula "23") (term "0,0,0,0,0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "32") (term "0,1,0,0,0,0,0,0,0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "20") (term "0,0,0,0,0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "31") (term "0,1,0,0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "21") (term "0,1,0,1,0,0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "31") (term "0,1,0,0,0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "33") (term "0,1,1,0,0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "32") (term "0,0,0,0,0,0,0,0,0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "21") (term "0,0,0,0,0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "29"))
                           (rule "eqSymm" (formula "5"))
                           (rule "applyEq" (formula "22") (term "0,1,0,0,0,0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "29"))
                           (rule "eqSymm" (formula "16"))
                           (rule "applyEq" (formula "12") (term "1,1,0,0,1,0,1,0") (ifseqformula "17"))
                           (rule "applyEq" (formula "32") (term "1,1,0,0,0,0,0") (ifseqformula "17"))
                           (rule "applyEq" (formula "23") (term "1,1,0") (ifseqformula "17"))
                           (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "17"))
                           (rule "applyEq" (formula "15") (term "0") (ifseqformula "17"))
                           (rule "qeq_literals" (formula "15"))
                           (rule "closeFalse" (formula "15"))
                        )
                        (branch "CUT: self.list.head = null FALSE"
                            (builtin "One Step Simplification" (formula "37"))
                           (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "46"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "notLeft" (formula "30"))
                           (rule "replace_known_right" (formula "29") (term "0,0") (ifseqformula "46"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "45"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "replace_known_right" (formula "38") (term "0") (ifseqformula "45"))
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "replace_known_left" (formula "36") (term "0") (ifseqformula "35"))
                            (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "44")))
                           (rule "true_left" (formula "36"))
                           (rule "replace_known_right" (formula "33") (term "0") (ifseqformula "44"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "notLeft" (formula "33"))
                           (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "34"))
                            (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "42")))
                           (rule "true_left" (formula "35"))
                           (rule "replace_known_right" (formula "28") (term "0,0") (ifseqformula "43"))
                            (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "42")))
                           (rule "true_left" (formula "28"))
                           (rule "replace_known_right" (formula "28") (term "0,0") (ifseqformula "41"))
                            (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "40")))
                           (rule "true_left" (formula "28"))
                           (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "40"))
                            (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "39")))
                           (rule "true_left" (formula "31"))
                           (rule "replace_known_right" (formula "33") (term "0") (ifseqformula "39"))
                            (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "32")))
                           (rule "true_left" (formula "33"))
                           (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "38"))
                            (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "28")))
                           (rule "true_left" (formula "29"))
                           (rule "replace_known_right" (formula "29") (term "1") (ifseqformula "36"))
                            (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "28")))
                           (rule "true_left" (formula "29"))
                           (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "35"))
                            (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "30")))
                           (rule "true_left" (formula "31"))
                           (rule "applyEq" (formula "36") (term "0") (ifseqformula "29"))
                           (rule "equalityToSeqGetAndSeqLenRight" (formula "34") (inst "iv=iv"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,1"))
                           (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "17"))
                           (rule "applyEq" (formula "34") (term "0,1,0,0,1,0,0,1") (ifseqformula "17"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,1"))
                           (rule "mul_literals" (formula "34") (term "0,1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,1"))
                           (rule "inEqSimp_contradEq7" (formula "34") (term "0") (ifseqformula "15"))
                           (rule "mul_literals" (formula "34") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "34") (term "0,0,0"))
                           (rule "leq_literals" (formula "34") (term "0,0"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "false_right" (formula "34"))
                           (rule "shift_paren_and" (formula "12") (term "0,1,0,1,0"))
                           (rule "shift_paren_and" (formula "12") (term "1,1,0,1,0"))
                           (rule "allLeft" (formula "33") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                           (rule "inEqSimp_homoInEq0" (formula "33") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "33") (term "1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "33") (term "1,0,1,0"))
                           (rule "mul_literals" (formula "33") (term "0,1,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "33") (term "0,1,0"))
                           (rule "add_literals" (formula "33") (term "0,0,1,0"))
                           (rule "add_zero_left" (formula "33") (term "0,1,0"))
                           (rule "inEqSimp_homoInEq1" (formula "33") (term "1"))
                           (rule "polySimp_mulComm0" (formula "33") (term "1,0,1"))
                           (rule "polySimp_rightDist" (formula "33") (term "1,0,1"))
                           (rule "mul_literals" (formula "33") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "33") (term "0,1"))
                           (rule "polySimp_addComm0" (formula "33") (term "0,0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,1"))
                           (rule "add_literals" (formula "33") (term "1,1,0,1"))
                           (rule "times_zero_1" (formula "33") (term "1,0,1"))
                           (rule "add_zero_right" (formula "33") (term "0,1"))
                           (rule "leq_literals" (formula "33") (term "1"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "applyEq" (formula "33") (term "1,1,0") (ifseqformula "30"))
                           (rule "inEqSimp_invertInEq1" (formula "33") (term "1"))
                           (rule "times_zero_2" (formula "33") (term "1,1"))
                           (rule "polySimp_mulLiterals" (formula "33") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "33") (term "0,1"))
                           (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "15"))
                           (rule "qeq_literals" (formula "33") (term "0,1"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "allLeft" (formula "34") (inst "t=Z(0(#))"))
                           (rule "leq_literals" (formula "34") (term "1,0"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                           (rule "applyEq" (formula "34") (term "1,1,0") (ifseqformula "16"))
                           (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "15"))
                           (rule "qeq_literals" (formula "34") (term "0,1"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "allLeft" (formula "35") (inst "t=i_0"))
                           (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                           (rule "applyEq" (formula "35") (term "1,1,0,0") (ifseqformula "5"))
                           (rule "inEqSimp_contradInEq1" (formula "35") (term "1,0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "35") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "3"))
                           (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                           (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "35") (term "0,0,1"))
                           (rule "leq_literals" (formula "35") (term "0,1"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "shift_paren_and" (formula "12") (term "1,0,1,0"))
                           (rule "shift_paren_and" (formula "12") (term "0,1,0,1,0"))
                           (rule "shift_paren_and" (formula "12") (term "0,1,0"))
                           (rule "shift_paren_and" (formula "12") (term "0,0,1,0"))
                           (rule "shift_paren_and" (formula "12") (term "0,0,0,1,0"))
                           (rule "allLeft" (formula "20") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                           (rule "inEqSimp_homoInEq1" (formula "20") (term "1"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,1"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0,1"))
                           (rule "mul_literals" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "polySimp_addComm0" (formula "20") (term "0,0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "1,1,0,1"))
                           (rule "times_zero_1" (formula "20") (term "1,0,1"))
                           (rule "add_zero_right" (formula "20") (term "0,1"))
                           (rule "leq_literals" (formula "20") (term "1"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "inEqSimp_homoInEq0" (formula "20") (term "1"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,1"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0,1"))
                           (rule "mul_literals" (formula "20") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "add_zero_left" (formula "20") (term "0,1"))
                           (rule "applyEq" (formula "20") (term "0,0,0") (ifseqformula "31"))
                           (rule "replace_known_right" (formula "20") (term "0,0") (ifseqformula "38"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "allLeft" (formula "20") (inst "t=Z(0(#))"))
                           (rule "leq_literals" (formula "20") (term "1,0"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                           (rule "applyEq" (formula "20") (term "0,0,0") (ifseqformula "16"))
                           (rule "replace_known_right" (formula "20") (term "0,0") (ifseqformula "39"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "allLeft" (formula "20") (inst "t=i_0"))
                           (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                           (rule "applyEq" (formula "20") (term "0,0,0,0") (ifseqformula "5"))
                           (rule "replace_known_right" (formula "20") (term "0,0,0") (ifseqformula "42"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "allLeft" (formula "22") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                           (rule "inEqSimp_homoInEq0" (formula "22") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "22") (term "1,0,1,0"))
                           (rule "mul_literals" (formula "22") (term "0,1,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "22") (term "0,1,0"))
                           (rule "add_literals" (formula "22") (term "0,0,1,0"))
                           (rule "add_zero_left" (formula "22") (term "0,1,0"))
                           (rule "inEqSimp_homoInEq1" (formula "22") (term "1"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,1"))
                           (rule "polySimp_rightDist" (formula "22") (term "1,0,1"))
                           (rule "mul_literals" (formula "22") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                           (rule "polySimp_addComm0" (formula "22") (term "0,0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,1"))
                           (rule "add_literals" (formula "22") (term "1,1,0,1"))
                           (rule "times_zero_1" (formula "22") (term "1,0,1"))
                           (rule "add_zero_right" (formula "22") (term "0,1"))
                           (rule "leq_literals" (formula "22") (term "1"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "applyEq" (formula "22") (term "1,0,0,0") (ifseqformula "31"))
                           (rule "inEqSimp_invertInEq1" (formula "22") (term "1"))
                           (rule "times_zero_2" (formula "22") (term "1,1"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "22") (term "0,1"))
                           (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "15"))
                           (rule "qeq_literals" (formula "22") (term "0,1"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "notLeft" (formula "22"))
                           (rule "allLeft" (formula "22") (inst "t=i_0"))
                           (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                           (rule "applyEq" (formula "22") (term "1,0,0,0,0") (ifseqformula "5"))
                           (rule "inEqSimp_contradInEq1" (formula "22") (term "1,0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "22") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "3"))
                           (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                           (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "22") (term "0,0,1"))
                           (rule "leq_literals" (formula "22") (term "0,1"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "notLeft" (formula "22"))
                           (rule "allLeft" (formula "22") (inst "t=Z(0(#))"))
                           (rule "leq_literals" (formula "22") (term "1,0"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                           (rule "applyEq" (formula "22") (term "1,0,0,0") (ifseqformula "16"))
                           (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "15"))
                           (rule "qeq_literals" (formula "22") (term "0,1"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "notLeft" (formula "22"))
                           (rule "shift_paren_and" (formula "12") (term "0,0,0,0,1,0"))
                           (rule "seqGetAlphaCast" (formula "30") (term "0"))
                           (rule "castedGetAny" (formula "30") (term "0"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "allLeft" (formula "27") (inst "t=Z(0(#))"))
                           (rule "typeEqDerived" (formula "27") (term "0,0,0") (ifseqformula "35"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "allLeft" (formula "27") (inst "t=i_0"))
                           (rule "typeEqDerived" (formula "27") (term "0,0,0") (ifseqformula "36"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "allLeft" (formula "26") (inst "t=i_0"))
                           (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                           (rule "applyEq" (formula "26") (term "0,0,0,0") (ifseqformula "36"))
                           (rule "replace_known_right" (formula "26") (term "0,0,0") (ifseqformula "39"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "true_left" (formula "26"))
                           (rule "allLeft" (formula "26") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                           (rule "inEqSimp_homoInEq0" (formula "26") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "26") (term "1,0,1,0"))
                           (rule "mul_literals" (formula "26") (term "0,1,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "26") (term "0,1,0"))
                           (rule "add_literals" (formula "26") (term "0,0,1,0"))
                           (rule "add_zero_left" (formula "26") (term "0,1,0"))
                           (rule "inEqSimp_homoInEq1" (formula "26") (term "1"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1,0,1"))
                           (rule "polySimp_rightDist" (formula "26") (term "1,0,1"))
                           (rule "mul_literals" (formula "26") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "26") (term "0,1"))
                           (rule "polySimp_addComm0" (formula "26") (term "0,0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,1"))
                           (rule "add_literals" (formula "26") (term "1,1,0,1"))
                           (rule "times_zero_1" (formula "26") (term "1,0,1"))
                           (rule "add_zero_right" (formula "26") (term "0,1"))
                           (rule "leq_literals" (formula "26") (term "1"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "applyEq" (formula "26") (term "0,0,0") (ifseqformula "34"))
                           (rule "replace_known_right" (formula "26") (term "0,0") (ifseqformula "40"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "true_left" (formula "26"))
                           (rule "allLeft" (formula "26") (inst "t=Z(0(#))"))
                           (rule "leq_literals" (formula "26") (term "1,0"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                           (rule "applyEq" (formula "26") (term "0,0,0") (ifseqformula "35"))
                           (rule "replace_known_right" (formula "26") (term "0,0") (ifseqformula "38"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "true_left" (formula "26"))
                           (rule "allLeft" (formula "27") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                           (rule "typeEqDerived" (formula "27") (term "0,0,0") (ifseqformula "34"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "allLeft" (formula "31") (inst "t=i_0"))
                           (rule "inEqSimp_homoInEq1" (formula "31") (term "1"))
                           (rule "polySimp_addComm1" (formula "31") (term "0,1"))
                           (rule "applyEq" (formula "31") (term "1,0,0,0") (ifseqformula "5"))
                           (rule "eqSymm" (formula "31") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1"))
                           (rule "polySimp_mulComm0" (formula "31") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "31") (term "1,1"))
                           (rule "mul_literals" (formula "31") (term "0,1,1"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1"))
                           (rule "polySimp_elimOne" (formula "31") (term "1,1,1"))
                           (rule "inEqSimp_contradInEq1" (formula "31") (term "1,0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "31") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "allLeft" (formula "32") (inst "t=Z(0(#))"))
                           (rule "leq_literals" (formula "32") (term "1,0"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "add_zero_right" (formula "32") (term "1,1,0"))
                           (rule "inEqSimp_homoInEq1" (formula "32") (term "1"))
                           (rule "times_zero_2" (formula "32") (term "1,0,1"))
                           (rule "add_zero_right" (formula "32") (term "0,1"))
                           (rule "applyEq" (formula "32") (term "1,0,0") (ifseqformula "16"))
                           (rule "eqSymm" (formula "32") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1"))
                           (rule "mul_literals" (formula "32") (term "1,1"))
                           (rule "shift_paren_and" (formula "12") (term "0,0,0,0,0,1,0"))
                           (rule "seqGetAlphaCast" (formula "35") (term "0"))
                           (rule "castDel" (formula "35") (term "0"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "true_left" (formula "35"))
                           (rule "seqGetAlphaCast" (formula "36") (term "0"))
                           (rule "castDel" (formula "36") (term "0"))
                            (builtin "One Step Simplification" (formula "36"))
                           (rule "true_left" (formula "36"))
                           (rule "seqGetAlphaCast" (formula "37") (term "0"))
                           (rule "castDel" (formula "37") (term "0"))
                            (builtin "One Step Simplification" (formula "37"))
                           (rule "true_left" (formula "37"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "16") (term "1") (ifseqformula "6"))
                           (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "44"))
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "ex_pull_out3" (formula "12") (term "0"))
                           (rule "cnf_rightDist" (formula "12") (term "0,0"))
                           (rule "shift_paren_or" (formula "12") (term "1,0,0"))
                           (rule "commute_or_2" (formula "12") (term "0,1,0,0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "12") (term "1,0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "12") (term "1,1,0,0"))
                           (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,1,0,0"))
                           (rule "add_literals" (formula "12") (term "1,0,1,1,0,0"))
                           (rule "times_zero_1" (formula "12") (term "0,1,1,0,0"))
                           (rule "leq_literals" (formula "12") (term "1,1,0,0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "cnf_rightDist" (formula "12") (term "0,0"))
                           (rule "shift_paren_or" (formula "12") (term "1,0,0"))
                           (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0,1,0,0"))
                           (rule "add_zero_right" (formula "12") (term "1,1,0,1,0,0"))
                           (rule "qeq_literals" (formula "12") (term "1,0,1,0,0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "cnf_rightDist" (formula "12") (term "0,0"))
                           (rule "shift_paren_or" (formula "12") (term "1,0,0"))
                           (rule "commute_or_2" (formula "12") (term "0,1,0,0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                           (rule "commute_or_2" (formula "12") (term "1,0,0,0"))
                           (rule "shift_paren_or" (formula "12") (term "0,1,0,0,0"))
                           (rule "commute_or" (formula "12") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "12") (term "0,1,0,0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0,1,0,0,0"))
                           (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0,1,0,0,0"))
                           (rule "add_literals" (formula "12") (term "1,0,1,0,1,0,0,0"))
                           (rule "times_zero_1" (formula "12") (term "0,1,0,1,0,0,0"))
                           (rule "leq_literals" (formula "12") (term "1,0,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                           (rule "commute_or_2" (formula "12") (term "1,0,0,0"))
                           (rule "shift_paren_or" (formula "12") (term "0,1,0,0,0"))
                           (rule "inEqSimp_or_tautInEq2" (formula "12") (term "0,0,1,0,0,0"))
                           (rule "add_zero_right" (formula "12") (term "1,1,0,0,1,0,0,0"))
                           (rule "qeq_literals" (formula "12") (term "1,0,0,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                           (rule "shift_paren_or" (formula "12") (term "1,0,0,0"))
                           (rule "commute_or_2" (formula "12") (term "0,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "cnf_rightDist" (formula "12") (term "0,0,0,0"))
                           (rule "commute_or_2" (formula "12") (term "0,0,0,0,0"))
                           (rule "shift_paren_or" (formula "12") (term "1,0,0,0,0"))
                           (rule "commute_or" (formula "12") (term "0,0,0,0,0,0"))
                           (rule "allLeft" (formula "22") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                           (rule "inEqSimp_homoInEq1" (formula "22") (term "1"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,1"))
                           (rule "polySimp_rightDist" (formula "22") (term "1,0,1"))
                           (rule "mul_literals" (formula "22") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                           (rule "polySimp_addComm0" (formula "22") (term "0,0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,1"))
                           (rule "add_literals" (formula "22") (term "1,1,0,1"))
                           (rule "times_zero_1" (formula "22") (term "1,0,1"))
                           (rule "add_zero_right" (formula "22") (term "0,1"))
                           (rule "leq_literals" (formula "22") (term "1"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "inEqSimp_homoInEq0" (formula "22") (term "1"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,1"))
                           (rule "polySimp_rightDist" (formula "22") (term "1,0,1"))
                           (rule "mul_literals" (formula "22") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                           (rule "add_literals" (formula "22") (term "0,0,1"))
                           (rule "add_zero_left" (formula "22") (term "0,1"))
                           (rule "applyEq" (formula "22") (term "0,0,0") (ifseqformula "32"))
                           (rule "replace_known_right" (formula "22") (term "0,0") (ifseqformula "44"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "applyEq" (formula "22") (term "1,0,0") (ifseqformula "32"))
                           (rule "inEqSimp_invertInEq1" (formula "22") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "0,1"))
                           (rule "mul_literals" (formula "22") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "22") (term "0,1"))
                           (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "15"))
                           (rule "qeq_literals" (formula "22") (term "0,1"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "allLeft" (formula "23") (inst "t=Z(0(#))"))
                           (rule "leq_literals" (formula "23") (term "1,0"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                           (rule "applyEq" (formula "23") (term "1,0,1,0") (ifseqformula "17"))
                           (rule "replace_known_left" (formula "23") (term "1,0") (ifseqformula "16"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "true_left" (formula "23"))
                           (rule "allLeft" (formula "23") (inst "t=i_0"))
                           (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                           (rule "applyEq" (formula "23") (term "0,0,0,0") (ifseqformula "5"))
                           (rule "replace_known_right" (formula "23") (term "0,0,0") (ifseqformula "49"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "applyEq" (formula "23") (term "1,0,0,0") (ifseqformula "5"))
                           (rule "replace_known_right" (formula "23") (term "0,0") (ifseqformula "48"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "inEqSimp_contradInEq1" (formula "23") (term "0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "23") (term "0,0"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "inEqSimp_subsumption0" (formula "34") (term "1") (ifseqformula "23"))
                           (rule "inEqSimp_homoInEq0" (formula "34") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                           (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "34") (term "0,0,1"))
                           (rule "qeq_literals" (formula "34") (term "0,1"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "true_left" (formula "34"))
                           (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "23"))
                           (rule "andLeft" (formula "3"))
                           (rule "inEqSimp_homoInEq1" (formula "3"))
                           (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                           (rule "add_literals" (formula "3") (term "1,1,0"))
                           (rule "times_zero_1" (formula "3") (term "1,0"))
                           (rule "add_literals" (formula "3") (term "0"))
                           (rule "leq_literals" (formula "3"))
                           (rule "closeFalse" (formula "3"))
                        )
                     )
                     (branch "self.list.size >= 1 FALSE"
                        (rule "replace_known_right" (formula "12") (term "0,1,1,0,0") (ifseqformula "45"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "inEqSimp_geqRight" (formula "45"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_subsumption0" (formula "19") (ifseqformula "1"))
                        (rule "leq_literals" (formula "19") (term "0"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "true_left" (formula "19"))
                        (rule "inEqSimp_antiSymm" (formula "12") (ifseqformula "1"))
                        (rule "applyEq" (formula "14") (term "1,1,0,0,1,1,0,1,0") (ifseqformula "12"))
                        (rule "applyEq" (formula "44") (term "1,1,0,0") (ifseqformula "12"))
                        (rule "applyEq" (formula "42") (term "1,1,0,1") (ifseqformula "12"))
                        (rule "add_zero_right" (formula "42") (term "1,0,1"))
                        (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "12"))
                        (rule "applyEq" (formula "13") (term "0") (ifseqformula "12"))
                        (rule "qeq_literals" (formula "13"))
                        (rule "true_left" (formula "13"))
                        (rule "applyEq" (formula "23") (term "1,1,0") (ifseqformula "12"))
                        (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "12"))
                        (rule "applyEq" (formula "20") (term "1,1,0") (ifseqformula "12"))
                        (rule "applyEq" (formula "19") (term "1,1,0") (ifseqformula "12"))
                        (rule "applyEq" (formula "13") (term "1,1,1,0,1,1,1,0,1,0") (ifseqformula "12"))
                        (rule "add_zero_right" (formula "13") (term "1,1,0,1,1,1,0,1,0"))
                        (rule "applyEq" (formula "4") (term "0") (ifseqformula "12"))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "times_zero_2" (formula "4") (term "1,0"))
                        (rule "add_zero_right" (formula "4") (term "0"))
                        (rule "applyEq" (formula "43") (term "1,1,0,0,1,0") (ifseqformula "12"))
                        (rule "applyEq" (formula "13") (term "1,1,0,0,1,0,1,0") (ifseqformula "12"))
                        (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "12"))
                        (rule "applyEq" (formula "40") (term "1,1,0,1") (ifseqformula "12"))
                        (rule "add_zero_right" (formula "40") (term "1,0,1"))
                        (rule "applyEq" (formula "42") (term "1,1,1,0") (ifseqformula "12"))
                        (rule "add_literals" (formula "42") (term "1,1,0"))
                        (rule "applyEq" (formula "15") (term "2,0") (ifseqformula "12"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "eqSymm" (formula "15"))
                        (rule "applyEq" (formula "13") (term "1,1,1,1,1,0,1,0,1,0") (ifseqformula "12"))
                        (rule "add_zero_right" (formula "13") (term "1,1,1,1,0,1,0,1,0"))
                        (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "12"))
                        (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "12"))
                        (rule "applyEq" (formula "1") (term "0") (ifseqformula "12"))
                        (rule "leq_literals" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "applyEq" (formula "38") (term "1,1,0,1") (ifseqformula "11"))
                        (rule "add_zero_right" (formula "38") (term "1,0,1"))
                        (rule "applyEq" (formula "43") (term "1,1,0") (ifseqformula "11"))
                        (rule "applyEq" (formula "16") (term "1") (ifseqformula "11"))
                        (rule "applyEq" (formula "17") (term "1") (ifseqformula "11"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                        (rule "mul_literals" (formula "3") (term "1"))
                        (rule "inEqSimp_subsumption0" (formula "2") (ifseqformula "3"))
                        (rule "leq_literals" (formula "2") (term "0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "1") (term "0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
               )
            )
            (branch " (_ov_0, _fv_0) in allLocs & !(_ov_0, _fv_0) in {(self, LinkedListIterator::$list)} cup {(self, LinkedListIterator::$curr)} cup {(self, LinkedListIterator::$index)} cup {(self, LinkedListIterator::$seen)} cup {(self, LinkedListIterator::$to_see)} cup {(self.list, LinkedList::$size)} cup {(self.list, LinkedList::$head)} cup {(self.list, LinkedList::$tail)} cup {(self.list, LinkedList::$nodeList)} cup {(self.list, LinkedList::$values)} cup infiniteUnion{int i;}(if ( 0 <= i & i < self.list.nodeList.length) then ((Node)(self.list.nodeList[i]).*) else ({})) & !_fv_0 = java.lang.Object::<created> | !_ov_0 = null & !_ov_0.<created> = TRUE FALSE"
                (builtin "One Step Simplification" (formula "10"))
               (rule "closeTrue" (formula "10"))
            )
         )
      )
   )
)
)
}
