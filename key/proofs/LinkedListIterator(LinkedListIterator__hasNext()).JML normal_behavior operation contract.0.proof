\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Jun 14 15:29:28 BST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:off , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[Strategy]Timeout=-1
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "..";

\proofObligation "#Proof Obligation Settings
#Tue Jun 14 15:29:28 BST 2022
contract=LinkedListIterator[LinkedListIterator\\:\\:hasNext()].JML normal_behavior operation contract.0
name=LinkedListIterator[LinkedListIterator\\:\\:hasNext()].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "JOTA" ) (keyVersion "666bcb0c95"))

(autoModeTime "33781")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "heapAtPre_0,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "7") (term "0,0,1,0,1"))
(rule "eqSymm" (formula "7") (term "0,0,0,0,1"))
(rule "inEqSimp_gtToGeq" (formula "7") (term "0,0,0,0,0,0,1"))
(rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0,0,0,0,1"))
(rule "add_zero_right" (formula "7") (term "0,0,0,0,0,0,0,0,1"))
(rule "assignment" (formula "7") (term "1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "inEqSimp_sepPosMonomial1" (formula "7") (term "0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "7") (term "1,0,0,0,0,0,0,1"))
(rule "Class_invariant_axiom_for_LinkedListIterator" (formula "5") (inst "i=i") (inst "f=f") (inst "i_0=i_0") (inst "f_0=f_0"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "eqSymm" (formula "11") (term "1"))
(rule "eqSymm" (formula "10"))
(rule "eqSymm" (formula "9"))
(rule "castedGetAny" (formula "11") (term "0,1"))
(rule "lenOfSeqSubEQ" (formula "7") (term "1,1,0,0") (ifseqformula "9"))
(rule "polySimp_elimSub" (formula "7") (term "1,1,1,0,0"))
(rule "times_zero_2" (formula "7") (term "1,1,1,1,0,0"))
(rule "add_zero_right" (formula "7") (term "1,1,1,0,0"))
(rule "lenOfSeqSubEQ" (formula "8") (term "1,1,0,0") (ifseqformula "10"))
(rule "polySimp_elimSub" (formula "8") (term "1,1,1,0,0"))
(rule "polySimp_addComm0" (formula "8") (term "1,1,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "11") (term "0"))
(rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
(rule "polySimp_addComm1" (formula "11") (term "0,0"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "0,1,1,0,0"))
(rule "add_zero_right" (formula "7") (term "0,0,1,1,0,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "8") (term "0,1,1,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,1,0,0"))
(rule "polySimp_addComm1" (formula "8") (term "0,0,1,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "inEqSimp_commuteLeq" (formula "6"))
(rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0"))
(rule "polySimp_mulLiterals" (formula "11") (term "0,0"))
(rule "polySimp_elimOne" (formula "11") (term "0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
(rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
(rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,1,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "7") (term "0,0,1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "7") (term "0,0,1,1,1,0,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,1,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "0,0,1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "8") (term "0,0,1,1,1,0,0"))
(rule "getOfSeqSubEQ" (formula "7") (term "1,0,1,0,1,0") (ifseqformula "9"))
(rule "castDel" (formula "7") (term "2,1,0,1,0,1,0"))
(rule "add_zero_right" (formula "7") (term "1,1,1,0,1,0,1,0"))
(rule "polySimp_elimSub" (formula "7") (term "1,1,0,1,0,1,0,1,0"))
(rule "times_zero_2" (formula "7") (term "1,1,1,0,1,0,1,0,1,0"))
(rule "add_zero_right" (formula "7") (term "1,1,0,1,0,1,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,1,0,1,0,1,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,1,0,1,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,1,0,1,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,1,0,1,0,1,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,1,0,1,0,1,0,1,0"))
(rule "polySimp_rightDist" (formula "7") (term "1,1,0,1,0,1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,1,0,1,0,1,0"))
(rule "mul_literals" (formula "7") (term "0,1,1,0,1,0,1,0,1,0"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,1,0,1,0,1,0"))
(rule "getOfSeqSubEQ" (formula "8") (term "1,0,1,0,1,0") (ifseqformula "10"))
(rule "castDel" (formula "8") (term "2,1,0,1,0,1,0"))
(rule "polySimp_elimSub" (formula "8") (term "1,1,0,1,0,1,0,1,0"))
(rule "polySimp_addComm0" (formula "8") (term "1,1,1,0,1,0,1,0"))
(rule "polySimp_addComm0" (formula "8") (term "1,1,0,1,0,1,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,1,0,1,0,1,0"))
(rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,1,0,1,0,1,0"))
(rule "polySimp_mulAssoc" (formula "8") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
(rule "polySimp_mulComm0" (formula "8") (term "0,0,1,0,0,1,0,1,0,1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
(rule "polySimp_elimOne" (formula "8") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
(rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,1,0,1,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,1,0,1,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,1,0,1,0,1,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,1,0,1,0,1,0,1,0"))
(rule "polySimp_rightDist" (formula "8") (term "1,1,0,1,0,1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,1,0,1,0,1,0"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,1,0,1,0,1,0"))
(rule "polySimp_rightDist" (formula "8") (term "0,1,1,0,1,0,1,0,1,0"))
(rule "mul_literals" (formula "8") (term "0,0,1,1,0,1,0,1,0,1,0"))
(rule "nnf_imp2or" (formula "7") (term "0"))
(rule "nnf_imp2or" (formula "8") (term "0"))
(rule "nnf_notAnd" (formula "7") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
(rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
(rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
(rule "add_literals" (formula "7") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
(rule "mul_literals" (formula "7") (term "1,0,0,0"))
(rule "nnf_notAnd" (formula "8") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
(rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
(rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
(rule "add_literals" (formula "8") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
(rule "mul_literals" (formula "8") (term "1,0,0,0"))
(rule "Class_invariant_axiom_for_LinkedList" (formula "12") (inst "i=i") (inst "i_0=i_0") (inst "j=j") (inst "i_1=i_1") (inst "i_2=i_2") (inst "f=f") (inst "i_3=i_3") (inst "n=n"))
 (builtin "One Step Simplification" (formula "12"))
(rule "translateJavaSubInt" (formula "12") (term "1,1,0,0,1,0,0"))
(rule "translateJavaSubInt" (formula "12") (term "1,0,1,1,1,1,0,0,0"))
(rule "andLeft" (formula "12"))
(rule "andLeft" (formula "12"))
(rule "andLeft" (formula "12"))
(rule "andLeft" (formula "12"))
(rule "andLeft" (formula "12"))
(rule "andLeft" (formula "12"))
(rule "andLeft" (formula "12"))
(rule "andLeft" (formula "12"))
(rule "eqSymm" (formula "19") (term "1,1,0,1,0"))
(rule "eqSymm" (formula "19") (term "0,1,0,1,0"))
(rule "eqSymm" (formula "18") (term "1,0"))
(rule "eqSymm" (formula "17") (term "1,0,1"))
(rule "eqSymm" (formula "17") (term "1,1"))
(rule "eqSymm" (formula "13"))
(rule "polySimp_elimSub" (formula "18") (term "1,1,0,0"))
(rule "mul_literals" (formula "18") (term "1,1,1,0,0"))
(rule "polySimp_elimSub" (formula "17") (term "1,0,0,1,1"))
(rule "mul_literals" (formula "17") (term "1,1,0,0,1,1"))
(rule "polySimp_addComm0" (formula "18") (term "1,0,0,1,0"))
(rule "polySimp_addComm0" (formula "18") (term "1,1,0,0"))
(rule "polySimp_addComm0" (formula "17") (term "1,0,0,1,1"))
(rule "castedGetAny" (formula "20") (term "1,1,1,0"))
(rule "castedGetAny" (formula "19") (term "1,0,1,0,1,0"))
(rule "castedGetAny" (formula "19") (term "0,0,1,0,1,0"))
(rule "castedGetAny" (formula "18") (term "1,1,1,0"))
(rule "castedGetAny" (formula "17") (term "0,1,0,1"))
(rule "castedGetAny" (formula "18") (term "0,1,0"))
(rule "eqSymm" (formula "18") (term "1,0"))
(rule "castedGetAny" (formula "17") (term "0,1,1"))
(rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
(rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
(rule "applyEq" (formula "6") (term "0") (ifseqformula "13"))
(rule "applyEq" (formula "10") (term "2,0") (ifseqformula "13"))
(rule "applyEq" (formula "17") (term "1,1,0,1,1") (ifseqformula "12"))
(rule "applyEq" (formula "14") (term "0") (ifseqformula "12"))
(rule "applyEq" (formula "11") (term "0,0") (ifseqformula "13"))
(rule "applyEq" (formula "8") (term "0,0,1,1,0,0") (ifseqformula "13"))
(rule "applyEq" (formula "8") (term "1,1,1,1,0,0") (ifseqformula "13"))
(rule "applyEq" (formula "15") (term "0,1,0,0,1,0,0") (ifseqformula "12"))
(rule "applyEq" (formula "18") (term "0,1,0,0,1,0,0") (ifseqformula "12"))
(rule "applyEq" (formula "16") (term "0,1,0,0,1,0,0") (ifseqformula "13"))
(rule "applyEq" (formula "13") (term "1") (ifseqformula "12"))
(rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "12"))
(rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "12"))
(rule "applyEq" (formula "11") (term "0,0") (ifseqformula "12"))
(rule "applyEq" (formula "6") (term "0") (ifseqformula "12"))
(rule "applyEq" (formula "10") (term "2,0") (ifseqformula "12"))
(rule "applyEq" (formula "8") (term "0,0,1,1,0,0") (ifseqformula "12"))
(rule "applyEq" (formula "8") (term "1,1,1,1,0,0") (ifseqformula "12"))
(rule "applyEq" (formula "8") (term "1,1,1,0,1,0,1,0,1,0") (ifseqformula "13"))
(rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "13"))
(rule "applyEq" (formula "16") (term "0,1,0,0,1,0,0") (ifseqformula "12"))
(rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
(rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
(rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
(rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
(rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
(rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,1,0"))
(rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,1,0"))
(rule "mul_literals" (formula "19") (term "0,1,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
(rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
(rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
(rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
(rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
(rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "14"))
(rule "polySimp_mulComm0" (formula "6") (term "0,0"))
(rule "polySimp_addComm0" (formula "6") (term "0"))
(rule "inEqSimp_sepNegMonomial1" (formula "6"))
(rule "polySimp_mulLiterals" (formula "6") (term "0"))
(rule "polySimp_elimOne" (formula "6") (term "0"))
(rule "nnf_imp2or" (formula "20") (term "1,0,1,0"))
(rule "nnf_imp2or" (formula "16") (term "0"))
(rule "nnf_imp2or" (formula "19") (term "0"))
(rule "nnf_imp2or" (formula "21") (term "0"))
(rule "nnf_imp2or" (formula "17") (term "0"))
(rule "nnf_imp2or" (formula "20") (term "0"))
(rule "nnf_notAnd" (formula "16") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
(rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
(rule "mul_literals" (formula "16") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
(rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
(rule "nnf_notAnd" (formula "19") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
(rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
(rule "mul_literals" (formula "19") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
(rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
(rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
(rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
(rule "nnf_notAnd" (formula "21") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
(rule "mul_literals" (formula "21") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
(rule "mul_literals" (formula "21") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
(rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
(rule "nnf_notAnd" (formula "17") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
(rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
(rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
(rule "mul_literals" (formula "17") (term "1,0,0,0"))
(rule "nnf_notAnd" (formula "20") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
(rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
(rule "mul_literals" (formula "20") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
(rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
(rule "nnf_imp2or" (formula "20") (term "0,1,0"))
(rule "nnf_notAnd" (formula "20") (term "0,0,1,0"))
(rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,1,0"))
(rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0,1,0"))
(rule "add_zero_right" (formula "20") (term "0,0,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,1,0"))
(rule "mul_literals" (formula "20") (term "1,0,0,0,1,0"))
(rule "inEqSimp_notLeq" (formula "20") (term "1,0,0,1,0"))
(rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,1,0"))
(rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,1,0"))
(rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,1,0"))
(rule "add_literals" (formula "20") (term "0,0,0,1,0,0,1,0"))
(rule "add_zero_left" (formula "20") (term "0,0,1,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,1,0"))
(rule "methodBodyExpand" (formula "24") (term "1") (newnames "heapBefore_hasNext,savedHeapBefore_hasNext"))
 (builtin "One Step Simplification" (formula "24"))
(rule "commute_and" (formula "18") (term "0,0"))
(rule "commute_and" (formula "8") (term "1,0,1,0"))
(rule "commute_and" (formula "8") (term "0,0,1,0"))
(rule "commute_and" (formula "9") (term "0,0,1,0"))
(rule "commute_and" (formula "18") (term "0,0,0,0,1"))
(rule "commute_or_2" (formula "19") (term "0"))
(rule "commute_or_2" (formula "21") (term "0"))
(rule "commute_and" (formula "9") (term "1,0,1,0"))
(rule "equalityToSeqGetAndSeqLenLeft" (formula "10") (inst "iv=iv"))
(rule "andLeft" (formula "10"))
(rule "lenOfSeqSub" (formula "10") (term "0"))
(rule "polySimp_elimSub" (formula "10") (term "1,0"))
(rule "mul_literals" (formula "10") (term "1,1,0"))
(rule "add_zero_right" (formula "10") (term "1,0"))
(rule "lenOfSeqSubEQ" (formula "10") (term "1") (ifseqformula "12"))
(rule "eqSymm" (formula "10"))
(rule "polySimp_elimSub" (formula "10") (term "1,0"))
(rule "times_zero_2" (formula "10") (term "1,1,0"))
(rule "add_zero_right" (formula "10") (term "1,0"))
 (builtin "One Step Simplification" (formula "10"))
(rule "true_left" (formula "10"))
(rule "lenOfSeqSub" (formula "10") (term "1,1,0,0"))
(rule "polySimp_elimSub" (formula "10") (term "1,1,1,0,0"))
(rule "times_zero_2" (formula "10") (term "1,1,1,1,0,0"))
(rule "add_zero_right" (formula "10") (term "1,1,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,1,0,0"))
(rule "add_zero_right" (formula "10") (term "0,0,1,1,0,0"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
(rule "applyEq" (formula "10") (term "0,0,1,0") (ifseqformula "11"))
 (builtin "One Step Simplification" (formula "10"))
(rule "true_left" (formula "10"))
(rule "seqGetAlphaCast" (formula "12") (term "0,1"))
(rule "castedGetAny" (formula "12") (term "0"))
 (builtin "One Step Simplification" (formula "12"))
(rule "true_left" (formula "12"))
(rule "commute_and" (formula "16") (term "0,0,1,0"))
(rule "commute_and" (formula "16") (term "1,0,1,0"))
(rule "commute_and" (formula "17") (term "0,0,1,0"))
(rule "commute_and" (formula "17") (term "1,0,1,0"))
(rule "commute_or" (formula "19") (term "0,0"))
(rule "commute_or" (formula "21") (term "0,0"))
(rule "commute_and_2" (formula "18") (term "0"))
(rule "shift_paren_or" (formula "20") (term "0,1,0"))
(rule "applyEq_and_gen2" (formula "8") (term "1,0,1,0"))
(rule "ifEqualsNull" (formula "8") (term "0,0,1,0,1,0"))
(rule "nnf_notOr" (formula "8") (term "0,1,0,1,0"))
(rule "nnf_notAnd" (formula "8") (term "1,0,1,0,1,0"))
 (builtin "One Step Simplification" (formula "8"))
(rule "nnf_notAnd" (formula "8") (term "0,0,1,0,1,0"))
(rule "nnf_notAnd" (formula "8") (term "0,0,0,1,0,1,0"))
(rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,0,1,0,1,0"))
(rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0,0,1,0,1,0"))
(rule "add_zero_right" (formula "8") (term "0,0,0,0,0,0,1,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,0,1,0,1,0"))
(rule "mul_literals" (formula "8") (term "1,0,0,0,0,1,0,1,0"))
(rule "inEqSimp_notLeq" (formula "8") (term "1,0,0,0,1,0,1,0"))
(rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,0,1,0,1,0"))
(rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
(rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,0,1,0,1,0"))
(rule "add_literals" (formula "8") (term "0,0,0,1,0,0,0,1,0,1,0"))
(rule "add_zero_left" (formula "8") (term "0,0,1,0,0,0,1,0,1,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0,0,1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,1,0,1,0"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0,1,0,1,0"))
(rule "applyEq_and_gen2" (formula "9") (term "1,0,1,0"))
(rule "ifEqualsNull" (formula "9") (term "0,0,1,0,1,0"))
(rule "nnf_notOr" (formula "9") (term "0,1,0,1,0"))
(rule "nnf_notAnd" (formula "9") (term "1,0,1,0,1,0"))
 (builtin "One Step Simplification" (formula "9"))
(rule "nnf_notAnd" (formula "9") (term "0,0,1,0,1,0"))
(rule "nnf_notAnd" (formula "9") (term "0,0,0,1,0,1,0"))
(rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,0,1,0,1,0"))
(rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0,1,0,1,0"))
(rule "polySimp_rightDist" (formula "9") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,0,0,1,0,0,0,1,0,1,0"))
(rule "mul_literals" (formula "9") (term "0,0,1,0,0,1,0,0,0,1,0,1,0"))
(rule "polySimp_elimOne" (formula "9") (term "1,0,1,0,0,1,0,0,0,1,0,1,0"))
(rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0,1,0,1,0"))
(rule "polySimp_addAssoc" (formula "9") (term "0,0,0,1,0,0,0,1,0,1,0"))
(rule "add_literals" (formula "9") (term "0,0,0,0,1,0,0,0,1,0,1,0"))
(rule "add_zero_left" (formula "9") (term "0,0,0,1,0,0,0,1,0,1,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,0,1,0,1,0"))
(rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,0,1,0,1,0"))
(rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,0,1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,0,1,0,1,0"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,0,1,0,1,0"))
(rule "polySimp_mulComm0" (formula "9") (term "0,1,1,0,0,0,1,0,1,0"))
(rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,0,1,0,1,0"))
(rule "mul_literals" (formula "9") (term "1,0,0,0,0,0,0,1,0,1,0"))
(rule "add_zero_right" (formula "9") (term "0,0,0,0,0,0,1,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,1,0,1,0"))
(rule "mul_literals" (formula "9") (term "1,0,0,0,0,1,0,1,0"))
(rule "cnf_rightDist" (formula "18"))
(rule "andLeft" (formula "18"))
(rule "commute_or_2" (formula "21") (term "0,0,1,0"))
(rule "applyEq_and_gen2" (formula "17") (term "1,0,1,0"))
(rule "lenNonNegative" (formula "13") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "13"))
(rule "applyEq" (formula "13") (term "0") (ifseqformula "14"))
(rule "cnf_rightDist" (formula "20"))
(rule "andLeft" (formula "20"))
(rule "returnUnfold" (formula "27") (term "1") (inst "#v0=x"))
(rule "variableDeclarationAssign" (formula "27") (term "1"))
(rule "variableDeclaration" (formula "27") (term "1") (newnames "x"))
(rule "lenNonNegative" (formula "15") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "15"))
(rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
(rule "cnf_rightDist" (formula "20"))
(rule "andLeft" (formula "20"))
(rule "commute_or" (formula "20"))
(rule "cnf_rightDist" (formula "19"))
(rule "andLeft" (formula "19"))
(rule "cnf_rightDist" (formula "20"))
(rule "andLeft" (formula "20"))
(rule "cnf_rightDist" (formula "20"))
(rule "andLeft" (formula "20"))
(rule "commute_or" (formula "20"))
(rule "commute_or" (formula "8") (term "1,0,1,0,1,0"))
(rule "cnf_rightDist" (formula "19"))
(rule "andLeft" (formula "19"))
(rule "cnf_rightDist" (formula "20"))
(rule "andLeft" (formula "20"))
(rule "commute_or" (formula "21"))
(rule "cnf_rightDist" (formula "20"))
(rule "andLeft" (formula "20"))
(rule "commute_or" (formula "20"))
(rule "commute_and_2" (formula "19") (term "1"))
(rule "commute_or_2" (formula "8") (term "0,0,1,0,1,0"))
(rule "shift_paren_and" (formula "17") (term "0,1,0"))
 (builtin "One Step Simplification" (formula "17"))
(rule "castedGetAny" (formula "17") (term "0,0,1,0,0,1,0"))
(rule "castedGetAny" (formula "17") (term "1,0,1,1,0,0,1,0"))
(rule "castedGetAny" (formula "17") (term "1,0,0,1,0,1,0"))
(rule "castedGetAny" (formula "17") (term "0,0,0,0,0,1,0"))
(rule "commute_or" (formula "9") (term "1,0,1,0,1,0"))
(rule "cnf_rightDist" (formula "19"))
(rule "andLeft" (formula "19"))
(rule "cnf_rightDist" (formula "20"))
 (builtin "One Step Simplification" (formula "20"))
(rule "cnf_rightDist" (formula "20"))
(rule "andLeft" (formula "20"))
(rule "commute_or" (formula "20"))
(rule "commute_or" (formula "32") (term "0,0,0,1,0"))
(rule "equalityToSeqGetAndSeqLenLeft" (formula "11") (inst "iv=iv"))
(rule "andLeft" (formula "11"))
(rule "lenOfSeqSub" (formula "11") (term "0"))
(rule "polySimp_elimSub" (formula "11") (term "1,0"))
(rule "polySimp_addComm0" (formula "11") (term "1,0"))
(rule "lenOfSeqSub" (formula "12") (term "1,1,0,0"))
(rule "polySimp_elimSub" (formula "12") (term "1,1,1,0,0"))
(rule "polySimp_addComm0" (formula "12") (term "1,1,1,0,0"))
(rule "lenOfSeqSubEQ" (formula "11") (term "1") (ifseqformula "13"))
(rule "eqSymm" (formula "11"))
(rule "polySimp_elimSub" (formula "11") (term "1,0"))
(rule "polySimp_addComm0" (formula "11") (term "1,0"))
 (builtin "One Step Simplification" (formula "11"))
(rule "true_left" (formula "11"))
(rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,1,0,0"))
(rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,1,0,0"))
(rule "polySimp_addComm1" (formula "11") (term "0,0,1,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
(rule "applyEq" (formula "11") (term "0,0,1,0") (ifseqformula "12"))
 (builtin "One Step Simplification" (formula "11"))
(rule "true_left" (formula "11"))
(rule "cnf_rightDist" (formula "19"))
(rule "andLeft" (formula "19"))
(rule "commute_or" (formula "19"))
(rule "cnf_rightDist" (formula "17") (term "0"))
(rule "distr_forallAnd" (formula "17"))
(rule "andLeft" (formula "17"))
(rule "shift_paren_or" (formula "18") (term "0"))
(rule "commute_or_2" (formula "9") (term "0,0,1,0,1,0"))
(rule "cnf_rightDist" (formula "21"))
(rule "andLeft" (formula "21"))
(rule "commute_or" (formula "22"))
(rule "cnf_rightDist" (formula "20"))
(rule "andLeft" (formula "20"))
(rule "commute_or" (formula "21"))
(rule "cnf_rightDist" (formula "22"))
 (builtin "One Step Simplification" (formula "22"))
(rule "commute_or" (formula "22"))
(rule "cnf_rightDist" (formula "20"))
 (builtin "One Step Simplification" (formula "20"))
(rule "commute_or" (formula "20"))
(rule "cnf_rightDist" (formula "17") (term "0"))
(rule "distr_forallAnd" (formula "17"))
(rule "andLeft" (formula "17"))
(rule "shift_paren_or" (formula "18") (term "0"))
(rule "shift_paren_and" (formula "20") (term "0,1,0"))
 (builtin "One Step Simplification" (formula "20"))
(rule "castedGetAny" (formula "20") (term "1,0,1,1,0,0,1,0"))
(rule "castedGetAny" (formula "20") (term "0,0,0,0,0,1,0"))
(rule "castedGetAny" (formula "20") (term "0,0,1,0,0,1,0"))
(rule "ifthenelse_to_or_right" (formula "8") (term "1,1,0,1,0"))
(rule "nnf_notAnd" (formula "8") (term "0,0,1,1,0,1,0"))
(rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,1,1,0,1,0"))
(rule "mul_literals" (formula "8") (term "1,0,0,0,0,0,1,1,0,1,0"))
(rule "add_zero_right" (formula "8") (term "0,0,0,0,0,1,1,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,1,1,0,1,0"))
(rule "mul_literals" (formula "8") (term "1,0,0,0,1,1,0,1,0"))
(rule "inEqSimp_notLeq" (formula "8") (term "1,0,0,1,1,0,1,0"))
(rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,1,1,0,1,0"))
(rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,1,1,0,1,0"))
(rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,1,1,0,1,0"))
(rule "add_literals" (formula "8") (term "0,0,0,1,0,0,1,1,0,1,0"))
(rule "add_zero_left" (formula "8") (term "0,0,1,0,0,1,1,0,1,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0,1,1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,1,1,0,1,0"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,1,1,0,1,0"))
(rule "compound_inequality_comparison_1" (formula "41") (term "1") (inst "#v0=n"))
(rule "variableDeclarationAssign" (formula "41") (term "1"))
(rule "variableDeclaration" (formula "41") (term "1") (newnames "n"))
(rule "assignment_read_attribute_this" (formula "41"))
 (builtin "One Step Simplification" (formula "41"))
(rule "cnf_rightDist" (formula "17") (term "0"))
(rule "distr_forallAnd" (formula "17"))
(rule "andLeft" (formula "17"))
(rule "commute_or_2" (formula "17") (term "0"))
(rule "shift_paren_or" (formula "18") (term "0"))
(rule "commute_or" (formula "17") (term "0,0"))
(rule "cnf_rightDist" (formula "21") (term "0"))
(rule "distr_forallAnd" (formula "21"))
(rule "andLeft" (formula "21"))
(rule "shift_paren_or" (formula "22") (term "0"))
(rule "commute_or" (formula "8") (term "0,0,0,1,0,1,0"))
(rule "ifthenelse_to_or_right" (formula "9") (term "1,1,0,1,0"))
(rule "nnf_notAnd" (formula "9") (term "0,0,1,1,0,1,0"))
(rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,1,1,0,1,0"))
(rule "mul_literals" (formula "9") (term "1,0,0,0,0,0,1,1,0,1,0"))
(rule "add_zero_right" (formula "9") (term "0,0,0,0,0,1,1,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,1,1,0,1,0"))
(rule "mul_literals" (formula "9") (term "1,0,0,0,1,1,0,1,0"))
(rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,1,1,0,1,0"))
(rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,1,1,0,1,0"))
(rule "polySimp_rightDist" (formula "9") (term "0,1,0,0,1,0,0,1,1,0,1,0"))
(rule "mul_literals" (formula "9") (term "0,0,1,0,0,1,0,0,1,1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,0,0,1,0,0,1,1,0,1,0"))
(rule "polySimp_elimOne" (formula "9") (term "1,0,1,0,0,1,0,0,1,1,0,1,0"))
(rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,1,1,0,1,0"))
(rule "polySimp_addAssoc" (formula "9") (term "0,0,0,1,0,0,1,1,0,1,0"))
(rule "add_literals" (formula "9") (term "0,0,0,0,1,0,0,1,1,0,1,0"))
(rule "add_zero_left" (formula "9") (term "0,0,0,1,0,0,1,1,0,1,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,1,1,0,1,0"))
(rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1,1,0,1,0"))
(rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1,1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1,1,0,1,0"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1,1,0,1,0"))
(rule "polySimp_mulComm0" (formula "9") (term "0,1,1,0,0,1,1,0,1,0"))
(rule "cnf_rightDist" (formula "8") (term "1,0,1,0,1,0"))
(rule "cnf_rightDist" (formula "21") (term "0"))
(rule "distr_forallAnd" (formula "21"))
(rule "andLeft" (formula "21"))
(rule "shift_paren_or" (formula "22") (term "0"))
(rule "cnf_rightDist" (formula "9") (term "1,0,1,0,1,0"))
(rule "commute_or" (formula "9") (term "0,0,0,1,0,1,0"))
(rule "commute_or" (formula "8") (term "1,1,1,0,1,0"))
(rule "cnf_rightDist" (formula "21") (term "0"))
(rule "distr_forallAnd" (formula "21"))
(rule "andLeft" (formula "21"))
(rule "commute_or_2" (formula "21") (term "0"))
(rule "shift_paren_or" (formula "22") (term "0"))
(rule "commute_or" (formula "21") (term "0,0"))
(rule "commute_or_2" (formula "8") (term "0,1,1,0,1,0"))
(rule "commute_or" (formula "9") (term "1,1,1,0,1,0"))
(rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,0,0") (ifseqformula "1"))
(rule "replace_known_right" (formula "11") (term "0") (ifseqformula "44"))
 (builtin "One Step Simplification" (formula "11"))
(rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "0,2") (ifseqformula "1"))
(rule "inequality_comparison_simple" (formula "47") (term "1"))
 (builtin "One Step Simplification" (formula "47"))
(rule "commute_or_2" (formula "9") (term "0,1,1,0,1,0"))
(rule "all_pull_out3" (formula "43") (term "0"))
(rule "shift_paren_or" (formula "43") (term "0,0"))
(rule "shift_paren_or" (formula "43") (term "0,0,0"))
(rule "shift_paren_or" (formula "43") (term "0,0,0,0"))
(rule "commute_or_2" (formula "43") (term "0,0,0,0,0"))
(rule "commute_or" (formula "8") (term "0,1,0,1,0,1,0"))
(rule "commute_or" (formula "9") (term "0,1,0,1,0,1,0"))
(rule "commute_or" (formula "43") (term "0,0,0,0,0,0"))
(rule "commute_or" (formula "8") (term "0,0,1,1,0,1,0"))
(rule "commute_or" (formula "9") (term "0,0,1,1,0,1,0"))
(rule "methodCallReturn" (formula "47") (term "1"))
(rule "assignment" (formula "47") (term "1"))
 (builtin "One Step Simplification" (formula "47"))
(rule "cnf_rightDist" (formula "8") (term "1,1,1,0,1,0"))
(rule "commute_or" (formula "8") (term "1,1,1,1,0,1,0"))
(rule "methodCallEmpty" (formula "47") (term "1"))
(rule "cnf_rightDist" (formula "9") (term "1,1,1,0,1,0"))
(rule "commute_or" (formula "9") (term "1,1,1,1,0,1,0"))
(rule "tryEmpty" (formula "47") (term "1"))
(rule "emptyModality" (formula "47") (term "1"))
 (builtin "One Step Simplification" (formula "47"))
(rule "lenOfSeqSubEQ" (formula "47") (term "0,0,0,0") (ifseqformula "12"))
(rule "polySimp_elimSub" (formula "47") (term "1,0,0,0,0"))
(rule "polySimp_addComm0" (formula "47") (term "1,0,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "47") (term "0,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "47") (term "1,0,0,0,0,0,0,0"))
(rule "polySimp_addComm1" (formula "47") (term "0,0,0,0,0,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "47") (term "0,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "47") (term "0,0,0,0,0,0"))
(rule "polySimp_elimOne" (formula "47") (term "0,0,0,0,0,0"))
(rule "Class_invariant_axiom_for_LinkedListIterator" (formula "47") (term "1") (inst "i=i") (inst "f=f") (inst "i_0=i_0") (inst "f_0=f_0"))
(rule "eqSymm" (formula "47") (term "1,0,0,0,1,1"))
(rule "eqSymm" (formula "47") (term "1,0,0,1,1"))
(rule "eqSymm" (formula "47") (term "1,1,0,1,1"))
(rule "replace_known_left" (formula "47") (term "1,0,0,0,1,1") (ifseqformula "10"))
 (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "45")))
(rule "castedGetAny" (formula "47") (term "0,1,1,0,1"))
(rule "lenOfSeqSubEQ" (formula "47") (term "1,1,0,0,1,0,0,0,1") (ifseqformula "12"))
(rule "polySimp_elimSub" (formula "47") (term "1,1,1,0,0,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "47") (term "1,1,1,0,0,1,0,0,0,1"))
(rule "lenOfSeqSubEQ" (formula "47") (term "1,1,0,0,1,0,0,0,0,1") (ifseqformula "10"))
(rule "polySimp_elimSub" (formula "47") (term "1,1,1,0,0,1,0,0,0,0,1"))
(rule "times_zero_2" (formula "47") (term "1,1,1,1,0,0,1,0,0,0,0,1"))
(rule "add_zero_right" (formula "47") (term "1,1,1,0,0,1,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "47") (term "0,1,0,1"))
(rule "polySimp_mulComm0" (formula "47") (term "1,0,0,0,1,0,1"))
(rule "polySimp_addComm1" (formula "47") (term "0,0,1,0,1"))
(rule "inEqSimp_ltToLeq" (formula "47") (term "0,1,1,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "47") (term "1,0,0,0,1,1,0,0,1,0,0,0,1"))
(rule "polySimp_addComm1" (formula "47") (term "0,0,1,1,0,0,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "47") (term "0,1,1,0,0,1,0,0,0,0,1"))
(rule "add_zero_right" (formula "47") (term "0,0,1,1,0,0,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "47") (term "1,0,0,1,1,0,0,1,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "47") (term "1,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "47") (term "1,0,0,1,0,0,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "47") (term "1,0,0,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "47") (term "1,0,0,1,0,0,1,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "47") (term "0,0,0,0,0,0,1"))
(rule "replace_known_left" (formula "47") (term "0,0,0,0,0,0,1") (ifseqformula "5"))
 (builtin "One Step Simplification" (formula "47"))
(rule "inEqSimp_commuteLeq" (formula "47") (term "0,0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "47") (term "0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "47") (term "0,0,0,1,0,0,0,0,1"))
(rule "applyEq" (formula "47") (term "0,0,0,0,0,0,1") (ifseqformula "17"))
(rule "replace_known_left" (formula "47") (term "0,0,0,0,0,1") (ifseqformula "7"))
 (builtin "One Step Simplification" (formula "47"))
(rule "applyEq" (formula "47") (term "2,0,1,0,0,1") (ifseqformula "17"))
(rule "replace_known_left" (formula "47") (term "1,0,0,1") (ifseqformula "12"))
 (builtin "One Step Simplification" (formula "47"))
(rule "applyEq" (formula "47") (term "0,1,0,0,1,0,1") (ifseqformula "17"))
(rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "47") (term "1,1,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "47") (term "1,1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "47") (term "0,1,1,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "47") (term "1,1,1,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "47") (term "1,1,1,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,0,0,1,0,0,1"))
(rule "polySimp_mulComm0" (formula "47") (term "1,1,0,0,1,0,0,1"))
(rule "polySimp_rightDist" (formula "47") (term "1,1,0,0,1,0,0,1"))
(rule "mul_literals" (formula "47") (term "0,1,1,0,0,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "47") (term "1,1,1,0,0,1,0,0,1"))
(rule "polySimp_elimOne" (formula "47") (term "1,1,1,0,0,1,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "47") (term "0,1,0,1"))
(rule "polySimp_mulLiterals" (formula "47") (term "0,0,1,0,1"))
(rule "polySimp_elimOne" (formula "47") (term "0,0,1,0,1"))
(rule "replace_known_left" (formula "47") (term "1,0,1") (ifseqformula "14"))
 (builtin "One Step Simplification" (formula "47"))
(rule "inEqSimp_sepNegMonomial0" (formula "47") (term "0,1,1,1,0,0,1,0,1"))
(rule "polySimp_mulLiterals" (formula "47") (term "0,0,1,1,1,0,0,1,0,1"))
(rule "polySimp_elimOne" (formula "47") (term "0,0,1,1,1,0,0,1,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "47") (term "0,1,1,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "47") (term "0,0,1,1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "47") (term "0,0,1,1,1,0,0,0,0,1"))
(rule "getOfSeqSubEQ" (formula "47") (term "1,0,1,0,1,0,0,0,1") (ifseqformula "10"))
(rule "castDel" (formula "47") (term "2,1,0,1,0,1,0,0,0,1"))
(rule "add_zero_right" (formula "47") (term "1,1,1,0,1,0,1,0,0,0,1"))
(rule "polySimp_elimSub" (formula "47") (term "1,1,0,1,0,1,0,1,0,0,0,1"))
(rule "times_zero_2" (formula "47") (term "1,1,1,0,1,0,1,0,1,0,0,0,1"))
(rule "add_zero_right" (formula "47") (term "1,1,0,1,0,1,0,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "47") (term "1,0,1,0,1,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "47") (term "1,0,0,1,0,1,0,1,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "47") (term "0,0,1,0,1,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,0,1,0,1,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "47") (term "1,1,0,1,0,1,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "47") (term "1,1,0,1,0,1,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "47") (term "1,1,1,0,1,0,1,0,1,0,0,0,1"))
(rule "mul_literals" (formula "47") (term "0,1,1,0,1,0,1,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "47") (term "1,1,1,0,1,0,1,0,1,0,0,0,1"))
(rule "getOfSeqSubEQ" (formula "47") (term "1,0,1,0,1,0,1,0,1") (ifseqformula "12"))
(rule "castDel" (formula "47") (term "2,1,0,1,0,1,0,1,0,1"))
(rule "polySimp_elimSub" (formula "47") (term "1,1,0,1,0,1,0,1,0,1,0,1"))
(rule "polySimp_addComm0" (formula "47") (term "1,1,1,0,1,0,1,0,1,0,1"))
(rule "polySimp_addComm0" (formula "47") (term "1,1,0,1,0,1,0,1,0,1,0,1"))
(rule "inEqSimp_ltToLeq" (formula "47") (term "1,0,1,0,1,0,1,0,1,0,1"))
(rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,0,1,0,1,0,1,0,1,0,1"))
(rule "polySimp_mulAssoc" (formula "47") (term "0,1,0,0,1,0,1,0,1,0,1,0,1,0,1"))
(rule "polySimp_mulComm0" (formula "47") (term "0,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1"))
(rule "polySimp_mulLiterals" (formula "47") (term "0,1,0,0,1,0,1,0,1,0,1,0,1,0,1"))
(rule "polySimp_elimOne" (formula "47") (term "0,1,0,0,1,0,1,0,1,0,1,0,1,0,1"))
(rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0,1,0,1,0,1,0,1,0,1"))
(rule "inEqSimp_commuteLeq" (formula "47") (term "0,0,1,0,1,0,1,0,1,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,0,1,0,1,0,1,0,1,0,1"))
(rule "polySimp_mulComm0" (formula "47") (term "1,1,0,1,0,1,0,1,0,1,0,1"))
(rule "polySimp_rightDist" (formula "47") (term "1,1,0,1,0,1,0,1,0,1,0,1"))
(rule "polySimp_mulLiterals" (formula "47") (term "1,1,1,0,1,0,1,0,1,0,1,0,1"))
(rule "polySimp_elimOne" (formula "47") (term "1,1,1,0,1,0,1,0,1,0,1,0,1"))
(rule "polySimp_rightDist" (formula "47") (term "0,1,1,0,1,0,1,0,1,0,1,0,1"))
(rule "mul_literals" (formula "47") (term "0,0,1,1,0,1,0,1,0,1,0,1,0,1"))
(rule "nnf_imp2or" (formula "47") (term "0,0,0,1"))
(rule "nnf_imp2or" (formula "47") (term "0,1,0,1"))
(rule "nnf_notAnd" (formula "47") (term "0,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "47") (term "0,0,0,0,0,1"))
(rule "times_zero_1" (formula "47") (term "1,0,0,0,0,0,0,0,1"))
(rule "add_zero_right" (formula "47") (term "0,0,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "47") (term "0,0,0,0,0,1"))
(rule "mul_literals" (formula "47") (term "1,0,0,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "47") (term "1,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,0,0,0,0,1"))
(rule "mul_literals" (formula "47") (term "0,1,0,0,1,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0,0,0,0,1"))
(rule "add_literals" (formula "47") (term "0,0,0,1,0,0,0,0,1"))
(rule "add_zero_left" (formula "47") (term "0,0,1,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "47") (term "1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "47") (term "1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "47") (term "1,1,0,0,0,0,1"))
(rule "nnf_notAnd" (formula "47") (term "0,0,1,0,1"))
(rule "inEqSimp_notGeq" (formula "47") (term "0,0,0,1,0,1"))
(rule "times_zero_1" (formula "47") (term "1,0,0,0,0,0,1,0,1"))
(rule "add_zero_right" (formula "47") (term "0,0,0,0,0,1,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "47") (term "0,0,0,1,0,1"))
(rule "mul_literals" (formula "47") (term "1,0,0,0,1,0,1"))
(rule "inEqSimp_notLeq" (formula "47") (term "1,0,0,1,0,1"))
(rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,0,0,1,0,1"))
(rule "mul_literals" (formula "47") (term "0,1,0,0,1,0,0,1,0,1"))
(rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0,0,1,0,1"))
(rule "add_literals" (formula "47") (term "0,0,0,1,0,0,1,0,1"))
(rule "add_zero_left" (formula "47") (term "0,0,1,0,0,1,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "47") (term "1,0,0,1,0,1"))
(rule "polySimp_mulLiterals" (formula "47") (term "1,1,0,0,1,0,1"))
(rule "polySimp_elimOne" (formula "47") (term "1,1,0,0,1,0,1"))
(rule "Class_invariant_axiom_for_LinkedList" (formula "47") (term "1,1") (inst "i=i") (inst "i_0=i_0") (inst "j=j") (inst "i_1=i_1") (inst "i_2=i_2") (inst "f=f") (inst "i_3=i_3") (inst "n=n_1"))
 (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "16")))
(rule "translateJavaSubInt" (formula "47") (term "1,1,0,0,1,0,0,1,1"))
(rule "translateJavaSubInt" (formula "47") (term "1,0,1,1,1,1,0,0,0,1,1"))
(rule "eqSymm" (formula "47") (term "1,0,1,0,0,1,1"))
(rule "eqSymm" (formula "47") (term "0,1,0,1,0,1,0,1,1"))
(rule "eqSymm" (formula "47") (term "1,1,0,1,0,1,0,1,1"))
(rule "eqSymm" (formula "47") (term "1,0,1,1,0,0,0,1,1"))
(rule "eqSymm" (formula "47") (term "0,0,0,0,0,0,0,1,1"))
(rule "eqSymm" (formula "47") (term "1,1,1,0,0,0,1,1"))
(rule "polySimp_elimSub" (formula "47") (term "1,1,0,0,1,0,0,1,1"))
(rule "mul_literals" (formula "47") (term "1,1,1,0,0,1,0,0,1,1"))
(rule "polySimp_elimSub" (formula "47") (term "1,0,0,1,1,1,0,0,0,1,1"))
(rule "mul_literals" (formula "47") (term "1,1,0,0,1,1,1,0,0,0,1,1"))
(rule "polySimp_addComm0" (formula "47") (term "1,0,0,1,0,1,0,0,1,1"))
(rule "polySimp_addComm0" (formula "47") (term "1,1,0,0,1,0,0,1,1"))
(rule "polySimp_addComm0" (formula "47") (term "1,0,0,1,1,1,0,0,0,1,1"))
(rule "castedGetAny" (formula "47") (term "1,1,1,0,1,1,1"))
(rule "castedGetAny" (formula "47") (term "1,1,1,0,1,0,0,1,1"))
(rule "castedGetAny" (formula "47") (term "1,0,1,0,1,0,1,0,1,1"))
(rule "castedGetAny" (formula "47") (term "0,0,1,0,1,0,1,0,1,1"))
(rule "castedGetAny" (formula "47") (term "0,1,0,1,1,0,0,0,1,1"))
(rule "castedGetAny" (formula "47") (term "0,1,0,1,0,0,1,1"))
(rule "eqSymm" (formula "47") (term "1,0,1,0,0,1,1"))
(rule "castedGetAny" (formula "47") (term "0,1,1,1,0,0,0,1,1"))
(rule "inEqSimp_ltToLeq" (formula "47") (term "1,0,0,1,0,0,0,0,1,1"))
(rule "polySimp_mulComm0" (formula "47") (term "1,0,0,1,0,0,1,0,0,0,0,1,1"))
(rule "inEqSimp_ltToLeq" (formula "47") (term "1,0,0,1,0,1,1"))
(rule "polySimp_mulComm0" (formula "47") (term "1,0,0,1,0,0,1,0,1,1"))
(rule "inEqSimp_ltToLeq" (formula "47") (term "1,0,0,1,1,1"))
(rule "polySimp_mulComm0" (formula "47") (term "1,0,0,1,0,0,1,1,1"))
(rule "inEqSimp_ltToLeq" (formula "47") (term "1,0,0,1,0,0,0,0,0,1,1"))
(rule "polySimp_mulComm0" (formula "47") (term "1,0,0,1,0,0,1,0,0,0,0,0,1,1"))
(rule "inEqSimp_ltToLeq" (formula "47") (term "1,0,0,1,0,1,0,1,1"))
(rule "polySimp_mulComm0" (formula "47") (term "1,0,0,1,0,0,1,0,1,0,1,1"))
(rule "inEqSimp_ltToLeq" (formula "47") (term "1,0,0,1,0,0,1,1"))
(rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,0,0,1,0,0,1,1"))
(rule "mul_literals" (formula "47") (term "0,1,0,0,1,0,0,1,0,0,1,1"))
(rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0,0,1,0,0,1,1"))
(rule "add_literals" (formula "47") (term "0,0,0,1,0,0,1,0,0,1,1"))
(rule "inEqSimp_commuteLeq" (formula "47") (term "0,0,0,1,1,1"))
(rule "inEqSimp_commuteLeq" (formula "47") (term "0,0,0,1,0,1,1"))
(rule "inEqSimp_commuteLeq" (formula "47") (term "0,0,0,1,0,0,0,0,1,1"))
(rule "inEqSimp_commuteLeq" (formula "47") (term "0,0,0,1,0,1,0,1,1"))
(rule "inEqSimp_commuteLeq" (formula "47") (term "0,0,0,1,0,0,1,1"))
(rule "inEqSimp_commuteLeq" (formula "47") (term "0,0,0,1,0,0,0,0,0,1,1"))
(rule "applyEq" (formula "47") (term "0,1,0,0,0,0,0,0,1,1") (ifseqformula "16"))
(rule "replace_known_left" (formula "47") (term "1,0,0,0,0,0,0,1,1") (ifseqformula "18"))
 (builtin "One Step Simplification" (formula "47"))
(rule "applyEq" (formula "47") (term "0,0,0,0,0,0,0,1,1") (ifseqformula "17"))
(rule "eqSymm" (formula "47") (term "0,0,0,0,0,0,1,1"))
(rule "replace_known_left" (formula "47") (term "0,0,0,0,0,0,1,1") (ifseqformula "16"))
 (builtin "One Step Simplification" (formula "47"))
(rule "applyEq" (formula "47") (term "1,1,0,1,1,1,0,0,0,1,1") (ifseqformula "16"))
(rule "applyEq" (formula "47") (term "0,1,0,0,1,0,0,1,0,1,0,1,1") (ifseqformula "16"))
(rule "applyEq" (formula "47") (term "0,1,0,0,1,0,0,1,0,0,1,1") (ifseqformula "16"))
(rule "applyEq" (formula "47") (term "0,1,0,0,1,0,0,1,1,1") (ifseqformula "17"))
(rule "applyEq" (formula "47") (term "0,1,0,0,1,0,0,1,0,1,1") (ifseqformula "16"))
(rule "applyEq" (formula "47") (term "0,1,0,0,1,0,0,1,0,0,0,0,1,1") (ifseqformula "17"))
(rule "applyEq" (formula "47") (term "0,1,0,0,1,0,0,0,0,0,0,0,1,1") (ifseqformula "16"))
(rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,0,0,1,0,1,0,1,1"))
(rule "polySimp_mulComm0" (formula "47") (term "1,1,0,0,1,0,1,0,1,1"))
(rule "polySimp_rightDist" (formula "47") (term "1,1,0,0,1,0,1,0,1,1"))
(rule "mul_literals" (formula "47") (term "0,1,1,0,0,1,0,1,0,1,1"))
(rule "polySimp_mulLiterals" (formula "47") (term "1,1,1,0,0,1,0,1,0,1,1"))
(rule "polySimp_elimOne" (formula "47") (term "1,1,1,0,0,1,0,1,0,1,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,0,0,1,0,0,1,1"))
(rule "polySimp_mulComm0" (formula "47") (term "1,1,0,0,1,0,0,1,1"))
(rule "polySimp_rightDist" (formula "47") (term "1,1,0,0,1,0,0,1,1"))
(rule "polySimp_mulLiterals" (formula "47") (term "1,1,1,0,0,1,0,0,1,1"))
(rule "mul_literals" (formula "47") (term "0,1,1,0,0,1,0,0,1,1"))
(rule "polySimp_elimOne" (formula "47") (term "1,1,1,0,0,1,0,0,1,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,0,0,1,1,1"))
(rule "polySimp_mulComm0" (formula "47") (term "1,1,0,0,1,1,1"))
(rule "polySimp_rightDist" (formula "47") (term "1,1,0,0,1,1,1"))
(rule "mul_literals" (formula "47") (term "0,1,1,0,0,1,1,1"))
(rule "polySimp_mulLiterals" (formula "47") (term "1,1,1,0,0,1,1,1"))
(rule "polySimp_elimOne" (formula "47") (term "1,1,1,0,0,1,1,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,0,0,1,0,1,1"))
(rule "polySimp_mulComm0" (formula "47") (term "1,1,0,0,1,0,1,1"))
(rule "polySimp_rightDist" (formula "47") (term "1,1,0,0,1,0,1,1"))
(rule "mul_literals" (formula "47") (term "0,1,1,0,0,1,0,1,1"))
(rule "polySimp_mulLiterals" (formula "47") (term "1,1,1,0,0,1,0,1,1"))
(rule "polySimp_elimOne" (formula "47") (term "1,1,1,0,0,1,0,1,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,0,0,1,0,0,0,0,1,1"))
(rule "polySimp_mulComm0" (formula "47") (term "1,1,0,0,1,0,0,0,0,1,1"))
(rule "polySimp_rightDist" (formula "47") (term "1,1,0,0,1,0,0,0,0,1,1"))
(rule "mul_literals" (formula "47") (term "0,1,1,0,0,1,0,0,0,0,1,1"))
(rule "polySimp_mulLiterals" (formula "47") (term "1,1,1,0,0,1,0,0,0,0,1,1"))
(rule "polySimp_elimOne" (formula "47") (term "1,1,1,0,0,1,0,0,0,0,1,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,0,0,0,0,0,0,0,1,1"))
(rule "polySimp_mulComm0" (formula "47") (term "1,1,0,0,0,0,0,0,0,1,1"))
(rule "polySimp_rightDist" (formula "47") (term "1,1,0,0,0,0,0,0,0,1,1"))
(rule "mul_literals" (formula "47") (term "0,1,1,0,0,0,0,0,0,0,1,1"))
(rule "polySimp_mulLiterals" (formula "47") (term "1,1,1,0,0,0,0,0,0,0,1,1"))
(rule "polySimp_elimOne" (formula "47") (term "1,1,1,0,0,0,0,0,0,0,1,1"))
(rule "nnf_imp2or" (formula "47") (term "0,1,1,1"))
(rule "nnf_imp2or" (formula "47") (term "0,1,0,0,1,1"))
(rule "nnf_imp2or" (formula "47") (term "1,0,1,0,1,0,1,1"))
(rule "nnf_notAnd" (formula "47") (term "0,0,1,1,1"))
(rule "inEqSimp_notLeq" (formula "47") (term "1,0,0,1,1,1"))
(rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,0,0,1,1,1"))
(rule "mul_literals" (formula "47") (term "0,1,0,0,1,0,0,1,1,1"))
(rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0,0,1,1,1"))
(rule "add_literals" (formula "47") (term "0,0,0,1,0,0,1,1,1"))
(rule "add_zero_left" (formula "47") (term "0,0,1,0,0,1,1,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "47") (term "1,0,0,1,1,1"))
(rule "polySimp_mulLiterals" (formula "47") (term "1,1,0,0,1,1,1"))
(rule "polySimp_elimOne" (formula "47") (term "1,1,0,0,1,1,1"))
(rule "inEqSimp_notGeq" (formula "47") (term "0,0,0,1,1,1"))
(rule "times_zero_1" (formula "47") (term "1,0,0,0,0,0,1,1,1"))
(rule "add_literals" (formula "47") (term "0,0,0,0,0,1,1,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "47") (term "0,0,0,1,1,1"))
(rule "mul_literals" (formula "47") (term "1,0,0,0,1,1,1"))
(rule "nnf_imp2or" (formula "47") (term "0,1,0,1,1"))
(rule "nnf_notAnd" (formula "47") (term "0,0,1,0,0,1,1"))
(rule "inEqSimp_notGeq" (formula "47") (term "0,0,0,1,0,0,1,1"))
(rule "times_zero_1" (formula "47") (term "1,0,0,0,0,0,1,0,0,1,1"))
(rule "add_literals" (formula "47") (term "0,0,0,0,0,1,0,0,1,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "47") (term "0,0,0,1,0,0,1,1"))
(rule "mul_literals" (formula "47") (term "1,0,0,0,1,0,0,1,1"))
(rule "inEqSimp_notLeq" (formula "47") (term "1,0,0,1,0,0,1,1"))
(rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,0,0,1,0,0,1,1"))
(rule "mul_literals" (formula "47") (term "0,1,0,0,1,0,0,1,0,0,1,1"))
(rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0,0,1,0,0,1,1"))
(rule "add_literals" (formula "47") (term "0,0,0,1,0,0,1,0,0,1,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "47") (term "1,0,0,1,0,0,1,1"))
(rule "polySimp_mulComm0" (formula "47") (term "1,1,0,0,1,0,0,1,1"))
(rule "polySimp_rightDist" (formula "47") (term "1,1,0,0,1,0,0,1,1"))
(rule "mul_literals" (formula "47") (term "0,1,1,0,0,1,0,0,1,1"))
(rule "polySimp_mulLiterals" (formula "47") (term "1,1,1,0,0,1,0,0,1,1"))
(rule "polySimp_elimOne" (formula "47") (term "1,1,1,0,0,1,0,0,1,1"))
(rule "nnf_imp2or" (formula "47") (term "0,1,0,0,0,0,1,1"))
(rule "nnf_notAnd" (formula "47") (term "0,0,1,0,1,1"))
(rule "inEqSimp_notGeq" (formula "47") (term "0,0,0,1,0,1,1"))
(rule "times_zero_1" (formula "47") (term "1,0,0,0,0,0,1,0,1,1"))
(rule "add_literals" (formula "47") (term "0,0,0,0,0,1,0,1,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "47") (term "0,0,0,1,0,1,1"))
(rule "mul_literals" (formula "47") (term "1,0,0,0,1,0,1,1"))
(rule "inEqSimp_notLeq" (formula "47") (term "1,0,0,1,0,1,1"))
(rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,0,0,1,0,1,1"))
(rule "mul_literals" (formula "47") (term "0,1,0,0,1,0,0,1,0,1,1"))
(rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0,0,1,0,1,1"))
(rule "add_literals" (formula "47") (term "0,0,0,1,0,0,1,0,1,1"))
(rule "add_zero_left" (formula "47") (term "0,0,1,0,0,1,0,1,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "47") (term "1,0,0,1,0,1,1"))
(rule "polySimp_mulLiterals" (formula "47") (term "1,1,0,0,1,0,1,1"))
(rule "polySimp_elimOne" (formula "47") (term "1,1,0,0,1,0,1,1"))
(rule "nnf_imp2or" (formula "47") (term "0,0,0,0,0,0,1,1"))
(rule "nnf_imp2or" (formula "47") (term "0,1,0,1,0,1,1"))
(rule "nnf_notAnd" (formula "47") (term "0,0,1,0,0,0,0,1,1"))
(rule "inEqSimp_notGeq" (formula "47") (term "0,0,0,1,0,0,0,0,1,1"))
(rule "times_zero_1" (formula "47") (term "1,0,0,0,0,0,1,0,0,0,0,1,1"))
(rule "add_literals" (formula "47") (term "0,0,0,0,0,1,0,0,0,0,1,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "47") (term "0,0,0,1,0,0,0,0,1,1"))
(rule "mul_literals" (formula "47") (term "1,0,0,0,1,0,0,0,0,1,1"))
(rule "inEqSimp_notLeq" (formula "47") (term "1,0,0,1,0,0,0,0,1,1"))
(rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,0,0,1,0,0,0,0,1,1"))
(rule "mul_literals" (formula "47") (term "0,1,0,0,1,0,0,1,0,0,0,0,1,1"))
(rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0,0,1,0,0,0,0,1,1"))
(rule "add_literals" (formula "47") (term "0,0,0,1,0,0,1,0,0,0,0,1,1"))
(rule "add_zero_left" (formula "47") (term "0,0,1,0,0,1,0,0,0,0,1,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "47") (term "1,0,0,1,0,0,0,0,1,1"))
(rule "polySimp_mulLiterals" (formula "47") (term "1,1,0,0,1,0,0,0,0,1,1"))
(rule "polySimp_elimOne" (formula "47") (term "1,1,0,0,1,0,0,0,0,1,1"))
(rule "nnf_notAnd" (formula "47") (term "0,0,1,0,1,0,1,1"))
(rule "inEqSimp_notLeq" (formula "47") (term "1,0,0,1,0,1,0,1,1"))
(rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,0,0,1,0,1,0,1,1"))
(rule "mul_literals" (formula "47") (term "0,1,0,0,1,0,0,1,0,1,0,1,1"))
(rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0,0,1,0,1,0,1,1"))
(rule "add_literals" (formula "47") (term "0,0,0,1,0,0,1,0,1,0,1,1"))
(rule "add_zero_left" (formula "47") (term "0,0,1,0,0,1,0,1,0,1,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "47") (term "1,0,0,1,0,1,0,1,1"))
(rule "polySimp_mulLiterals" (formula "47") (term "1,1,0,0,1,0,1,0,1,1"))
(rule "polySimp_elimOne" (formula "47") (term "1,1,0,0,1,0,1,0,1,1"))
(rule "inEqSimp_notGeq" (formula "47") (term "0,0,0,1,0,1,0,1,1"))
(rule "times_zero_1" (formula "47") (term "1,0,0,0,0,0,1,0,1,0,1,1"))
(rule "add_literals" (formula "47") (term "0,0,0,0,0,1,0,1,0,1,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "47") (term "0,0,0,1,0,1,0,1,1"))
(rule "mul_literals" (formula "47") (term "1,0,0,0,1,0,1,0,1,1"))
(rule "nnf_notAnd" (formula "47") (term "0,0,0,0,0,0,0,1,1"))
(rule "inEqSimp_notGeq" (formula "47") (term "0,0,0,0,0,0,0,0,1,1"))
(rule "mul_literals" (formula "47") (term "1,0,0,0,0,0,0,0,0,0,0,1,1"))
(rule "add_literals" (formula "47") (term "0,0,0,0,0,0,0,0,0,0,1,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "47") (term "0,0,0,0,0,0,0,0,1,1"))
(rule "mul_literals" (formula "47") (term "1,0,0,0,0,0,0,0,0,1,1"))
(rule "inEqSimp_notLeq" (formula "47") (term "1,0,0,0,0,0,0,0,1,1"))
(rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,0,0,0,0,0,0,0,1,1"))
(rule "mul_literals" (formula "47") (term "0,1,0,0,1,0,0,0,0,0,0,0,1,1"))
(rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0,0,0,0,0,0,0,1,1"))
(rule "add_literals" (formula "47") (term "0,0,0,1,0,0,0,0,0,0,0,1,1"))
(rule "add_zero_left" (formula "47") (term "0,0,1,0,0,0,0,0,0,0,1,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "47") (term "1,0,0,0,0,0,0,0,1,1"))
(rule "polySimp_mulLiterals" (formula "47") (term "1,1,0,0,0,0,0,0,0,1,1"))
(rule "polySimp_elimOne" (formula "47") (term "1,1,0,0,0,0,0,0,0,1,1"))
(rule "seqGetAlphaCast" (formula "41") (term "0,1"))
(rule "castedGetAny" (formula "41") (term "0"))
 (builtin "One Step Simplification" (formula "41"))
(rule "true_left" (formula "41"))
(rule "cut_direct" (formula "30") (term "0,0"))
(branch "CUT: self.list.tail = null TRUE"
    (builtin "One Step Simplification" (formula "31"))
   (rule "replace_known_left" (formula "41") (term "0") (ifseqformula "30"))
    (builtin "One Step Simplification" (formula "41"))
   (rule "true_left" (formula "41"))
   (rule "replace_known_left" (formula "41") (term "0") (ifseqformula "31"))
    (builtin "One Step Simplification" (formula "41"))
   (rule "true_left" (formula "41"))
   (rule "replace_known_left" (formula "36") (term "1") (ifseqformula "31"))
    (builtin "One Step Simplification" (formula "36"))
   (rule "true_left" (formula "36"))
   (rule "replace_known_left" (formula "27") (term "1") (ifseqformula "30"))
    (builtin "One Step Simplification" (formula "27"))
   (rule "true_left" (formula "27"))
   (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "29"))
    (builtin "One Step Simplification" (formula "34"))
   (rule "true_left" (formula "34"))
   (rule "replace_known_left" (formula "31") (term "0,1") (ifseqformula "30"))
    (builtin "One Step Simplification" (formula "31"))
   (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "29"))
    (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "30")))
   (rule "true_left" (formula "32"))
   (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "29"))
    (builtin "One Step Simplification" (formula "34"))
   (rule "true_left" (formula "34"))
   (rule "replace_known_left" (formula "27") (term "1") (ifseqformula "30"))
    (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "31")))
   (rule "true_left" (formula "27"))
   (rule "replace_known_left" (formula "33") (term "0") (ifseqformula "29"))
    (builtin "One Step Simplification" (formula "33"))
   (rule "true_left" (formula "33"))
   (rule "replace_known_left" (formula "27") (term "0,1") (ifseqformula "28"))
    (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "30")))
   (rule "true_left" (formula "27"))
   (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "29"))
    (builtin "One Step Simplification" (formula "31"))
   (rule "true_left" (formula "31"))
   (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "29"))
    (builtin "One Step Simplification" (formula "30"))
   (rule "true_left" (formula "30"))
   (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "29"))
    (builtin "One Step Simplification" (formula "30"))
   (rule "true_left" (formula "30"))
   (rule "replace_known_left" (formula "35") (term "1,0,1,0,0,0,1,1") (ifseqformula "27"))
    (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "28")) (ifInst ""  (formula "29")) (ifInst ""  (formula "28")) (ifInst ""  (formula "29")) (ifInst ""  (formula "27")))
   (rule "applyEq" (formula "30") (term "0,1,0,0,0") (ifseqformula "28"))
   (rule "applyEq" (formula "35") (term "0,1,1,1,0,1,1,1") (ifseqformula "28"))
   (rule "applyEq" (formula "35") (term "0,1,0,0,1,0,1,0,1,0,1,1") (ifseqformula "28"))
   (rule "applyEq" (formula "35") (term "0,1,1,0,1,0,0,1,1") (ifseqformula "28"))
   (rule "applyEq" (formula "35") (term "0,1,0,1,0,1,0,0,1,1") (ifseqformula "28"))
   (rule "applyEq" (formula "31") (term "0,0,0,0,0,0,0,0,0,0") (ifseqformula "28"))
   (rule "applyEq" (formula "19") (term "0,0,0,0,0,0") (ifseqformula "28"))
   (rule "applyEq" (formula "22") (term "0,0,0,0,0,0") (ifseqformula "28"))
   (rule "applyEq" (formula "35") (term "0,1,0,1,0,1,0,0,0,0,0,1,1") (ifseqformula "28"))
   (rule "applyEq" (formula "35") (term "0,0,0,0,1,0,1,0,1,0,1,1") (ifseqformula "28"))
   (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "28"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "eqSymm" (formula "16"))
   (rule "applyEq" (formula "30") (term "0,1,0,0,0,0") (ifseqformula "28"))
   (rule "applyEq" (formula "20") (term "0,0,0,0,0,0") (ifseqformula "28"))
   (rule "applyEq" (formula "31") (term "0,1,0,0,0,0,0,0,0,0") (ifseqformula "28"))
   (rule "applyEq" (formula "14") (term "0,0,1") (ifseqformula "28"))
   (rule "applyEq" (formula "21") (term "0,1,0,0,0,0,0") (ifseqformula "28"))
   (rule "applyEq" (formula "32") (term "0,1,1,0,0,0") (ifseqformula "28"))
   (rule "applyEq" (formula "20") (term "0,1,0,1,0,0,0") (ifseqformula "28"))
   (rule "applyEq" (formula "9") (term "1,1,1,1,0,0") (ifseqformula "16"))
   (rule "add_zero_right" (formula "9") (term "1,1,1,0,0"))
   (rule "applyEq" (formula "20") (term "1,1,0") (ifseqformula "16"))
   (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "16"))
   (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "16"))
   (rule "inEqSimp_homoInEq1" (formula "14") (term "0"))
   (rule "times_zero_2" (formula "14") (term "1,0,0"))
   (rule "add_zero_right" (formula "14") (term "0,0"))
   (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "16"))
   (rule "applyEq" (formula "7") (term "0") (ifseqformula "16"))
   (rule "inEqSimp_commuteGeq" (formula "7"))
   (rule "applyEq" (formula "32") (term "1,1,0") (ifseqformula "16"))
   (rule "applyEq" (formula "12") (term "2,0") (ifseqformula "16"))
   (rule "applyEq" (formula "35") (term "1,1,0,0,1,1,1") (ifseqformula "16"))
   (rule "applyEq" (formula "35") (term "1,1,0,0,0,0,0,0,1,1") (ifseqformula "16"))
   (rule "applyEq" (formula "35") (term "1,1,0,0,1,0,0,0,1,1") (ifseqformula "16"))
   (rule "applyEq" (formula "35") (term "1,1,0,0,0,0") (ifseqformula "16"))
   (rule "add_zero_right" (formula "35") (term "1,0,0,0,0"))
   (rule "applyEq" (formula "9") (term "0,0,1,1,0,0") (ifseqformula "16"))
   (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1,1,0,0"))
   (rule "times_zero_2" (formula "9") (term "1,0,0,1,1,0,0"))
   (rule "add_zero_right" (formula "9") (term "0,0,1,1,0,0"))
   (rule "applyEq" (formula "35") (term "0,0,0,0,0,0") (ifseqformula "16"))
   (rule "inEqSimp_homoInEq1" (formula "35") (term "0,0,0,0,0"))
   (rule "times_zero_2" (formula "35") (term "1,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,0"))
   (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "16"))
   (rule "applyEq" (formula "35") (term "1,1,1,0,0,1,0,0,1,1") (ifseqformula "16"))
   (rule "add_zero_right" (formula "35") (term "1,1,0,0,1,0,0,1,1"))
   (rule "applyEq" (formula "35") (term "1,1,1,1,0,0,1,0,1") (ifseqformula "16"))
   (rule "add_zero_right" (formula "35") (term "1,1,1,0,0,1,0,1"))
   (rule "applyEq" (formula "31") (term "1,1,0,0,0,0,0") (ifseqformula "16"))
   (rule "applyEq" (formula "35") (term "1,1,0,0,1,0,1,0,1,1") (ifseqformula "16"))
   (rule "applyEq" (formula "18") (term "0") (ifseqformula "16"))
   (rule "leq_literals" (formula "18"))
   (rule "true_left" (formula "18"))
   (rule "applyEq" (formula "9") (term "1,1,0,1,1,0,1,0,1,0") (ifseqformula "16"))
   (rule "add_zero_right" (formula "9") (term "1,0,1,1,0,1,0,1,0"))
   (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "16"))
   (rule "applyEq" (formula "34") (term "1,1,0,0,1,0,1,1") (ifseqformula "16"))
   (rule "applyEq" (formula "30") (term "1,1,0,0,0") (ifseqformula "16"))
   (rule "applyEq" (formula "9") (term "1,1,1,0,0,1,0,1,0") (ifseqformula "16"))
   (rule "add_zero_right" (formula "9") (term "1,1,0,0,1,0,1,0"))
   (rule "applyEq" (formula "23") (term "1,1,0") (ifseqformula "16"))
   (rule "applyEq" (formula "34") (term "0,0,1,1,0,0,1,0,1") (ifseqformula "16"))
   (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1,1,0,0,1,0,1"))
   (rule "times_zero_2" (formula "34") (term "1,0,0,1,1,0,0,1,0,1"))
   (rule "add_zero_right" (formula "34") (term "0,0,1,1,0,0,1,0,1"))
   (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
   (rule "qeq_literals" (formula "15"))
   (rule "true_left" (formula "15"))
   (rule "applyEq" (formula "17") (term "1,1,0") (ifseqformula "15"))
   (rule "applyEq" (formula "28") (term "1,1,1,0") (ifseqformula "15"))
   (rule "add_zero_right" (formula "28") (term "1,1,0"))
   (rule "applyEq" (formula "9") (term "1,1,1,1,1,1,1,0,1,0") (ifseqformula "15"))
   (rule "add_zero_right" (formula "9") (term "1,1,1,1,1,1,0,1,0"))
   (rule "applyEq" (formula "9") (term "1,1,1,0,1,1,0,1,0") (ifseqformula "15"))
   (rule "add_zero_right" (formula "9") (term "1,1,0,1,1,0,1,0"))
   (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "15"))
   (rule "applyEq" (formula "16") (term "1") (ifseqformula "15"))
   (rule "applyEq" (formula "33") (term "1,1,1,0,1,0,1,0,1,0,1,0,1") (ifseqformula "15"))
   (rule "add_zero_right" (formula "33") (term "1,1,0,1,0,1,0,1,0,1,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0"))
   (rule "mul_literals" (formula "14") (term "1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,1,1,0,0"))
   (rule "mul_literals" (formula "9") (term "1,0,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,0,0"))
   (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,1,1,0,0,1,0,1"))
   (rule "mul_literals" (formula "33") (term "1,0,1,1,0,0,1,0,1"))
   (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "5"))
   (rule "qeq_literals" (formula "14") (term "0,0"))
    (builtin "One Step Simplification" (formula "14"))
   (rule "replace_known_left" (formula "13") (term "0") (ifseqformula "14"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "true_left" (formula "13"))
   (rule "replace_known_left" (formula "32") (term "0,1,0") (ifseqformula "13"))
    (builtin "One Step Simplification" (formula "32"))
   (rule "inEqSimp_contradInEq0" (formula "8") (term "0,1,1,0,0") (ifseqformula "7"))
   (rule "qeq_literals" (formula "8") (term "0,0,1,1,0,0"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "inEqSimp_contradInEq1" (formula "9") (term "0,1,1,0,0") (ifseqformula "5"))
   (rule "qeq_literals" (formula "9") (term "0,0,1,1,0,0"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "7"))
   (rule "leq_literals" (formula "6") (term "0"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "inEqSimp_contradInEq1" (formula "31") (term "0,0,0,0") (ifseqformula "5"))
   (rule "qeq_literals" (formula "31") (term "0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "31"))
   (rule "qeq_literals" (formula "31") (term "0,0"))
    (builtin "One Step Simplification" (formula "31"))
   (rule "inEqSimp_contradInEq0" (formula "31") (term "0,1,1,0,0,0,0") (ifseqformula "6"))
   (rule "qeq_literals" (formula "31") (term "0,0,1,1,0,0,0,0"))
    (builtin "One Step Simplification" (formula "31"))
   (rule "inEqSimp_contradInEq1" (formula "31") (term "0,1,1,0,0,1,0") (ifseqformula "5"))
   (rule "qeq_literals" (formula "31") (term "0,0,1,1,0,0,1,0"))
    (builtin "One Step Simplification" (formula "31"))
   (rule "inEqSimp_antiSymm" (formula "5") (ifseqformula "6"))
   (rule "applyEq" (formula "9") (term "0,1,1,0,0,1,0,1,0") (ifseqformula "5"))
   (rule "mul_literals" (formula "9") (term "1,1,0,0,1,0,1,0"))
   (rule "applyEq" (formula "8") (term "1,1,0,1,1,0,1,0") (ifseqformula "5"))
   (rule "applyEq" (formula "6") (term "0") (ifseqformula "5"))
   (rule "qeq_literals" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "applyEq" (formula "6") (term "0") (ifseqformula "5"))
   (rule "leq_literals" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "applyEq" (formula "6") (term "1,1,0,0,1,0,1,0") (ifseqformula "5"))
   (rule "applyEq" (formula "7") (term "0,1,1,1,1,1,1,1,0,1,0") (ifseqformula "5"))
   (rule "mul_literals" (formula "7") (term "1,1,1,1,1,1,1,0,1,0"))
   (rule "add_zero_right" (formula "7") (term "1,1,1,1,1,1,0,1,0"))
   (rule "applyEq" (formula "7") (term "0,1,1,0,1,1,0,1,0,1,0") (ifseqformula "5"))
   (rule "times_zero_2" (formula "7") (term "1,1,0,1,1,0,1,0,1,0"))
   (rule "add_zero_right" (formula "7") (term "1,0,1,1,0,1,0,1,0"))
   (rule "applyEq" (formula "6") (term "1,1,1,1,1,1,1,0,1,0") (ifseqformula "5"))
   (rule "add_zero_right" (formula "6") (term "1,1,1,1,1,1,0,1,0"))
   (rule "applyEq" (formula "7") (term "0,1,1,0,1,1,0,1,0") (ifseqformula "5"))
   (rule "times_zero_2" (formula "7") (term "1,1,0,1,1,0,1,0"))
   (rule "applyEq" (formula "10") (term "1,0") (ifseqformula "5"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "eqSymm" (formula "10"))
   (rule "applyEq" (formula "6") (term "1,1,0,1,1,0,1,0,1,0") (ifseqformula "5"))
   (rule "add_zero_right" (formula "6") (term "1,0,1,1,0,1,0,1,0"))
   (rule "applyEq" (formula "8") (term "2,0") (ifseqformula "5"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "eqSymm" (formula "8"))
   (rule "applyEq" (formula "30") (term "1,1,1,0,1,0,1,0,1,0,0,0") (ifseqformula "5"))
   (rule "add_zero_right" (formula "30") (term "1,1,0,1,0,1,0,1,0,0,0"))
   (rule "applyEq" (formula "7") (term "0,1,0,0,0,0,0,0,1,0,1,0") (ifseqformula "5"))
   (rule "add_zero_left" (formula "7") (term "1,0,0,0,0,0,0,1,0,1,0"))
   (rule "applyEq" (formula "30") (term "0,1,1,1,0,1,0,1,0,1,0,1,0") (ifseqformula "5"))
   (rule "times_zero_2" (formula "30") (term "1,1,1,0,1,0,1,0,1,0,1,0"))
   (rule "add_literals" (formula "30") (term "1,1,0,1,0,1,0,1,0,1,0"))
   (rule "applyEq" (formula "7") (term "0,1,1,0,0,0,1,1,0,1,0") (ifseqformula "5"))
   (rule "add_zero_left" (formula "7") (term "1,1,0,0,0,1,1,0,1,0"))
   (rule "applyEq" (formula "29") (term "0,1,1,1,0,1,0,1,0,1,0") (ifseqformula "5"))
   (rule "add_zero_left" (formula "29") (term "1,1,1,0,1,0,1,0,1,0"))
    (builtin "One Step Simplification" (formula "29"))
   (rule "inEqSimp_or_tautInEq1" (formula "14") (term "0"))
   (rule "add_zero_right" (formula "14") (term "1,1,0"))
   (rule "qeq_literals" (formula "14") (term "1,0"))
    (builtin "One Step Simplification" (formula "14"))
   (rule "true_left" (formula "14"))
   (rule "inEqSimp_or_tautInEq1" (formula "18") (term "0"))
   (rule "add_zero_right" (formula "18") (term "1,1,0"))
   (rule "qeq_literals" (formula "18") (term "1,0"))
    (builtin "One Step Simplification" (formula "18"))
   (rule "true_left" (formula "18"))
   (rule "inEqSimp_or_tautInEq1" (formula "15") (term "0"))
   (rule "add_zero_right" (formula "15") (term "1,1,0"))
   (rule "qeq_literals" (formula "15") (term "1,0"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "true_left" (formula "15"))
   (rule "inEqSimp_or_tautInEq1" (formula "23") (term "0"))
   (rule "add_zero_right" (formula "23") (term "1,1,0"))
   (rule "qeq_literals" (formula "23") (term "1,0"))
    (builtin "One Step Simplification" (formula "23"))
   (rule "true_left" (formula "23"))
   (rule "inEqSimp_or_tautInEq1" (formula "14") (term "0"))
   (rule "add_zero_right" (formula "14") (term "1,1,0"))
   (rule "qeq_literals" (formula "14") (term "1,0"))
    (builtin "One Step Simplification" (formula "14"))
   (rule "true_left" (formula "14"))
   (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0,0,0,0,0"))
   (rule "add_zero_right" (formula "21") (term "1,1,0,0,0,0,0"))
   (rule "qeq_literals" (formula "21") (term "1,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "21"))
   (rule "true_left" (formula "21"))
   (rule "inEqSimp_or_tautInEq1" (formula "14") (term "0"))
   (rule "add_zero_right" (formula "14") (term "1,1,0"))
   (rule "qeq_literals" (formula "14") (term "1,0"))
    (builtin "One Step Simplification" (formula "14"))
   (rule "true_left" (formula "14"))
   (rule "inEqSimp_or_tautInEq1" (formula "14") (term "0"))
   (rule "add_zero_right" (formula "14") (term "1,1,0"))
   (rule "qeq_literals" (formula "14") (term "1,0"))
    (builtin "One Step Simplification" (formula "14"))
   (rule "true_left" (formula "14"))
   (rule "inEqSimp_or_tautInEq1" (formula "13") (term "0"))
   (rule "add_zero_right" (formula "13") (term "1,1,0"))
   (rule "qeq_literals" (formula "13") (term "1,0"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "true_left" (formula "13"))
   (rule "inEqSimp_or_tautInEq1" (formula "17") (term "0"))
   (rule "add_literals" (formula "17") (term "1,1,0"))
   (rule "qeq_literals" (formula "17") (term "1,0"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "true_left" (formula "17"))
   (rule "inEqSimp_or_tautInEq1" (formula "13") (term "0"))
   (rule "add_zero_right" (formula "13") (term "1,1,0"))
   (rule "qeq_literals" (formula "13") (term "1,0"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "true_left" (formula "13"))
   (rule "inEqSimp_or_tautInEq0" (formula "6") (term "0,0"))
   (rule "add_zero_right" (formula "6") (term "1,1,0,0"))
   (rule "qeq_literals" (formula "6") (term "1,0,0"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "inEqSimp_or_tautInEq0" (formula "17") (term "0,0,0,0,0,0,1"))
   (rule "add_zero_right" (formula "17") (term "1,1,0,0,0,0,0,0,1"))
   (rule "qeq_literals" (formula "17") (term "1,0,0,0,0,0,0,1"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "inEqSimp_or_tautInEq0" (formula "17") (term "0,0,0,0,0,1"))
   (rule "add_zero_right" (formula "17") (term "1,1,0,0,0,0,0,1"))
   (rule "qeq_literals" (formula "17") (term "1,0,0,0,0,0,1"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "inEqSimp_or_tautInEq0" (formula "17") (term "0,0,0"))
   (rule "add_zero_right" (formula "17") (term "1,1,0,0,0"))
   (rule "qeq_literals" (formula "17") (term "1,0,0,0"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "inEqSimp_or_tautInEq0" (formula "17") (term "0,0,1,0,1,0"))
   (rule "add_zero_right" (formula "17") (term "1,1,0,0,1,0,1,0"))
   (rule "qeq_literals" (formula "17") (term "1,0,0,1,0,1,0"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "inEqSimp_or_tautInEq0" (formula "17") (term "0,0,1"))
   (rule "add_zero_right" (formula "17") (term "1,1,0,0,1"))
   (rule "qeq_literals" (formula "17") (term "1,0,0,1"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "allRight" (formula "17") (inst "sk=i_1_0"))
   (rule "orRight" (formula "17"))
   (rule "orRight" (formula "17"))
   (rule "inEqSimp_leqRight" (formula "17"))
   (rule "mul_literals" (formula "1") (term "1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "add_zero_left" (formula "1") (term "0"))
   (rule "inEqSimp_geqRight" (formula "18"))
   (rule "mul_literals" (formula "1") (term "1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1"))
   (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
   (rule "qeq_literals" (formula "1") (term "0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
(branch "CUT: self.list.tail = null FALSE"
    (builtin "One Step Simplification" (formula "30"))
   (rule "true_left" (formula "30"))
   (rule "replace_known_right" (formula "39") (term "0") (ifseqformula "44"))
    (builtin "One Step Simplification" (formula "39"))
   (rule "replace_known_right" (formula "33") (term "0") (ifseqformula "44"))
    (builtin "One Step Simplification" (formula "33"))
   (rule "replace_known_right" (formula "36") (term "0") (ifseqformula "44"))
    (builtin "One Step Simplification" (formula "36"))
   (rule "replace_known_right" (formula "29") (term "0,1") (ifseqformula "44"))
    (builtin "One Step Simplification" (formula "29"))
   (rule "true_left" (formula "29"))
   (rule "replace_known_right" (formula "27") (term "1") (ifseqformula "43"))
    (builtin "One Step Simplification" (formula "27"))
   (rule "notLeft" (formula "27"))
   (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "43"))
    (builtin "One Step Simplification" (formula "29"))
   (rule "notLeft" (formula "29"))
   (rule "replace_known_left" (formula "35") (term "1") (ifseqformula "36"))
    (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "42")))
   (rule "true_left" (formula "35"))
   (rule "replace_known_left" (formula "36") (term "1") (ifseqformula "35"))
    (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "40")))
   (rule "true_left" (formula "36"))
   (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "30"))
    (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "39")))
   (rule "true_left" (formula "31"))
   (rule "replace_known_right" (formula "28") (term "0,1") (ifseqformula "38"))
    (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "39")))
   (rule "true_left" (formula "28"))
   (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "38"))
    (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "31")))
   (rule "true_left" (formula "30"))
   (rule "replace_known_right" (formula "27") (term "0,0") (ifseqformula "37"))
    (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "36")))
   (rule "true_left" (formula "27"))
   (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "36"))
    (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "28")))
   (rule "true_left" (formula "27"))
   (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "34"))
    (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "28")))
   (rule "true_left" (formula "29"))
   (rule "replace_known_left" (formula "38") (term "1,1,1,0,0,0,1,1") (ifseqformula "29"))
    (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "33")) (ifInst ""  (formula "34")) (ifInst ""  (formula "35")) (ifInst ""  (formula "33")) (ifInst ""  (formula "34")) (ifInst ""  (formula "35")) (ifInst ""  (formula "27")) (ifInst ""  (formula "28")))
   (rule "equalityToSeqGetAndSeqLenRight" (formula "33") (inst "iv=iv"))
    (builtin "One Step Simplification" (formula "33"))
   (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0,1"))
   (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "16"))
   (rule "applyEq" (formula "33") (term "0,1,0,0,1,0,0,1") (ifseqformula "16"))
   (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,1"))
   (rule "mul_literals" (formula "33") (term "0,1,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,1"))
   (rule "nnf_imp2or" (formula "33") (term "0,1"))
   (rule "shift_paren_and" (formula "8") (term "0,1,0,1,0"))
   (rule "nnf_notAnd" (formula "33") (term "0,0,1"))
   (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0,1"))
   (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,1"))
   (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,1"))
   (rule "add_literals" (formula "33") (term "0,0,0,1,0,0,1"))
   (rule "add_zero_left" (formula "33") (term "0,0,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0,1"))
   (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0,1"))
   (rule "add_literals" (formula "33") (term "0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,1"))
   (rule "mul_literals" (formula "33") (term "1,0,0,0,1"))
   (rule "shift_paren_and" (formula "9") (term "0,1,0,1,0"))
   (rule "shift_paren_and" (formula "8") (term "1,1,0,1,0"))
   (rule "shift_paren_and" (formula "9") (term "1,1,0,1,0"))
   (rule "ifthenelse_split" (formula "9") (term "1,1,0,0"))
   (branch "self.list.size >= 1 + self.index TRUE"
      (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "replace_known_left" (formula "39") (term "0,0,0,0,0") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "9")))
      (rule "inEqSimp_homoInEq1" (formula "39") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0,0"))
      (rule "polySimp_mulAssoc" (formula "39") (term "0,1,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "39") (term "0,0,1,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "39") (term "0,1,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "39") (term "0,1,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "39") (term "0,0,0"))
      (rule "polySimp_mulLiterals" (formula "39") (term "0,0,0,0"))
      (rule "polySimp_elimOne" (formula "39") (term "0,0,0,0"))
      (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "39"))
      (rule "eqSymm" (formula "39") (term "0"))
       (builtin "One Step Simplification" (formula "39"))
      (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "9"))
      (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
      (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
      (rule "add_literals" (formula "7") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "7") (term "1,0,0"))
      (rule "add_zero_right" (formula "7") (term "0,0"))
      (rule "qeq_literals" (formula "7") (term "0"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "true_left" (formula "7"))
      (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "18"))
      (rule "polySimp_rightDist" (formula "8") (term "0,0"))
      (rule "mul_literals" (formula "8") (term "0,0,0"))
      (rule "polySimp_addComm1" (formula "8") (term "0"))
      (rule "add_literals" (formula "8") (term "0,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "8"))
      (rule "polySimp_mulLiterals" (formula "8") (term "0"))
      (rule "polySimp_elimOne" (formula "8") (term "0"))
      (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "8"))
      (rule "leq_literals" (formula "6") (term "0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "true_left" (formula "6"))
      (rule "ifthenelse_split" (formula "6") (term "1,1,0,0"))
      (branch "self.index >= 1 TRUE"
         (rule "replace_known_left" (formula "39") (term "0,1,1,0,0,0,0,1") (ifseqformula "6"))
          (builtin "One Step Simplification" (formula "39"))
         (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "6"))
         (rule "leq_literals" (formula "5") (term "0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "true_left" (formula "5"))
         (rule "cut_direct" (formula "13") (term "0"))
         (branch "CUT: self.curr = null TRUE"
             (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "replace_known_left" (formula "38") (term "0,0") (ifseqformula "13"))
             (builtin "One Step Simplification" (formula "38"))
            (rule "false_right" (formula "38"))
            (rule "applyEq" (formula "14") (term "1") (ifseqformula "13"))
            (rule "shift_paren_and" (formula "6") (term "1,0,1,0"))
            (rule "shift_paren_and" (formula "9") (term "1,0,1,0"))
            (rule "shift_paren_and" (formula "6") (term "0,1,0,1,0"))
            (rule "shift_paren_and" (formula "6") (term "0,1,0"))
            (rule "shift_paren_and" (formula "6") (term "0,0,1,0"))
            (rule "shift_paren_and" (formula "9") (term "0,1,0,1,0"))
            (rule "shift_paren_and" (formula "9") (term "0,1,0"))
            (rule "shift_paren_and" (formula "9") (term "0,0,1,0"))
            (rule "allLeft" (formula "19") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
            (rule "replace_known_left" (formula "19") (term "0,0,0") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "19") (term "0") (ifseqformula "5"))
            (rule "qeq_literals" (formula "19") (term "0,0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "19"))
            (rule "andLeft" (formula "8"))
            (rule "inEqSimp_homoInEq1" (formula "8"))
            (rule "polySimp_pullOutFactor1b" (formula "8") (term "0"))
            (rule "add_literals" (formula "8") (term "1,1,0"))
            (rule "times_zero_1" (formula "8") (term "1,0"))
            (rule "add_zero_right" (formula "8") (term "0"))
            (rule "leq_literals" (formula "8"))
            (rule "closeFalse" (formula "8"))
         )
         (branch "CUT: self.curr = null FALSE"
             (builtin "One Step Simplification" (formula "13"))
            (rule "replace_known_right" (formula "39") (term "0,0") (ifseqformula "33"))
             (builtin "One Step Simplification" (formula "39"))
            (rule "shift_paren_and" (formula "6") (term "1,0,1,0"))
            (rule "shift_paren_and" (formula "9") (term "1,0,1,0"))
            (rule "andRight" (formula "39"))
            (branch
               (rule "andRight" (formula "39"))
               (branch
                  (rule "allRight" (formula "39") (inst "sk=i_0_0"))
                  (rule "orRight" (formula "39"))
                  (rule "orRight" (formula "39"))
                  (rule "inEqSimp_leqRight" (formula "39"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "replace_known_left" (formula "41") (term "0,0,1,0,1,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "41"))
                  (rule "inEqSimp_geqRight" (formula "40"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_homoInEq0" (formula "41") (term "0,1,0,1,0"))
                  (rule "polySimp_addComm1" (formula "41") (term "0,0,1,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "0,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "41") (term "1,0,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "41") (term "1,0,1,0,1,0"))
                  (rule "mul_literals" (formula "41") (term "0,1,0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "41") (term "1,1,0,1,0,1,0"))
                  (rule "replace_known_left" (formula "41") (term "0,1,0,1,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "41"))
                  (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "9"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "nnf_ex2all" (formula "42"))
                  (rule "nnf_notAnd" (formula "1") (term "0"))
                  (rule "nnf_notAnd" (formula "1") (term "1,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0"))
                  (rule "commute_or" (formula "1") (term "1,0"))
                  (rule "commute_or" (formula "1") (term "0,0"))
                  (rule "commute_or_2" (formula "1") (term "0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "cnf_rightDist" (formula "1") (term "0"))
                  (rule "distr_forallAnd" (formula "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "shift_paren_or" (formula "1") (term "0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,0"))
                  (rule "commute_or" (formula "1") (term "0"))
                  (rule "shift_paren_and" (formula "10") (term "0,1,0,1,0"))
                  (rule "shift_paren_and" (formula "13") (term "0,1,0,1,0"))
                  (rule "shift_paren_and" (formula "10") (term "0,1,0"))
                  (rule "shift_paren_and" (formula "13") (term "0,1,0"))
                  (rule "seqGetAlphaCast" (formula "32") (term "0"))
                  (rule "castedGetAny" (formula "32") (term "0"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "true_left" (formula "32"))
                  (rule "shift_paren_and" (formula "10") (term "0,0,1,0"))
                  (rule "shift_paren_and" (formula "13") (term "0,0,1,0"))
                  (rule "shift_paren_and" (formula "10") (term "0,0,0,1,0"))
                  (rule "allLeft" (formula "36") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                  (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                  (rule "applyEq" (formula "36") (term "1,1,0,0") (ifseqformula "18"))
                  (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "12"))
                  (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                  (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "36") (term "0,0,1"))
                  (rule "leq_literals" (formula "36") (term "0,1"))
                   (builtin "One Step Simplification" (formula "36"))
                  (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "9"))
                  (rule "qeq_literals" (formula "36") (term "0,1"))
                   (builtin "One Step Simplification" (formula "36"))
                  (rule "shift_paren_and" (formula "13") (term "0,0,0,1,0"))
                  (rule "cut_direct" (formula "39") (term "0"))
                  (branch "CUT: self.list.size = 0 TRUE"
                      (builtin "One Step Simplification" (formula "40"))
                     (rule "allRight" (formula "40") (inst "sk=iv_0"))
                     (rule "orRight" (formula "40"))
                     (rule "orRight" (formula "40"))
                     (rule "inEqSimp_geqRight" (formula "41"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "41"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "3"))
                     (rule "times_zero_2" (formula "2") (term "1,0"))
                     (rule "add_zero_right" (formula "2") (term "0"))
                     (rule "applyEq" (formula "29") (term "1,1,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "31") (term "1,1,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "38") (term "1,1,0,0,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "19") (term "2,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "32") (term "1,1,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "38") (term "1,1,0,0,0,0,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "36") (term "1,1,0") (ifseqformula "3"))
                     (rule "add_zero_right" (formula "36") (term "1,0"))
                     (rule "applyEq" (formula "22") (term "0") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "22"))
                     (rule "true_left" (formula "22"))
                     (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "16") (term "1,1,0,1,1,0,0,0,0,1,0") (ifseqformula "3"))
                     (rule "add_zero_right" (formula "16") (term "1,0,1,1,0,0,0,0,1,0"))
                     (rule "applyEq" (formula "16") (term "1,1,1,0,0,1,0,0,0,0,1,0") (ifseqformula "3"))
                     (rule "add_zero_right" (formula "16") (term "1,1,0,0,1,0,0,0,0,1,0"))
                     (rule "applyEq" (formula "39") (term "1,1,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "16") (term "1,1,1,0,0") (ifseqformula "3"))
                     (rule "add_zero_right" (formula "16") (term "1,1,0,0"))
                     (rule "applyEq" (formula "36") (term "1,1,1,0") (ifseqformula "3"))
                     (rule "add_zero_right" (formula "36") (term "1,1,0"))
                     (rule "applyEq" (formula "32") (term "1,1,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "16") (term "1,1,1,1,0,1,0") (ifseqformula "3"))
                     (rule "add_zero_right" (formula "16") (term "1,1,1,0,1,0"))
                     (rule "applyEq" (formula "16") (term "1,1,1,1,0,0,0,1,0") (ifseqformula "3"))
                     (rule "add_zero_right" (formula "16") (term "1,1,1,0,0,0,1,0"))
                     (rule "applyEq" (formula "29") (term "1,1,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "15") (term "0") (ifseqformula "3"))
                     (rule "inEqSimp_homoInEq1" (formula "15"))
                     (rule "times_zero_2" (formula "15") (term "1,0"))
                     (rule "add_zero_right" (formula "15") (term "0"))
                     (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "26") (term "1,1,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "24") (term "0") (ifseqformula "3"))
                     (rule "leq_literals" (formula "24"))
                     (rule "true_left" (formula "24"))
                     (rule "applyEq" (formula "22") (term "1") (ifseqformula "3"))
                     (rule "applyEq" (formula "23") (term "1") (ifseqformula "3"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                     (rule "mul_literals" (formula "2") (term "1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "15"))
                     (rule "mul_literals" (formula "15") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
                  (branch "CUT: self.list.size = 0 FALSE"
                      (builtin "One Step Simplification" (formula "40"))
                     (rule "false_right" (formula "40"))
                     (rule "inEqSimp_strengthen1" (formula "19") (ifseqformula "39"))
                     (rule "add_literals" (formula "19") (term "1"))
                     (rule "inEqSimp_contradEq7" (formula "39") (ifseqformula "19"))
                     (rule "times_zero_1" (formula "39") (term "1,0,0"))
                     (rule "add_zero_right" (formula "39") (term "0,0"))
                     (rule "leq_literals" (formula "39") (term "0"))
                      (builtin "One Step Simplification" (formula "39"))
                     (rule "false_right" (formula "39"))
                     (rule "shift_paren_and" (formula "10") (term "0,0,0,0,1,0"))
                     (rule "shift_paren_and" (formula "13") (term "0,0,0,0,1,0"))
                     (rule "allLeft" (formula "23") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                     (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                     (rule "applyEq" (formula "23") (term "0,0,0,0") (ifseqformula "18"))
                     (rule "replace_known_right" (formula "23") (term "0,0,0") (ifseqformula "39"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "true_left" (formula "23"))
                     (rule "allLeft" (formula "25") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                     (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                     (rule "applyEq" (formula "25") (term "1,0,0,0,0") (ifseqformula "18"))
                     (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "12"))
                     (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                     (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "25") (term "0,0,1"))
                     (rule "leq_literals" (formula "25") (term "0,1"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "9"))
                     (rule "qeq_literals" (formula "25") (term "0,1"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "notLeft" (formula "25"))
                     (rule "shift_paren_and" (formula "10") (term "0,0,0,0,0,1,0"))
                     (rule "shift_paren_and" (formula "13") (term "0,0,0,0,0,1,0"))
                     (rule "ex_pull_out3" (formula "10") (term "0"))
                     (rule "cnf_rightDist" (formula "10") (term "0,0"))
                     (rule "shift_paren_or" (formula "10") (term "1,0,0"))
                     (rule "commute_or_2" (formula "10") (term "0,1,0,0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "10") (term "1,0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "10") (term "1,1,0,0"))
                     (rule "polySimp_pullOutFactor1" (formula "10") (term "0,1,1,0,0"))
                     (rule "add_literals" (formula "10") (term "1,0,1,1,0,0"))
                     (rule "times_zero_1" (formula "10") (term "0,1,1,0,0"))
                     (rule "leq_literals" (formula "10") (term "1,1,0,0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "cnf_rightDist" (formula "10") (term "0,0"))
                     (rule "shift_paren_or" (formula "10") (term "1,0,0"))
                     (rule "inEqSimp_or_tautInEq3" (formula "10") (term "0,1,0,0"))
                     (rule "add_zero_right" (formula "10") (term "1,1,0,1,0,0"))
                     (rule "qeq_literals" (formula "10") (term "1,0,1,0,0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "cnf_rightDist" (formula "10") (term "0,0"))
                     (rule "shift_paren_or" (formula "10") (term "1,0,0"))
                     (rule "commute_or_2" (formula "10") (term "0,1,0,0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "cnf_rightDist" (formula "10") (term "0,0,0"))
                     (rule "commute_or_2" (formula "10") (term "1,0,0,0"))
                     (rule "shift_paren_or" (formula "10") (term "0,1,0,0,0"))
                     (rule "commute_or" (formula "10") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "10") (term "0,1,0,0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "10") (term "1,0,1,0,0,0"))
                     (rule "polySimp_pullOutFactor1" (formula "10") (term "0,1,0,1,0,0,0"))
                     (rule "add_literals" (formula "10") (term "1,0,1,0,1,0,0,0"))
                     (rule "times_zero_1" (formula "10") (term "0,1,0,1,0,0,0"))
                     (rule "leq_literals" (formula "10") (term "1,0,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "cnf_rightDist" (formula "10") (term "0,0,0"))
                     (rule "commute_or_2" (formula "10") (term "1,0,0,0"))
                     (rule "shift_paren_or" (formula "10") (term "0,1,0,0,0"))
                     (rule "inEqSimp_or_tautInEq2" (formula "10") (term "0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "10") (term "1,1,0,0,1,0,0,0"))
                     (rule "qeq_literals" (formula "10") (term "1,0,0,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "cnf_rightDist" (formula "10") (term "0,0,0"))
                     (rule "shift_paren_or" (formula "10") (term "1,0,0,0"))
                     (rule "commute_or_2" (formula "10") (term "0,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "cnf_rightDist" (formula "10") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "10") (term "0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "10") (term "1,0,0,0,0"))
                     (rule "commute_or" (formula "10") (term "0,0,0,0,0,0"))
                     (rule "ex_pull_out3" (formula "13") (term "0"))
                     (rule "cnf_rightDist" (formula "13") (term "0,0"))
                     (rule "shift_paren_or" (formula "13") (term "1,0,0"))
                     (rule "commute_or_2" (formula "13") (term "0,1,0,0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "13") (term "1,0,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "1,1,1,0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "13") (term "1,1,0,0"))
                     (rule "polySimp_pullOutFactor1" (formula "13") (term "0,1,1,0,0"))
                     (rule "add_literals" (formula "13") (term "1,0,1,1,0,0"))
                     (rule "times_zero_1" (formula "13") (term "0,1,1,0,0"))
                     (rule "leq_literals" (formula "13") (term "1,1,0,0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "cnf_rightDist" (formula "13") (term "0,0"))
                     (rule "shift_paren_or" (formula "13") (term "1,0,0"))
                     (rule "inEqSimp_or_tautInEq3" (formula "13") (term "0,1,0,0"))
                     (rule "add_literals" (formula "13") (term "1,1,0,1,0,0"))
                     (rule "qeq_literals" (formula "13") (term "1,0,1,0,0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "cnf_rightDist" (formula "13") (term "0,0"))
                     (rule "shift_paren_or" (formula "13") (term "1,0,0"))
                     (rule "commute_or_2" (formula "13") (term "0,1,0,0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "cnf_rightDist" (formula "13") (term "0,0,0"))
                     (rule "commute_or_2" (formula "13") (term "1,0,0,0"))
                     (rule "shift_paren_or" (formula "13") (term "0,1,0,0,0"))
                     (rule "commute_or" (formula "13") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "13") (term "0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "1,1,0,1,0,0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "13") (term "1,0,1,0,0,0"))
                     (rule "polySimp_pullOutFactor1" (formula "13") (term "0,1,0,1,0,0,0"))
                     (rule "add_literals" (formula "13") (term "1,0,1,0,1,0,0,0"))
                     (rule "times_zero_1" (formula "13") (term "0,1,0,1,0,0,0"))
                     (rule "leq_literals" (formula "13") (term "1,0,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "cnf_rightDist" (formula "13") (term "0,0,0"))
                     (rule "commute_or_2" (formula "13") (term "1,0,0,0"))
                     (rule "shift_paren_or" (formula "13") (term "0,1,0,0,0"))
                     (rule "inEqSimp_or_tautInEq2" (formula "13") (term "0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "13") (term "1,1,0,0,1,0,0,0"))
                     (rule "qeq_literals" (formula "13") (term "1,0,0,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "cnf_rightDist" (formula "13") (term "0,0,0"))
                     (rule "shift_paren_or" (formula "13") (term "1,0,0,0"))
                     (rule "commute_or_2" (formula "13") (term "0,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "cnf_rightDist" (formula "13") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "13") (term "0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "13") (term "1,0,0,0,0"))
                     (rule "commute_or" (formula "13") (term "0,0,0,0,0,0"))
                     (rule "allLeft" (formula "30") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                     (rule "typeEqDerived" (formula "30") (term "0,0,0") (ifseqformula "37"))
                      (builtin "One Step Simplification" (formula "30"))
                     (rule "true_left" (formula "30"))
                     (rule "allLeft" (formula "25") (inst "t=Z(0(#))"))
                     (rule "leq_literals" (formula "25") (term "1,0"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                     (rule "applyEq" (formula "25") (term "1,0,0,0") (ifseqformula "33"))
                     (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "19"))
                     (rule "qeq_literals" (formula "25") (term "0,1"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "notLeft" (formula "25"))
                     (rule "allLeft" (formula "29") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                     (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                     (rule "applyEq" (formula "29") (term "0,0,0,0") (ifseqformula "37"))
                     (rule "replace_known_right" (formula "29") (term "0,0,0") (ifseqformula "40"))
                      (builtin "One Step Simplification" (formula "29"))
                     (rule "true_left" (formula "29"))
                     (rule "allLeft" (formula "23") (inst "t=Z(0(#))"))
                     (rule "leq_literals" (formula "23") (term "1,0"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                     (rule "applyEq" (formula "23") (term "0,0,0") (ifseqformula "33"))
                     (rule "replace_known_right" (formula "23") (term "0,0") (ifseqformula "42"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "true_left" (formula "23"))
                     (rule "allLeft" (formula "25") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                     (rule "inEqSimp_homoInEq0" (formula "25") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,0,1,0"))
                     (rule "mul_literals" (formula "25") (term "0,1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "25") (term "0,1,0"))
                     (rule "add_literals" (formula "25") (term "0,0,1,0"))
                     (rule "add_zero_left" (formula "25") (term "0,1,0"))
                     (rule "inEqSimp_homoInEq1" (formula "25") (term "1"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,0,1"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,0,1"))
                     (rule "mul_literals" (formula "25") (term "0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "25") (term "0,1"))
                     (rule "polySimp_addComm0" (formula "25") (term "0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,1"))
                     (rule "add_literals" (formula "25") (term "1,1,0,1"))
                     (rule "times_zero_1" (formula "25") (term "1,0,1"))
                     (rule "add_zero_right" (formula "25") (term "0,1"))
                     (rule "leq_literals" (formula "25") (term "1"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "applyEq" (formula "25") (term "1,0,0,0") (ifseqformula "34"))
                     (rule "inEqSimp_invertInEq1" (formula "25") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "0,1"))
                     (rule "times_zero_2" (formula "25") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "25") (term "0,1"))
                     (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "19"))
                     (rule "qeq_literals" (formula "25") (term "0,1"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "notLeft" (formula "25"))
                     (rule "allLeft" (formula "23") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                     (rule "inEqSimp_homoInEq1" (formula "23") (term "1"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,0,1"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,0,1"))
                     (rule "mul_literals" (formula "23") (term "0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "23") (term "0,1"))
                     (rule "polySimp_addComm0" (formula "23") (term "0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,1"))
                     (rule "add_literals" (formula "23") (term "1,1,0,1"))
                     (rule "times_zero_1" (formula "23") (term "1,0,1"))
                     (rule "add_literals" (formula "23") (term "0,1"))
                     (rule "leq_literals" (formula "23") (term "1"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "inEqSimp_homoInEq0" (formula "23") (term "1"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,0,1"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,0,1"))
                     (rule "mul_literals" (formula "23") (term "0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "23") (term "0,1"))
                     (rule "add_literals" (formula "23") (term "0,0,1"))
                     (rule "add_zero_left" (formula "23") (term "0,1"))
                     (rule "applyEq" (formula "23") (term "0,0,0") (ifseqformula "34"))
                     (rule "replace_known_right" (formula "23") (term "0,0") (ifseqformula "44"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "true_left" (formula "23"))
                     (rule "allLeft" (formula "37") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                     (rule "inEqSimp_homoInEq0" (formula "37") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "37") (term "1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "37") (term "1,0,1,0"))
                     (rule "mul_literals" (formula "37") (term "0,1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "37") (term "0,1,0"))
                     (rule "add_literals" (formula "37") (term "0,0,1,0"))
                     (rule "add_zero_left" (formula "37") (term "0,1,0"))
                     (rule "inEqSimp_homoInEq1" (formula "37") (term "1"))
                     (rule "polySimp_mulComm0" (formula "37") (term "1,0,1"))
                     (rule "polySimp_rightDist" (formula "37") (term "1,0,1"))
                     (rule "mul_literals" (formula "37") (term "0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "37") (term "0,1"))
                     (rule "polySimp_addComm0" (formula "37") (term "0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,1"))
                     (rule "add_literals" (formula "37") (term "1,1,0,1"))
                     (rule "times_zero_1" (formula "37") (term "1,0,1"))
                     (rule "add_literals" (formula "37") (term "0,1"))
                     (rule "leq_literals" (formula "37") (term "1"))
                      (builtin "One Step Simplification" (formula "37"))
                     (rule "applyEq" (formula "37") (term "1,1,0") (ifseqformula "33"))
                     (rule "inEqSimp_invertInEq1" (formula "37") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "37") (term "0,1"))
                     (rule "times_zero_2" (formula "37") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "37") (term "0,1"))
                     (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "19"))
                     (rule "qeq_literals" (formula "37") (term "0,1"))
                      (builtin "One Step Simplification" (formula "37"))
                     (rule "allLeft" (formula "38") (inst "t=Z(0(#))"))
                     (rule "leq_literals" (formula "38") (term "1,0"))
                      (builtin "One Step Simplification" (formula "38"))
                     (rule "inEqSimp_commuteGeq" (formula "38") (term "1"))
                     (rule "applyEq" (formula "38") (term "1,1,0") (ifseqformula "32"))
                     (rule "inEqSimp_contradInEq1" (formula "38") (term "1") (ifseqformula "19"))
                     (rule "qeq_literals" (formula "38") (term "0,1"))
                      (builtin "One Step Simplification" (formula "38"))
                     (rule "cut_direct" (formula "1") (term "0,0"))
                     (branch "CUT: (FileReader)self.list.values[i_0_0] = null TRUE"
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "32") (term "1") (ifseqformula "5"))
                        (rule "replace_known_right" (formula "32") (term "0") (ifseqformula "45"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "31") (term "1,0") (ifseqformula "5"))
                        (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "47"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "allLeft" (formula "24") (inst "t=Z(0(#))"))
                        (rule "leq_literals" (formula "24") (term "1,0"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                        (rule "applyEq" (formula "24") (term "0,0,0") (ifseqformula "35"))
                        (rule "replace_known_right" (formula "24") (term "0,0") (ifseqformula "47"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "applyEq" (formula "24") (term "1,0,0") (ifseqformula "35"))
                        (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "34"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "true_left" (formula "24"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "32") (term "0") (ifseqformula "5"))
                        (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "33"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "true_left" (formula "32"))
                        (rule "allLeft" (formula "24") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                        (rule "inEqSimp_homoInEq1" (formula "24") (term "1"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,0,1"))
                        (rule "mul_literals" (formula "24") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "24") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "24") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,1"))
                        (rule "add_literals" (formula "24") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "24") (term "1,0,1"))
                        (rule "add_literals" (formula "24") (term "0,1"))
                        (rule "leq_literals" (formula "24") (term "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "inEqSimp_homoInEq0" (formula "24") (term "1"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,0,1"))
                        (rule "mul_literals" (formula "24") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "24") (term "0,1"))
                        (rule "add_literals" (formula "24") (term "0,0,1"))
                        (rule "add_zero_left" (formula "24") (term "0,1"))
                        (rule "applyEq" (formula "24") (term "0,0,0") (ifseqformula "36"))
                        (rule "replace_known_right" (formula "24") (term "0,0") (ifseqformula "48"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "applyEq" (formula "24") (term "1,0,0") (ifseqformula "36"))
                        (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "32"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "true_left" (formula "24"))
                        (rule "allLeft" (formula "24") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                        (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                        (rule "applyEq" (formula "24") (term "0,0,0,0") (ifseqformula "18"))
                        (rule "replace_known_right" (formula "24") (term "0,0,0") (ifseqformula "46"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "applyEq" (formula "24") (term "1,0,0,0") (ifseqformula "18"))
                        (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "17"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "true_left" (formula "24"))
                        (rule "commute_and_2" (formula "10") (term "0,0,0"))
                        (rule "seqGetAlphaCast" (formula "38") (term "0"))
                        (rule "castDel" (formula "38") (term "0"))
                         (builtin "One Step Simplification" (formula "38"))
                        (rule "true_left" (formula "38"))
                        (rule "allLeft" (formula "36") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                        (rule "inEqSimp_homoInEq1" (formula "36") (term "1"))
                        (rule "polySimp_addComm1" (formula "36") (term "0,1"))
                        (rule "applyEq" (formula "36") (term "1,0,0,0") (ifseqformula "18"))
                        (rule "eqSymm" (formula "36") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "36") (term "1,1"))
                        (rule "mul_literals" (formula "36") (term "0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1"))
                        (rule "polySimp_elimOne" (formula "36") (term "1,1,1"))
                        (rule "inEqSimp_contradInEq1" (formula "36") (term "1,0") (ifseqformula "9"))
                        (rule "qeq_literals" (formula "36") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "allLeft" (formula "37") (inst "t=Z(0(#))"))
                        (rule "add_zero_right" (formula "37") (term "1,1,0,0"))
                        (rule "leq_literals" (formula "37") (term "1,0"))
                         (builtin "One Step Simplification" (formula "37"))
                        (rule "inEqSimp_homoInEq1" (formula "37") (term "1"))
                        (rule "mul_literals" (formula "37") (term "1,0,1"))
                        (rule "add_zero_right" (formula "37") (term "0,1"))
                        (rule "applyEq" (formula "37") (term "1,0,0") (ifseqformula "34"))
                        (rule "eqSymm" (formula "37") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1"))
                        (rule "mul_literals" (formula "37") (term "1,1"))
                        (rule "allLeft" (formula "39") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                        (rule "inEqSimp_homoInEq0" (formula "39") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "39") (term "1,0,1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "39") (term "1,0,1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "39") (term "0,1,0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "39") (term "0,1,0,0,0,0,0"))
                        (rule "add_literals" (formula "39") (term "0,0,1,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "39") (term "0,1,0,0,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "39") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "39") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "39") (term "1,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "39") (term "0,1,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "39") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "39") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,1,0,0,0,0"))
                        (rule "add_literals" (formula "39") (term "1,1,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "39") (term "1,0,1,0,0,0,0"))
                        (rule "add_zero_right" (formula "39") (term "0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "39") (term "1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "39"))
                        (rule "applyEq" (formula "39") (term "1,0,0,0,0,0,0") (ifseqformula "35"))
                        (rule "inEqSimp_invertInEq1" (formula "39") (term "1,0,0,0,0"))
                        (rule "times_zero_2" (formula "39") (term "1,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "39") (term "0,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "39") (term "0,1,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "39") (term "1,0,0,0,0") (ifseqformula "19"))
                        (rule "qeq_literals" (formula "39") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "39"))
                        (rule "allLeft" (formula "40") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                        (rule "inEqSimp_commuteGeq" (formula "40") (term "1,0,0,0,0"))
                        (rule "applyEq" (formula "40") (term "1,0,0,0,0,0,0,0") (ifseqformula "18"))
                        (rule "inEqSimp_contradInEq1" (formula "40") (term "1,0,0,0,0") (ifseqformula "12"))
                        (rule "inEqSimp_homoInEq1" (formula "40") (term "0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "40") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "40") (term "1,1,0,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "40") (term "1,0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "40") (term "0,0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "40") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "40"))
                        (rule "inEqSimp_contradInEq1" (formula "40") (term "1,0,0,0,0") (ifseqformula "9"))
                        (rule "qeq_literals" (formula "40") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "40"))
                        (rule "allLeft" (formula "41") (inst "t=Z(0(#))"))
                        (rule "leq_literals" (formula "41") (term "1,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "41"))
                        (rule "inEqSimp_commuteGeq" (formula "41") (term "1,0,0,0,0"))
                        (rule "applyEq" (formula "41") (term "1,0,0,0,0,0,0") (ifseqformula "34"))
                        (rule "inEqSimp_contradInEq1" (formula "41") (term "1,0,0,0,0") (ifseqformula "19"))
                        (rule "qeq_literals" (formula "41") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "41"))
                        (rule "commute_or_2" (formula "39") (term "0"))
                        (rule "inEqSimp_or_weaken3" (formula "39") (term "0"))
                        (rule "polySimp_addAssoc" (formula "39") (term "1,0,1,0"))
                        (rule "add_literals" (formula "39") (term "0,1,0,1,0"))
                        (rule "add_zero_left" (formula "39") (term "1,0,1,0"))
                         (builtin "One Step Simplification" (formula "39"))
                        (rule "commute_and_2" (formula "13") (term "0,0,0"))
                        (rule "commute_or_2" (formula "40") (term "0"))
                        (rule "commute_or_2" (formula "41") (term "0"))
                        (rule "inEqSimp_or_weaken2" (formula "41") (term "0,0"))
                        (rule "add_literals" (formula "41") (term "1,0,1,0,0"))
                         (builtin "One Step Simplification" (formula "41"))
                        (rule "allLeft" (formula "27") (inst "t=i_0_0"))
                        (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "27") (term "0") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "27") (term "0,0"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "27"))
                        (rule "mul_literals" (formula "19") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                        (rule "mul_literals" (formula "19") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "19"))
                        (rule "leq_literals" (formula "4") (term "0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "27"))
                        (rule "polySimp_rightDist" (formula "11") (term "0,0"))
                        (rule "mul_literals" (formula "11") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                        (rule "polySimp_elimOne" (formula "11") (term "0"))
                        (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "11"))
                        (rule "andLeft" (formula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                        (rule "add_literals" (formula "3") (term "1,1,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0"))
                        (rule "add_zero_right" (formula "3") (term "0"))
                        (rule "leq_literals" (formula "3"))
                        (rule "closeFalse" (formula "3"))
                     )
                     (branch "CUT: (FileReader)self.list.values[i_0_0] = null FALSE"
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "46") (term "0") (ifseqformula "5"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "47"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "allLeft" (formula "25") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                        (rule "inEqSimp_homoInEq0" (formula "25") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "25") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "25") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0,1,0"))
                        (rule "add_literals" (formula "25") (term "0,0,1,0"))
                        (rule "add_zero_left" (formula "25") (term "0,1,0"))
                        (rule "inEqSimp_homoInEq1" (formula "25") (term "1"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "25") (term "1,0,1"))
                        (rule "mul_literals" (formula "25") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "25") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,1"))
                        (rule "add_literals" (formula "25") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "25") (term "1,0,1"))
                        (rule "add_literals" (formula "25") (term "0,1"))
                        (rule "leq_literals" (formula "25") (term "1"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "applyEq" (formula "25") (term "1,0,1,0") (ifseqformula "35"))
                        (rule "replace_known_left" (formula "25") (term "1,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "true_left" (formula "25"))
                        (rule "allLeft" (formula "25") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                        (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                        (rule "applyEq" (formula "25") (term "1,0,1,0,0") (ifseqformula "19"))
                        (rule "replace_known_left" (formula "25") (term "1,0,0") (ifseqformula "18"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "true_left" (formula "25"))
                        (rule "allLeft" (formula "25") (inst "t=Z(0(#))"))
                        (rule "leq_literals" (formula "25") (term "1,0"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                        (rule "applyEq" (formula "25") (term "1,0,1,0") (ifseqformula "34"))
                        (rule "applyEq" (formula "25") (term "0,0,0") (ifseqformula "34"))
                        (rule "replace_known_right" (formula "25") (term "0,0") (ifseqformula "47"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                        (rule "qeq_literals" (formula "25") (term "0,1"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "34") (term "1") (ifseqformula "6"))
                        (rule "replace_known_right" (formula "34") (term "0") (ifseqformula "48"))
                         (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "25")))
                        (rule "true_left" (formula "34"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "33") (term "0") (ifseqformula "6"))
                        (rule "replace_known_left" (formula "33") (term "0") (ifseqformula "34"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "true_left" (formula "33"))
                        (rule "commute_and_2" (formula "11") (term "0,0,0"))
                        (rule "seqGetAlphaCast" (formula "38") (term "0"))
                        (rule "castDel" (formula "38") (term "0"))
                         (builtin "One Step Simplification" (formula "38"))
                        (rule "true_left" (formula "38"))
                        (rule "allLeft" (formula "36") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                        (rule "inEqSimp_homoInEq1" (formula "36") (term "1"))
                        (rule "polySimp_addComm1" (formula "36") (term "0,1"))
                        (rule "applyEq" (formula "36") (term "1,0,0,0") (ifseqformula "19"))
                        (rule "eqSymm" (formula "36") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "36") (term "1,1"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1"))
                        (rule "mul_literals" (formula "36") (term "0,1,1"))
                        (rule "polySimp_elimOne" (formula "36") (term "1,1,1"))
                        (rule "inEqSimp_contradInEq1" (formula "36") (term "1,0") (ifseqformula "10"))
                        (rule "qeq_literals" (formula "36") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "allLeft" (formula "37") (inst "t=Z(0(#))"))
                        (rule "add_zero_right" (formula "37") (term "1,1,0,0"))
                        (rule "leq_literals" (formula "37") (term "1,0"))
                         (builtin "One Step Simplification" (formula "37"))
                        (rule "inEqSimp_homoInEq1" (formula "37") (term "1"))
                        (rule "times_zero_2" (formula "37") (term "1,0,1"))
                        (rule "add_zero_right" (formula "37") (term "0,1"))
                        (rule "applyEq" (formula "37") (term "1,0,0") (ifseqformula "34"))
                        (rule "eqSymm" (formula "37") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1"))
                        (rule "mul_literals" (formula "37") (term "1,1"))
                        (rule "allLeft" (formula "39") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                        (rule "inEqSimp_homoInEq0" (formula "39") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "39") (term "1,0,1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "39") (term "1,0,1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "39") (term "0,1,0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "39") (term "0,1,0,0,0,0,0"))
                        (rule "add_literals" (formula "39") (term "0,0,1,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "39") (term "0,1,0,0,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "39") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "39") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "39") (term "1,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "39") (term "0,1,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "39") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "39") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,1,0,0,0,0"))
                        (rule "add_literals" (formula "39") (term "1,1,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "39") (term "1,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "39") (term "0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "39") (term "1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "39"))
                        (rule "applyEq" (formula "39") (term "1,0,0,0,0,0,0") (ifseqformula "35"))
                        (rule "inEqSimp_invertInEq1" (formula "39") (term "1,0,0,0,0"))
                        (rule "times_zero_2" (formula "39") (term "1,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "39") (term "0,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "39") (term "0,1,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "39") (term "1,0,0,0,0") (ifseqformula "20"))
                        (rule "qeq_literals" (formula "39") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "39"))
                        (rule "allLeft" (formula "40") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                        (rule "inEqSimp_commuteGeq" (formula "40") (term "1,0,0,0,0"))
                        (rule "applyEq" (formula "40") (term "1,0,0,0,0,0,0,0") (ifseqformula "19"))
                        (rule "inEqSimp_contradInEq1" (formula "40") (term "1,0,0,0,0") (ifseqformula "13"))
                        (rule "inEqSimp_homoInEq1" (formula "40") (term "0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "40") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "40") (term "1,1,0,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "40") (term "1,0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "40") (term "0,0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "40") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "40"))
                        (rule "inEqSimp_contradInEq1" (formula "40") (term "1,0,0,0,0") (ifseqformula "10"))
                        (rule "qeq_literals" (formula "40") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "40"))
                        (rule "allLeft" (formula "41") (inst "t=Z(0(#))"))
                        (rule "leq_literals" (formula "41") (term "1,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "41"))
                        (rule "inEqSimp_commuteGeq" (formula "41") (term "1,0,0,0,0"))
                        (rule "applyEq" (formula "41") (term "1,0,0,0,0,0,0") (ifseqformula "34"))
                        (rule "inEqSimp_contradInEq1" (formula "41") (term "1,0,0,0,0") (ifseqformula "20"))
                        (rule "qeq_literals" (formula "41") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "41"))
                        (rule "commute_or_2" (formula "39") (term "0"))
                        (rule "inEqSimp_or_weaken3" (formula "39") (term "0"))
                        (rule "polySimp_addAssoc" (formula "39") (term "1,0,1,0"))
                        (rule "add_literals" (formula "39") (term "0,1,0,1,0"))
                        (rule "add_zero_left" (formula "39") (term "1,0,1,0"))
                         (builtin "One Step Simplification" (formula "39"))
                        (rule "commute_and_2" (formula "14") (term "0,0,0"))
                        (rule "commute_or_2" (formula "40") (term "0"))
                        (rule "commute_or_2" (formula "41") (term "0"))
                        (rule "inEqSimp_or_weaken2" (formula "41") (term "0,0"))
                        (rule "add_literals" (formula "41") (term "1,0,1,0,0"))
                         (builtin "One Step Simplification" (formula "41"))
                        (rule "allLeft" (formula "32") (inst "t=i_0_0"))
                        (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0") (ifseqformula "5"))
                        (rule "qeq_literals" (formula "32") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "allLeft" (formula "47") (inst "t=i_0_0"))
                        (rule "inEqSimp_commuteGeq" (formula "47") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "47") (term "1,0") (ifseqformula "5"))
                        (rule "qeq_literals" (formula "47") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "47"))
                        (rule "allLeft" (formula "39") (inst "t=i_0_0"))
                        (rule "inEqSimp_homoInEq1" (formula "39") (term "1"))
                        (rule "polySimp_addComm1" (formula "39") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1"))
                        (rule "polySimp_mulComm0" (formula "39") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "39") (term "1,1"))
                        (rule "mul_literals" (formula "39") (term "0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1"))
                        (rule "polySimp_elimOne" (formula "39") (term "1,1,1"))
                        (rule "inEqSimp_contradInEq1" (formula "39") (term "1,0") (ifseqformula "5"))
                        (rule "qeq_literals" (formula "39") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "39"))
                        (rule "allLeft" (formula "31") (inst "t=i_0_0"))
                        (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "31") (term "1,0") (ifseqformula "5"))
                        (rule "qeq_literals" (formula "31") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "allLeft" (formula "30") (inst "t=i_0_0"))
                        (rule "replace_known_right" (formula "30") (term "0,0,0") (ifseqformula "52"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "30") (term "1,0") (ifseqformula "5"))
                        (rule "qeq_literals" (formula "30") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "commute_and_2" (formula "11") (term "0,0"))
                        (rule "seqGetAlphaCast" (formula "48") (term "0"))
                        (rule "castDel" (formula "48") (term "0"))
                         (builtin "One Step Simplification" (formula "48"))
                        (rule "true_left" (formula "48"))
                        (rule "seqGetAlphaCast" (formula "49") (term "0"))
                        (rule "castDel" (formula "49") (term "0"))
                         (builtin "One Step Simplification" (formula "49"))
                        (rule "true_left" (formula "49"))
                        (rule "seqGetAlphaCast" (formula "52") (term "0"))
                        (rule "castedGetAny" (formula "1") (term "0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "seqGetAlphaCast" (formula "2") (term "0,0,0,1"))
                        (rule "castDel" (formula "2") (term "0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "cut_direct" (formula "2") (term "0,1"))
                        (branch "CUT: FileReader::instance(self.list.values[i_0_0]) = TRUE TRUE"
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "notLeft" (formula "3"))
                           (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "true_left" (formula "34"))
                           (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "51"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "30"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "true_left" (formula "32"))
                           (rule "replace_known_left" (formula "48") (term "1") (ifseqformula "30"))
                            (builtin "One Step Simplification" (formula "48"))
                           (rule "true_left" (formula "48"))
                           (rule "inEqSimp_subsumption0" (formula "39") (term "1") (ifseqformula "30"))
                           (rule "inEqSimp_homoInEq0" (formula "39") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,1"))
                           (rule "add_literals" (formula "39") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "39") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "39") (term "0,0,1"))
                           (rule "qeq_literals" (formula "39") (term "0,1"))
                            (builtin "One Step Simplification" (formula "39"))
                           (rule "true_left" (formula "39"))
                           (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "30"))
                           (rule "polySimp_rightDist" (formula "13") (term "0,0"))
                           (rule "mul_literals" (formula "13") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "13") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "13"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                           (rule "polySimp_elimOne" (formula "13") (term "0"))
                           (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "13"))
                           (rule "andLeft" (formula "4"))
                           (rule "inEqSimp_homoInEq1" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                           (rule "mul_literals" (formula "4") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                           (rule "add_literals" (formula "4") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                           (rule "add_literals" (formula "4") (term "1,1,0"))
                           (rule "times_zero_1" (formula "4") (term "1,0"))
                           (rule "add_literals" (formula "4") (term "0"))
                           (rule "leq_literals" (formula "4"))
                           (rule "closeFalse" (formula "4"))
                        )
                        (branch "CUT: FileReader::instance(self.list.values[i_0_0]) = TRUE FALSE"
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "replace_known_right" (formula "33") (term "0") (ifseqformula "51"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "33"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "true_left" (formula "31"))
                           (rule "replace_known_left" (formula "48") (term "1") (ifseqformula "32"))
                            (builtin "One Step Simplification" (formula "48"))
                           (rule "true_left" (formula "48"))
                           (rule "replace_known_left" (formula "29") (term "1") (ifseqformula "32"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "inEqSimp_subsumption0" (formula "38") (term "1") (ifseqformula "31"))
                           (rule "inEqSimp_homoInEq0" (formula "38") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0,1"))
                           (rule "add_literals" (formula "38") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "38") (term "1,0,0,1"))
                           (rule "add_literals" (formula "38") (term "0,0,1"))
                           (rule "qeq_literals" (formula "38") (term "0,1"))
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "true_left" (formula "38"))
                           (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "31"))
                           (rule "mul_literals" (formula "19") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                           (rule "mul_literals" (formula "19") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "19"))
                           (rule "leq_literals" (formula "4") (term "0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "31"))
                           (rule "polySimp_rightDist" (formula "11") (term "0,0"))
                           (rule "mul_literals" (formula "11") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "11") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                           (rule "polySimp_elimOne" (formula "11") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "3"))
                           (rule "andLeft" (formula "11"))
                           (rule "inEqSimp_homoInEq1" (formula "11"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0"))
                           (rule "polySimp_addComm1" (formula "11") (term "0,0"))
                           (rule "add_literals" (formula "11") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                           (rule "add_literals" (formula "11") (term "1,1,0"))
                           (rule "times_zero_1" (formula "11") (term "1,0"))
                           (rule "add_literals" (formula "11") (term "0"))
                           (rule "leq_literals" (formula "11"))
                           (rule "closeFalse" (formula "11"))
                        )
                     )
                  )
               )
               (branch
                  (rule "allRight" (formula "39") (inst "sk=i_0"))
                  (rule "orRight" (formula "39"))
                  (rule "orRight" (formula "39"))
                  (rule "polySimp_addComm0" (formula "41") (term "1,1,1,0,1,0"))
                  (rule "inEqSimp_geqRight" (formula "40"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                  (rule "inEqSimp_leqRight" (formula "40"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "replace_known_left" (formula "41") (term "0,0,1,0,1,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "41"))
                  (rule "inEqSimp_homoInEq0" (formula "41") (term "0,1,0,1,0"))
                  (rule "polySimp_addComm1" (formula "41") (term "0,0,1,0,1,0"))
                  (rule "polySimp_addComm1" (formula "41") (term "0,0,0,1,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "0,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "41") (term "1,0,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "41") (term "1,0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "41") (term "1,1,0,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "41") (term "0,1,0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "1,0,1,0,1,0,1,0"))
                  (rule "mul_literals" (formula "41") (term "0,0,1,0,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "41") (term "1,0,1,0,1,0,1,0"))
                  (rule "replace_known_left" (formula "41") (term "0,1,0,1,0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "41"))
                  (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "20"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,0,0"))
                  (rule "mul_literals" (formula "2") (term "0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                  (rule "add_literals" (formula "2") (term "0,0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "2"))
                  (rule "mul_literals" (formula "8") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0"))
                  (rule "add_literals" (formula "8") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                  (rule "polySimp_elimOne" (formula "8") (term "0"))
                  (rule "nnf_ex2all" (formula "43"))
                  (rule "nnf_notAnd" (formula "1") (term "0"))
                  (rule "nnf_notAnd" (formula "1") (term "1,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0"))
                  (rule "commute_or" (formula "1") (term "1,0"))
                  (rule "commute_or" (formula "1") (term "0,0"))
                  (rule "commute_or_2" (formula "1") (term "0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "cnf_rightDist" (formula "1") (term "0"))
                  (rule "distr_forallAnd" (formula "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "shift_paren_or" (formula "1") (term "0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,0"))
                  (rule "commute_or" (formula "1") (term "0"))
                  (rule "shift_paren_and" (formula "11") (term "0,1,0,1,0"))
                  (rule "shift_paren_and" (formula "14") (term "0,1,0,1,0"))
                  (rule "shift_paren_and" (formula "11") (term "0,1,0"))
                  (rule "shift_paren_and" (formula "14") (term "0,1,0"))
                  (rule "seqGetAlphaCast" (formula "33") (term "0"))
                  (rule "castedGetAny" (formula "33") (term "0"))
                   (builtin "One Step Simplification" (formula "33"))
                  (rule "true_left" (formula "33"))
                  (rule "shift_paren_and" (formula "11") (term "0,0,1,0"))
                  (rule "shift_paren_and" (formula "14") (term "0,0,1,0"))
                  (rule "allLeft" (formula "37") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                  (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                  (rule "applyEq" (formula "37") (term "1,1,0,0") (ifseqformula "19"))
                  (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "13"))
                  (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                  (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "37") (term "0,0,1"))
                  (rule "leq_literals" (formula "37") (term "0,1"))
                   (builtin "One Step Simplification" (formula "37"))
                  (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                  (rule "qeq_literals" (formula "37") (term "0,1"))
                   (builtin "One Step Simplification" (formula "37"))
                  (rule "cut_direct" (formula "40") (term "0"))
                  (branch "CUT: self.list.size = 0 TRUE"
                      (builtin "One Step Simplification" (formula "41"))
                     (rule "allRight" (formula "41") (inst "sk=iv_0"))
                     (rule "orRight" (formula "41"))
                     (rule "orRight" (formula "41"))
                     (rule "inEqSimp_geqRight" (formula "42"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "42"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "applyEq" (formula "33") (term "1,1,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "39") (term "1,1,0,0,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "37") (term "1,1,0") (ifseqformula "3"))
                     (rule "add_literals" (formula "37") (term "1,0"))
                     (rule "applyEq" (formula "32") (term "1,1,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "38") (term "1,1,1,0") (ifseqformula "3"))
                     (rule "add_zero_right" (formula "38") (term "1,1,0"))
                     (rule "applyEq" (formula "34") (term "1,1,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "17") (term "1,1,1,1,1,0,0,0,1,0") (ifseqformula "3"))
                     (rule "add_zero_right" (formula "17") (term "1,1,1,1,0,0,0,1,0"))
                     (rule "applyEq" (formula "30") (term "1,1,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "17") (term "1,1,1,0,0,0,1,0,0,0,1,0") (ifseqformula "3"))
                     (rule "add_zero_right" (formula "17") (term "1,1,0,0,0,1,0,0,0,1,0"))
                     (rule "applyEq" (formula "17") (term "1,1,1,0,0") (ifseqformula "3"))
                     (rule "add_zero_right" (formula "17") (term "1,1,0,0"))
                     (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "17") (term "1,1,1,1,0,1,0") (ifseqformula "3"))
                     (rule "add_zero_right" (formula "17") (term "1,1,1,0,1,0"))
                     (rule "applyEq" (formula "23") (term "0") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "23"))
                     (rule "true_left" (formula "23"))
                     (rule "applyEq" (formula "38") (term "1,1,0,0,0,0,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "30") (term "1,1,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "20") (term "2,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "40") (term "1,1,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "7") (term "0") (ifseqformula "3"))
                     (rule "inEqSimp_homoInEq1" (formula "7"))
                     (rule "times_zero_2" (formula "7") (term "1,0"))
                     (rule "add_zero_right" (formula "7") (term "0"))
                     (rule "applyEq" (formula "16") (term "0") (ifseqformula "3"))
                     (rule "inEqSimp_homoInEq1" (formula "16"))
                     (rule "times_zero_2" (formula "16") (term "1,0"))
                     (rule "add_zero_right" (formula "16") (term "0"))
                     (rule "applyEq" (formula "17") (term "1,1,0,1,0,1,0,0,0,1,0") (ifseqformula "3"))
                     (rule "add_zero_right" (formula "17") (term "1,0,1,0,1,0,0,0,1,0"))
                     (rule "applyEq" (formula "25") (term "0") (ifseqformula "3"))
                     (rule "leq_literals" (formula "25"))
                     (rule "true_left" (formula "25"))
                     (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "3"))
                     (rule "mul_literals" (formula "2") (term "1,0"))
                     (rule "add_zero_right" (formula "2") (term "0"))
                     (rule "applyEq" (formula "23") (term "1") (ifseqformula "3"))
                     (rule "applyEq" (formula "24") (term "1") (ifseqformula "3"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1"))
                     (rule "polySimp_rightDist" (formula "7") (term "1"))
                     (rule "mul_literals" (formula "7") (term "0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "16"))
                     (rule "mul_literals" (formula "16") (term "1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                     (rule "mul_literals" (formula "2") (term "1"))
                     (rule "inEqSimp_contradInEq0" (formula "13") (ifseqformula "16"))
                     (rule "qeq_literals" (formula "13") (term "0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "closeFalse" (formula "13"))
                  )
                  (branch "CUT: self.list.size = 0 FALSE"
                      (builtin "One Step Simplification" (formula "41"))
                     (rule "false_right" (formula "41"))
                     (rule "inEqSimp_strengthen1" (formula "20") (ifseqformula "40"))
                     (rule "add_zero_right" (formula "20") (term "1"))
                     (rule "inEqSimp_contradEq7" (formula "40") (ifseqformula "20"))
                     (rule "times_zero_1" (formula "40") (term "1,0,0"))
                     (rule "add_zero_right" (formula "40") (term "0,0"))
                     (rule "leq_literals" (formula "40") (term "0"))
                      (builtin "One Step Simplification" (formula "40"))
                     (rule "false_right" (formula "40"))
                     (rule "shift_paren_and" (formula "11") (term "0,0,0,1,0"))
                     (rule "shift_paren_and" (formula "14") (term "0,0,0,1,0"))
                     (rule "shift_paren_and" (formula "11") (term "0,0,0,0,1,0"))
                     (rule "shift_paren_and" (formula "14") (term "0,0,0,0,1,0"))
                     (rule "allLeft" (formula "26") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                     (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                     (rule "applyEq" (formula "26") (term "1,0,0,0,0") (ifseqformula "19"))
                     (rule "inEqSimp_contradInEq1" (formula "26") (term "1,0") (ifseqformula "10"))
                     (rule "qeq_literals" (formula "26") (term "0,1,0"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "13"))
                     (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                     (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "26") (term "0,0,1"))
                     (rule "leq_literals" (formula "26") (term "0,1"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "notLeft" (formula "26"))
                     (rule "allLeft" (formula "24") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                     (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                     (rule "applyEq" (formula "24") (term "0,0,0,0") (ifseqformula "19"))
                     (rule "replace_known_right" (formula "24") (term "0,0,0") (ifseqformula "41"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "true_left" (formula "24"))
                     (rule "shift_paren_and" (formula "11") (term "0,0,0,0,0,1,0"))
                     (rule "shift_paren_and" (formula "14") (term "0,0,0,0,0,1,0"))
                     (rule "ex_pull_out3" (formula "11") (term "0"))
                     (rule "cnf_rightDist" (formula "11") (term "0,0"))
                     (rule "shift_paren_or" (formula "11") (term "1,0,0"))
                     (rule "commute_or_2" (formula "11") (term "0,1,0,0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "11") (term "1,0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "11") (term "1,1,0,0"))
                     (rule "polySimp_pullOutFactor1" (formula "11") (term "0,1,1,0,0"))
                     (rule "add_literals" (formula "11") (term "1,0,1,1,0,0"))
                     (rule "times_zero_1" (formula "11") (term "0,1,1,0,0"))
                     (rule "leq_literals" (formula "11") (term "1,1,0,0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "cnf_rightDist" (formula "11") (term "0,0"))
                     (rule "shift_paren_or" (formula "11") (term "1,0,0"))
                     (rule "inEqSimp_or_tautInEq3" (formula "11") (term "0,1,0,0"))
                     (rule "add_zero_right" (formula "11") (term "1,1,0,1,0,0"))
                     (rule "qeq_literals" (formula "11") (term "1,0,1,0,0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "cnf_rightDist" (formula "11") (term "0,0"))
                     (rule "shift_paren_or" (formula "11") (term "1,0,0"))
                     (rule "commute_or_2" (formula "11") (term "0,1,0,0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "cnf_rightDist" (formula "11") (term "0,0,0"))
                     (rule "commute_or_2" (formula "11") (term "1,0,0,0"))
                     (rule "shift_paren_or" (formula "11") (term "0,1,0,0,0"))
                     (rule "commute_or" (formula "11") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "11") (term "0,1,0,0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "11") (term "1,0,1,0,0,0"))
                     (rule "polySimp_pullOutFactor1" (formula "11") (term "0,1,0,1,0,0,0"))
                     (rule "add_literals" (formula "11") (term "1,0,1,0,1,0,0,0"))
                     (rule "times_zero_1" (formula "11") (term "0,1,0,1,0,0,0"))
                     (rule "leq_literals" (formula "11") (term "1,0,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "cnf_rightDist" (formula "11") (term "0,0,0"))
                     (rule "commute_or_2" (formula "11") (term "1,0,0,0"))
                     (rule "shift_paren_or" (formula "11") (term "0,1,0,0,0"))
                     (rule "inEqSimp_or_tautInEq2" (formula "11") (term "0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "11") (term "1,1,0,0,1,0,0,0"))
                     (rule "qeq_literals" (formula "11") (term "1,0,0,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "cnf_rightDist" (formula "11") (term "0,0,0"))
                     (rule "shift_paren_or" (formula "11") (term "1,0,0,0"))
                     (rule "commute_or_2" (formula "11") (term "0,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "cnf_rightDist" (formula "11") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "11") (term "0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "11") (term "1,0,0,0,0"))
                     (rule "commute_or" (formula "11") (term "0,0,0,0,0,0"))
                     (rule "ex_pull_out3" (formula "14") (term "0"))
                     (rule "cnf_rightDist" (formula "14") (term "0,0"))
                     (rule "shift_paren_or" (formula "14") (term "1,0,0"))
                     (rule "commute_or_2" (formula "14") (term "0,1,0,0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "14") (term "1,0,0"))
                     (rule "polySimp_addAssoc" (formula "14") (term "1,1,1,0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "14") (term "1,1,0,0"))
                     (rule "polySimp_pullOutFactor1" (formula "14") (term "0,1,1,0,0"))
                     (rule "add_literals" (formula "14") (term "1,0,1,1,0,0"))
                     (rule "times_zero_1" (formula "14") (term "0,1,1,0,0"))
                     (rule "leq_literals" (formula "14") (term "1,1,0,0"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "cnf_rightDist" (formula "14") (term "0,0"))
                     (rule "shift_paren_or" (formula "14") (term "1,0,0"))
                     (rule "inEqSimp_or_tautInEq3" (formula "14") (term "0,1,0,0"))
                     (rule "add_literals" (formula "14") (term "1,1,0,1,0,0"))
                     (rule "qeq_literals" (formula "14") (term "1,0,1,0,0"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "cnf_rightDist" (formula "14") (term "0,0"))
                     (rule "shift_paren_or" (formula "14") (term "1,0,0"))
                     (rule "commute_or_2" (formula "14") (term "0,1,0,0"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "cnf_rightDist" (formula "14") (term "0,0,0"))
                     (rule "commute_or_2" (formula "14") (term "1,0,0,0"))
                     (rule "shift_paren_or" (formula "14") (term "0,1,0,0,0"))
                     (rule "commute_or" (formula "14") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "14") (term "0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "14") (term "1,1,0,1,0,0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "14") (term "1,0,1,0,0,0"))
                     (rule "polySimp_pullOutFactor1" (formula "14") (term "0,1,0,1,0,0,0"))
                     (rule "add_literals" (formula "14") (term "1,0,1,0,1,0,0,0"))
                     (rule "times_zero_1" (formula "14") (term "0,1,0,1,0,0,0"))
                     (rule "leq_literals" (formula "14") (term "1,0,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "cnf_rightDist" (formula "14") (term "0,0,0"))
                     (rule "commute_or_2" (formula "14") (term "1,0,0,0"))
                     (rule "shift_paren_or" (formula "14") (term "0,1,0,0,0"))
                     (rule "inEqSimp_or_tautInEq2" (formula "14") (term "0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "14") (term "1,1,0,0,1,0,0,0"))
                     (rule "qeq_literals" (formula "14") (term "1,0,0,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "cnf_rightDist" (formula "14") (term "0,0,0"))
                     (rule "shift_paren_or" (formula "14") (term "1,0,0,0"))
                     (rule "commute_or_2" (formula "14") (term "0,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "cnf_rightDist" (formula "14") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "14") (term "0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "14") (term "1,0,0,0,0"))
                     (rule "commute_or" (formula "14") (term "0,0,0,0,0,0"))
                     (rule "allLeft" (formula "24") (inst "t=Z(0(#))"))
                     (rule "leq_literals" (formula "24") (term "1,0"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                     (rule "applyEq" (formula "24") (term "0,0,0") (ifseqformula "34"))
                     (rule "replace_known_right" (formula "24") (term "0,0") (ifseqformula "42"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "true_left" (formula "24"))
                     (rule "allLeft" (formula "31") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                     (rule "typeEqDerived" (formula "31") (term "0,0,0") (ifseqformula "38"))
                      (builtin "One Step Simplification" (formula "31"))
                     (rule "true_left" (formula "31"))
                     (rule "allLeft" (formula "30") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                     (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                     (rule "applyEq" (formula "30") (term "0,0,0,0") (ifseqformula "38"))
                     (rule "replace_known_right" (formula "30") (term "0,0,0") (ifseqformula "40"))
                      (builtin "One Step Simplification" (formula "30"))
                     (rule "true_left" (formula "30"))
                     (rule "allLeft" (formula "38") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                     (rule "inEqSimp_homoInEq1" (formula "38") (term "1"))
                     (rule "polySimp_mulComm0" (formula "38") (term "1,0,1"))
                     (rule "polySimp_rightDist" (formula "38") (term "1,0,1"))
                     (rule "mul_literals" (formula "38") (term "0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "38") (term "0,1"))
                     (rule "polySimp_addComm0" (formula "38") (term "0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,1"))
                     (rule "add_literals" (formula "38") (term "1,1,0,1"))
                     (rule "times_zero_1" (formula "38") (term "1,0,1"))
                     (rule "add_zero_right" (formula "38") (term "0,1"))
                     (rule "leq_literals" (formula "38") (term "1"))
                      (builtin "One Step Simplification" (formula "38"))
                     (rule "inEqSimp_homoInEq0" (formula "38") (term "1"))
                     (rule "polySimp_mulComm0" (formula "38") (term "1,0,1"))
                     (rule "polySimp_rightDist" (formula "38") (term "1,0,1"))
                     (rule "mul_literals" (formula "38") (term "0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "38") (term "0,1"))
                     (rule "add_literals" (formula "38") (term "0,0,1"))
                     (rule "add_zero_left" (formula "38") (term "0,1"))
                     (rule "applyEq" (formula "38") (term "1,1,0") (ifseqformula "34"))
                     (rule "inEqSimp_invertInEq1" (formula "38") (term "1"))
                     (rule "mul_literals" (formula "38") (term "1,1"))
                     (rule "polySimp_mulLiterals" (formula "38") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "38") (term "0,1"))
                     (rule "inEqSimp_contradInEq1" (formula "38") (term "1") (ifseqformula "20"))
                     (rule "qeq_literals" (formula "38") (term "0,1"))
                      (builtin "One Step Simplification" (formula "38"))
                     (rule "allLeft" (formula "39") (inst "t=Z(0(#))"))
                     (rule "leq_literals" (formula "39") (term "1,0"))
                      (builtin "One Step Simplification" (formula "39"))
                     (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                     (rule "applyEq" (formula "39") (term "1,1,0") (ifseqformula "33"))
                     (rule "inEqSimp_contradInEq1" (formula "39") (term "1") (ifseqformula "20"))
                     (rule "qeq_literals" (formula "39") (term "0,1"))
                      (builtin "One Step Simplification" (formula "39"))
                     (rule "allLeft" (formula "26") (inst "t=Z(0(#))"))
                     (rule "leq_literals" (formula "26") (term "1,0"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                     (rule "applyEq" (formula "26") (term "1,0,0,0") (ifseqformula "34"))
                     (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "20"))
                     (rule "qeq_literals" (formula "26") (term "0,1"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "notLeft" (formula "26"))
                     (rule "allLeft" (formula "26") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                     (rule "inEqSimp_homoInEq0" (formula "26") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "26") (term "1,0,1,0"))
                     (rule "mul_literals" (formula "26") (term "0,1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "26") (term "0,1,0"))
                     (rule "add_literals" (formula "26") (term "0,0,1,0"))
                     (rule "add_zero_left" (formula "26") (term "0,1,0"))
                     (rule "inEqSimp_homoInEq1" (formula "26") (term "1"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,0,1"))
                     (rule "polySimp_rightDist" (formula "26") (term "1,0,1"))
                     (rule "mul_literals" (formula "26") (term "0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "26") (term "0,1"))
                     (rule "polySimp_addComm0" (formula "26") (term "0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,1"))
                     (rule "add_literals" (formula "26") (term "1,1,0,1"))
                     (rule "times_zero_1" (formula "26") (term "1,0,1"))
                     (rule "add_zero_right" (formula "26") (term "0,1"))
                     (rule "leq_literals" (formula "26") (term "1"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "applyEq" (formula "26") (term "1,0,0,0") (ifseqformula "35"))
                     (rule "inEqSimp_invertInEq1" (formula "26") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "0,1"))
                     (rule "times_zero_2" (formula "26") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "26") (term "0,1"))
                     (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "20"))
                     (rule "qeq_literals" (formula "26") (term "0,1"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "notLeft" (formula "26"))
                     (rule "allLeft" (formula "24") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                     (rule "inEqSimp_homoInEq1" (formula "24") (term "1"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,1"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,0,1"))
                     (rule "mul_literals" (formula "24") (term "0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "24") (term "0,1"))
                     (rule "polySimp_addComm0" (formula "24") (term "0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,1"))
                     (rule "add_literals" (formula "24") (term "1,1,0,1"))
                     (rule "times_zero_1" (formula "24") (term "1,0,1"))
                     (rule "add_literals" (formula "24") (term "0,1"))
                     (rule "leq_literals" (formula "24") (term "1"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "inEqSimp_homoInEq0" (formula "24") (term "1"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,1"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,0,1"))
                     (rule "mul_literals" (formula "24") (term "0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "24") (term "0,1"))
                     (rule "add_literals" (formula "24") (term "0,0,1"))
                     (rule "add_zero_left" (formula "24") (term "0,1"))
                     (rule "applyEq" (formula "24") (term "0,0,0") (ifseqformula "35"))
                     (rule "replace_known_right" (formula "24") (term "0,0") (ifseqformula "47"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "true_left" (formula "24"))
                     (rule "allLeft" (formula "25") (inst "t=Z(0(#))"))
                     (rule "leq_literals" (formula "25") (term "1,0"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                     (rule "applyEq" (formula "25") (term "1,0,1,0") (ifseqformula "34"))
                     (rule "applyEq" (formula "25") (term "0,0,0") (ifseqformula "34"))
                     (rule "replace_known_right" (formula "25") (term "0,0") (ifseqformula "46"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                     (rule "qeq_literals" (formula "25") (term "0,1"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "allLeft" (formula "26") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                     (rule "inEqSimp_homoInEq0" (formula "26") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "26") (term "1,0,1,0"))
                     (rule "mul_literals" (formula "26") (term "0,1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "26") (term "0,1,0"))
                     (rule "add_literals" (formula "26") (term "0,0,1,0"))
                     (rule "add_zero_left" (formula "26") (term "0,1,0"))
                     (rule "inEqSimp_homoInEq1" (formula "26") (term "1"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,0,1"))
                     (rule "polySimp_rightDist" (formula "26") (term "1,0,1"))
                     (rule "mul_literals" (formula "26") (term "0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "26") (term "0,1"))
                     (rule "polySimp_addComm0" (formula "26") (term "0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,1"))
                     (rule "add_literals" (formula "26") (term "1,1,0,1"))
                     (rule "times_zero_1" (formula "26") (term "1,0,1"))
                     (rule "add_literals" (formula "26") (term "0,1"))
                     (rule "leq_literals" (formula "26") (term "1"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "applyEq" (formula "26") (term "0,0,0") (ifseqformula "36"))
                     (rule "replace_known_right" (formula "26") (term "0,0") (ifseqformula "48"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "applyEq" (formula "26") (term "1,0,0") (ifseqformula "36"))
                     (rule "inEqSimp_invertInEq1" (formula "26") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "0,1"))
                     (rule "times_zero_2" (formula "26") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "26") (term "0,1"))
                     (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "20"))
                     (rule "qeq_literals" (formula "26") (term "0,1"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "allLeft" (formula "27") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                     (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                     (rule "applyEq" (formula "27") (term "1,0,1,0,0") (ifseqformula "19"))
                     (rule "replace_known_left" (formula "27") (term "1,0,0") (ifseqformula "18"))
                      (builtin "One Step Simplification" (formula "27"))
                     (rule "true_left" (formula "27"))
                     (rule "cut_direct" (formula "1") (term "0,0"))
                     (branch "CUT: (FileReader)self.list.values[i_0 + self.index] = null TRUE"
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "36") (term "1") (ifseqformula "5"))
                        (rule "replace_known_left" (formula "36") (term "1") (ifseqformula "26"))
                         (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "49")))
                        (rule "true_left" (formula "36"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "34") (term "0") (ifseqformula "5"))
                        (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "35"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "true_left" (formula "34"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "35") (term "1") (ifseqformula "5"))
                        (rule "replace_known_left" (formula "35") (term "1") (ifseqformula "25"))
                         (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "48")))
                        (rule "true_left" (formula "35"))
                        (rule "commute_and_2" (formula "11") (term "0,0,0"))
                        (rule "seqGetAlphaCast" (formula "39") (term "0"))
                        (rule "castDel" (formula "39") (term "0"))
                         (builtin "One Step Simplification" (formula "39"))
                        (rule "true_left" (formula "39"))
                        (rule "allLeft" (formula "37") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                        (rule "inEqSimp_homoInEq1" (formula "37") (term "1"))
                        (rule "polySimp_addComm1" (formula "37") (term "0,1"))
                        (rule "applyEq" (formula "37") (term "1,0,0,0") (ifseqformula "19"))
                        (rule "eqSymm" (formula "37") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1"))
                        (rule "polySimp_mulComm0" (formula "37") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "37") (term "1,1"))
                        (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1"))
                        (rule "mul_literals" (formula "37") (term "0,1,1"))
                        (rule "polySimp_elimOne" (formula "37") (term "1,1,1"))
                        (rule "inEqSimp_contradInEq1" (formula "37") (term "1,0") (ifseqformula "10"))
                        (rule "qeq_literals" (formula "37") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "37"))
                        (rule "allLeft" (formula "38") (inst "t=Z(0(#))"))
                        (rule "add_zero_right" (formula "38") (term "1,1,0,0"))
                        (rule "leq_literals" (formula "38") (term "1,0"))
                         (builtin "One Step Simplification" (formula "38"))
                        (rule "inEqSimp_homoInEq1" (formula "38") (term "1"))
                        (rule "times_zero_2" (formula "38") (term "1,0,1"))
                        (rule "add_zero_right" (formula "38") (term "0,1"))
                        (rule "applyEq" (formula "38") (term "1,0,0") (ifseqformula "35"))
                        (rule "eqSymm" (formula "38") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1"))
                        (rule "mul_literals" (formula "38") (term "1,1"))
                        (rule "allLeft" (formula "40") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                        (rule "inEqSimp_commuteGeq" (formula "40") (term "1,0,0,0,0"))
                        (rule "applyEq" (formula "40") (term "1,0,0,0,0,0,0,0") (ifseqformula "19"))
                        (rule "inEqSimp_contradInEq1" (formula "40") (term "1,0,0,0,0,0") (ifseqformula "10"))
                        (rule "qeq_literals" (formula "40") (term "0,1,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "40"))
                        (rule "inEqSimp_contradInEq1" (formula "40") (term "1,0,0,0,0") (ifseqformula "13"))
                        (rule "inEqSimp_homoInEq1" (formula "40") (term "0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "40") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "40") (term "1,1,0,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "40") (term "1,0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "40") (term "0,0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "40") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "40"))
                        (rule "allLeft" (formula "41") (inst "t=Z(0(#))"))
                        (rule "leq_literals" (formula "41") (term "1,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "41"))
                        (rule "inEqSimp_commuteGeq" (formula "41") (term "1,0,0,0,0"))
                        (rule "applyEq" (formula "41") (term "1,0,0,0,0,0,0") (ifseqformula "35"))
                        (rule "inEqSimp_contradInEq1" (formula "41") (term "1,0,0,0,0") (ifseqformula "20"))
                        (rule "qeq_literals" (formula "41") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "41"))
                        (rule "allLeft" (formula "42") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                        (rule "inEqSimp_homoInEq1" (formula "42") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "42") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "42") (term "1,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "42") (term "0,1,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "42") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "42") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,1,0,0,0,0"))
                        (rule "add_literals" (formula "42") (term "1,1,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "42") (term "1,0,1,0,0,0,0"))
                        (rule "add_zero_right" (formula "42") (term "0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "42") (term "1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "42"))
                        (rule "inEqSimp_homoInEq0" (formula "42") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "42") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "42") (term "1,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "42") (term "0,1,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "42") (term "0,1,0,0,0,0"))
                        (rule "add_literals" (formula "42") (term "0,0,1,0,0,0,0"))
                        (rule "add_zero_left" (formula "42") (term "0,1,0,0,0,0"))
                        (rule "applyEq" (formula "42") (term "1,0,0,0,0,0,0") (ifseqformula "36"))
                        (rule "inEqSimp_invertInEq1" (formula "42") (term "1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "42") (term "0,1,0,0,0,0"))
                        (rule "times_zero_2" (formula "42") (term "1,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "42") (term "0,1,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "42") (term "1,0,0,0,0") (ifseqformula "20"))
                        (rule "qeq_literals" (formula "42") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "42"))
                        (rule "commute_or_2" (formula "40") (term "0"))
                        (rule "commute_or_2" (formula "41") (term "0"))
                        (rule "inEqSimp_or_weaken2" (formula "41") (term "0,0"))
                        (rule "add_literals" (formula "41") (term "1,0,1,0,0"))
                         (builtin "One Step Simplification" (formula "41"))
                        (rule "commute_and_2" (formula "14") (term "0,0,0"))
                        (rule "commute_or_2" (formula "42") (term "0"))
                        (rule "inEqSimp_or_weaken3" (formula "42") (term "0"))
                        (rule "polySimp_addAssoc" (formula "42") (term "1,0,1,0"))
                        (rule "add_literals" (formula "42") (term "0,1,0,1,0"))
                        (rule "add_zero_left" (formula "42") (term "1,0,1,0"))
                         (builtin "One Step Simplification" (formula "42"))
                        (rule "allLeft" (formula "39") (inst "t=i_0"))
                        (rule "inEqSimp_homoInEq1" (formula "39") (term "1"))
                        (rule "polySimp_addComm1" (formula "39") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1"))
                        (rule "polySimp_mulComm0" (formula "39") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "39") (term "1,1"))
                        (rule "mul_literals" (formula "39") (term "0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1"))
                        (rule "polySimp_elimOne" (formula "39") (term "1,1,1"))
                        (rule "inEqSimp_contradInEq1" (formula "39") (term "1,0") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "39") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "39"))
                        (rule "allLeft" (formula "30") (inst "t=add(i_0,
    int::select(heap, self, LinkedListIterator::$index))"))
                        (rule "replace_known_left" (formula "30") (term "0,0,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                        (rule "inEqSimp_homoInEq0" (formula "30") (term "0"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "30") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "30") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "30") (term "0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "30") (term "1") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "30") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "30") (term "0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1"))
                        (rule "add_literals" (formula "30") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "30") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1"))
                        (rule "add_literals" (formula "30") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "30") (term "0,0,1"))
                        (rule "leq_literals" (formula "30") (term "0,1"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "30"))
                        (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "29"))
                        (rule "mul_literals" (formula "9") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0"))
                        (rule "add_literals" (formula "9") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                        (rule "polySimp_elimOne" (formula "9") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "9") (term "0"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "closeFalse" (formula "9"))
                     )
                     (branch "CUT: (FileReader)self.list.values[i_0 + self.index] = null FALSE"
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "34") (term "1,0") (ifseqformula "5"))
                        (rule "replace_known_right" (formula "34") (term "0") (ifseqformula "50"))
                         (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "26")))
                        (rule "true_left" (formula "34"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "34") (term "0") (ifseqformula "5"))
                        (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "35"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "true_left" (formula "34"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "35") (term "1") (ifseqformula "5"))
                        (rule "replace_known_right" (formula "35") (term "0") (ifseqformula "49"))
                         (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "25")))
                        (rule "true_left" (formula "35"))
                        (rule "commute_and_2" (formula "11") (term "0,0,0"))
                        (rule "seqGetAlphaCast" (formula "39") (term "0"))
                        (rule "castDel" (formula "39") (term "0"))
                         (builtin "One Step Simplification" (formula "39"))
                        (rule "true_left" (formula "39"))
                        (rule "allLeft" (formula "37") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                        (rule "inEqSimp_homoInEq1" (formula "37") (term "1"))
                        (rule "polySimp_addComm1" (formula "37") (term "0,1"))
                        (rule "applyEq" (formula "37") (term "1,0,0,0") (ifseqformula "19"))
                        (rule "eqSymm" (formula "37") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1"))
                        (rule "polySimp_mulComm0" (formula "37") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "37") (term "1,1"))
                        (rule "mul_literals" (formula "37") (term "0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1"))
                        (rule "polySimp_elimOne" (formula "37") (term "1,1,1"))
                        (rule "inEqSimp_contradInEq1" (formula "37") (term "1,0") (ifseqformula "10"))
                        (rule "qeq_literals" (formula "37") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "37"))
                        (rule "allLeft" (formula "38") (inst "t=Z(0(#))"))
                        (rule "add_zero_right" (formula "38") (term "1,1,0,0"))
                        (rule "leq_literals" (formula "38") (term "1,0"))
                         (builtin "One Step Simplification" (formula "38"))
                        (rule "inEqSimp_homoInEq1" (formula "38") (term "1"))
                        (rule "times_zero_2" (formula "38") (term "1,0,1"))
                        (rule "add_zero_right" (formula "38") (term "0,1"))
                        (rule "applyEq" (formula "38") (term "1,0,0") (ifseqformula "35"))
                        (rule "eqSymm" (formula "38") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1"))
                        (rule "mul_literals" (formula "38") (term "1,1"))
                        (rule "allLeft" (formula "40") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                        (rule "inEqSimp_commuteGeq" (formula "40") (term "1,0,0,0,0"))
                        (rule "applyEq" (formula "40") (term "1,0,0,0,0,0,0,0") (ifseqformula "19"))
                        (rule "inEqSimp_contradInEq1" (formula "40") (term "1,0,0,0,0") (ifseqformula "13"))
                        (rule "inEqSimp_homoInEq1" (formula "40") (term "0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "40") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "40") (term "1,1,0,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "40") (term "1,0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "40") (term "0,0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "40") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "40"))
                        (rule "inEqSimp_contradInEq1" (formula "40") (term "1,0,0,0,0") (ifseqformula "10"))
                        (rule "qeq_literals" (formula "40") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "40"))
                        (rule "allLeft" (formula "41") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                        (rule "inEqSimp_homoInEq1" (formula "41") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "41") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "41") (term "1,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "41") (term "0,1,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "41") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "41") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "41") (term "0,1,0,0,0,0"))
                        (rule "add_literals" (formula "41") (term "1,1,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "41") (term "1,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "41") (term "0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "41") (term "1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "41"))
                        (rule "inEqSimp_homoInEq0" (formula "41") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "41") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "41") (term "1,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "41") (term "0,1,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "41") (term "0,1,0,0,0,0"))
                        (rule "add_literals" (formula "41") (term "0,0,1,0,0,0,0"))
                        (rule "add_zero_left" (formula "41") (term "0,1,0,0,0,0"))
                        (rule "applyEq" (formula "41") (term "1,0,0,0,0,0,0") (ifseqformula "36"))
                        (rule "inEqSimp_invertInEq1" (formula "41") (term "1,0,0,0,0"))
                        (rule "mul_literals" (formula "41") (term "1,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "41") (term "0,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "41") (term "0,1,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "41") (term "1,0,0,0,0") (ifseqformula "20"))
                        (rule "qeq_literals" (formula "41") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "41"))
                        (rule "allLeft" (formula "42") (inst "t=Z(0(#))"))
                        (rule "leq_literals" (formula "42") (term "1,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "42"))
                        (rule "inEqSimp_commuteGeq" (formula "42") (term "1,0,0,0,0"))
                        (rule "applyEq" (formula "42") (term "1,0,0,0,0,0,0") (ifseqformula "35"))
                        (rule "inEqSimp_contradInEq1" (formula "42") (term "1,0,0,0,0") (ifseqformula "20"))
                        (rule "qeq_literals" (formula "42") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "42"))
                        (rule "commute_or_2" (formula "40") (term "0"))
                        (rule "commute_and_2" (formula "14") (term "0,0,0"))
                        (rule "commute_or_2" (formula "41") (term "0"))
                        (rule "inEqSimp_or_weaken3" (formula "41") (term "0"))
                        (rule "polySimp_addAssoc" (formula "41") (term "1,0,1,0"))
                        (rule "add_literals" (formula "41") (term "0,1,0,1,0"))
                        (rule "add_zero_left" (formula "41") (term "1,0,1,0"))
                         (builtin "One Step Simplification" (formula "41"))
                        (rule "commute_or_2" (formula "42") (term "0"))
                        (rule "inEqSimp_or_weaken2" (formula "42") (term "0,0"))
                        (rule "add_literals" (formula "42") (term "1,0,1,0,0"))
                         (builtin "One Step Simplification" (formula "42"))
                        (rule "allLeft" (formula "33") (inst "t=add(i_0,
    int::select(heap, self, LinkedListIterator::$index))"))
                        (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                        (rule "inEqSimp_homoInEq0" (formula "33") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "33") (term "0,1,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "33") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "33") (term "0,1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "33") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "33") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "33") (term "0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                        (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "33") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                        (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "33") (term "0,0,1"))
                        (rule "leq_literals" (formula "33") (term "0,1"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "allLeft" (formula "48") (inst "t=add(i_0,
    int::select(heap, self, LinkedListIterator::$index))"))
                        (rule "inEqSimp_commuteGeq" (formula "48") (term "1"))
                        (rule "inEqSimp_homoInEq0" (formula "48") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "48") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "48") (term "1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "48") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "48") (term "0,1,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "48") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "48") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "48") (term "0,1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "48") (term "1") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq1" (formula "48") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "48") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "48") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "48") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "48") (term "0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "48") (term "0,0,1"))
                        (rule "add_literals" (formula "48") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "48") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "48") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "48") (term "0,0,1"))
                        (rule "add_literals" (formula "48") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "48") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "48") (term "0,0,1"))
                        (rule "leq_literals" (formula "48") (term "0,1"))
                         (builtin "One Step Simplification" (formula "48"))
                        (rule "allLeft" (formula "32") (inst "t=add(i_0,
    int::select(heap, self, LinkedListIterator::$index))"))
                        (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                        (rule "inEqSimp_homoInEq0" (formula "32") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "32") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "32") (term "0,1,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "32") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "32") (term "0,1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "32") (term "1") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "32") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "32") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "32") (term "0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
                        (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "32") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
                        (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "32") (term "0,0,1"))
                        (rule "leq_literals" (formula "32") (term "0,1"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "allLeft" (formula "41") (inst "t=i_0"))
                        (rule "inEqSimp_homoInEq1" (formula "41") (term "1"))
                        (rule "polySimp_addComm1" (formula "41") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1"))
                        (rule "polySimp_mulComm0" (formula "41") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "41") (term "1,1"))
                        (rule "mul_literals" (formula "41") (term "0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1"))
                        (rule "polySimp_elimOne" (formula "41") (term "1,1,1"))
                        (rule "inEqSimp_contradInEq1" (formula "41") (term "1,0") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "41") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "41"))
                        (rule "allLeft" (formula "31") (inst "t=add(i_0,
    int::select(heap, self, LinkedListIterator::$index))"))
                        (rule "replace_known_right" (formula "31") (term "0,0,0") (ifseqformula "53"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                        (rule "inEqSimp_homoInEq0" (formula "31") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "31") (term "0,1,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "31") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "31") (term "0,1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "31") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "31") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "31") (term "0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,0,0,1"))
                        (rule "add_literals" (formula "31") (term "1,1,0,0,0,0,1"))
                        (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,1"))
                        (rule "add_zero_right" (formula "31") (term "0,0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1"))
                        (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "31") (term "0,0,1"))
                        (rule "leq_literals" (formula "31") (term "0,1"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "seqGetAlphaCast" (formula "49") (term "0"))
                        (rule "castDel" (formula "49") (term "0"))
                         (builtin "One Step Simplification" (formula "49"))
                        (rule "true_left" (formula "49"))
                        (rule "seqGetAlphaCast" (formula "50") (term "0"))
                        (rule "castDel" (formula "50") (term "0"))
                         (builtin "One Step Simplification" (formula "50"))
                        (rule "true_left" (formula "50"))
                        (rule "commute_and_2" (formula "11") (term "0,0"))
                        (rule "commute_and_2" (formula "14") (term "0,0"))
                        (rule "seqGetAlphaCast" (formula "53") (term "0"))
                        (rule "castedGetAny" (formula "1") (term "0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "cut_direct" (formula "1") (term "0,1"))
                        (branch "CUT: FileReader::instance(self.list.values[ i_0 + self.index]) = TRUE TRUE"
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "notLeft" (formula "2"))
                           (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "true_left" (formula "35"))
                           (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "52"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "replace_known_left" (formula "33") (term "1") (ifseqformula "31"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "true_left" (formula "33"))
                           (rule "replace_known_left" (formula "49") (term "1") (ifseqformula "31"))
                            (builtin "One Step Simplification" (formula "49"))
                           (rule "true_left" (formula "49"))
                           (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "31"))
                           (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "3") (term "0,0"))
                           (rule "add_literals" (formula "3") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "3") (term "1,0,0"))
                           (rule "add_literals" (formula "3") (term "0,0"))
                           (rule "qeq_literals" (formula "3") (term "0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "30"))
                           (rule "mul_literals" (formula "9") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "9") (term "0"))
                           (rule "add_literals" (formula "9") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                           (rule "polySimp_elimOne" (formula "9") (term "0"))
                           (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "9"))
                           (rule "leq_literals" (formula "8") (term "0"))
                            (builtin "One Step Simplification" (formula "8"))
                           (rule "true_left" (formula "8"))
                           (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "8"))
                           (rule "qeq_literals" (formula "2") (term "0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "closeFalse" (formula "2"))
                        )
                        (branch "CUT: FileReader::instance(self.list.values[ i_0 + self.index]) = TRUE FALSE"
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "replace_known_right" (formula "34") (term "0") (ifseqformula "52"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "replace_known_left" (formula "50") (term "1") (ifseqformula "34"))
                            (builtin "One Step Simplification" (formula "50"))
                           (rule "true_left" (formula "50"))
                           (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "34"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "true_left" (formula "32"))
                           (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "33"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "inEqSimp_subsumption0" (formula "2") (ifseqformula "32"))
                           (rule "inEqSimp_homoInEq0" (formula "2") (term "0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
                           (rule "mul_literals" (formula "2") (term "0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
                           (rule "add_literals" (formula "2") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "2") (term "0,0"))
                           (rule "add_literals" (formula "2") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "2") (term "1,0,0"))
                           (rule "add_zero_right" (formula "2") (term "0,0"))
                           (rule "qeq_literals" (formula "2") (term "0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "31"))
                           (rule "mul_literals" (formula "8") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "8") (term "0"))
                           (rule "add_literals" (formula "8") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                           (rule "polySimp_elimOne" (formula "8") (term "0"))
                           (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "8"))
                           (rule "qeq_literals" (formula "1") (term "0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                  )
               )
            )
            (branch
               (rule "andRight" (formula "39"))
               (branch
                  (rule "andRight" (formula "39"))
                  (branch
                     (rule "andRight" (formula "39"))
                     (branch
                        (rule "andRight" (formula "39"))
                        (branch
                           (rule "allRight" (formula "39") (inst "sk=i_3_0"))
                           (rule "orRight" (formula "39"))
                           (rule "orRight" (formula "39"))
                           (rule "inEqSimp_leqRight" (formula "39"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "40"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "20"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "nnf_ex2all" (formula "42"))
                           (rule "nnf_notAnd" (formula "1") (term "0"))
                           (rule "nnf_notAnd" (formula "1") (term "1,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "nnf_notAnd" (formula "1") (term "0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "nnf_notOr" (formula "1") (term "0,0,0"))
                           (rule "commute_or" (formula "1") (term "1,0"))
                           (rule "commute_or" (formula "1") (term "0,0"))
                           (rule "commute_or_2" (formula "1") (term "0"))
                           (rule "shift_paren_or" (formula "1") (term "0,0"))
                           (rule "cnf_rightDist" (formula "1") (term "0"))
                           (rule "distr_forallAnd" (formula "1"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "shift_paren_or" (formula "1") (term "0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "castedGetAny" (formula "1") (term "1,0,1,1,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,1,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,0,0"))
                           (rule "shift_paren_or" (formula "1") (term "0"))
                           (rule "commute_or" (formula "1") (term "0,0"))
                           (rule "shift_paren_and" (formula "10") (term "0,1,0,1,0"))
                           (rule "shift_paren_and" (formula "13") (term "0,1,0,1,0"))
                           (rule "shift_paren_and" (formula "10") (term "0,1,0"))
                           (rule "shift_paren_and" (formula "13") (term "0,1,0"))
                           (rule "shift_paren_and" (formula "10") (term "0,0,1,0"))
                           (rule "shift_paren_and" (formula "13") (term "0,0,1,0"))
                           (rule "seqGetAlphaCast" (formula "32") (term "0"))
                           (rule "castedGetAny" (formula "32") (term "0"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "true_left" (formula "32"))
                           (rule "shift_paren_and" (formula "10") (term "0,0,0,1,0"))
                           (rule "shift_paren_and" (formula "13") (term "0,0,0,1,0"))
                           (rule "allLeft" (formula "36") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                           (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                           (rule "applyEq" (formula "36") (term "1,1,0,0") (ifseqformula "18"))
                           (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "12"))
                           (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                           (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                           (rule "add_literals" (formula "36") (term "0,0,1"))
                           (rule "leq_literals" (formula "36") (term "0,1"))
                            (builtin "One Step Simplification" (formula "36"))
                           (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "9"))
                           (rule "qeq_literals" (formula "36") (term "0,1"))
                            (builtin "One Step Simplification" (formula "36"))
                           (rule "shift_paren_and" (formula "10") (term "0,0,0,0,1,0"))
                           (rule "cut_direct" (formula "39") (term "0"))
                           (branch "CUT: self.list.size = 0 TRUE"
                               (builtin "One Step Simplification" (formula "40"))
                              (rule "allRight" (formula "40") (inst "sk=iv_0"))
                              (rule "orRight" (formula "40"))
                              (rule "orRight" (formula "40"))
                              (rule "inEqSimp_leqRight" (formula "40"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_geqRight" (formula "41"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "applyEq" (formula "30") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "26") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "16") (term "1,1,0,1,1,0,0,0,0,1,0") (ifseqformula "3"))
                              (rule "add_zero_right" (formula "16") (term "1,0,1,1,0,0,0,0,1,0"))
                              (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "25") (term "0") (ifseqformula "3"))
                              (rule "leq_literals" (formula "25"))
                              (rule "true_left" (formula "25"))
                              (rule "applyEq" (formula "19") (term "2,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "22") (term "0") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "22"))
                              (rule "true_left" (formula "22"))
                              (rule "applyEq" (formula "36") (term "1,1,0,0,0,0,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "29") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "16") (term "1,1,1,1,0,0,0,1,0") (ifseqformula "3"))
                              (rule "add_zero_right" (formula "16") (term "1,1,1,0,0,0,1,0"))
                              (rule "applyEq" (formula "30") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "16") (term "1,1,1,1,0,1,0") (ifseqformula "3"))
                              (rule "add_zero_right" (formula "16") (term "1,1,1,0,1,0"))
                              (rule "applyEq" (formula "34") (term "1,1,0") (ifseqformula "3"))
                              (rule "add_zero_right" (formula "34") (term "1,0"))
                              (rule "applyEq" (formula "36") (term "1,1,0,0,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "15") (term "0") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "15"))
                              (rule "times_zero_2" (formula "15") (term "1,0"))
                              (rule "add_zero_right" (formula "15") (term "0"))
                              (rule "applyEq" (formula "35") (term "1,1,1,0") (ifseqformula "3"))
                              (rule "add_zero_right" (formula "35") (term "1,1,0"))
                              (rule "applyEq" (formula "16") (term "1,1,1,0,0,1,0,0,0,0,1,0") (ifseqformula "3"))
                              (rule "add_zero_right" (formula "16") (term "1,1,0,0,1,0,0,0,0,1,0"))
                              (rule "applyEq" (formula "38") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "31") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "6") (term "0") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "6"))
                              (rule "times_zero_2" (formula "6") (term "1,0"))
                              (rule "add_zero_right" (formula "6") (term "0"))
                              (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "16") (term "1,1,1,0,0") (ifseqformula "3"))
                              (rule "add_zero_right" (formula "16") (term "1,1,0,0"))
                              (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                              (rule "times_zero_2" (formula "1") (term "1,0"))
                              (rule "add_zero_right" (formula "1") (term "0"))
                              (rule "applyEq" (formula "23") (term "1") (ifseqformula "3"))
                              (rule "applyEq" (formula "22") (term "1") (ifseqformula "3"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "15"))
                              (rule "mul_literals" (formula "15") (term "1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                              (rule "mul_literals" (formula "6") (term "1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "CUT: self.list.size = 0 FALSE"
                               (builtin "One Step Simplification" (formula "40"))
                              (rule "false_right" (formula "40"))
                              (rule "inEqSimp_strengthen1" (formula "19") (ifseqformula "39"))
                              (rule "add_zero_right" (formula "19") (term "1"))
                              (rule "inEqSimp_contradEq7" (formula "39") (ifseqformula "19"))
                              (rule "times_zero_1" (formula "39") (term "1,0,0"))
                              (rule "add_zero_right" (formula "39") (term "0,0"))
                              (rule "leq_literals" (formula "39") (term "0"))
                               (builtin "One Step Simplification" (formula "39"))
                              (rule "false_right" (formula "39"))
                              (rule "shift_paren_and" (formula "13") (term "0,0,0,0,1,0"))
                              (rule "shift_paren_and" (formula "10") (term "0,0,0,0,0,1,0"))
                              (rule "ex_pull_out3" (formula "10") (term "0"))
                              (rule "cnf_rightDist" (formula "10") (term "0,0"))
                              (rule "shift_paren_or" (formula "10") (term "1,0,0"))
                              (rule "commute_or_2" (formula "10") (term "0,1,0,0"))
                              (rule "inEqSimp_or_tautInEq1" (formula "10") (term "1,0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "1,1,0,0"))
                              (rule "polySimp_pullOutFactor1" (formula "10") (term "0,1,1,0,0"))
                              (rule "add_literals" (formula "10") (term "1,0,1,1,0,0"))
                              (rule "times_zero_1" (formula "10") (term "0,1,1,0,0"))
                              (rule "leq_literals" (formula "10") (term "1,1,0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "cnf_rightDist" (formula "10") (term "0,0"))
                              (rule "shift_paren_or" (formula "10") (term "1,0,0"))
                              (rule "inEqSimp_or_tautInEq3" (formula "10") (term "0,1,0,0"))
                              (rule "add_zero_right" (formula "10") (term "1,1,0,1,0,0"))
                              (rule "qeq_literals" (formula "10") (term "1,0,1,0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "cnf_rightDist" (formula "10") (term "0,0"))
                              (rule "shift_paren_or" (formula "10") (term "1,0,0"))
                              (rule "commute_or_2" (formula "10") (term "0,1,0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "cnf_rightDist" (formula "10") (term "0,0,0"))
                              (rule "commute_or_2" (formula "10") (term "1,0,0,0"))
                              (rule "shift_paren_or" (formula "10") (term "0,1,0,0,0"))
                              (rule "commute_or" (formula "10") (term "0,0,1,0,0,0"))
                              (rule "inEqSimp_or_tautInEq1" (formula "10") (term "0,1,0,0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "1,0,1,0,0,0"))
                              (rule "polySimp_pullOutFactor1" (formula "10") (term "0,1,0,1,0,0,0"))
                              (rule "add_literals" (formula "10") (term "1,0,1,0,1,0,0,0"))
                              (rule "times_zero_1" (formula "10") (term "0,1,0,1,0,0,0"))
                              (rule "leq_literals" (formula "10") (term "1,0,1,0,0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "cnf_rightDist" (formula "10") (term "0,0,0"))
                              (rule "commute_or_2" (formula "10") (term "1,0,0,0"))
                              (rule "shift_paren_or" (formula "10") (term "0,1,0,0,0"))
                              (rule "inEqSimp_or_tautInEq2" (formula "10") (term "0,0,1,0,0,0"))
                              (rule "add_zero_right" (formula "10") (term "1,1,0,0,1,0,0,0"))
                              (rule "qeq_literals" (formula "10") (term "1,0,0,1,0,0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "cnf_rightDist" (formula "10") (term "0,0,0"))
                              (rule "shift_paren_or" (formula "10") (term "1,0,0,0"))
                              (rule "commute_or_2" (formula "10") (term "0,1,0,0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "cnf_rightDist" (formula "10") (term "0,0,0,0"))
                              (rule "commute_or_2" (formula "10") (term "0,0,0,0,0"))
                              (rule "shift_paren_or" (formula "10") (term "1,0,0,0,0"))
                              (rule "commute_or" (formula "10") (term "0,0,0,0,0,0"))
                              (rule "allLeft" (formula "23") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                              (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                              (rule "applyEq" (formula "23") (term "0,0,0,0") (ifseqformula "18"))
                              (rule "replace_known_right" (formula "23") (term "0,0,0") (ifseqformula "39"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "allLeft" (formula "23") (inst "t=i_3_0"))
                              (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "23") (term "1,0") (ifseqformula "4"))
                              (rule "qeq_literals" (formula "23") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
                              (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "23") (term "0,0,1"))
                              (rule "leq_literals" (formula "23") (term "0,1"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "notLeft" (formula "23"))
                              (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "38"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "allLeft" (formula "25") (inst "t=i_3_0"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "4"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "replace_known_right" (formula "1") (term "1,0") (ifseqformula "38"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "1,0,0,0,0") (ifseqformula "18"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1,0") (ifseqformula "9"))
                              (rule "qeq_literals" (formula "25") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "12"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "26") (inst "t=i_3_0"))
                              (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                              (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "26") (term "0,0,1"))
                              (rule "leq_literals" (formula "26") (term "0,1"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "4"))
                              (rule "qeq_literals" (formula "26") (term "0,1"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "shift_paren_and" (formula "12") (term "0,0,0,0,0,1,0"))
                              (rule "allLeft" (formula "37") (inst "t=i_3_0"))
                              (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "37") (term "1,0") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "37") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "37"))
                              (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                              (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "37") (term "0,0,1"))
                              (rule "leq_literals" (formula "37") (term "0,1"))
                               (builtin "One Step Simplification" (formula "37"))
                              (rule "allLeft" (formula "23") (inst "t=i_3_0"))
                              (rule "replace_known_right" (formula "23") (term "0,0,0") (ifseqformula "43"))
                               (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "40")))
                              (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "23") (term "0") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "23") (term "0,0"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "inEqSimp_contradInEq1" (formula "23") (ifseqformula "2"))
                              (rule "andLeft" (formula "23"))
                              (rule "inEqSimp_homoInEq1" (formula "23"))
                              (rule "polySimp_pullOutFactor1b" (formula "23") (term "0"))
                              (rule "add_literals" (formula "23") (term "1,1,0"))
                              (rule "times_zero_1" (formula "23") (term "1,0"))
                              (rule "add_literals" (formula "23") (term "0"))
                              (rule "leq_literals" (formula "23"))
                              (rule "closeFalse" (formula "23"))
                           )
                        )
                        (branch
                           (rule "allRight" (formula "39") (inst "sk=i_2_0"))
                           (rule "orRight" (formula "39"))
                           (rule "orRight" (formula "39"))
                           (rule "inEqSimp_leqRight" (formula "39"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "40"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "20"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "nnf_ex2all" (formula "42"))
                           (rule "nnf_notAnd" (formula "1") (term "0"))
                           (rule "nnf_notAnd" (formula "1") (term "0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "nnf_notAnd" (formula "1") (term "1,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "nnf_notOr" (formula "1") (term "0,0,0"))
                           (rule "commute_or" (formula "1") (term "1,0"))
                           (rule "commute_or" (formula "1") (term "0,0"))
                           (rule "commute_or_2" (formula "1") (term "0"))
                           (rule "shift_paren_or" (formula "1") (term "0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "cnf_rightDist" (formula "1") (term "0"))
                           (rule "distr_forallAnd" (formula "1"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "shift_paren_or" (formula "1") (term "0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,0"))
                           (rule "commute_or" (formula "1") (term "0"))
                           (rule "shift_paren_and" (formula "10") (term "0,1,0,1,0"))
                           (rule "shift_paren_and" (formula "13") (term "0,1,0,1,0"))
                           (rule "shift_paren_and" (formula "10") (term "0,1,0"))
                           (rule "shift_paren_and" (formula "13") (term "0,1,0"))
                           (rule "shift_paren_and" (formula "10") (term "0,0,1,0"))
                           (rule "shift_paren_and" (formula "13") (term "0,0,1,0"))
                           (rule "seqGetAlphaCast" (formula "32") (term "0"))
                           (rule "castedGetAny" (formula "32") (term "0"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "true_left" (formula "32"))
                           (rule "shift_paren_and" (formula "10") (term "0,0,0,1,0"))
                           (rule "shift_paren_and" (formula "13") (term "0,0,0,1,0"))
                           (rule "allLeft" (formula "36") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                           (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                           (rule "applyEq" (formula "36") (term "1,1,0,0") (ifseqformula "18"))
                           (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "12"))
                           (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                           (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "36") (term "0,0,1"))
                           (rule "leq_literals" (formula "36") (term "0,1"))
                            (builtin "One Step Simplification" (formula "36"))
                           (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "9"))
                           (rule "qeq_literals" (formula "36") (term "0,1"))
                            (builtin "One Step Simplification" (formula "36"))
                           (rule "shift_paren_and" (formula "10") (term "0,0,0,0,1,0"))
                           (rule "shift_paren_and" (formula "13") (term "0,0,0,0,1,0"))
                           (rule "cut_direct" (formula "39") (term "0"))
                           (branch "CUT: self.list.size = 0 TRUE"
                               (builtin "One Step Simplification" (formula "40"))
                              (rule "allRight" (formula "40") (inst "sk=iv_0"))
                              (rule "orRight" (formula "40"))
                              (rule "orRight" (formula "40"))
                              (rule "inEqSimp_leqRight" (formula "40"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_geqRight" (formula "41"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                              (rule "mul_literals" (formula "1") (term "1,0"))
                              (rule "add_zero_right" (formula "1") (term "0"))
                              (rule "applyEq" (formula "32") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "33") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "40") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "16") (term "1,1,0,1,0,0,0,0,1,0") (ifseqformula "3"))
                              (rule "add_zero_right" (formula "16") (term "1,0,1,0,0,0,0,1,0"))
                              (rule "applyEq" (formula "19") (term "2,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "38") (term "1,1,0,0,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "29") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "16") (term "1,1,1,0,0") (ifseqformula "3"))
                              (rule "add_zero_right" (formula "16") (term "1,1,0,0"))
                              (rule "applyEq" (formula "15") (term "0") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "15"))
                              (rule "mul_literals" (formula "15") (term "1,0"))
                              (rule "add_zero_right" (formula "15") (term "0"))
                              (rule "applyEq" (formula "16") (term "1,1,1,0,1,0,0,0,0,0,1,0") (ifseqformula "3"))
                              (rule "add_zero_right" (formula "16") (term "1,1,0,1,0,0,0,0,0,1,0"))
                              (rule "applyEq" (formula "37") (term "1,1,1,0") (ifseqformula "3"))
                              (rule "add_literals" (formula "37") (term "1,1,0"))
                              (rule "applyEq" (formula "22") (term "0") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "22"))
                              (rule "true_left" (formula "22"))
                              (rule "applyEq" (formula "16") (term "1,1,1,1,0,1,0") (ifseqformula "3"))
                              (rule "add_zero_right" (formula "16") (term "1,1,1,0,1,0"))
                              (rule "applyEq" (formula "35") (term "1,1,0") (ifseqformula "3"))
                              (rule "add_zero_right" (formula "35") (term "1,0"))
                              (rule "applyEq" (formula "6") (term "0") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "6"))
                              (rule "times_zero_2" (formula "6") (term "1,0"))
                              (rule "add_zero_right" (formula "6") (term "0"))
                              (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "16") (term "1,1,1,1,0,0,0,1,0") (ifseqformula "3"))
                              (rule "add_zero_right" (formula "16") (term "1,1,1,0,0,0,1,0"))
                              (rule "applyEq" (formula "26") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "24") (term "0") (ifseqformula "3"))
                              (rule "leq_literals" (formula "24"))
                              (rule "true_left" (formula "24"))
                              (rule "applyEq" (formula "29") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "26") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "36") (term "1,1,0,0,0,0,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "22") (term "1") (ifseqformula "3"))
                              (rule "applyEq" (formula "23") (term "1") (ifseqformula "3"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "15"))
                              (rule "mul_literals" (formula "15") (term "1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                              (rule "mul_literals" (formula "6") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "CUT: self.list.size = 0 FALSE"
                               (builtin "One Step Simplification" (formula "40"))
                              (rule "false_right" (formula "40"))
                              (rule "inEqSimp_strengthen1" (formula "19") (ifseqformula "39"))
                              (rule "add_zero_right" (formula "19") (term "1"))
                              (rule "inEqSimp_contradEq7" (formula "39") (ifseqformula "19"))
                              (rule "mul_literals" (formula "39") (term "1,0,0"))
                              (rule "add_zero_right" (formula "39") (term "0,0"))
                              (rule "leq_literals" (formula "39") (term "0"))
                               (builtin "One Step Simplification" (formula "39"))
                              (rule "false_right" (formula "39"))
                              (rule "shift_paren_and" (formula "10") (term "0,0,0,0,0,1,0"))
                              (rule "ex_pull_out3" (formula "10") (term "0"))
                              (rule "cnf_rightDist" (formula "10") (term "0,0"))
                              (rule "shift_paren_or" (formula "10") (term "1,0,0"))
                              (rule "commute_or_2" (formula "10") (term "0,1,0,0"))
                              (rule "inEqSimp_or_tautInEq1" (formula "10") (term "1,0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "1,1,0,0"))
                              (rule "polySimp_pullOutFactor1" (formula "10") (term "0,1,1,0,0"))
                              (rule "add_literals" (formula "10") (term "1,0,1,1,0,0"))
                              (rule "times_zero_1" (formula "10") (term "0,1,1,0,0"))
                              (rule "leq_literals" (formula "10") (term "1,1,0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "cnf_rightDist" (formula "10") (term "0,0"))
                              (rule "shift_paren_or" (formula "10") (term "1,0,0"))
                              (rule "inEqSimp_or_tautInEq3" (formula "10") (term "0,1,0,0"))
                              (rule "add_zero_right" (formula "10") (term "1,1,0,1,0,0"))
                              (rule "qeq_literals" (formula "10") (term "1,0,1,0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "cnf_rightDist" (formula "10") (term "0,0"))
                              (rule "shift_paren_or" (formula "10") (term "1,0,0"))
                              (rule "commute_or_2" (formula "10") (term "0,1,0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "cnf_rightDist" (formula "10") (term "0,0,0"))
                              (rule "commute_or_2" (formula "10") (term "1,0,0,0"))
                              (rule "shift_paren_or" (formula "10") (term "0,1,0,0,0"))
                              (rule "commute_or" (formula "10") (term "0,0,1,0,0,0"))
                              (rule "inEqSimp_or_tautInEq1" (formula "10") (term "0,1,0,0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "1,0,1,0,0,0"))
                              (rule "polySimp_pullOutFactor1" (formula "10") (term "0,1,0,1,0,0,0"))
                              (rule "add_literals" (formula "10") (term "1,0,1,0,1,0,0,0"))
                              (rule "times_zero_1" (formula "10") (term "0,1,0,1,0,0,0"))
                              (rule "leq_literals" (formula "10") (term "1,0,1,0,0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "cnf_rightDist" (formula "10") (term "0,0,0"))
                              (rule "commute_or_2" (formula "10") (term "1,0,0,0"))
                              (rule "shift_paren_or" (formula "10") (term "0,1,0,0,0"))
                              (rule "inEqSimp_or_tautInEq2" (formula "10") (term "0,0,1,0,0,0"))
                              (rule "add_zero_right" (formula "10") (term "1,1,0,0,1,0,0,0"))
                              (rule "qeq_literals" (formula "10") (term "1,0,0,1,0,0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "cnf_rightDist" (formula "10") (term "0,0,0"))
                              (rule "shift_paren_or" (formula "10") (term "1,0,0,0"))
                              (rule "commute_or_2" (formula "10") (term "0,1,0,0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "cnf_rightDist" (formula "10") (term "0,0,0,0"))
                              (rule "commute_or_2" (formula "10") (term "0,0,0,0,0"))
                              (rule "shift_paren_or" (formula "10") (term "1,0,0,0,0"))
                              (rule "commute_or" (formula "10") (term "0,0,0,0,0,0"))
                              (rule "shift_paren_and" (formula "13") (term "0,0,0,0,0,1,0"))
                              (rule "allLeft" (formula "30") (inst "t=i_2_0"))
                              (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "30") (term "1") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1"))
                              (rule "add_literals" (formula "30") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "30") (term "0,0,1"))
                              (rule "leq_literals" (formula "30") (term "0,1"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "inEqSimp_contradInEq1" (formula "30") (term "1") (ifseqformula "4"))
                              (rule "qeq_literals" (formula "30") (term "0,1"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "30"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "allLeft" (formula "23") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                              (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                              (rule "applyEq" (formula "23") (term "0,0,0,0") (ifseqformula "18"))
                              (rule "replace_known_right" (formula "23") (term "0,0,0") (ifseqformula "40"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "1,0,0,0,0") (ifseqformula "18"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1,0") (ifseqformula "9"))
                              (rule "qeq_literals" (formula "25") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "12"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "29") (inst "t=i_2_0"))
                              (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                              (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "29") (term "0,0,1"))
                              (rule "leq_literals" (formula "29") (term "0,1"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "4"))
                              (rule "qeq_literals" (formula "29") (term "0,1"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "notLeft" (formula "29"))
                              (rule "allLeft" (formula "27") (inst "t=i_2_0"))
                              (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "27") (term "1,0") (ifseqformula "4"))
                              (rule "qeq_literals" (formula "27") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
                              (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "27") (term "0,0,1"))
                              (rule "leq_literals" (formula "27") (term "0,1"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "notLeft" (formula "27"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "39"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "allLeft" (formula "37") (inst "t=i_2_0"))
                              (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "37") (term "1,0") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "37") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "37"))
                              (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                              (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "37") (term "0,0,1"))
                              (rule "leq_literals" (formula "37") (term "0,1"))
                               (builtin "One Step Simplification" (formula "37"))
                              (rule "typeEqDerived" (formula "29") (term "0") (ifseqformula "37"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "true_left" (formula "29"))
                              (rule "applyEq" (formula "40") (term "0") (ifseqformula "36"))
                              (rule "ex_pull_out3" (formula "12") (term "0"))
                              (rule "cnf_rightDist" (formula "12") (term "0,0"))
                              (rule "shift_paren_or" (formula "12") (term "1,0,0"))
                              (rule "commute_or_2" (formula "12") (term "0,1,0,0"))
                              (rule "inEqSimp_or_tautInEq1" (formula "12") (term "1,0,0"))
                              (rule "polySimp_addAssoc" (formula "12") (term "1,1,1,0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,1,0,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,1,0,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,1,0,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,1,0,0"))
                              (rule "leq_literals" (formula "12") (term "1,1,0,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "cnf_rightDist" (formula "12") (term "0,0"))
                              (rule "shift_paren_or" (formula "12") (term "1,0,0"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0,1,0,0"))
                              (rule "add_zero_right" (formula "12") (term "1,1,0,1,0,0"))
                              (rule "qeq_literals" (formula "12") (term "1,0,1,0,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "cnf_rightDist" (formula "12") (term "0,0"))
                              (rule "shift_paren_or" (formula "12") (term "1,0,0"))
                              (rule "commute_or_2" (formula "12") (term "0,1,0,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "allLeft" (formula "22") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                              (rule "inEqSimp_homoInEq0" (formula "22") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,0,1,0"))
                              (rule "mul_literals" (formula "22") (term "0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "22") (term "0,1,0"))
                              (rule "add_literals" (formula "22") (term "0,0,1,0"))
                              (rule "add_zero_left" (formula "22") (term "0,1,0"))
                              (rule "inEqSimp_homoInEq1" (formula "22") (term "1"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,1"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,0,1"))
                              (rule "mul_literals" (formula "22") (term "0,1,0,1"))
                              (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                              (rule "polySimp_addComm0" (formula "22") (term "0,0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,1"))
                              (rule "add_literals" (formula "22") (term "1,1,0,1"))
                              (rule "times_zero_1" (formula "22") (term "1,0,1"))
                              (rule "add_literals" (formula "22") (term "0,1"))
                              (rule "leq_literals" (formula "22") (term "1"))
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "applyEq" (formula "22") (term "0,0,0") (ifseqformula "33"))
                              (rule "replace_known_right" (formula "22") (term "0,0") (ifseqformula "45"))
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "true_left" (formula "22"))
                              (rule "allLeft" (formula "29") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                              (rule "typeEqDerived" (formula "29") (term "0,0,0") (ifseqformula "36"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "true_left" (formula "29"))
                              (rule "allLeft" (formula "22") (inst "t=Z(0(#))"))
                              (rule "leq_literals" (formula "22") (term "1,0"))
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                              (rule "applyEq" (formula "22") (term "0,0,0") (ifseqformula "32"))
                              (rule "replace_known_right" (formula "22") (term "0,0") (ifseqformula "44"))
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "true_left" (formula "22"))
                              (rule "allLeft" (formula "24") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                              (rule "inEqSimp_homoInEq0" (formula "24") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "24") (term "1,0,1,0"))
                              (rule "mul_literals" (formula "24") (term "0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "24") (term "0,1,0"))
                              (rule "add_literals" (formula "24") (term "0,0,1,0"))
                              (rule "add_zero_left" (formula "24") (term "0,1,0"))
                              (rule "inEqSimp_homoInEq1" (formula "24") (term "1"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,0,1"))
                              (rule "polySimp_rightDist" (formula "24") (term "1,0,1"))
                              (rule "mul_literals" (formula "24") (term "0,1,0,1"))
                              (rule "polySimp_addAssoc" (formula "24") (term "0,1"))
                              (rule "polySimp_addComm0" (formula "24") (term "0,0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,1"))
                              (rule "add_literals" (formula "24") (term "1,1,0,1"))
                              (rule "times_zero_1" (formula "24") (term "1,0,1"))
                              (rule "add_literals" (formula "24") (term "0,1"))
                              (rule "leq_literals" (formula "24") (term "1"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "applyEq" (formula "24") (term "1,0,0,0") (ifseqformula "33"))
                              (rule "inEqSimp_invertInEq1" (formula "24") (term "1"))
                              (rule "mul_literals" (formula "24") (term "1,1"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "24") (term "0,1"))
                              (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "18"))
                              (rule "qeq_literals" (formula "24") (term "0,1"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "notLeft" (formula "24"))
                              (rule "allLeft" (formula "24") (inst "t=Z(0(#))"))
                              (rule "leq_literals" (formula "24") (term "1,0"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                              (rule "applyEq" (formula "24") (term "1,0,0,0") (ifseqformula "32"))
                              (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "18"))
                              (rule "qeq_literals" (formula "24") (term "0,1"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "notLeft" (formula "24"))
                              (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                              (rule "commute_and_2" (formula "9") (term "0,0,0"))
                              (rule "commute_or_2" (formula "12") (term "1,0,0,0"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "46") (term "0") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "32") (term "1") (ifseqformula "5"))
                              (rule "replace_known_right" (formula "32") (term "0") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "31") (term "0") (ifseqformula "5"))
                              (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "32"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "true_left" (formula "31"))
                              (rule "allLeft" (formula "24") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                              (rule "inEqSimp_homoInEq0" (formula "24") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "24") (term "1,0,1,0"))
                              (rule "mul_literals" (formula "24") (term "0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "24") (term "0,1,0"))
                              (rule "add_literals" (formula "24") (term "0,0,1,0"))
                              (rule "add_zero_left" (formula "24") (term "0,1,0"))
                              (rule "inEqSimp_homoInEq1" (formula "24") (term "1"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,0,1"))
                              (rule "polySimp_rightDist" (formula "24") (term "1,0,1"))
                              (rule "mul_literals" (formula "24") (term "0,1,0,1"))
                              (rule "polySimp_addAssoc" (formula "24") (term "0,1"))
                              (rule "polySimp_addComm0" (formula "24") (term "0,0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,1"))
                              (rule "add_literals" (formula "24") (term "1,1,0,1"))
                              (rule "times_zero_1" (formula "24") (term "1,0,1"))
                              (rule "add_literals" (formula "24") (term "0,1"))
                              (rule "leq_literals" (formula "24") (term "1"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "applyEq" (formula "24") (term "0,0,0") (ifseqformula "35"))
                              (rule "replace_known_right" (formula "24") (term "0,0") (ifseqformula "49"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "applyEq" (formula "24") (term "1,0,0") (ifseqformula "35"))
                              (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "true_left" (formula "24"))
                              (rule "allLeft" (formula "24") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                              (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                              (rule "applyEq" (formula "24") (term "1,0,1,0,0") (ifseqformula "18"))
                              (rule "replace_known_left" (formula "24") (term "1,0,0") (ifseqformula "17"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "true_left" (formula "24"))
                              (rule "allLeft" (formula "24") (inst "t=Z(0(#))"))
                              (rule "leq_literals" (formula "24") (term "1,0"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                              (rule "applyEq" (formula "24") (term "0,0,0") (ifseqformula "34"))
                              (rule "replace_known_right" (formula "24") (term "0,0") (ifseqformula "48"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "applyEq" (formula "24") (term "1,0,0") (ifseqformula "34"))
                              (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "33"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "true_left" (formula "24"))
                              (rule "allLeft" (formula "28") (inst "t=i_2_0"))
                              (rule "replace_known_right" (formula "28") (term "1,0,0") (ifseqformula "43"))
                               (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "44")))
                              (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                              (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                              (rule "add_literals" (formula "28") (term "0,0,1"))
                              (rule "leq_literals" (formula "28") (term "0,1"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "inEqSimp_subsumption0" (formula "2") (ifseqformula "28"))
                              (rule "leq_literals" (formula "2") (term "0"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "27"))
                              (rule "qeq_literals" (formula "3") (term "0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "closeFalse" (formula "3"))
                           )
                        )
                     )
                     (branch
                        (rule "allRight" (formula "39") (inst "sk=i_1_0"))
                        (rule "orRight" (formula "39"))
                        (rule "orRight" (formula "39"))
                        (rule "inEqSimp_geqRight" (formula "40"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "40"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "20"))
                        (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                        (rule "mul_literals" (formula "2") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "add_literals" (formula "2") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "shift_paren_and" (formula "9") (term "0,1,0,1,0"))
                        (rule "shift_paren_and" (formula "9") (term "0,1,0"))
                        (rule "shift_paren_and" (formula "12") (term "0,1,0,1,0"))
                        (rule "shift_paren_and" (formula "12") (term "0,1,0"))
                        (rule "shift_paren_and" (formula "9") (term "0,0,1,0"))
                        (rule "shift_paren_and" (formula "12") (term "0,0,1,0"))
                        (rule "shift_paren_and" (formula "9") (term "0,0,0,1,0"))
                        (rule "shift_paren_and" (formula "12") (term "0,0,0,1,0"))
                        (rule "seqGetAlphaCast" (formula "31") (term "0"))
                        (rule "castedGetAny" (formula "31") (term "0"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "true_left" (formula "31"))
                        (rule "allLeft" (formula "33") (inst "t=i_1_0"))
                        (rule "replace_known_right" (formula "33") (term "0,0") (ifseqformula "43"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "inEqSimp_homoInEq1" (formula "33") (term "1"))
                        (rule "polySimp_addComm1" (formula "33") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,1"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1"))
                        (rule "mul_literals" (formula "33") (term "0,1,1"))
                        (rule "polySimp_elimOne" (formula "33") (term "1,1,1"))
                        (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "33") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "33") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "33") (term "0,0,0,1"))
                        (rule "add_literals" (formula "33") (term "0,0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                        (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                        (rule "add_literals" (formula "33") (term "0,0,1"))
                        (rule "leq_literals" (formula "33") (term "0,1"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "inEqSimp_subsumption0" (formula "2") (ifseqformula "33"))
                        (rule "leq_literals" (formula "2") (term "0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "32"))
                        (rule "qeq_literals" (formula "1") (term "0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch
                     (rule "allRight" (formula "39") (inst "sk=i_0_0"))
                     (rule "orRight" (formula "39"))
                     (rule "orRight" (formula "39"))
                     (rule "allRight" (formula "41") (inst "sk=j_0"))
                     (rule "orRight" (formula "41"))
                     (rule "orRight" (formula "41"))
                     (rule "orRight" (formula "43"))
                     (rule "notRight" (formula "43"))
                     (rule "inEqSimp_leqRight" (formula "40"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_geqRight" (formula "41"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_geqRight" (formula "43"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "43"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                     (rule "polySimp_elimOne" (formula "3") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "23"))
                     (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                     (rule "mul_literals" (formula "3") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0"))
                     (rule "add_literals" (formula "3") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                     (rule "polySimp_elimOne" (formula "3") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "24"))
                     (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                     (rule "mul_literals" (formula "2") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0"))
                     (rule "add_literals" (formula "2") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "shift_paren_and" (formula "13") (term "0,1,0,1,0"))
                     (rule "shift_paren_and" (formula "16") (term "0,1,0,1,0"))
                     (rule "shift_paren_and" (formula "13") (term "0,1,0"))
                     (rule "shift_paren_and" (formula "16") (term "0,1,0"))
                     (rule "shift_paren_and" (formula "13") (term "0,0,1,0"))
                     (rule "shift_paren_and" (formula "16") (term "0,0,1,0"))
                     (rule "seqGetAlphaCast" (formula "35") (term "0"))
                     (rule "castedGetAny" (formula "35") (term "0"))
                      (builtin "One Step Simplification" (formula "35"))
                     (rule "true_left" (formula "35"))
                     (rule "shift_paren_and" (formula "13") (term "0,0,0,1,0"))
                     (rule "shift_paren_and" (formula "16") (term "0,0,0,1,0"))
                     (rule "allLeft" (formula "38") (inst "t=i_0_0"))
                     (rule "inEqSimp_commuteGeq" (formula "38") (term "1,0,0,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "38") (term "1,0,0,0,0,0") (ifseqformula "6"))
                     (rule "qeq_literals" (formula "38") (term "0,1,0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "38"))
                     (rule "inEqSimp_contradInEq1" (formula "38") (term "1,0,0,0,0") (ifseqformula "5"))
                     (rule "inEqSimp_homoInEq1" (formula "38") (term "0,1,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0,1,0,0,0,0"))
                     (rule "add_literals" (formula "38") (term "1,1,0,0,1,0,0,0,0"))
                     (rule "times_zero_1" (formula "38") (term "1,0,0,1,0,0,0,0"))
                     (rule "add_literals" (formula "38") (term "0,0,1,0,0,0,0"))
                     (rule "leq_literals" (formula "38") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "38"))
                     (rule "commute_or_2" (formula "38") (term "0"))
                     (rule "allLeft" (formula "40") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                     (rule "inEqSimp_commuteGeq" (formula "40") (term "1"))
                     (rule "applyEq" (formula "40") (term "1,1,0,0") (ifseqformula "21"))
                     (rule "inEqSimp_contradInEq1" (formula "40") (term "1") (ifseqformula "15"))
                     (rule "inEqSimp_homoInEq1" (formula "40") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "40") (term "0,0,1"))
                     (rule "add_literals" (formula "40") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "40") (term "1,0,0,1"))
                     (rule "add_literals" (formula "40") (term "0,0,1"))
                     (rule "leq_literals" (formula "40") (term "0,1"))
                      (builtin "One Step Simplification" (formula "40"))
                     (rule "inEqSimp_contradInEq1" (formula "40") (term "1") (ifseqformula "12"))
                     (rule "qeq_literals" (formula "40") (term "0,1"))
                      (builtin "One Step Simplification" (formula "40"))
                     (rule "shift_paren_and" (formula "13") (term "0,0,0,0,1,0"))
                     (rule "cut_direct" (formula "43") (term "0"))
                     (branch "CUT: self.list.size = 0 TRUE"
                         (builtin "One Step Simplification" (formula "44"))
                        (rule "allRight" (formula "44") (inst "sk=iv_0"))
                        (rule "orRight" (formula "44"))
                        (rule "orRight" (formula "44"))
                        (rule "inEqSimp_leqRight" (formula "44"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "45"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                        (rule "mul_literals" (formula "1") (term "1,0"))
                        (rule "add_zero_right" (formula "1") (term "0"))
                        (rule "applyEq" (formula "44") (term "1,1,0") (ifseqformula "3"))
                        (rule "applyEq" (formula "36") (term "1,1,0") (ifseqformula "3"))
                        (rule "applyEq" (formula "31") (term "1,1,0") (ifseqformula "3"))
                        (rule "applyEq" (formula "25") (term "0") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "25"))
                        (rule "true_left" (formula "25"))
                        (rule "applyEq" (formula "29") (term "1,1,0") (ifseqformula "3"))
                        (rule "applyEq" (formula "22") (term "2,0") (ifseqformula "3"))
                        (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "3"))
                        (rule "applyEq" (formula "38") (term "1,1,0") (ifseqformula "3"))
                        (rule "add_literals" (formula "38") (term "1,0"))
                        (rule "applyEq" (formula "31") (term "1,1,0") (ifseqformula "3"))
                        (rule "applyEq" (formula "41") (term "1,1,0,0,0,0,0") (ifseqformula "3"))
                        (rule "applyEq" (formula "19") (term "1,1,0,1,1,0,0,0,0,1,0") (ifseqformula "3"))
                        (rule "add_zero_right" (formula "19") (term "1,0,1,1,0,0,0,0,1,0"))
                        (rule "applyEq" (formula "32") (term "1,1,0") (ifseqformula "3"))
                        (rule "applyEq" (formula "40") (term "1,1,0") (ifseqformula "3"))
                        (rule "applyEq" (formula "19") (term "1,1,1,1,0,1,0") (ifseqformula "3"))
                        (rule "add_zero_right" (formula "19") (term "1,1,1,0,1,0"))
                        (rule "applyEq" (formula "18") (term "0") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "18"))
                        (rule "times_zero_2" (formula "18") (term "1,0"))
                        (rule "add_zero_right" (formula "18") (term "0"))
                        (rule "applyEq" (formula "6") (term "0") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "6"))
                        (rule "times_zero_2" (formula "6") (term "1,0"))
                        (rule "add_zero_right" (formula "6") (term "0"))
                        (rule "applyEq" (formula "27") (term "0") (ifseqformula "3"))
                        (rule "leq_literals" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "applyEq" (formula "19") (term "1,1,1,0,0") (ifseqformula "3"))
                        (rule "add_zero_right" (formula "19") (term "1,1,0,0"))
                        (rule "applyEq" (formula "8") (term "0") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "8"))
                        (rule "times_zero_2" (formula "8") (term "1,0"))
                        (rule "add_zero_right" (formula "8") (term "0"))
                        (rule "applyEq" (formula "38") (term "1,1,1,0") (ifseqformula "3"))
                        (rule "add_literals" (formula "38") (term "1,1,0"))
                        (rule "applyEq" (formula "19") (term "1,1,1,1,0,0,0,1,0") (ifseqformula "3"))
                        (rule "add_zero_right" (formula "19") (term "1,1,1,0,0,0,1,0"))
                        (rule "applyEq" (formula "40") (term "1,1,0,0,0") (ifseqformula "3"))
                        (rule "applyEq" (formula "33") (term "1,1,0") (ifseqformula "3"))
                        (rule "applyEq" (formula "32") (term "1,1,0") (ifseqformula "3"))
                        (rule "applyEq" (formula "19") (term "1,1,1,0,0,1,0,0,0,0,1,0") (ifseqformula "3"))
                        (rule "add_zero_right" (formula "19") (term "1,1,0,0,1,0,0,0,0,1,0"))
                        (rule "applyEq" (formula "26") (term "1") (ifseqformula "3"))
                        (rule "applyEq" (formula "25") (term "1") (ifseqformula "3"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18"))
                        (rule "mul_literals" (formula "18") (term "1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                        (rule "mul_literals" (formula "6") (term "1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "8"))
                        (rule "mul_literals" (formula "8") (term "1"))
                        (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "4") (term "0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "closeFalse" (formula "4"))
                     )
                     (branch "CUT: self.list.size = 0 FALSE"
                         (builtin "One Step Simplification" (formula "44"))
                        (rule "false_right" (formula "44"))
                        (rule "inEqSimp_strengthen1" (formula "22") (ifseqformula "43"))
                        (rule "add_zero_right" (formula "22") (term "1"))
                        (rule "inEqSimp_contradEq7" (formula "43") (ifseqformula "22"))
                        (rule "times_zero_1" (formula "43") (term "1,0,0"))
                        (rule "add_literals" (formula "43") (term "0,0"))
                        (rule "leq_literals" (formula "43") (term "0"))
                         (builtin "One Step Simplification" (formula "43"))
                        (rule "false_right" (formula "43"))
                        (rule "shift_paren_and" (formula "16") (term "0,0,0,0,1,0"))
                        (rule "allLeft" (formula "26") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                        (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                        (rule "applyEq" (formula "26") (term "0,0,0,0") (ifseqformula "21"))
                        (rule "replace_known_right" (formula "26") (term "0,0,0") (ifseqformula "43"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "true_left" (formula "26"))
                        (rule "allLeft" (formula "26") (inst "t=j_0"))
                        (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                        (rule "applyEq" (formula "26") (term "0,0,0,0") (ifseqformula "7"))
                        (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                        (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "26") (term "0,0,1"))
                        (rule "leq_literals" (formula "26") (term "0,1"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "26") (term "0,1"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "notLeft" (formula "26"))
                        (rule "allLeft" (formula "28") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                        (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                        (rule "applyEq" (formula "28") (term "1,0,0,0,0") (ifseqformula "21"))
                        (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "15"))
                        (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                        (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                        (rule "add_literals" (formula "28") (term "0,0,1"))
                        (rule "leq_literals" (formula "28") (term "0,1"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "12"))
                        (rule "qeq_literals" (formula "28") (term "0,1"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "notLeft" (formula "28"))
                        (rule "allLeft" (formula "28") (inst "t=j_0"))
                        (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                        (rule "applyEq" (formula "28") (term "1,0,0,0,0") (ifseqformula "7"))
                        (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                        (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "28") (term "0,0,1"))
                        (rule "leq_literals" (formula "28") (term "0,1"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "28") (term "0,1"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "notLeft" (formula "28"))
                        (rule "shift_paren_and" (formula "13") (term "0,0,0,0,0,1,0"))
                        (rule "allLeft" (formula "38") (inst "t=j_0"))
                        (rule "replace_known_left" (formula "38") (term "0,0,0,0") (ifseqformula "7"))
                         (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "51")))
                        (rule "inEqSimp_commuteGeq" (formula "38") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "38") (term "0") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "38") (term "0,0"))
                         (builtin "One Step Simplification" (formula "38"))
                        (rule "inEqSimp_contradInEq1" (formula "38") (ifseqformula "3"))
                        (rule "andLeft" (formula "38"))
                        (rule "inEqSimp_homoInEq1" (formula "38"))
                        (rule "polySimp_pullOutFactor1b" (formula "38") (term "0"))
                        (rule "add_literals" (formula "38") (term "1,1,0"))
                        (rule "times_zero_1" (formula "38") (term "1,0"))
                        (rule "add_zero_right" (formula "38") (term "0"))
                        (rule "leq_literals" (formula "38"))
                        (rule "closeFalse" (formula "38"))
                     )
                  )
               )
               (branch
                  (rule "allRight" (formula "39") (inst "sk=i_0"))
                  (rule "orRight" (formula "39"))
                  (rule "orRight" (formula "39"))
                  (rule "inEqSimp_leqRight" (formula "39"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_geqRight" (formula "40"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "20"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "shift_paren_and" (formula "9") (term "0,1,0,1,0"))
                  (rule "shift_paren_and" (formula "9") (term "0,1,0"))
                  (rule "shift_paren_and" (formula "12") (term "0,1,0,1,0"))
                  (rule "shift_paren_and" (formula "12") (term "0,1,0"))
                  (rule "shift_paren_and" (formula "9") (term "0,0,1,0"))
                  (rule "shift_paren_and" (formula "12") (term "0,0,1,0"))
                  (rule "shift_paren_and" (formula "9") (term "0,0,0,1,0"))
                  (rule "shift_paren_and" (formula "12") (term "0,0,0,1,0"))
                  (rule "seqGetAlphaCast" (formula "31") (term "0"))
                  (rule "castedGetAny" (formula "31") (term "0"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "true_left" (formula "31"))
                  (rule "shift_paren_and" (formula "9") (term "0,0,0,0,1,0"))
                  (rule "shift_paren_and" (formula "12") (term "0,0,0,0,1,0"))
                  (rule "allLeft" (formula "35") (inst "t=i_0"))
                  (rule "replace_known_right" (formula "35") (term "0,0") (ifseqformula "43"))
                   (builtin "One Step Simplification" (formula "35"))
                  (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "35") (term "0,0"))
                   (builtin "One Step Simplification" (formula "35"))
                  (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "2"))
                  (rule "andLeft" (formula "35"))
                  (rule "inEqSimp_homoInEq1" (formula "35"))
                  (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                  (rule "add_literals" (formula "35") (term "1,1,0"))
                  (rule "times_zero_1" (formula "35") (term "1,0"))
                  (rule "add_literals" (formula "35") (term "0"))
                  (rule "leq_literals" (formula "35"))
                  (rule "closeFalse" (formula "35"))
               )
            )
         )
      )
      (branch "self.index >= 1 FALSE"
         (rule "replace_known_right" (formula "39") (term "0,1,1,0,0,0,0,1") (ifseqformula "33"))
          (builtin "One Step Simplification" (formula "39"))
         (rule "inEqSimp_geqRight" (formula "33"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "1"))
         (rule "leq_literals" (formula "8") (term "0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "true_left" (formula "8"))
         (rule "inEqSimp_antiSymm" (formula "6") (ifseqformula "1"))
         (rule "applyEq" (formula "11") (term "2,0") (ifseqformula "6"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "eqSymm" (formula "11"))
         (rule "applyEq" (formula "1") (term "0") (ifseqformula "6"))
         (rule "leq_literals" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "applyEq" (formula "8") (term "1,1") (ifseqformula "5"))
         (rule "add_zero_right" (formula "8") (term "1"))
         (rule "applyEq" (formula "7") (term "1,1,0,1,0,1,0,1,0") (ifseqformula "5"))
         (rule "add_zero_right" (formula "7") (term "1,0,1,0,1,0,1,0"))
         (rule "applyEq" (formula "6") (term "0") (ifseqformula "5"))
         (rule "qeq_literals" (formula "6"))
         (rule "true_left" (formula "6"))
         (rule "applyEq" (formula "11") (term "1,0") (ifseqformula "5"))
         (rule "applyEq" (formula "6") (term "1,1,1,1,1,1,0,1,0") (ifseqformula "5"))
         (rule "add_literals" (formula "6") (term "1,1,1,1,1,0,1,0"))
         (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "5"))
         (rule "applyEq" (formula "6") (term "1,1,0,0,0,1,0,1,0") (ifseqformula "5"))
         (rule "applyEq" (formula "6") (term "1,1,0,0,1,1,0,1,0") (ifseqformula "5"))
         (rule "applyEq" (formula "13") (term "0") (ifseqformula "27"))
         (rule "applyEq" (formula "33") (term "0") (ifseqformula "13"))
         (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "33"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "replace_known_right" (formula "37") (term "0,0") (ifseqformula "33"))
          (builtin "One Step Simplification" (formula "37"))
         (rule "applyEq" (formula "27") (term "1") (ifseqformula "13"))
         (rule "applyEq" (formula "8") (term "0,1,0,1,1,1,1,1,0,1,0") (ifseqformula "5"))
         (rule "times_zero_2" (formula "8") (term "1,0,1,1,1,1,1,0,1,0"))
         (rule "add_zero_right" (formula "8") (term "0,1,1,1,1,1,0,1,0"))
         (rule "applyEq" (formula "8") (term "0,0,1,1,0,0,0,1,0,1,0") (ifseqformula "5"))
         (rule "mul_literals" (formula "8") (term "0,1,1,0,0,0,1,0,1,0"))
         (rule "add_zero_left" (formula "8") (term "1,1,0,0,0,1,0,1,0"))
         (rule "applyEq" (formula "8") (term "0,1,0,1,0,1,0,1,0,1,0") (ifseqformula "5"))
         (rule "times_zero_2" (formula "8") (term "1,0,1,0,1,0,1,0,1,0"))
         (rule "add_zero_right" (formula "8") (term "0,1,0,1,0,1,0,1,0"))
         (rule "applyEq" (formula "8") (term "0,0,1,1,0,0,1,1,0,1,0") (ifseqformula "5"))
         (rule "times_zero_2" (formula "8") (term "0,1,1,0,0,1,1,0,1,0"))
         (rule "add_zero_left" (formula "8") (term "1,1,0,0,1,1,0,1,0"))
         (rule "applyEq" (formula "8") (term "0,0,1,1,0,0") (ifseqformula "5"))
         (rule "times_zero_2" (formula "8") (term "0,1,1,0,0"))
         (rule "add_zero_left" (formula "8") (term "1,1,0,0"))
         (rule "applyEq" (formula "8") (term "0,1,0,0,0,0,0,0,0,1,0,1,0") (ifseqformula "5"))
         (rule "add_zero_left" (formula "8") (term "1,0,0,0,0,0,0,0,1,0,1,0"))
         (rule "applyEq" (formula "8") (term "0,1,1,0,0,0,0,1,1,0,1,0") (ifseqformula "5"))
         (rule "add_zero_left" (formula "8") (term "1,1,0,0,0,0,1,1,0,1,0"))
         (rule "applyEq" (formula "37") (term "1,1,1,0,1,0,1,0,1,0,0,0") (ifseqformula "5"))
         (rule "add_zero_right" (formula "37") (term "1,1,0,1,0,1,0,1,0,0,0"))
         (rule "applyEq" (formula "37") (term "0,0,1,1,0,0,1,0") (ifseqformula "5"))
         (rule "times_zero_2" (formula "37") (term "0,1,1,0,0,1,0"))
         (rule "add_zero_left" (formula "37") (term "1,1,0,0,1,0"))
         (rule "applyEq" (formula "37") (term "0,1,1,1,0,1,0,1,0,1,0") (ifseqformula "5"))
         (rule "add_zero_left" (formula "37") (term "1,1,1,0,1,0,1,0,1,0"))
         (rule "applyEq" (formula "37") (term "0,1,0,1,1,0,1,0,1,0,1,0,1,0") (ifseqformula "5"))
         (rule "times_zero_2" (formula "37") (term "1,0,1,1,0,1,0,1,0,1,0,1,0"))
         (rule "add_zero_right" (formula "37") (term "0,1,1,0,1,0,1,0,1,0,1,0"))
         (rule "inEqSimp_contradEq7" (formula "32") (term "0") (ifseqformula "7"))
         (rule "times_zero_1" (formula "32") (term "1,0,0,0"))
         (rule "add_literals" (formula "32") (term "0,0,0"))
         (rule "leq_literals" (formula "32") (term "0,0"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "false_right" (formula "32"))
         (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "7"))
         (rule "leq_literals" (formula "14") (term "0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "true_left" (formula "14"))
         (rule "inEqSimp_or_tautInEq0" (formula "6") (term "0,0"))
         (rule "add_zero_right" (formula "6") (term "1,1,0,0"))
         (rule "qeq_literals" (formula "6") (term "1,0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "true_left" (formula "6"))
         (rule "inEqSimp_or_tautInEq0" (formula "34") (term "0,0,0,0"))
         (rule "add_zero_right" (formula "34") (term "1,1,0,0,0,0"))
         (rule "qeq_literals" (formula "34") (term "1,0,0,0,0"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "andRight" (formula "34"))
         (branch
            (rule "allRight" (formula "34") (inst "sk=i_0"))
            (rule "orRight" (formula "34"))
            (rule "orRight" (formula "34"))
            (rule "inEqSimp_leqRight" (formula "34"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "replace_known_left" (formula "36") (term "0,0,1,0,1,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "36"))
            (rule "inEqSimp_geqRight" (formula "35"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_homoInEq0" (formula "36") (term "0,1,0,1,0"))
            (rule "polySimp_addComm1" (formula "36") (term "0,0,1,0,1,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "0,1,0,1,0"))
            (rule "polySimp_mulComm0" (formula "36") (term "1,0,1,0,1,0"))
            (rule "polySimp_rightDist" (formula "36") (term "1,0,1,0,1,0"))
            (rule "mul_literals" (formula "36") (term "0,1,0,1,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,1,0,1,0"))
            (rule "polySimp_elimOne" (formula "36") (term "1,1,0,1,0,1,0"))
            (rule "replace_known_left" (formula "36") (term "0,1,0,1,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "36"))
            (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "17"))
            (rule "polySimp_rightDist" (formula "1") (term "0,0"))
            (rule "mul_literals" (formula "1") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "nnf_ex2all" (formula "37"))
            (rule "nnf_notAnd" (formula "1") (term "0"))
            (rule "nnf_notAnd" (formula "1") (term "1,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notAnd" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notOr" (formula "1") (term "0,0,0"))
            (rule "commute_or" (formula "1") (term "1,0"))
            (rule "commute_or" (formula "1") (term "0,0"))
            (rule "commute_or_2" (formula "1") (term "0"))
            (rule "shift_paren_or" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "cnf_rightDist" (formula "1") (term "0"))
            (rule "distr_forallAnd" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "shift_paren_or" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "castedGetAny" (formula "1") (term "1,0,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,1,0"))
            (rule "commute_or" (formula "1") (term "0"))
            (rule "shift_paren_and" (formula "11") (term "1,0,1,0"))
            (rule "seqGetAlphaCast" (formula "29") (term "0"))
            (rule "castedGetAny" (formula "29") (term "0"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "true_left" (formula "29"))
            (rule "shift_paren_and" (formula "11") (term "0,1,0,1,0"))
            (rule "shift_paren_and" (formula "11") (term "0,1,0"))
            (rule "shift_paren_and" (formula "11") (term "0,0,1,0"))
            (rule "shift_paren_and" (formula "11") (term "0,0,0,1,0"))
            (rule "allLeft" (formula "33") (inst "t=Z(0(#))"))
            (rule "leq_literals" (formula "33") (term "1,0"))
             (builtin "One Step Simplification" (formula "33"))
            (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
            (rule "applyEq" (formula "33") (term "1,1,0") (ifseqformula "29"))
            (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "10"))
            (rule "qeq_literals" (formula "33") (term "0,1"))
             (builtin "One Step Simplification" (formula "33"))
            (rule "allLeft" (formula "34") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
            (rule "inEqSimp_homoInEq1" (formula "34") (term "1"))
            (rule "polySimp_mulComm0" (formula "34") (term "1,0,1"))
            (rule "polySimp_rightDist" (formula "34") (term "1,0,1"))
            (rule "mul_literals" (formula "34") (term "0,1,0,1"))
            (rule "polySimp_addAssoc" (formula "34") (term "0,1"))
            (rule "polySimp_addComm0" (formula "34") (term "0,0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,1"))
            (rule "add_literals" (formula "34") (term "1,1,0,1"))
            (rule "times_zero_1" (formula "34") (term "1,0,1"))
            (rule "add_zero_right" (formula "34") (term "0,1"))
            (rule "leq_literals" (formula "34") (term "1"))
             (builtin "One Step Simplification" (formula "34"))
            (rule "inEqSimp_homoInEq0" (formula "34") (term "1"))
            (rule "polySimp_mulComm0" (formula "34") (term "1,0,1"))
            (rule "polySimp_rightDist" (formula "34") (term "1,0,1"))
            (rule "mul_literals" (formula "34") (term "0,1,0,1"))
            (rule "polySimp_addAssoc" (formula "34") (term "0,1"))
            (rule "add_literals" (formula "34") (term "0,0,1"))
            (rule "add_zero_left" (formula "34") (term "0,1"))
            (rule "applyEq" (formula "34") (term "1,1,0") (ifseqformula "30"))
            (rule "inEqSimp_invertInEq1" (formula "34") (term "1"))
            (rule "times_zero_2" (formula "34") (term "1,1"))
            (rule "polySimp_mulLiterals" (formula "34") (term "0,1"))
            (rule "polySimp_elimOne" (formula "34") (term "0,1"))
            (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "10"))
            (rule "qeq_literals" (formula "34") (term "0,1"))
             (builtin "One Step Simplification" (formula "34"))
            (rule "shift_paren_and" (formula "11") (term "0,0,0,0,1,0"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "12") (inst "iv=iv"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "andLeft" (formula "12"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
            (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "true_left" (formula "12"))
            (rule "applyEq" (formula "12") (term "0,0,1,0") (ifseqformula "13"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "true_left" (formula "12"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "14") (inst "iv=iv"))
            (rule "andLeft" (formula "14"))
            (rule "lenOfSeqSub" (formula "14") (term "0"))
            (rule "polySimp_elimSub" (formula "14") (term "1,0"))
            (rule "times_zero_2" (formula "14") (term "1,1,0"))
            (rule "add_zero_right" (formula "14") (term "1,0"))
            (rule "lenOfSeqSub" (formula "15") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "15") (term "1,1,1,0,0"))
            (rule "times_zero_2" (formula "15") (term "1,1,1,1,0,0"))
            (rule "add_zero_right" (formula "15") (term "1,1,1,0,0"))
            (rule "lenOfSeqSubEQ" (formula "14") (term "1") (ifseqformula "16"))
            (rule "eqSymm" (formula "14"))
            (rule "polySimp_elimSub" (formula "14") (term "1,0"))
            (rule "times_zero_2" (formula "14") (term "1,1,0"))
            (rule "add_zero_right" (formula "14") (term "1,0"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1,1,0,0"))
            (rule "add_zero_right" (formula "14") (term "0,0,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
            (rule "applyEq" (formula "14") (term "0,0,1,0") (ifseqformula "15"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "allLeft" (formula "22") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
            (rule "inEqSimp_homoInEq1" (formula "22") (term "1"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,0,1"))
            (rule "polySimp_rightDist" (formula "22") (term "1,0,1"))
            (rule "mul_literals" (formula "22") (term "0,1,0,1"))
            (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
            (rule "polySimp_addComm0" (formula "22") (term "0,0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,1"))
            (rule "add_literals" (formula "22") (term "1,1,0,1"))
            (rule "times_zero_1" (formula "22") (term "1,0,1"))
            (rule "add_zero_right" (formula "22") (term "0,1"))
            (rule "leq_literals" (formula "22") (term "1"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "inEqSimp_homoInEq0" (formula "22") (term "1"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,0,1"))
            (rule "polySimp_rightDist" (formula "22") (term "1,0,1"))
            (rule "mul_literals" (formula "22") (term "0,1,0,1"))
            (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
            (rule "add_literals" (formula "22") (term "0,0,1"))
            (rule "add_zero_left" (formula "22") (term "0,1"))
            (rule "applyEq" (formula "22") (term "1,0,0,0") (ifseqformula "31"))
            (rule "inEqSimp_invertInEq1" (formula "22") (term "1"))
            (rule "times_zero_2" (formula "22") (term "1,1"))
            (rule "polySimp_mulLiterals" (formula "22") (term "0,1"))
            (rule "polySimp_elimOne" (formula "22") (term "0,1"))
            (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "10"))
            (rule "qeq_literals" (formula "22") (term "0,1"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "notLeft" (formula "22"))
            (rule "allLeft" (formula "27") (inst "t=i_0"))
            (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "3"))
            (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
            (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
            (rule "add_literals" (formula "27") (term "0,0,1"))
            (rule "leq_literals" (formula "27") (term "0,1"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "4"))
            (rule "qeq_literals" (formula "27") (term "0,1"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "27"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "allLeft" (formula "20") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
            (rule "inEqSimp_homoInEq1" (formula "20") (term "1"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,0,1"))
            (rule "polySimp_rightDist" (formula "20") (term "1,0,1"))
            (rule "mul_literals" (formula "20") (term "0,1,0,1"))
            (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
            (rule "polySimp_addComm0" (formula "20") (term "0,0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,1"))
            (rule "add_literals" (formula "20") (term "1,1,0,1"))
            (rule "times_zero_1" (formula "20") (term "1,0,1"))
            (rule "add_zero_right" (formula "20") (term "0,1"))
            (rule "leq_literals" (formula "20") (term "1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "inEqSimp_homoInEq0" (formula "20") (term "1"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,0,1"))
            (rule "polySimp_rightDist" (formula "20") (term "1,0,1"))
            (rule "mul_literals" (formula "20") (term "0,1,0,1"))
            (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
            (rule "add_literals" (formula "20") (term "0,0,1"))
            (rule "add_zero_left" (formula "20") (term "0,1"))
            (rule "applyEq" (formula "20") (term "0,0,0") (ifseqformula "32"))
            (rule "replace_known_right" (formula "20") (term "0,0") (ifseqformula "40"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "true_left" (formula "20"))
            (rule "allLeft" (formula "20") (inst "t=Z(0(#))"))
            (rule "leq_literals" (formula "20") (term "1,0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
            (rule "applyEq" (formula "20") (term "0,0,0") (ifseqformula "31"))
            (rule "replace_known_right" (formula "20") (term "0,0") (ifseqformula "39"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "true_left" (formula "20"))
            (rule "allLeft" (formula "22") (inst "t=Z(0(#))"))
            (rule "leq_literals" (formula "22") (term "1,0"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
            (rule "applyEq" (formula "22") (term "1,0,0,0") (ifseqformula "31"))
            (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "10"))
            (rule "qeq_literals" (formula "22") (term "0,1"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "notLeft" (formula "22"))
            (rule "allLeft" (formula "36") (inst "t=i_0"))
            (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "3"))
            (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
            (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "36") (term "0,0,1"))
            (rule "leq_literals" (formula "36") (term "0,1"))
             (builtin "One Step Simplification" (formula "36"))
            (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "4"))
            (rule "qeq_literals" (formula "36") (term "0,1"))
             (builtin "One Step Simplification" (formula "36"))
            (rule "typeEqDerived" (formula "27") (term "0") (ifseqformula "36"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "true_left" (formula "27"))
            (rule "allLeft" (formula "24") (inst "t=i_0"))
            (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "3"))
            (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
            (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "24") (term "0,0,1"))
            (rule "leq_literals" (formula "24") (term "0,1"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "4"))
            (rule "qeq_literals" (formula "24") (term "0,1"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "notLeft" (formula "24"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "37"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "allLeft" (formula "25") (inst "t=i_0"))
            (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
            (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "35"))
            (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
            (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
            (rule "add_literals" (formula "25") (term "0,0,1"))
            (rule "leq_literals" (formula "25") (term "0,1"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "3"))
            (rule "qeq_literals" (formula "25") (term "0,1"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "notLeft" (formula "25"))
            (rule "shift_paren_and" (formula "10") (term "0,0,0,0,0,1,0"))
            (rule "allLeft" (formula "20") (inst "t=Z(0(#))"))
            (rule "leq_literals" (formula "20") (term "1,0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
            (rule "applyEq" (formula "20") (term "1,0,1,0") (ifseqformula "29"))
            (rule "replace_known_left" (formula "20") (term "1,0") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "true_left" (formula "20"))
            (rule "allLeft" (formula "20") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
            (rule "inEqSimp_homoInEq1" (formula "20") (term "1"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,0,1"))
            (rule "polySimp_rightDist" (formula "20") (term "1,0,1"))
            (rule "mul_literals" (formula "20") (term "0,1,0,1"))
            (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
            (rule "polySimp_addComm0" (formula "20") (term "0,0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,1"))
            (rule "add_literals" (formula "20") (term "1,1,0,1"))
            (rule "times_zero_1" (formula "20") (term "1,0,1"))
            (rule "add_literals" (formula "20") (term "0,1"))
            (rule "leq_literals" (formula "20") (term "1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "inEqSimp_homoInEq0" (formula "20") (term "1"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,0,1"))
            (rule "polySimp_rightDist" (formula "20") (term "1,0,1"))
            (rule "mul_literals" (formula "20") (term "0,1,0,1"))
            (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
            (rule "add_literals" (formula "20") (term "0,0,1"))
            (rule "add_zero_left" (formula "20") (term "0,1"))
            (rule "applyEq" (formula "20") (term "1,0,1,0") (ifseqformula "30"))
            (rule "applyEq" (formula "20") (term "0,0,0") (ifseqformula "30"))
            (rule "replace_known_right" (formula "20") (term "0,0") (ifseqformula "43"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "inEqSimp_invertInEq1" (formula "20") (term "1"))
            (rule "polySimp_mulLiterals" (formula "20") (term "0,1"))
            (rule "mul_literals" (formula "20") (term "1,1"))
            (rule "polySimp_elimOne" (formula "20") (term "0,1"))
            (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "9"))
            (rule "qeq_literals" (formula "20") (term "0,1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "allLeft" (formula "25") (inst "t=i_0"))
            (rule "replace_known_right" (formula "25") (term "1,0,0") (ifseqformula "39"))
             (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "40")))
            (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
            (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "0,0,1"))
            (rule "leq_literals" (formula "25") (term "0,1"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "inEqSimp_subsumption0" (formula "1") (ifseqformula "25"))
            (rule "leq_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "inEqSimp_contradInEq1" (formula "24") (ifseqformula "2"))
            (rule "qeq_literals" (formula "24") (term "0"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "closeFalse" (formula "24"))
         )
         (branch
            (rule "andRight" (formula "34"))
            (branch
               (rule "andRight" (formula "34"))
               (branch
                  (rule "andRight" (formula "34"))
                  (branch
                     (rule "andRight" (formula "34"))
                     (branch
                        (rule "allRight" (formula "34") (inst "sk=i_3_0"))
                        (rule "orRight" (formula "34"))
                        (rule "orRight" (formula "34"))
                        (rule "inEqSimp_geqRight" (formula "35"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "35"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "17"))
                        (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                        (rule "mul_literals" (formula "2") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "add_literals" (formula "2") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "nnf_ex2all" (formula "37"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "1") (term "1,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "nnf_notOr" (formula "1") (term "0,0,0"))
                        (rule "commute_or" (formula "1") (term "1,0"))
                        (rule "commute_or" (formula "1") (term "0,0"))
                        (rule "commute_or_2" (formula "1") (term "0"))
                        (rule "shift_paren_or" (formula "1") (term "0,0"))
                        (rule "cnf_rightDist" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "shift_paren_or" (formula "1") (term "0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "castedGetAny" (formula "1") (term "1,0,1,1,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,1,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,0,0"))
                        (rule "shift_paren_or" (formula "1") (term "0"))
                        (rule "commute_or" (formula "1") (term "0,0"))
                        (rule "shift_paren_and" (formula "11") (term "1,0,1,0"))
                        (rule "seqGetAlphaCast" (formula "29") (term "0"))
                        (rule "castedGetAny" (formula "29") (term "0"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "shift_paren_and" (formula "11") (term "0,1,0,1,0"))
                        (rule "shift_paren_and" (formula "11") (term "0,1,0"))
                        (rule "shift_paren_and" (formula "11") (term "0,0,1,0"))
                        (rule "shift_paren_and" (formula "11") (term "0,0,0,1,0"))
                        (rule "allLeft" (formula "33") (inst "t=Z(0(#))"))
                        (rule "leq_literals" (formula "33") (term "1,0"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                        (rule "applyEq" (formula "33") (term "1,1,0") (ifseqformula "29"))
                        (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "10"))
                        (rule "qeq_literals" (formula "33") (term "0,1"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "allLeft" (formula "34") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                        (rule "inEqSimp_homoInEq0" (formula "34") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "34") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "34") (term "0,1,0"))
                        (rule "add_literals" (formula "34") (term "0,0,1,0"))
                        (rule "add_zero_left" (formula "34") (term "0,1,0"))
                        (rule "inEqSimp_homoInEq1" (formula "34") (term "1"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,0,1"))
                        (rule "mul_literals" (formula "34") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "34") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "34") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,1"))
                        (rule "add_literals" (formula "34") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "34") (term "1,0,1"))
                        (rule "add_zero_right" (formula "34") (term "0,1"))
                        (rule "leq_literals" (formula "34") (term "1"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "applyEq" (formula "34") (term "1,1,0") (ifseqformula "30"))
                        (rule "inEqSimp_invertInEq1" (formula "34") (term "1"))
                        (rule "times_zero_2" (formula "34") (term "1,1"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "34") (term "0,1"))
                        (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "10"))
                        (rule "qeq_literals" (formula "34") (term "0,1"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "shift_paren_and" (formula "11") (term "0,0,0,0,1,0"))
                        (rule "equalityToSeqGetAndSeqLenLeft" (formula "12") (inst "iv=iv"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "andLeft" (formula "12"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                        (rule "applyEq" (formula "13") (term "0,0,1,0,0,1,0,0") (ifseqformula "14"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "times_zero_2" (formula "13") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,1,0,0"))
                        (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "14"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "true_left" (formula "12"))
                        (rule "applyEq" (formula "12") (term "0,0,1,0") (ifseqformula "13"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "true_left" (formula "12"))
                        (rule "equalityToSeqGetAndSeqLenLeft" (formula "14") (inst "iv=iv"))
                        (rule "andLeft" (formula "14"))
                        (rule "lenOfSeqSub" (formula "14") (term "0"))
                        (rule "polySimp_elimSub" (formula "14") (term "1,0"))
                        (rule "mul_literals" (formula "14") (term "1,1,0"))
                        (rule "add_zero_right" (formula "14") (term "1,0"))
                        (rule "lenOfSeqSub" (formula "15") (term "1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "15") (term "1,1,1,0,0"))
                        (rule "times_zero_2" (formula "15") (term "1,1,1,1,0,0"))
                        (rule "add_zero_right" (formula "15") (term "1,1,1,0,0"))
                        (rule "lenOfSeqSubEQ" (formula "14") (term "1") (ifseqformula "16"))
                        (rule "eqSymm" (formula "14"))
                        (rule "polySimp_elimSub" (formula "14") (term "1,0"))
                        (rule "times_zero_2" (formula "14") (term "1,1,0"))
                        (rule "add_zero_right" (formula "14") (term "1,0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "true_left" (formula "14"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1,1,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                        (rule "applyEq" (formula "14") (term "0,0,1,0") (ifseqformula "15"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "true_left" (formula "14"))
                        (rule "allLeft" (formula "22") (inst "t=Z(0(#))"))
                        (rule "leq_literals" (formula "22") (term "1,0"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                        (rule "applyEq" (formula "22") (term "1,0,0,0") (ifseqformula "30"))
                        (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "10"))
                        (rule "qeq_literals" (formula "22") (term "0,1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "notLeft" (formula "22"))
                        (rule "allLeft" (formula "20") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                        (rule "inEqSimp_homoInEq1" (formula "20") (term "1"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,1"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "20") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,1"))
                        (rule "add_literals" (formula "20") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "20") (term "1,0,1"))
                        (rule "add_literals" (formula "20") (term "0,1"))
                        (rule "leq_literals" (formula "20") (term "1"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "inEqSimp_homoInEq0" (formula "20") (term "1"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,1"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                        (rule "add_literals" (formula "20") (term "0,0,1"))
                        (rule "add_zero_left" (formula "20") (term "0,1"))
                        (rule "applyEq" (formula "20") (term "0,0,0") (ifseqformula "31"))
                        (rule "replace_known_right" (formula "20") (term "0,0") (ifseqformula "39"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "allLeft" (formula "20") (inst "t=i_3_0"))
                        (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "20") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                        (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                        (rule "add_literals" (formula "20") (term "0,0,1"))
                        (rule "leq_literals" (formula "20") (term "0,1"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "notLeft" (formula "20"))
                        (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "36"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "allLeft" (formula "23") (inst "t=i_3_0"))
                        (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "23") (term "1,0") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "23") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
                        (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "23") (term "0,0,1"))
                        (rule "leq_literals" (formula "23") (term "0,1"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "23"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "allLeft" (formula "22") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                        (rule "inEqSimp_homoInEq1" (formula "22") (term "1"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0,1"))
                        (rule "mul_literals" (formula "22") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "22") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,1"))
                        (rule "add_literals" (formula "22") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "22") (term "1,0,1"))
                        (rule "add_literals" (formula "22") (term "0,1"))
                        (rule "leq_literals" (formula "22") (term "1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "inEqSimp_homoInEq0" (formula "22") (term "1"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0,1"))
                        (rule "mul_literals" (formula "22") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                        (rule "add_literals" (formula "22") (term "0,0,1"))
                        (rule "add_zero_left" (formula "22") (term "0,1"))
                        (rule "applyEq" (formula "22") (term "1,0,0,0") (ifseqformula "32"))
                        (rule "inEqSimp_invertInEq1" (formula "22") (term "1"))
                        (rule "times_zero_2" (formula "22") (term "1,1"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "22") (term "0,1"))
                        (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "10"))
                        (rule "qeq_literals" (formula "22") (term "0,1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "notLeft" (formula "22"))
                        (rule "allLeft" (formula "22") (inst "t=i_3_0"))
                        (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "22") (term "1,0") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "22") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                        (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                        (rule "add_literals" (formula "22") (term "0,0,1"))
                        (rule "leq_literals" (formula "22") (term "0,1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "notLeft" (formula "22"))
                        (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "37"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "allLeft" (formula "19") (inst "t=Z(0(#))"))
                        (rule "leq_literals" (formula "19") (term "1,0"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                        (rule "applyEq" (formula "19") (term "0,0,0") (ifseqformula "30"))
                        (rule "replace_known_right" (formula "19") (term "0,0") (ifseqformula "42"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "true_left" (formula "19"))
                        (rule "allLeft" (formula "35") (inst "t=i_3_0"))
                        (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "35") (term "1,0") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "35") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                        (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                        (rule "add_literals" (formula "35") (term "0,0,1"))
                        (rule "leq_literals" (formula "35") (term "0,1"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "shift_paren_and" (formula "10") (term "0,0,0,0,0,1,0"))
                        (rule "allLeft" (formula "20") (inst "t=Z(0(#))"))
                        (rule "leq_literals" (formula "20") (term "1,0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                        (rule "applyEq" (formula "20") (term "0,0,0") (ifseqformula "30"))
                        (rule "replace_known_right" (formula "20") (term "0,0") (ifseqformula "43"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "applyEq" (formula "20") (term "1,0,0") (ifseqformula "30"))
                        (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "14"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "allLeft" (formula "20") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                        (rule "inEqSimp_homoInEq0" (formula "20") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,1,0"))
                        (rule "add_literals" (formula "20") (term "0,0,1,0"))
                        (rule "add_zero_left" (formula "20") (term "0,1,0"))
                        (rule "inEqSimp_homoInEq1" (formula "20") (term "1"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,1"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "20") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,1"))
                        (rule "add_literals" (formula "20") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "20") (term "1,0,1"))
                        (rule "add_literals" (formula "20") (term "0,1"))
                        (rule "leq_literals" (formula "20") (term "1"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "applyEq" (formula "20") (term "0,0,0") (ifseqformula "31"))
                        (rule "replace_known_right" (formula "20") (term "0,0") (ifseqformula "44"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "applyEq" (formula "20") (term "1,0,0") (ifseqformula "31"))
                        (rule "inEqSimp_invertInEq1" (formula "20") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "0,1"))
                        (rule "mul_literals" (formula "20") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "20") (term "0,1"))
                        (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "9"))
                        (rule "qeq_literals" (formula "20") (term "0,1"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "allLeft" (formula "21") (inst "t=i_3_0"))
                        (rule "replace_known_right" (formula "21") (term "0,0,0") (ifseqformula "42"))
                         (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "39")))
                        (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "21") (term "0") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "21") (term "0,0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "21"))
                        (rule "andLeft" (formula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "3"))
                        (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                        (rule "add_literals" (formula "3") (term "1,1,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0"))
                        (rule "add_literals" (formula "3") (term "0"))
                        (rule "leq_literals" (formula "3"))
                        (rule "closeFalse" (formula "3"))
                     )
                     (branch
                        (rule "allRight" (formula "34") (inst "sk=i_2_0"))
                        (rule "orRight" (formula "34"))
                        (rule "orRight" (formula "34"))
                        (rule "inEqSimp_geqRight" (formula "35"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "35"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "17"))
                        (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                        (rule "mul_literals" (formula "2") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "add_literals" (formula "2") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "nnf_ex2all" (formula "37"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "nnf_notAnd" (formula "1") (term "1,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "nnf_notOr" (formula "1") (term "0,0,0"))
                        (rule "commute_or" (formula "1") (term "1,0"))
                        (rule "commute_or" (formula "1") (term "0,0"))
                        (rule "commute_or_2" (formula "1") (term "0"))
                        (rule "shift_paren_or" (formula "1") (term "0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "cnf_rightDist" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "shift_paren_or" (formula "1") (term "0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "castedGetAny" (formula "1") (term "0,1,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,0,0"))
                        (rule "commute_or" (formula "1") (term "0"))
                        (rule "shift_paren_and" (formula "11") (term "1,0,1,0"))
                        (rule "seqGetAlphaCast" (formula "29") (term "0"))
                        (rule "castedGetAny" (formula "29") (term "0"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "shift_paren_and" (formula "11") (term "0,1,0,1,0"))
                        (rule "shift_paren_and" (formula "11") (term "0,1,0"))
                        (rule "shift_paren_and" (formula "11") (term "0,0,1,0"))
                        (rule "shift_paren_and" (formula "11") (term "0,0,0,1,0"))
                        (rule "allLeft" (formula "33") (inst "t=Z(0(#))"))
                        (rule "leq_literals" (formula "33") (term "1,0"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                        (rule "applyEq" (formula "33") (term "1,1,0") (ifseqformula "29"))
                        (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "10"))
                        (rule "qeq_literals" (formula "33") (term "0,1"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "allLeft" (formula "34") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                        (rule "inEqSimp_homoInEq1" (formula "34") (term "1"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,0,1"))
                        (rule "mul_literals" (formula "34") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "34") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "34") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,1"))
                        (rule "add_literals" (formula "34") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "34") (term "1,0,1"))
                        (rule "add_zero_right" (formula "34") (term "0,1"))
                        (rule "leq_literals" (formula "34") (term "1"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "inEqSimp_homoInEq0" (formula "34") (term "1"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,0,1"))
                        (rule "mul_literals" (formula "34") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "34") (term "0,1"))
                        (rule "add_literals" (formula "34") (term "0,0,1"))
                        (rule "add_zero_left" (formula "34") (term "0,1"))
                        (rule "applyEq" (formula "34") (term "1,1,0") (ifseqformula "30"))
                        (rule "inEqSimp_invertInEq1" (formula "34") (term "1"))
                        (rule "times_zero_2" (formula "34") (term "1,1"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "34") (term "0,1"))
                        (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "10"))
                        (rule "qeq_literals" (formula "34") (term "0,1"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "shift_paren_and" (formula "11") (term "0,0,0,0,1,0"))
                        (rule "equalityToSeqGetAndSeqLenLeft" (formula "12") (inst "iv=iv"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "andLeft" (formula "12"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                        (rule "applyEq" (formula "13") (term "0,0,1,0") (ifseqformula "14"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "true_left" (formula "13"))
                        (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "13"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "true_left" (formula "12"))
                        (rule "equalityToSeqGetAndSeqLenLeft" (formula "14") (inst "iv=iv"))
                        (rule "andLeft" (formula "14"))
                        (rule "lenOfSeqSub" (formula "14") (term "0"))
                        (rule "polySimp_elimSub" (formula "14") (term "1,0"))
                        (rule "times_zero_2" (formula "14") (term "1,1,0"))
                        (rule "add_zero_right" (formula "14") (term "1,0"))
                        (rule "lenOfSeqSub" (formula "15") (term "1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "15") (term "1,1,1,0,0"))
                        (rule "times_zero_2" (formula "15") (term "1,1,1,1,0,0"))
                        (rule "add_zero_right" (formula "15") (term "1,1,1,0,0"))
                        (rule "lenOfSeqSubEQ" (formula "14") (term "1") (ifseqformula "16"))
                        (rule "eqSymm" (formula "14"))
                        (rule "polySimp_elimSub" (formula "14") (term "1,0"))
                        (rule "times_zero_2" (formula "14") (term "1,1,0"))
                        (rule "add_zero_right" (formula "14") (term "1,0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "true_left" (formula "14"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1,1,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                        (rule "applyEq" (formula "14") (term "0,0,1,0") (ifseqformula "15"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "true_left" (formula "14"))
                        (rule "allLeft" (formula "20") (inst "t=Z(0(#))"))
                        (rule "leq_literals" (formula "20") (term "1,0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                        (rule "applyEq" (formula "20") (term "0,0,0") (ifseqformula "30"))
                        (rule "replace_known_right" (formula "20") (term "0,0") (ifseqformula "37"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "allLeft" (formula "22") (inst "t=Z(0(#))"))
                        (rule "leq_literals" (formula "22") (term "1,0"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                        (rule "applyEq" (formula "22") (term "1,0,0,0") (ifseqformula "30"))
                        (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "10"))
                        (rule "qeq_literals" (formula "22") (term "0,1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "notLeft" (formula "22"))
                        (rule "allLeft" (formula "20") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                        (rule "inEqSimp_homoInEq1" (formula "20") (term "1"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,1"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "20") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,1"))
                        (rule "add_literals" (formula "20") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "20") (term "1,0,1"))
                        (rule "add_literals" (formula "20") (term "0,1"))
                        (rule "leq_literals" (formula "20") (term "1"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "inEqSimp_homoInEq0" (formula "20") (term "1"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,1"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                        (rule "add_literals" (formula "20") (term "0,0,1"))
                        (rule "add_zero_left" (formula "20") (term "0,1"))
                        (rule "applyEq" (formula "20") (term "0,0,0") (ifseqformula "31"))
                        (rule "replace_known_right" (formula "20") (term "0,0") (ifseqformula "39"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "allLeft" (formula "27") (inst "t=i_2_0"))
                        (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
                        (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
                        (rule "add_literals" (formula "27") (term "0,0,1"))
                        (rule "leq_literals" (formula "27") (term "0,1"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "27") (term "0,1"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "27"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "allLeft" (formula "22") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                        (rule "inEqSimp_homoInEq1" (formula "22") (term "1"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0,1"))
                        (rule "mul_literals" (formula "22") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "22") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,1"))
                        (rule "add_literals" (formula "22") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "22") (term "1,0,1"))
                        (rule "add_zero_right" (formula "22") (term "0,1"))
                        (rule "leq_literals" (formula "22") (term "1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "inEqSimp_homoInEq0" (formula "22") (term "1"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0,1"))
                        (rule "mul_literals" (formula "22") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                        (rule "add_literals" (formula "22") (term "0,0,1"))
                        (rule "add_zero_left" (formula "22") (term "0,1"))
                        (rule "applyEq" (formula "22") (term "1,0,0,0") (ifseqformula "32"))
                        (rule "inEqSimp_invertInEq1" (formula "22") (term "1"))
                        (rule "times_zero_2" (formula "22") (term "1,1"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "22") (term "0,1"))
                        (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "10"))
                        (rule "qeq_literals" (formula "22") (term "0,1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "notLeft" (formula "22"))
                        (rule "allLeft" (formula "24") (inst "t=i_2_0"))
                        (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                        (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "24") (term "0,0,1"))
                        (rule "leq_literals" (formula "24") (term "0,1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "24") (term "0,1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "notLeft" (formula "24"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "37"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "allLeft" (formula "25") (inst "t=i_2_0"))
                        (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                        (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                        (rule "add_literals" (formula "25") (term "0,0,1"))
                        (rule "leq_literals" (formula "25") (term "0,1"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "25") (term "0,1"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "notLeft" (formula "25"))
                        (rule "allLeft" (formula "35") (inst "t=i_2_0"))
                        (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "35") (term "1,0") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "35") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                        (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                        (rule "add_literals" (formula "35") (term "0,0,1"))
                        (rule "leq_literals" (formula "35") (term "0,1"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "typeEqDerived" (formula "26") (term "0") (ifseqformula "35"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "true_left" (formula "26"))
                        (rule "applyEq" (formula "36") (term "0") (ifseqformula "34"))
                        (rule "shift_paren_and" (formula "10") (term "0,0,0,0,0,1,0"))
                        (rule "allLeft" (formula "20") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                        (rule "inEqSimp_homoInEq0" (formula "20") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,1,0"))
                        (rule "add_literals" (formula "20") (term "0,0,1,0"))
                        (rule "add_zero_left" (formula "20") (term "0,1,0"))
                        (rule "inEqSimp_homoInEq1" (formula "20") (term "1"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,1"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "20") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,1"))
                        (rule "add_literals" (formula "20") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "20") (term "1,0,1"))
                        (rule "add_literals" (formula "20") (term "0,1"))
                        (rule "leq_literals" (formula "20") (term "1"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "applyEq" (formula "20") (term "1,0,1,0") (ifseqformula "30"))
                        (rule "applyEq" (formula "20") (term "0,0,0") (ifseqformula "30"))
                        (rule "replace_known_right" (formula "20") (term "0,0") (ifseqformula "43"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "inEqSimp_invertInEq1" (formula "20") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "0,1"))
                        (rule "mul_literals" (formula "20") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "20") (term "0,1"))
                        (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "9"))
                        (rule "qeq_literals" (formula "20") (term "0,1"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "allLeft" (formula "21") (inst "t=Z(0(#))"))
                        (rule "leq_literals" (formula "21") (term "1,0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                        (rule "applyEq" (formula "21") (term "1,0,1,0") (ifseqformula "30"))
                        (rule "replace_known_left" (formula "21") (term "1,0") (ifseqformula "14"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "true_left" (formula "21"))
                        (rule "allLeft" (formula "25") (inst "t=i_2_0"))
                        (rule "replace_known_right" (formula "25") (term "1,0,0") (ifseqformula "39"))
                         (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "40")))
                        (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                        (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "25") (term "0,0,1"))
                        (rule "leq_literals" (formula "25") (term "0,1"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "inEqSimp_subsumption0" (formula "2") (ifseqformula "25"))
                        (rule "leq_literals" (formula "2") (term "0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "24"))
                        (rule "qeq_literals" (formula "1") (term "0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch
                     (rule "allRight" (formula "34") (inst "sk=i_1_0"))
                     (rule "orRight" (formula "34"))
                     (rule "orRight" (formula "34"))
                     (rule "inEqSimp_leqRight" (formula "34"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_geqRight" (formula "35"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "17"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                     (rule "mul_literals" (formula "1") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "shift_paren_and" (formula "10") (term "1,0,1,0"))
                     (rule "seqGetAlphaCast" (formula "28") (term "0"))
                     (rule "castedGetAny" (formula "28") (term "0"))
                      (builtin "One Step Simplification" (formula "28"))
                     (rule "true_left" (formula "28"))
                     (rule "shift_paren_and" (formula "10") (term "0,1,0,1,0"))
                     (rule "shift_paren_and" (formula "10") (term "0,1,0"))
                     (rule "shift_paren_and" (formula "10") (term "0,0,1,0"))
                     (rule "shift_paren_and" (formula "10") (term "0,0,0,1,0"))
                     (rule "shift_paren_and" (formula "10") (term "0,0,0,0,1,0"))
                     (rule "allLeft" (formula "30") (inst "t=i_1_0"))
                     (rule "replace_known_right" (formula "30") (term "0,0") (ifseqformula "38"))
                      (builtin "One Step Simplification" (formula "30"))
                     (rule "inEqSimp_homoInEq1" (formula "30") (term "1"))
                     (rule "polySimp_addComm1" (formula "30") (term "0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1"))
                     (rule "polySimp_mulComm0" (formula "30") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "30") (term "1,1"))
                     (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1"))
                     (rule "mul_literals" (formula "30") (term "0,1,1"))
                     (rule "polySimp_elimOne" (formula "30") (term "1,1,1"))
                     (rule "inEqSimp_contradInEq1" (formula "30") (term "1") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "30") (term "0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "30") (term "0,0,1"))
                     (rule "polySimp_addComm1" (formula "30") (term "0,0,0,1"))
                     (rule "add_literals" (formula "30") (term "0,0,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1"))
                     (rule "add_literals" (formula "30") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
                     (rule "add_literals" (formula "30") (term "0,0,1"))
                     (rule "leq_literals" (formula "30") (term "0,1"))
                      (builtin "One Step Simplification" (formula "30"))
                     (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "30"))
                     (rule "qeq_literals" (formula "3") (term "0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "closeFalse" (formula "3"))
                  )
               )
               (branch
                  (rule "allRight" (formula "34") (inst "sk=i_0_0"))
                  (rule "orRight" (formula "34"))
                  (rule "orRight" (formula "34"))
                  (rule "allRight" (formula "36") (inst "sk=j_0"))
                  (rule "orRight" (formula "36"))
                  (rule "orRight" (formula "37"))
                  (rule "orRight" (formula "36"))
                  (rule "notRight" (formula "38"))
                  (rule "inEqSimp_leqRight" (formula "35"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_geqRight" (formula "36"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_leqRight" (formula "37"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_geqRight" (formula "38"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "20"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "21"))
                  (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                  (rule "mul_literals" (formula "4") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "4") (term "0"))
                  (rule "add_literals" (formula "4") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                  (rule "polySimp_elimOne" (formula "4") (term "0"))
                  (rule "shift_paren_and" (formula "14") (term "1,0,1,0"))
                  (rule "seqGetAlphaCast" (formula "32") (term "0"))
                  (rule "castedGetAny" (formula "32") (term "0"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "true_left" (formula "32"))
                  (rule "shift_paren_and" (formula "14") (term "0,1,0,1,0"))
                  (rule "shift_paren_and" (formula "14") (term "0,1,0"))
                  (rule "shift_paren_and" (formula "14") (term "0,0,1,0"))
                  (rule "shift_paren_and" (formula "14") (term "0,0,0,1,0"))
                  (rule "allLeft" (formula "35") (inst "t=i_0_0"))
                  (rule "inEqSimp_commuteGeq" (formula "35") (term "1,0,0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "35") (term "1,0,0,0,0") (ifseqformula "5"))
                  (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1,0,0,0,0"))
                  (rule "add_literals" (formula "35") (term "1,1,0,0,1,0,0,0,0"))
                  (rule "times_zero_1" (formula "35") (term "1,0,0,1,0,0,0,0"))
                  (rule "add_zero_right" (formula "35") (term "0,0,1,0,0,0,0"))
                  (rule "leq_literals" (formula "35") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "35"))
                  (rule "inEqSimp_contradInEq1" (formula "35") (term "1,0,0,0,0") (ifseqformula "6"))
                  (rule "qeq_literals" (formula "35") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "35"))
                  (rule "commute_or_2" (formula "35") (term "0"))
                  (rule "allLeft" (formula "37") (inst "t=Z(0(#))"))
                  (rule "leq_literals" (formula "37") (term "1,0"))
                   (builtin "One Step Simplification" (formula "37"))
                  (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                  (rule "applyEq" (formula "37") (term "1,1,0") (ifseqformula "32"))
                  (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "13"))
                  (rule "qeq_literals" (formula "37") (term "0,1"))
                   (builtin "One Step Simplification" (formula "37"))
                  (rule "allLeft" (formula "38") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                  (rule "inEqSimp_homoInEq1" (formula "38") (term "1"))
                  (rule "polySimp_mulComm0" (formula "38") (term "1,0,1"))
                  (rule "polySimp_rightDist" (formula "38") (term "1,0,1"))
                  (rule "mul_literals" (formula "38") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "38") (term "0,1"))
                  (rule "polySimp_addComm0" (formula "38") (term "0,0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,1"))
                  (rule "add_literals" (formula "38") (term "1,1,0,1"))
                  (rule "times_zero_1" (formula "38") (term "1,0,1"))
                  (rule "add_zero_right" (formula "38") (term "0,1"))
                  (rule "leq_literals" (formula "38") (term "1"))
                   (builtin "One Step Simplification" (formula "38"))
                  (rule "inEqSimp_homoInEq0" (formula "38") (term "1"))
                  (rule "polySimp_mulComm0" (formula "38") (term "1,0,1"))
                  (rule "polySimp_rightDist" (formula "38") (term "1,0,1"))
                  (rule "mul_literals" (formula "38") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "38") (term "0,1"))
                  (rule "add_literals" (formula "38") (term "0,0,1"))
                  (rule "add_zero_left" (formula "38") (term "0,1"))
                  (rule "applyEq" (formula "38") (term "1,1,0") (ifseqformula "33"))
                  (rule "inEqSimp_invertInEq1" (formula "38") (term "1"))
                  (rule "times_zero_2" (formula "38") (term "1,1"))
                  (rule "polySimp_mulLiterals" (formula "38") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "38") (term "0,1"))
                  (rule "inEqSimp_contradInEq1" (formula "38") (term "1") (ifseqformula "13"))
                  (rule "qeq_literals" (formula "38") (term "0,1"))
                   (builtin "One Step Simplification" (formula "38"))
                  (rule "shift_paren_and" (formula "14") (term "0,0,0,0,1,0"))
                  (rule "equalityToSeqGetAndSeqLenLeft" (formula "15") (inst "iv=iv"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "andLeft" (formula "15"))
                  (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                  (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "17"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "true_left" (formula "15"))
                  (rule "applyEq" (formula "15") (term "0,0,1,0") (ifseqformula "16"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "true_left" (formula "15"))
                  (rule "equalityToSeqGetAndSeqLenLeft" (formula "17") (inst "iv=iv"))
                  (rule "andLeft" (formula "17"))
                  (rule "lenOfSeqSub" (formula "17") (term "0"))
                  (rule "polySimp_elimSub" (formula "17") (term "1,0"))
                  (rule "mul_literals" (formula "17") (term "1,1,0"))
                  (rule "add_zero_right" (formula "17") (term "1,0"))
                  (rule "lenOfSeqSub" (formula "18") (term "1,1,0,0"))
                  (rule "polySimp_elimSub" (formula "18") (term "1,1,1,0,0"))
                  (rule "times_zero_2" (formula "18") (term "1,1,1,1,0,0"))
                  (rule "add_zero_right" (formula "18") (term "1,1,1,0,0"))
                  (rule "lenOfSeqSubEQ" (formula "17") (term "1") (ifseqformula "19"))
                  (rule "eqSymm" (formula "17"))
                  (rule "polySimp_elimSub" (formula "17") (term "1,0"))
                  (rule "times_zero_2" (formula "17") (term "1,1,0"))
                  (rule "add_zero_right" (formula "17") (term "1,0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "true_left" (formula "17"))
                  (rule "inEqSimp_ltToLeq" (formula "17") (term "0,1,1,0,0"))
                  (rule "add_zero_right" (formula "17") (term "0,0,1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                  (rule "applyEq" (formula "17") (term "0,0,1,0") (ifseqformula "18"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "true_left" (formula "17"))
                  (rule "allLeft" (formula "25") (inst "t=j_0"))
                  (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                  (rule "applyEq" (formula "25") (term "1,0,0,0,0") (ifseqformula "7"))
                  (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                  (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                  (rule "add_literals" (formula "25") (term "0,0,1"))
                  (rule "leq_literals" (formula "25") (term "0,1"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "25") (term "0,1"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "notLeft" (formula "25"))
                  (rule "allLeft" (formula "25") (inst "t=Z(0(#))"))
                  (rule "leq_literals" (formula "25") (term "1,0"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                  (rule "applyEq" (formula "25") (term "1,0,0,0") (ifseqformula "33"))
                  (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "13"))
                  (rule "qeq_literals" (formula "25") (term "0,1"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "notLeft" (formula "25"))
                  (rule "allLeft" (formula "23") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                  (rule "inEqSimp_homoInEq0" (formula "23") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,0,1,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,1,0"))
                  (rule "add_literals" (formula "23") (term "0,0,1,0"))
                  (rule "add_zero_left" (formula "23") (term "0,1,0"))
                  (rule "inEqSimp_homoInEq1" (formula "23") (term "1"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,1"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,0,1"))
                  (rule "mul_literals" (formula "23") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,1"))
                  (rule "polySimp_addComm0" (formula "23") (term "0,0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,1"))
                  (rule "add_literals" (formula "23") (term "1,1,0,1"))
                  (rule "times_zero_1" (formula "23") (term "1,0,1"))
                  (rule "add_zero_right" (formula "23") (term "0,1"))
                  (rule "leq_literals" (formula "23") (term "1"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "applyEq" (formula "23") (term "0,0,0") (ifseqformula "34"))
                  (rule "replace_known_right" (formula "23") (term "0,0") (ifseqformula "44"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "true_left" (formula "23"))
                  (rule "allLeft" (formula "23") (inst "t=Z(0(#))"))
                  (rule "leq_literals" (formula "23") (term "1,0"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                  (rule "applyEq" (formula "23") (term "0,0,0") (ifseqformula "33"))
                  (rule "replace_known_right" (formula "23") (term "0,0") (ifseqformula "43"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "true_left" (formula "23"))
                  (rule "allLeft" (formula "25") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                  (rule "inEqSimp_homoInEq1" (formula "25") (term "1"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,0,1"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,0,1"))
                  (rule "mul_literals" (formula "25") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "25") (term "0,1"))
                  (rule "polySimp_addComm0" (formula "25") (term "0,0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,1"))
                  (rule "add_literals" (formula "25") (term "1,1,0,1"))
                  (rule "times_zero_1" (formula "25") (term "1,0,1"))
                  (rule "add_zero_right" (formula "25") (term "0,1"))
                  (rule "leq_literals" (formula "25") (term "1"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "inEqSimp_homoInEq0" (formula "25") (term "1"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,0,1"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,0,1"))
                  (rule "mul_literals" (formula "25") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "25") (term "0,1"))
                  (rule "add_literals" (formula "25") (term "0,0,1"))
                  (rule "add_zero_left" (formula "25") (term "0,1"))
                  (rule "applyEq" (formula "25") (term "1,0,0,0") (ifseqformula "34"))
                  (rule "inEqSimp_invertInEq1" (formula "25") (term "1"))
                  (rule "times_zero_2" (formula "25") (term "1,1"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "25") (term "0,1"))
                  (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "13"))
                  (rule "qeq_literals" (formula "25") (term "0,1"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "notLeft" (formula "25"))
                  (rule "allLeft" (formula "23") (inst "t=i_0_0"))
                  (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "5"))
                  (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
                  (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "23") (term "0,0,1"))
                  (rule "leq_literals" (formula "23") (term "0,1"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "6"))
                  (rule "qeq_literals" (formula "23") (term "0,1"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "notLeft" (formula "23"))
                  (rule "allLeft" (formula "23") (inst "t=j_0"))
                  (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                  (rule "applyEq" (formula "23") (term "0,0,0,0") (ifseqformula "7"))
                  (rule "replace_known_right" (formula "23") (term "0,0,0") (ifseqformula "41"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "true_left" (formula "23"))
                  (rule "allLeft" (formula "35") (inst "t=j_0"))
                  (rule "replace_known_right" (formula "35") (term "1,0") (ifseqformula "49"))
                   (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "7")))
                  (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "35") (term "0,0"))
                   (builtin "One Step Simplification" (formula "35"))
                  (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "2"))
                  (rule "andLeft" (formula "35"))
                  (rule "inEqSimp_homoInEq1" (formula "35"))
                  (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                  (rule "add_literals" (formula "35") (term "1,1,0"))
                  (rule "times_zero_1" (formula "35") (term "1,0"))
                  (rule "add_zero_right" (formula "35") (term "0"))
                  (rule "leq_literals" (formula "35"))
                  (rule "closeFalse" (formula "35"))
               )
            )
            (branch
               (rule "allRight" (formula "34") (inst "sk=i_0"))
               (rule "orRight" (formula "34"))
               (rule "orRight" (formula "34"))
               (rule "inEqSimp_leqRight" (formula "34"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "35"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "17"))
               (rule "polySimp_rightDist" (formula "1") (term "0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "shift_paren_and" (formula "10") (term "1,0,1,0"))
               (rule "seqGetAlphaCast" (formula "28") (term "0"))
               (rule "castedGetAny" (formula "28") (term "0"))
                (builtin "One Step Simplification" (formula "28"))
               (rule "true_left" (formula "28"))
               (rule "shift_paren_and" (formula "10") (term "0,1,0,1,0"))
               (rule "shift_paren_and" (formula "10") (term "0,1,0"))
               (rule "shift_paren_and" (formula "10") (term "0,0,1,0"))
               (rule "shift_paren_and" (formula "10") (term "0,0,0,1,0"))
               (rule "shift_paren_and" (formula "10") (term "0,0,0,0,1,0"))
               (rule "allLeft" (formula "32") (inst "t=i_0"))
               (rule "replace_known_right" (formula "32") (term "0,0") (ifseqformula "38"))
                (builtin "One Step Simplification" (formula "32"))
               (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "32") (term "0") (ifseqformula "3"))
               (rule "qeq_literals" (formula "32") (term "0,0"))
                (builtin "One Step Simplification" (formula "32"))
               (rule "inEqSimp_contradInEq1" (formula "32") (ifseqformula "2"))
               (rule "andLeft" (formula "32"))
               (rule "inEqSimp_homoInEq1" (formula "32"))
               (rule "polySimp_pullOutFactor1b" (formula "32") (term "0"))
               (rule "add_literals" (formula "32") (term "1,1,0"))
               (rule "times_zero_1" (formula "32") (term "1,0"))
               (rule "add_zero_right" (formula "32") (term "0"))
               (rule "leq_literals" (formula "32"))
               (rule "closeFalse" (formula "32"))
            )
         )
      )
   )
   (branch "self.list.size >= 1 + self.index FALSE"
      (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "33"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "replace_known_left" (formula "13") (term "0") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "true_left" (formula "13"))
      (rule "replace_known_right" (formula "38") (term "0,1,1,0,0,1,0,1") (ifseqformula "32"))
       (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "32")) (ifInst ""  (formula "13")))
      (rule "qeq_literals" (formula "38") (term "0,0"))
       (builtin "One Step Simplification" (formula "38"))
      (rule "inEqSimp_geqRight" (formula "32"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1"))
      (rule "polySimp_elimOne" (formula "1") (term "1"))
      (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "1"))
      (rule "applyEq" (formula "26") (term "1,1,0") (ifseqformula "8"))
      (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "8"))
      (rule "applyEq" (formula "32") (term "1,1,0,0,0") (ifseqformula "8"))
      (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "8"))
      (rule "applyEq" (formula "11") (term "1,1,1,1,1,1,0,1,0") (ifseqformula "8"))
      (rule "polySimp_pullOutFactor2b" (formula "11") (term "1,1,1,1,1,0,1,0"))
      (rule "add_literals" (formula "11") (term "1,1,1,1,1,1,1,0,1,0"))
      (rule "times_zero_1" (formula "11") (term "1,1,1,1,1,1,0,1,0"))
      (rule "add_zero_right" (formula "11") (term "1,1,1,1,1,0,1,0"))
      (rule "applyEq" (formula "39") (term "1,1,0,0,1,1") (ifseqformula "8"))
      (rule "applyEq" (formula "1") (term "0") (ifseqformula "8"))
      (rule "inEqSimp_homoInEq0" (formula "1"))
      (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "1,0"))
      (rule "times_zero_1" (formula "1") (term "0"))
      (rule "qeq_literals" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "applyEq" (formula "10") (term "1,1,1,0,0,0,1,0,1,0") (ifseqformula "7"))
      (rule "polySimp_pullOutFactor2" (formula "10") (term "1,1,0,0,0,1,0,1,0"))
      (rule "add_literals" (formula "10") (term "1,1,1,0,0,0,1,0,1,0"))
      (rule "times_zero_1" (formula "10") (term "1,1,0,0,0,1,0,1,0"))
      (rule "applyEq" (formula "30") (term "1,1,1,0") (ifseqformula "7"))
      (rule "applyEq" (formula "38") (term "1,1,0,0,1,0,0,0,1") (ifseqformula "7"))
      (rule "applyEq" (formula "19") (term "1,1,0") (ifseqformula "7"))
      (rule "applyEq" (formula "38") (term "1,1,0,0,1,0,1") (ifseqformula "7"))
      (rule "applyEq" (formula "38") (term "1,1,1,0,0,1,0,0,1") (ifseqformula "7"))
      (rule "applyEq" (formula "13") (term "2,0") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "eqSymm" (formula "13"))
      (rule "applyEq" (formula "10") (term "1,1,1,0,0,1,1,0,1,0") (ifseqformula "7"))
      (rule "polySimp_pullOutFactor2" (formula "10") (term "1,1,0,0,1,1,0,1,0"))
      (rule "add_literals" (formula "10") (term "1,1,1,0,0,1,1,0,1,0"))
      (rule "times_zero_1" (formula "10") (term "1,1,0,0,1,1,0,1,0"))
      (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "7"))
      (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "7"))
      (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "7"))
      (rule "applyEq" (formula "38") (term "1,1,0,0,1,0,1,0,1") (ifseqformula "7"))
      (rule "applyEq" (formula "18") (term "0") (ifseqformula "7"))
      (rule "applyEq" (formula "10") (term "1,1,0,1,0,1,0,1,0") (ifseqformula "7"))
      (rule "polySimp_pullOutFactor2b" (formula "10") (term "1,0,1,0,1,0,1,0"))
      (rule "add_literals" (formula "10") (term "1,1,1,0,1,0,1,0,1,0"))
      (rule "times_zero_1" (formula "10") (term "1,1,0,1,0,1,0,1,0"))
      (rule "add_zero_right" (formula "10") (term "1,0,1,0,1,0,1,0"))
      (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "7"))
      (rule "applyEq" (formula "37") (term "1,1,0,0,0,0,0,0,1") (ifseqformula "7"))
      (rule "applyEq" (formula "15") (term "0") (ifseqformula "7"))
      (rule "applyEq" (formula "29") (term "1,1,0,0,0,0,0") (ifseqformula "7"))
      (rule "applyEq" (formula "30") (term "1,1,0") (ifseqformula "7"))
      (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "7"))
      (rule "applyEq" (formula "8") (term "0") (ifseqformula "7"))
      (rule "inEqSimp_homoInEq1" (formula "8"))
      (rule "polySimp_pullOutFactor1" (formula "8") (term "0"))
      (rule "add_literals" (formula "8") (term "1,0"))
      (rule "times_zero_1" (formula "8") (term "0"))
      (rule "leq_literals" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "applyEq" (formula "30") (term "1,1,0,0,1") (ifseqformula "7"))
      (rule "applyEq" (formula "17") (term "1,1,0") (ifseqformula "7"))
      (rule "applyEq" (formula "14") (term "1") (ifseqformula "7"))
      (rule "applyEq" (formula "35") (term "1,1,1,0,1,0,1,0,1,0,1,0") (ifseqformula "7"))
      (rule "polySimp_pullOutFactor2b" (formula "35") (term "1,1,0,1,0,1,0,1,0,1,0"))
      (rule "add_literals" (formula "35") (term "1,1,1,1,0,1,0,1,0,1,0,1,0"))
      (rule "times_zero_1" (formula "35") (term "1,1,1,0,1,0,1,0,1,0,1,0"))
      (rule "add_zero_right" (formula "35") (term "1,1,0,1,0,1,0,1,0,1,0"))
      (rule "applyEq" (formula "15") (term "1") (ifseqformula "7"))
      (rule "inEqSimp_or_tautInEq0" (formula "9") (term "0,0"))
      (rule "add_zero_right" (formula "9") (term "1,1,0,0"))
      (rule "qeq_literals" (formula "9") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "inEqSimp_or_tautInEq0" (formula "34") (term "0,0,1,0"))
      (rule "add_zero_right" (formula "34") (term "1,1,0,0,1,0"))
      (rule "qeq_literals" (formula "34") (term "1,0,0,1,0"))
       (builtin "One Step Simplification" (formula "34"))
      (rule "ifthenelse_split" (formula "8") (term "1,1,0,0"))
      (branch "self.index >= 1 TRUE"
         (rule "replace_known_left" (formula "35") (term "0,1,1,0,0,0") (ifseqformula "8"))
          (builtin "One Step Simplification" (formula "35"))
         (rule "inEqSimp_contradEq7" (formula "30") (term "0") (ifseqformula "8"))
         (rule "times_zero_1" (formula "30") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "30") (term "0,0,0"))
         (rule "leq_literals" (formula "30") (term "0,0"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "false_right" (formula "30"))
         (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "8"))
         (rule "leq_literals" (formula "5") (term "0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "true_left" (formula "5"))
         (rule "shift_paren_and" (formula "8") (term "1,0,1,0"))
         (rule "andRight" (formula "33"))
         (branch
            (rule "allRight" (formula "33") (inst "sk=i_0_0"))
            (rule "orRight" (formula "33"))
            (rule "orRight" (formula "33"))
            (rule "inEqSimp_leqRight" (formula "33"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "replace_known_left" (formula "35") (term "0,0,1,0,1,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "35"))
            (rule "inEqSimp_geqRight" (formula "34"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_homoInEq0" (formula "35") (term "0,1,0,1,0"))
            (rule "polySimp_addComm1" (formula "35") (term "0,0,1,0,1,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "0,1,0,1,0"))
            (rule "polySimp_mulComm0" (formula "35") (term "1,0,1,0,1,0"))
            (rule "polySimp_rightDist" (formula "35") (term "1,0,1,0,1,0"))
            (rule "mul_literals" (formula "35") (term "0,1,0,1,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,1,0,1,0"))
            (rule "polySimp_elimOne" (formula "35") (term "1,1,0,1,0,1,0"))
            (rule "replace_known_left" (formula "35") (term "0,1,0,1,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "35"))
            (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "7"))
            (rule "polySimp_rightDist" (formula "1") (term "0,0"))
            (rule "mul_literals" (formula "1") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "nnf_ex2all" (formula "36"))
            (rule "nnf_notAnd" (formula "1") (term "0"))
            (rule "nnf_notAnd" (formula "1") (term "1,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notAnd" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notOr" (formula "1") (term "0,0,0"))
            (rule "commute_or" (formula "1") (term "1,0"))
            (rule "commute_or" (formula "1") (term "0,0"))
            (rule "commute_or_2" (formula "1") (term "0"))
            (rule "shift_paren_or" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "cnf_rightDist" (formula "1") (term "0"))
            (rule "distr_forallAnd" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "shift_paren_or" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "castedGetAny" (formula "1") (term "0,1,0"))
            (rule "castedGetAny" (formula "1") (term "1,0,0,0,0"))
            (rule "commute_or" (formula "1") (term "0"))
            (rule "seqGetAlphaCast" (formula "28") (term "0"))
            (rule "castedGetAny" (formula "28") (term "0"))
             (builtin "One Step Simplification" (formula "28"))
            (rule "true_left" (formula "28"))
            (rule "shift_paren_and" (formula "12") (term "0,1,0,1,0"))
            (rule "shift_paren_and" (formula "12") (term "0,1,0"))
            (rule "shift_paren_and" (formula "12") (term "0,0,1,0"))
            (rule "shift_paren_and" (formula "12") (term "0,0,0,1,0"))
            (rule "shift_paren_and" (formula "12") (term "0,0,0,0,1,0"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "15") (inst "iv=iv"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "andLeft" (formula "15"))
            (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
            (rule "applyEq" (formula "16") (term "0,0,1,0") (ifseqformula "17"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "true_left" (formula "16"))
            (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "true_left" (formula "15"))
            (rule "shift_paren_and" (formula "12") (term "0,0,0,0,0,1,0"))
            (rule "ex_pull_out3" (formula "12") (term "0"))
            (rule "cnf_rightDist" (formula "12") (term "0,0"))
            (rule "shift_paren_or" (formula "12") (term "1,0,0"))
            (rule "commute_or_2" (formula "12") (term "0,1,0,0"))
            (rule "inEqSimp_or_tautInEq1" (formula "12") (term "1,0,0"))
            (rule "inEqSimp_homoInEq1" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,1,0,0"))
            (rule "add_literals" (formula "12") (term "1,0,1,1,0,0"))
            (rule "times_zero_1" (formula "12") (term "0,1,1,0,0"))
            (rule "leq_literals" (formula "12") (term "1,1,0,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "cnf_rightDist" (formula "12") (term "0,0"))
            (rule "shift_paren_or" (formula "12") (term "1,0,0"))
            (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0,1,0,0"))
            (rule "add_zero_right" (formula "12") (term "1,1,0,1,0,0"))
            (rule "qeq_literals" (formula "12") (term "1,0,1,0,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "cnf_rightDist" (formula "12") (term "0,0"))
            (rule "shift_paren_or" (formula "12") (term "1,0,0"))
            (rule "commute_or_2" (formula "12") (term "0,1,0,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
            (rule "commute_or_2" (formula "12") (term "1,0,0,0"))
            (rule "shift_paren_or" (formula "12") (term "0,1,0,0,0"))
            (rule "commute_or" (formula "12") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_or_tautInEq1" (formula "12") (term "0,1,0,0,0"))
            (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0,1,0,0,0"))
            (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0,1,0,0,0"))
            (rule "add_literals" (formula "12") (term "1,0,1,0,1,0,0,0"))
            (rule "times_zero_1" (formula "12") (term "0,1,0,1,0,0,0"))
            (rule "leq_literals" (formula "12") (term "1,0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
            (rule "commute_or_2" (formula "12") (term "1,0,0,0"))
            (rule "shift_paren_or" (formula "12") (term "0,1,0,0,0"))
            (rule "inEqSimp_or_tautInEq2" (formula "12") (term "0,0,1,0,0,0"))
            (rule "add_zero_right" (formula "12") (term "1,1,0,0,1,0,0,0"))
            (rule "qeq_literals" (formula "12") (term "1,0,0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
            (rule "shift_paren_or" (formula "12") (term "1,0,0,0"))
            (rule "commute_or_2" (formula "12") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "cnf_rightDist" (formula "12") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "12") (term "0,0,0,0,0"))
            (rule "shift_paren_or" (formula "12") (term "1,0,0,0,0"))
            (rule "commute_or" (formula "12") (term "0,0,0,0,0,0"))
            (rule "seqGetAlphaCast" (formula "29") (term "0"))
            (rule "castedGetAny" (formula "29") (term "0"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "true_left" (formula "29"))
            (rule "allLeft" (formula "23") (inst "t=i_0_0"))
            (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "3"))
            (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
            (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
            (rule "add_literals" (formula "23") (term "0,0,1"))
            (rule "leq_literals" (formula "23") (term "0,1"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "4"))
            (rule "qeq_literals" (formula "23") (term "0,1"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "notLeft" (formula "23"))
            (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "33"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "allLeft" (formula "21") (inst "t=Z(0(#))"))
            (rule "leq_literals" (formula "21") (term "1,0"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
            (rule "applyEq" (formula "21") (term "1,0,0,0") (ifseqformula "29"))
            (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "11"))
            (rule "qeq_literals" (formula "21") (term "0,1"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "notLeft" (formula "21"))
            (rule "allLeft" (formula "21") (inst "t=add(Z(neglit(1(#))),
    int::select(heap, self, LinkedListIterator::$index))"))
            (rule "inEqSimp_homoInEq0" (formula "21") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,0,1,0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,0,1,0"))
            (rule "mul_literals" (formula "21") (term "0,1,0,1,0"))
            (rule "polySimp_addAssoc" (formula "21") (term "0,1,0"))
            (rule "add_literals" (formula "21") (term "0,0,1,0"))
            (rule "add_zero_left" (formula "21") (term "0,1,0"))
            (rule "inEqSimp_homoInEq1" (formula "21") (term "1"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,0,1"))
            (rule "polySimp_rightDist" (formula "21") (term "1,0,1"))
            (rule "mul_literals" (formula "21") (term "0,1,0,1"))
            (rule "polySimp_addAssoc" (formula "21") (term "0,1"))
            (rule "polySimp_addComm0" (formula "21") (term "0,0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,1"))
            (rule "add_literals" (formula "21") (term "1,1,0,1"))
            (rule "times_zero_1" (formula "21") (term "1,0,1"))
            (rule "add_zero_right" (formula "21") (term "0,1"))
            (rule "leq_literals" (formula "21") (term "1"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "applyEq" (formula "21") (term "1,0,0,0") (ifseqformula "30"))
            (rule "inEqSimp_invertInEq1" (formula "21") (term "1"))
            (rule "mul_literals" (formula "21") (term "1,1"))
            (rule "polySimp_mulLiterals" (formula "21") (term "0,1"))
            (rule "polySimp_elimOne" (formula "21") (term "0,1"))
            (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "11"))
            (rule "qeq_literals" (formula "21") (term "0,1"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "notLeft" (formula "21"))
            (rule "allLeft" (formula "25") (inst "t=i_0_0"))
            (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "3"))
            (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
            (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "0,0,1"))
            (rule "leq_literals" (formula "25") (term "0,1"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "4"))
            (rule "qeq_literals" (formula "25") (term "0,1"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "notLeft" (formula "25"))
            (rule "allLeft" (formula "19") (inst "t=add(Z(neglit(1(#))),
    int::select(heap, self, LinkedListIterator::$index))"))
            (rule "inEqSimp_homoInEq0" (formula "19") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,0,1,0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,0,1,0"))
            (rule "mul_literals" (formula "19") (term "0,1,0,1,0"))
            (rule "polySimp_addAssoc" (formula "19") (term "0,1,0"))
            (rule "add_literals" (formula "19") (term "0,0,1,0"))
            (rule "add_zero_left" (formula "19") (term "0,1,0"))
            (rule "inEqSimp_homoInEq1" (formula "19") (term "1"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,0,1"))
            (rule "polySimp_rightDist" (formula "19") (term "1,0,1"))
            (rule "mul_literals" (formula "19") (term "0,1,0,1"))
            (rule "polySimp_addAssoc" (formula "19") (term "0,1"))
            (rule "polySimp_addComm0" (formula "19") (term "0,0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,1"))
            (rule "add_literals" (formula "19") (term "1,1,0,1"))
            (rule "times_zero_1" (formula "19") (term "1,0,1"))
            (rule "add_literals" (formula "19") (term "0,1"))
            (rule "leq_literals" (formula "19") (term "1"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "applyEq" (formula "19") (term "0,0,0") (ifseqformula "30"))
            (rule "replace_known_right" (formula "19") (term "0,0") (ifseqformula "39"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "true_left" (formula "19"))
            (rule "allLeft" (formula "19") (inst "t=Z(0(#))"))
            (rule "leq_literals" (formula "19") (term "1,0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
            (rule "applyEq" (formula "19") (term "0,0,0") (ifseqformula "29"))
            (rule "replace_known_right" (formula "19") (term "0,0") (ifseqformula "38"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "true_left" (formula "19"))
            (rule "allLeft" (formula "26") (inst "t=i_0_0"))
            (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "3"))
            (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
            (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "26") (term "0,0,1"))
            (rule "leq_literals" (formula "26") (term "0,1"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "4"))
            (rule "qeq_literals" (formula "26") (term "0,1"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "26"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "allLeft" (formula "32") (inst "t=i_0_0"))
            (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0") (ifseqformula "3"))
            (rule "qeq_literals" (formula "32") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "32"))
            (rule "inEqSimp_contradInEq1" (formula "32") (term "1") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
            (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "32") (term "0,0,1"))
            (rule "leq_literals" (formula "32") (term "0,1"))
             (builtin "One Step Simplification" (formula "32"))
            (rule "typeEqDerived" (formula "25") (term "0") (ifseqformula "32"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "true_left" (formula "25"))
            (rule "applyEq" (formula "34") (term "0") (ifseqformula "31"))
            (rule "allLeft" (formula "32") (inst "t=add(Z(neglit(1(#))),
    int::select(heap, self, LinkedListIterator::$index))"))
            (rule "inEqSimp_homoInEq0" (formula "32") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "32") (term "1,0,1,0"))
            (rule "polySimp_rightDist" (formula "32") (term "1,0,1,0"))
            (rule "mul_literals" (formula "32") (term "0,1,0,1,0"))
            (rule "polySimp_addAssoc" (formula "32") (term "0,1,0"))
            (rule "add_literals" (formula "32") (term "0,0,1,0"))
            (rule "add_zero_left" (formula "32") (term "0,1,0"))
            (rule "inEqSimp_homoInEq1" (formula "32") (term "1"))
            (rule "polySimp_mulComm0" (formula "32") (term "1,0,1"))
            (rule "polySimp_rightDist" (formula "32") (term "1,0,1"))
            (rule "mul_literals" (formula "32") (term "0,1,0,1"))
            (rule "polySimp_addAssoc" (formula "32") (term "0,1"))
            (rule "polySimp_addComm0" (formula "32") (term "0,0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,1"))
            (rule "add_literals" (formula "32") (term "1,1,0,1"))
            (rule "times_zero_1" (formula "32") (term "1,0,1"))
            (rule "add_literals" (formula "32") (term "0,1"))
            (rule "leq_literals" (formula "32") (term "1"))
             (builtin "One Step Simplification" (formula "32"))
            (rule "applyEq" (formula "32") (term "1,1,0") (ifseqformula "28"))
            (rule "inEqSimp_invertInEq1" (formula "32") (term "1"))
            (rule "mul_literals" (formula "32") (term "1,1"))
            (rule "polySimp_mulLiterals" (formula "32") (term "0,1"))
            (rule "polySimp_elimOne" (formula "32") (term "0,1"))
            (rule "inEqSimp_contradInEq1" (formula "32") (term "1") (ifseqformula "10"))
            (rule "qeq_literals" (formula "32") (term "0,1"))
             (builtin "One Step Simplification" (formula "32"))
            (rule "allLeft" (formula "33") (inst "t=Z(0(#))"))
            (rule "leq_literals" (formula "33") (term "1,0"))
             (builtin "One Step Simplification" (formula "33"))
            (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
            (rule "applyEq" (formula "33") (term "1,1,0") (ifseqformula "27"))
            (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "10"))
            (rule "qeq_literals" (formula "33") (term "0,1"))
             (builtin "One Step Simplification" (formula "33"))
            (rule "allLeft" (formula "23") (inst "t=i_0_0"))
            (rule "replace_known_right" (formula "23") (term "0,0,0") (ifseqformula "40"))
             (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "36")))
            (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
            (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "23") (term "0,0,1"))
            (rule "leq_literals" (formula "23") (term "0,1"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "inEqSimp_subsumption0" (formula "1") (ifseqformula "23"))
            (rule "leq_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "22"))
            (rule "qeq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "closeFalse" (formula "2"))
         )
         (branch
            (rule "andRight" (formula "33"))
            (branch
               (rule "andRight" (formula "33"))
               (branch
                  (rule "andRight" (formula "33"))
                  (branch
                     (rule "andRight" (formula "33"))
                     (branch
                        (rule "allRight" (formula "33") (inst "sk=i_3_0"))
                        (rule "orRight" (formula "33"))
                        (rule "orRight" (formula "33"))
                        (rule "inEqSimp_leqRight" (formula "33"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "34"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "7"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "nnf_ex2all" (formula "36"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "nnf_notAnd" (formula "1") (term "1,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "nnf_notOr" (formula "1") (term "0,0,0"))
                        (rule "commute_or" (formula "1") (term "1,0"))
                        (rule "commute_or" (formula "1") (term "0,0"))
                        (rule "commute_or_2" (formula "1") (term "0"))
                        (rule "shift_paren_or" (formula "1") (term "0,0"))
                        (rule "cnf_rightDist" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "shift_paren_or" (formula "1") (term "0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "castedGetAny" (formula "1") (term "0,0,1,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,1,1,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,0,0"))
                        (rule "shift_paren_or" (formula "1") (term "0"))
                        (rule "commute_or" (formula "1") (term "0,0"))
                        (rule "seqGetAlphaCast" (formula "28") (term "0"))
                        (rule "castedGetAny" (formula "28") (term "0"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "true_left" (formula "28"))
                        (rule "shift_paren_and" (formula "12") (term "0,1,0,1,0"))
                        (rule "shift_paren_and" (formula "12") (term "0,1,0"))
                        (rule "shift_paren_and" (formula "12") (term "0,0,1,0"))
                        (rule "shift_paren_and" (formula "12") (term "0,0,0,1,0"))
                        (rule "shift_paren_and" (formula "12") (term "0,0,0,0,1,0"))
                        (rule "shift_paren_and" (formula "12") (term "0,0,0,0,0,1,0"))
                        (rule "ex_pull_out3" (formula "12") (term "0"))
                        (rule "cnf_rightDist" (formula "12") (term "0,0"))
                        (rule "shift_paren_or" (formula "12") (term "1,0,0"))
                        (rule "commute_or_2" (formula "12") (term "0,1,0,0"))
                        (rule "inEqSimp_or_tautInEq1" (formula "12") (term "1,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "12") (term "1,1,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,1,0,0"))
                        (rule "add_literals" (formula "12") (term "1,0,1,1,0,0"))
                        (rule "times_zero_1" (formula "12") (term "0,1,1,0,0"))
                        (rule "leq_literals" (formula "12") (term "1,1,0,0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "cnf_rightDist" (formula "12") (term "0,0"))
                        (rule "shift_paren_or" (formula "12") (term "1,0,0"))
                        (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0,1,0,0"))
                        (rule "add_zero_right" (formula "12") (term "1,1,0,1,0,0"))
                        (rule "qeq_literals" (formula "12") (term "1,0,1,0,0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "cnf_rightDist" (formula "12") (term "0,0"))
                        (rule "shift_paren_or" (formula "12") (term "1,0,0"))
                        (rule "commute_or_2" (formula "12") (term "0,1,0,0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                        (rule "commute_or_2" (formula "12") (term "1,0,0,0"))
                        (rule "shift_paren_or" (formula "12") (term "0,1,0,0,0"))
                        (rule "commute_or" (formula "12") (term "0,0,1,0,0,0"))
                        (rule "inEqSimp_or_tautInEq1" (formula "12") (term "0,1,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0,1,0,0,0"))
                        (rule "add_literals" (formula "12") (term "1,0,1,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "12") (term "0,1,0,1,0,0,0"))
                        (rule "leq_literals" (formula "12") (term "1,0,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                        (rule "commute_or_2" (formula "12") (term "1,0,0,0"))
                        (rule "shift_paren_or" (formula "12") (term "0,1,0,0,0"))
                        (rule "inEqSimp_or_tautInEq2" (formula "12") (term "0,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "12") (term "1,1,0,0,1,0,0,0"))
                        (rule "qeq_literals" (formula "12") (term "1,0,0,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                        (rule "shift_paren_or" (formula "12") (term "1,0,0,0"))
                        (rule "commute_or_2" (formula "12") (term "0,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "cnf_rightDist" (formula "12") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "12") (term "0,0,0,0,0"))
                        (rule "shift_paren_or" (formula "12") (term "1,0,0,0,0"))
                        (rule "commute_or" (formula "12") (term "0,0,0,0,0,0"))
                        (rule "equalityToSeqGetAndSeqLenLeft" (formula "15") (inst "iv=iv"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "andLeft" (formula "15"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                        (rule "applyEq" (formula "16") (term "0,0,1,0,0,1,0,0") (ifseqformula "17"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "times_zero_2" (formula "16") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "16") (term "0,0,1,0,0"))
                        (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "17"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "applyEq" (formula "15") (term "0,0,1,0") (ifseqformula "16"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "allLeft" (formula "21") (inst "t=Z(0(#))"))
                        (rule "leq_literals" (formula "21") (term "1,0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                        (rule "applyEq" (formula "21") (term "1,0,0,0") (ifseqformula "29"))
                        (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "11"))
                        (rule "qeq_literals" (formula "21") (term "0,1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "notLeft" (formula "21"))
                        (rule "allLeft" (formula "21") (inst "t=add(Z(neglit(1(#))),
    int::select(heap, self, LinkedListIterator::$index))"))
                        (rule "inEqSimp_homoInEq1" (formula "21") (term "1"))
                        (rule "polySimp_mulComm0" (formula "21") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "21") (term "1,0,1"))
                        (rule "mul_literals" (formula "21") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "21") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "21") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,1"))
                        (rule "add_literals" (formula "21") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "21") (term "1,0,1"))
                        (rule "add_zero_right" (formula "21") (term "0,1"))
                        (rule "leq_literals" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "inEqSimp_homoInEq0" (formula "21") (term "1"))
                        (rule "polySimp_mulComm0" (formula "21") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "21") (term "1,0,1"))
                        (rule "mul_literals" (formula "21") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "21") (term "0,1"))
                        (rule "add_literals" (formula "21") (term "0,0,1"))
                        (rule "add_zero_left" (formula "21") (term "0,1"))
                        (rule "applyEq" (formula "21") (term "1,0,0,0") (ifseqformula "30"))
                        (rule "inEqSimp_invertInEq1" (formula "21") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "21") (term "0,1"))
                        (rule "times_zero_2" (formula "21") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "21") (term "0,1"))
                        (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "11"))
                        (rule "qeq_literals" (formula "21") (term "0,1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "notLeft" (formula "21"))
                        (rule "allLeft" (formula "21") (inst "t=i_3_0"))
                        (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "21") (term "1,0") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "21") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                        (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                        (rule "add_literals" (formula "21") (term "0,0,1"))
                        (rule "leq_literals" (formula "21") (term "0,1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "notLeft" (formula "21"))
                        (rule "replace_known_right" (formula "1") (term "1,0") (ifseqformula "33"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "allLeft" (formula "19") (inst "t=add(Z(neglit(1(#))),
    int::select(heap, self, LinkedListIterator::$index))"))
                        (rule "inEqSimp_homoInEq0" (formula "19") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,1,0"))
                        (rule "add_literals" (formula "19") (term "0,0,1,0"))
                        (rule "add_zero_left" (formula "19") (term "0,1,0"))
                        (rule "inEqSimp_homoInEq1" (formula "19") (term "1"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0,1"))
                        (rule "mul_literals" (formula "19") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "19") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,1"))
                        (rule "add_literals" (formula "19") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "19") (term "1,0,1"))
                        (rule "add_zero_right" (formula "19") (term "0,1"))
                        (rule "leq_literals" (formula "19") (term "1"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "applyEq" (formula "19") (term "0,0,0") (ifseqformula "30"))
                        (rule "replace_known_right" (formula "19") (term "0,0") (ifseqformula "38"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "true_left" (formula "19"))
                        (rule "allLeft" (formula "19") (inst "t=Z(0(#))"))
                        (rule "leq_literals" (formula "19") (term "1,0"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                        (rule "applyEq" (formula "19") (term "0,0,0") (ifseqformula "29"))
                        (rule "replace_known_right" (formula "19") (term "0,0") (ifseqformula "37"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "true_left" (formula "19"))
                        (rule "seqGetAlphaCast" (formula "29") (term "0"))
                        (rule "castedGetAny" (formula "29") (term "0"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "allLeft" (formula "19") (inst "t=i_3_0"))
                        (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "19") (term "1,0") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "19") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                        (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "19") (term "0,0,1"))
                        (rule "leq_literals" (formula "19") (term "0,1"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "notLeft" (formula "19"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "33"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "allLeft" (formula "22") (inst "t=i_3_0"))
                        (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                        (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "22") (term "0,0,1"))
                        (rule "leq_literals" (formula "22") (term "0,1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "22") (term "0,1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "allLeft" (formula "32") (inst "t=add(Z(neglit(1(#))),
    int::select(heap, self, LinkedListIterator::$index))"))
                        (rule "inEqSimp_homoInEq0" (formula "32") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "32") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "32") (term "0,1,0"))
                        (rule "add_literals" (formula "32") (term "0,0,1,0"))
                        (rule "add_zero_left" (formula "32") (term "0,1,0"))
                        (rule "inEqSimp_homoInEq1" (formula "32") (term "1"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,0,1"))
                        (rule "mul_literals" (formula "32") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "32") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "32") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,1"))
                        (rule "add_literals" (formula "32") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "32") (term "1,0,1"))
                        (rule "add_zero_right" (formula "32") (term "0,1"))
                        (rule "leq_literals" (formula "32") (term "1"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "applyEq" (formula "32") (term "1,1,0") (ifseqformula "29"))
                        (rule "inEqSimp_invertInEq1" (formula "32") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "0,1"))
                        (rule "times_zero_2" (formula "32") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "32") (term "0,1"))
                        (rule "inEqSimp_contradInEq1" (formula "32") (term "1") (ifseqformula "10"))
                        (rule "qeq_literals" (formula "32") (term "0,1"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "allLeft" (formula "33") (inst "t=Z(0(#))"))
                        (rule "leq_literals" (formula "33") (term "1,0"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                        (rule "applyEq" (formula "33") (term "1,1,0") (ifseqformula "28"))
                        (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "10"))
                        (rule "qeq_literals" (formula "33") (term "0,1"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "allLeft" (formula "34") (inst "t=i_3_0"))
                        (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                        (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "34") (term "0,0,1"))
                        (rule "leq_literals" (formula "34") (term "0,1"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "34") (term "0,1"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "commute_and_2" (formula "11") (term "0,0,0"))
                        (rule "allLeft" (formula "19") (inst "t=i_3_0"))
                        (rule "replace_known_right" (formula "19") (term "0,0,0") (ifseqformula "38"))
                         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "37")))
                        (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "19") (term "0") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "19") (term "0,0"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "inEqSimp_contradInEq1" (formula "19") (ifseqformula "2"))
                        (rule "andLeft" (formula "19"))
                        (rule "inEqSimp_homoInEq1" (formula "19"))
                        (rule "polySimp_pullOutFactor1b" (formula "19") (term "0"))
                        (rule "add_literals" (formula "19") (term "1,1,0"))
                        (rule "times_zero_1" (formula "19") (term "1,0"))
                        (rule "add_zero_right" (formula "19") (term "0"))
                        (rule "leq_literals" (formula "19"))
                        (rule "closeFalse" (formula "19"))
                     )
                     (branch
                        (rule "allRight" (formula "33") (inst "sk=i_2_0"))
                        (rule "orRight" (formula "33"))
                        (rule "orRight" (formula "33"))
                        (rule "inEqSimp_leqRight" (formula "33"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "34"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "7"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "nnf_ex2all" (formula "36"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "1") (term "1,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "nnf_notOr" (formula "1") (term "0,0,0"))
                        (rule "commute_or" (formula "1") (term "1,0"))
                        (rule "commute_or" (formula "1") (term "0,0"))
                        (rule "commute_or_2" (formula "1") (term "0"))
                        (rule "shift_paren_or" (formula "1") (term "0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "cnf_rightDist" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "shift_paren_or" (formula "1") (term "0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "castedGetAny" (formula "1") (term "0,1,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,0,0"))
                        (rule "commute_or" (formula "1") (term "0"))
                        (rule "seqGetAlphaCast" (formula "28") (term "0"))
                        (rule "castedGetAny" (formula "28") (term "0"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "true_left" (formula "28"))
                        (rule "shift_paren_and" (formula "12") (term "0,1,0,1,0"))
                        (rule "shift_paren_and" (formula "12") (term "0,1,0"))
                        (rule "shift_paren_and" (formula "12") (term "0,0,1,0"))
                        (rule "shift_paren_and" (formula "12") (term "0,0,0,1,0"))
                        (rule "shift_paren_and" (formula "12") (term "0,0,0,0,1,0"))
                        (rule "shift_paren_and" (formula "12") (term "0,0,0,0,0,1,0"))
                        (rule "ex_pull_out3" (formula "12") (term "0"))
                        (rule "cnf_rightDist" (formula "12") (term "0,0"))
                        (rule "shift_paren_or" (formula "12") (term "1,0,0"))
                        (rule "commute_or_2" (formula "12") (term "0,1,0,0"))
                        (rule "inEqSimp_or_tautInEq1" (formula "12") (term "1,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "12") (term "1,1,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,1,0,0"))
                        (rule "add_literals" (formula "12") (term "1,0,1,1,0,0"))
                        (rule "times_zero_1" (formula "12") (term "0,1,1,0,0"))
                        (rule "leq_literals" (formula "12") (term "1,1,0,0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "cnf_rightDist" (formula "12") (term "0,0"))
                        (rule "shift_paren_or" (formula "12") (term "1,0,0"))
                        (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0,1,0,0"))
                        (rule "add_zero_right" (formula "12") (term "1,1,0,1,0,0"))
                        (rule "qeq_literals" (formula "12") (term "1,0,1,0,0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "cnf_rightDist" (formula "12") (term "0,0"))
                        (rule "shift_paren_or" (formula "12") (term "1,0,0"))
                        (rule "commute_or_2" (formula "12") (term "0,1,0,0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                        (rule "commute_or_2" (formula "12") (term "1,0,0,0"))
                        (rule "shift_paren_or" (formula "12") (term "0,1,0,0,0"))
                        (rule "commute_or" (formula "12") (term "0,0,1,0,0,0"))
                        (rule "inEqSimp_or_tautInEq1" (formula "12") (term "0,1,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0,1,0,0,0"))
                        (rule "add_literals" (formula "12") (term "1,0,1,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "12") (term "0,1,0,1,0,0,0"))
                        (rule "leq_literals" (formula "12") (term "1,0,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                        (rule "commute_or_2" (formula "12") (term "1,0,0,0"))
                        (rule "shift_paren_or" (formula "12") (term "0,1,0,0,0"))
                        (rule "inEqSimp_or_tautInEq2" (formula "12") (term "0,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "12") (term "1,1,0,0,1,0,0,0"))
                        (rule "qeq_literals" (formula "12") (term "1,0,0,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                        (rule "shift_paren_or" (formula "12") (term "1,0,0,0"))
                        (rule "commute_or_2" (formula "12") (term "0,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "cnf_rightDist" (formula "12") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "12") (term "0,0,0,0,0"))
                        (rule "shift_paren_or" (formula "12") (term "1,0,0,0,0"))
                        (rule "commute_or" (formula "12") (term "0,0,0,0,0,0"))
                        (rule "equalityToSeqGetAndSeqLenLeft" (formula "15") (inst "iv=iv"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "andLeft" (formula "15"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                        (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "17"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "applyEq" (formula "15") (term "0,0,1,0,0,1,0,0") (ifseqformula "16"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "times_zero_2" (formula "15") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "15") (term "0,0,1,0,0"))
                        (rule "applyEq" (formula "15") (term "0,0,1,0") (ifseqformula "16"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "allLeft" (formula "25") (inst "t=i_2_0"))
                        (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "25") (term "1,0") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "25") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                        (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                        (rule "add_literals" (formula "25") (term "0,0,1"))
                        (rule "leq_literals" (formula "25") (term "0,1"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "notLeft" (formula "25"))
                        (rule "allLeft" (formula "23") (inst "t=i_2_0"))
                        (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "23") (term "1,0") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "23") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
                        (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "23") (term "0,0,1"))
                        (rule "leq_literals" (formula "23") (term "0,1"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "notLeft" (formula "23"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "33"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "allLeft" (formula "21") (inst "t=add(Z(neglit(1(#))),
    int::select(heap, self, LinkedListIterator::$index))"))
                        (rule "inEqSimp_homoInEq1" (formula "21") (term "1"))
                        (rule "polySimp_mulComm0" (formula "21") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "21") (term "1,0,1"))
                        (rule "mul_literals" (formula "21") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "21") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "21") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,1"))
                        (rule "add_literals" (formula "21") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "21") (term "1,0,1"))
                        (rule "add_zero_right" (formula "21") (term "0,1"))
                        (rule "leq_literals" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "inEqSimp_homoInEq0" (formula "21") (term "1"))
                        (rule "polySimp_mulComm0" (formula "21") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "21") (term "1,0,1"))
                        (rule "mul_literals" (formula "21") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "21") (term "0,1"))
                        (rule "add_literals" (formula "21") (term "0,0,1"))
                        (rule "add_zero_left" (formula "21") (term "0,1"))
                        (rule "applyEq" (formula "21") (term "1,0,0,0") (ifseqformula "30"))
                        (rule "inEqSimp_invertInEq1" (formula "21") (term "1"))
                        (rule "mul_literals" (formula "21") (term "1,1"))
                        (rule "polySimp_mulLiterals" (formula "21") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "21") (term "0,1"))
                        (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "11"))
                        (rule "qeq_literals" (formula "21") (term "0,1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "notLeft" (formula "21"))
                        (rule "allLeft" (formula "21") (inst "t=Z(0(#))"))
                        (rule "leq_literals" (formula "21") (term "1,0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                        (rule "applyEq" (formula "21") (term "1,0,0,0") (ifseqformula "29"))
                        (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "11"))
                        (rule "qeq_literals" (formula "21") (term "0,1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "notLeft" (formula "21"))
                        (rule "allLeft" (formula "19") (inst "t=add(Z(neglit(1(#))),
    int::select(heap, self, LinkedListIterator::$index))"))
                        (rule "inEqSimp_homoInEq1" (formula "19") (term "1"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0,1"))
                        (rule "mul_literals" (formula "19") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "19") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,1"))
                        (rule "add_literals" (formula "19") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "19") (term "1,0,1"))
                        (rule "add_literals" (formula "19") (term "0,1"))
                        (rule "leq_literals" (formula "19") (term "1"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "inEqSimp_homoInEq0" (formula "19") (term "1"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0,1"))
                        (rule "mul_literals" (formula "19") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,1"))
                        (rule "add_literals" (formula "19") (term "0,0,1"))
                        (rule "add_zero_left" (formula "19") (term "0,1"))
                        (rule "applyEq" (formula "19") (term "0,0,0") (ifseqformula "30"))
                        (rule "replace_known_right" (formula "19") (term "0,0") (ifseqformula "39"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "true_left" (formula "19"))
                        (rule "allLeft" (formula "19") (inst "t=Z(0(#))"))
                        (rule "leq_literals" (formula "19") (term "1,0"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                        (rule "applyEq" (formula "19") (term "0,0,0") (ifseqformula "29"))
                        (rule "replace_known_right" (formula "19") (term "0,0") (ifseqformula "38"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "true_left" (formula "19"))
                        (rule "seqGetAlphaCast" (formula "29") (term "0"))
                        (rule "castedGetAny" (formula "29") (term "0"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "allLeft" (formula "26") (inst "t=i_2_0"))
                        (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                        (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "26") (term "0,0,1"))
                        (rule "leq_literals" (formula "26") (term "0,1"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "26") (term "0,1"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "26"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "allLeft" (formula "32") (inst "t=i_2_0"))
                        (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "32") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "inEqSimp_contradInEq1" (formula "32") (term "1") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
                        (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "32") (term "0,0,1"))
                        (rule "leq_literals" (formula "32") (term "0,1"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "typeEqDerived" (formula "25") (term "0") (ifseqformula "32"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "true_left" (formula "25"))
                        (rule "applyEq" (formula "37") (term "0") (ifseqformula "31"))
                        (rule "allLeft" (formula "32") (inst "t=add(Z(neglit(1(#))),
    int::select(heap, self, LinkedListIterator::$index))"))
                        (rule "inEqSimp_homoInEq0" (formula "32") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "32") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "32") (term "0,1,0"))
                        (rule "add_literals" (formula "32") (term "0,0,1,0"))
                        (rule "add_zero_left" (formula "32") (term "0,1,0"))
                        (rule "inEqSimp_homoInEq1" (formula "32") (term "1"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,0,1"))
                        (rule "mul_literals" (formula "32") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "32") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "32") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,1"))
                        (rule "add_literals" (formula "32") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "32") (term "1,0,1"))
                        (rule "add_literals" (formula "32") (term "0,1"))
                        (rule "leq_literals" (formula "32") (term "1"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "applyEq" (formula "32") (term "1,1,0") (ifseqformula "28"))
                        (rule "inEqSimp_invertInEq1" (formula "32") (term "1"))
                        (rule "mul_literals" (formula "32") (term "1,1"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "32") (term "0,1"))
                        (rule "inEqSimp_contradInEq1" (formula "32") (term "1") (ifseqformula "10"))
                        (rule "qeq_literals" (formula "32") (term "0,1"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "allLeft" (formula "33") (inst "t=Z(0(#))"))
                        (rule "leq_literals" (formula "33") (term "1,0"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                        (rule "applyEq" (formula "33") (term "1,1,0") (ifseqformula "27"))
                        (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "10"))
                        (rule "qeq_literals" (formula "33") (term "0,1"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "commute_and_2" (formula "11") (term "0,0,0"))
                        (rule "allLeft" (formula "23") (inst "t=i_2_0"))
                        (rule "replace_known_right" (formula "23") (term "0,0,0") (ifseqformula "39"))
                         (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "36")))
                        (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
                        (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "23") (term "0,0,1"))
                        (rule "leq_literals" (formula "23") (term "0,1"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "23"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "closeFalse" (formula "3"))
                     )
                  )
                  (branch
                     (rule "allRight" (formula "33") (inst "sk=i_1_0"))
                     (rule "orRight" (formula "33"))
                     (rule "orRight" (formula "33"))
                     (rule "inEqSimp_leqRight" (formula "33"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_geqRight" (formula "34"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "7"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                     (rule "mul_literals" (formula "1") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "seqGetAlphaCast" (formula "27") (term "0"))
                     (rule "castedGetAny" (formula "27") (term "0"))
                      (builtin "One Step Simplification" (formula "27"))
                     (rule "true_left" (formula "27"))
                     (rule "allLeft" (formula "29") (inst "t=i_1_0"))
                     (rule "replace_known_right" (formula "29") (term "0,0") (ifseqformula "37"))
                      (builtin "One Step Simplification" (formula "29"))
                     (rule "inEqSimp_homoInEq1" (formula "29") (term "1"))
                     (rule "polySimp_addComm1" (formula "29") (term "0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1"))
                     (rule "polySimp_mulComm0" (formula "29") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "29") (term "1,1"))
                     (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1"))
                     (rule "mul_literals" (formula "29") (term "0,1,1"))
                     (rule "polySimp_elimOne" (formula "29") (term "1,1,1"))
                     (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "29") (term "0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "29") (term "0,0,1"))
                     (rule "polySimp_addComm1" (formula "29") (term "0,0,0,1"))
                     (rule "add_literals" (formula "29") (term "0,0,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                     (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "29") (term "0,0,1"))
                     (rule "leq_literals" (formula "29") (term "0,1"))
                      (builtin "One Step Simplification" (formula "29"))
                     (rule "inEqSimp_subsumption0" (formula "1") (ifseqformula "29"))
                     (rule "leq_literals" (formula "1") (term "0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "28") (term "0"))
                      (builtin "One Step Simplification" (formula "28"))
                     (rule "closeFalse" (formula "28"))
                  )
               )
               (branch
                  (rule "allRight" (formula "33") (inst "sk=i_0_0"))
                  (rule "orRight" (formula "33"))
                  (rule "orRight" (formula "33"))
                  (rule "allRight" (formula "35") (inst "sk=j_0"))
                  (rule "orRight" (formula "35"))
                  (rule "orRight" (formula "35"))
                  (rule "orRight" (formula "37"))
                  (rule "notRight" (formula "37"))
                  (rule "inEqSimp_leqRight" (formula "34"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_geqRight" (formula "35"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_leqRight" (formula "36"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_geqRight" (formula "37"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "10"))
                  (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                  (rule "mul_literals" (formula "3") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "11"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "seqGetAlphaCast" (formula "31") (term "0"))
                  (rule "castedGetAny" (formula "31") (term "0"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "true_left" (formula "31"))
                  (rule "shift_paren_and" (formula "15") (term "0,1,0,1,0"))
                  (rule "shift_paren_and" (formula "15") (term "0,1,0"))
                  (rule "allLeft" (formula "34") (inst "t=i_0_0"))
                  (rule "inEqSimp_commuteGeq" (formula "34") (term "1,0,0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "34") (term "1,0,0,0,0") (ifseqformula "5"))
                  (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1,0,0,0,0"))
                  (rule "add_literals" (formula "34") (term "1,1,0,0,1,0,0,0,0"))
                  (rule "times_zero_1" (formula "34") (term "1,0,0,1,0,0,0,0"))
                  (rule "add_literals" (formula "34") (term "0,0,1,0,0,0,0"))
                  (rule "leq_literals" (formula "34") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "34"))
                  (rule "inEqSimp_contradInEq1" (formula "34") (term "1,0,0,0,0") (ifseqformula "6"))
                  (rule "qeq_literals" (formula "34") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "34"))
                  (rule "commute_or_2" (formula "34") (term "0"))
                  (rule "shift_paren_and" (formula "15") (term "0,0,1,0"))
                  (rule "shift_paren_and" (formula "15") (term "0,0,0,1,0"))
                  (rule "shift_paren_and" (formula "15") (term "0,0,0,0,1,0"))
                  (rule "equalityToSeqGetAndSeqLenLeft" (formula "18") (inst "iv=iv"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "andLeft" (formula "18"))
                  (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                  (rule "applyEq" (formula "19") (term "0,0,1,0,0,1,0,0") (ifseqformula "20"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "times_zero_2" (formula "19") (term "1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "19") (term "0,0,1,0,0"))
                  (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "20"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "true_left" (formula "18"))
                  (rule "applyEq" (formula "18") (term "0,0,1,0") (ifseqformula "19"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "true_left" (formula "18"))
                  (rule "shift_paren_and" (formula "15") (term "0,0,0,0,0,1,0"))
                  (rule "ex_pull_out3" (formula "15") (term "0"))
                  (rule "cnf_rightDist" (formula "15") (term "0,0"))
                  (rule "shift_paren_or" (formula "15") (term "1,0,0"))
                  (rule "commute_or_2" (formula "15") (term "0,1,0,0"))
                  (rule "inEqSimp_or_tautInEq1" (formula "15") (term "1,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "15") (term "1,1,0,0"))
                  (rule "polySimp_pullOutFactor1" (formula "15") (term "0,1,1,0,0"))
                  (rule "add_literals" (formula "15") (term "1,0,1,1,0,0"))
                  (rule "times_zero_1" (formula "15") (term "0,1,1,0,0"))
                  (rule "leq_literals" (formula "15") (term "1,1,0,0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "cnf_rightDist" (formula "15") (term "0,0"))
                  (rule "shift_paren_or" (formula "15") (term "1,0,0"))
                  (rule "inEqSimp_or_tautInEq3" (formula "15") (term "0,1,0,0"))
                  (rule "add_zero_right" (formula "15") (term "1,1,0,1,0,0"))
                  (rule "qeq_literals" (formula "15") (term "1,0,1,0,0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "cnf_rightDist" (formula "15") (term "0,0"))
                  (rule "shift_paren_or" (formula "15") (term "1,0,0"))
                  (rule "commute_or_2" (formula "15") (term "0,1,0,0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "cnf_rightDist" (formula "15") (term "0,0,0"))
                  (rule "commute_or_2" (formula "15") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "15") (term "0,1,0,0,0"))
                  (rule "commute_or" (formula "15") (term "0,0,1,0,0,0"))
                  (rule "inEqSimp_or_tautInEq1" (formula "15") (term "0,1,0,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "15") (term "1,0,1,0,0,0"))
                  (rule "polySimp_pullOutFactor1" (formula "15") (term "0,1,0,1,0,0,0"))
                  (rule "add_literals" (formula "15") (term "1,0,1,0,1,0,0,0"))
                  (rule "times_zero_1" (formula "15") (term "0,1,0,1,0,0,0"))
                  (rule "leq_literals" (formula "15") (term "1,0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "cnf_rightDist" (formula "15") (term "0,0,0"))
                  (rule "commute_or_2" (formula "15") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "15") (term "0,1,0,0,0"))
                  (rule "inEqSimp_or_tautInEq2" (formula "15") (term "0,0,1,0,0,0"))
                  (rule "add_zero_right" (formula "15") (term "1,1,0,0,1,0,0,0"))
                  (rule "qeq_literals" (formula "15") (term "1,0,0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "cnf_rightDist" (formula "15") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "15") (term "1,0,0,0"))
                  (rule "commute_or_2" (formula "15") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "cnf_rightDist" (formula "15") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "15") (term "0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "15") (term "1,0,0,0,0"))
                  (rule "commute_or" (formula "15") (term "0,0,0,0,0,0"))
                  (rule "allLeft" (formula "24") (inst "t=Z(0(#))"))
                  (rule "leq_literals" (formula "24") (term "1,0"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                  (rule "applyEq" (formula "24") (term "1,0,0,0") (ifseqformula "32"))
                  (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "14"))
                  (rule "qeq_literals" (formula "24") (term "0,1"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "notLeft" (formula "24"))
                  (rule "allLeft" (formula "24") (inst "t=add(Z(neglit(1(#))),
    int::select(heap, self, LinkedListIterator::$index))"))
                  (rule "inEqSimp_homoInEq0" (formula "24") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0,1,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "24") (term "0,1,0"))
                  (rule "add_literals" (formula "24") (term "0,0,1,0"))
                  (rule "add_zero_left" (formula "24") (term "0,1,0"))
                  (rule "inEqSimp_homoInEq1" (formula "24") (term "1"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0,1"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0,1"))
                  (rule "mul_literals" (formula "24") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "24") (term "0,1"))
                  (rule "polySimp_addComm0" (formula "24") (term "0,0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,1"))
                  (rule "add_literals" (formula "24") (term "1,1,0,1"))
                  (rule "times_zero_1" (formula "24") (term "1,0,1"))
                  (rule "add_zero_right" (formula "24") (term "0,1"))
                  (rule "leq_literals" (formula "24") (term "1"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "applyEq" (formula "24") (term "1,0,0,0") (ifseqformula "33"))
                  (rule "inEqSimp_invertInEq1" (formula "24") (term "1"))
                  (rule "times_zero_2" (formula "24") (term "1,1"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "24") (term "0,1"))
                  (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "14"))
                  (rule "qeq_literals" (formula "24") (term "0,1"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "notLeft" (formula "24"))
                  (rule "allLeft" (formula "24") (inst "t=j_0"))
                  (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                  (rule "applyEq" (formula "24") (term "1,0,0,0,0") (ifseqformula "7"))
                  (rule "inEqSimp_contradInEq1" (formula "24") (term "1,0") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "24") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                  (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "24") (term "0,0,1"))
                  (rule "leq_literals" (formula "24") (term "0,1"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "notLeft" (formula "24"))
                  (rule "allLeft" (formula "22") (inst "t=add(Z(neglit(1(#))),
    int::select(heap, self, LinkedListIterator::$index))"))
                  (rule "inEqSimp_homoInEq1" (formula "22") (term "1"))
                  (rule "polySimp_mulComm0" (formula "22") (term "1,0,1"))
                  (rule "polySimp_rightDist" (formula "22") (term "1,0,1"))
                  (rule "mul_literals" (formula "22") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                  (rule "polySimp_addComm0" (formula "22") (term "0,0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,1"))
                  (rule "add_literals" (formula "22") (term "1,1,0,1"))
                  (rule "times_zero_1" (formula "22") (term "1,0,1"))
                  (rule "add_zero_right" (formula "22") (term "0,1"))
                  (rule "leq_literals" (formula "22") (term "1"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "inEqSimp_homoInEq0" (formula "22") (term "1"))
                  (rule "polySimp_mulComm0" (formula "22") (term "1,0,1"))
                  (rule "polySimp_rightDist" (formula "22") (term "1,0,1"))
                  (rule "mul_literals" (formula "22") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                  (rule "add_literals" (formula "22") (term "0,0,1"))
                  (rule "add_zero_left" (formula "22") (term "0,1"))
                  (rule "applyEq" (formula "22") (term "0,0,0") (ifseqformula "33"))
                  (rule "replace_known_right" (formula "22") (term "0,0") (ifseqformula "42"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "true_left" (formula "22"))
                  (rule "allLeft" (formula "22") (inst "t=Z(0(#))"))
                  (rule "leq_literals" (formula "22") (term "1,0"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                  (rule "applyEq" (formula "22") (term "0,0,0") (ifseqformula "32"))
                  (rule "replace_known_right" (formula "22") (term "0,0") (ifseqformula "41"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "true_left" (formula "22"))
                  (rule "seqGetAlphaCast" (formula "32") (term "0"))
                  (rule "castedGetAny" (formula "32") (term "0"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "true_left" (formula "32"))
                  (rule "allLeft" (formula "22") (inst "t=i_0_0"))
                  (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "22") (term "1,0") (ifseqformula "6"))
                  (rule "qeq_literals" (formula "22") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "5"))
                  (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                  (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "22") (term "0,0,1"))
                  (rule "leq_literals" (formula "22") (term "0,1"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "notLeft" (formula "22"))
                  (rule "allLeft" (formula "22") (inst "t=j_0"))
                  (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                  (rule "applyEq" (formula "22") (term "0,0,0,0") (ifseqformula "7"))
                  (rule "replace_known_right" (formula "22") (term "0,0,0") (ifseqformula "38"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "true_left" (formula "22"))
                  (rule "allLeft" (formula "34") (inst "t=j_0"))
                  (rule "replace_known_right" (formula "34") (term "1,0") (ifseqformula "46"))
                   (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "7")))
                  (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "34") (term "0") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "34") (term "0,0"))
                   (builtin "One Step Simplification" (formula "34"))
                  (rule "inEqSimp_contradInEq1" (formula "34") (ifseqformula "2"))
                  (rule "andLeft" (formula "34"))
                  (rule "inEqSimp_homoInEq1" (formula "34"))
                  (rule "polySimp_pullOutFactor1b" (formula "34") (term "0"))
                  (rule "add_literals" (formula "34") (term "1,1,0"))
                  (rule "times_zero_1" (formula "34") (term "1,0"))
                  (rule "add_literals" (formula "34") (term "0"))
                  (rule "leq_literals" (formula "34"))
                  (rule "closeFalse" (formula "34"))
               )
            )
            (branch
               (rule "allRight" (formula "33") (inst "sk=i_0"))
               (rule "orRight" (formula "33"))
               (rule "orRight" (formula "33"))
               (rule "inEqSimp_leqRight" (formula "33"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "34"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "7"))
               (rule "polySimp_rightDist" (formula "1") (term "0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "seqGetAlphaCast" (formula "27") (term "0"))
               (rule "castedGetAny" (formula "27") (term "0"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "true_left" (formula "27"))
               (rule "shift_paren_and" (formula "11") (term "0,1,0,1,0"))
               (rule "shift_paren_and" (formula "11") (term "0,1,0"))
               (rule "shift_paren_and" (formula "11") (term "0,0,1,0"))
               (rule "allLeft" (formula "31") (inst "t=i_0"))
               (rule "replace_known_right" (formula "31") (term "0,0") (ifseqformula "37"))
                (builtin "One Step Simplification" (formula "31"))
               (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "31") (term "0") (ifseqformula "3"))
               (rule "qeq_literals" (formula "31") (term "0,0"))
                (builtin "One Step Simplification" (formula "31"))
               (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "31"))
               (rule "andLeft" (formula "2"))
               (rule "inEqSimp_homoInEq1" (formula "2"))
               (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
               (rule "add_literals" (formula "2") (term "1,1,0"))
               (rule "times_zero_1" (formula "2") (term "1,0"))
               (rule "add_zero_right" (formula "2") (term "0"))
               (rule "leq_literals" (formula "2"))
               (rule "closeFalse" (formula "2"))
            )
         )
      )
      (branch "self.index >= 1 FALSE"
         (rule "replace_known_right" (formula "35") (term "0,1,1,0,0,0") (ifseqformula "29"))
          (builtin "One Step Simplification" (formula "35"))
         (rule "inEqSimp_geqRight" (formula "29"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "1"))
         (rule "leq_literals" (formula "7") (term "0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "true_left" (formula "7"))
         (rule "inEqSimp_antiSymm" (formula "6") (ifseqformula "1"))
         (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "6"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "allRight" (formula "30") (inst "sk=iv_0"))
         (rule "orRight" (formula "30"))
         (rule "orRight" (formula "30"))
         (rule "inEqSimp_leqRight" (formula "30"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "inEqSimp_geqRight" (formula "31"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "applyEq" (formula "11") (term "1,1,0,0,1,1,0,1,0") (ifseqformula "8"))
         (rule "applyEq" (formula "30") (term "1,1,0,0,0") (ifseqformula "8"))
         (rule "applyEq" (formula "11") (term "1,1,0,0,0,1,0,1,0") (ifseqformula "8"))
         (rule "applyEq" (formula "20") (term "1,1,0") (ifseqformula "8"))
         (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "8"))
         (rule "applyEq" (formula "37") (term "1,1,0,0,1,0,1,0,1") (ifseqformula "8"))
         (rule "applyEq" (formula "37") (term "1,1,1,0,0,1,0,0,1") (ifseqformula "8"))
         (rule "add_literals" (formula "37") (term "1,1,0,0,1,0,0,1"))
         (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "8"))
         (rule "add_literals" (formula "28") (term "1,0"))
         (rule "applyEq" (formula "18") (term "1,1,0") (ifseqformula "8"))
         (rule "applyEq" (formula "37") (term "1,1,0,0,1,0,0,0,1") (ifseqformula "8"))
         (rule "applyEq" (formula "30") (term "1,1,0,0,0,0,0") (ifseqformula "8"))
         (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "8"))
         (rule "applyEq" (formula "31") (term "1,1,0") (ifseqformula "8"))
         (rule "applyEq" (formula "19") (term "1,1,0") (ifseqformula "8"))
         (rule "applyEq" (formula "23") (term "1,1,0") (ifseqformula "8"))
         (rule "applyEq" (formula "12") (term "2,0") (ifseqformula "8"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "eqSymm" (formula "12"))
         (rule "applyEq" (formula "11") (term "1,1,1,1,1,1,0,1,0") (ifseqformula "8"))
         (rule "add_zero_right" (formula "11") (term "1,1,1,1,1,0,1,0"))
         (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "8"))
         (rule "applyEq" (formula "37") (term "1,1,0,0,0,0,0,0,1") (ifseqformula "8"))
         (rule "applyEq" (formula "37") (term "1,1,0,0,1,1") (ifseqformula "8"))
         (rule "applyEq" (formula "9") (term "0") (ifseqformula "8"))
         (rule "qeq_literals" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "8"))
         (rule "times_zero_2" (formula "1") (term "1,0"))
         (rule "add_zero_right" (formula "1") (term "0"))
         (rule "applyEq" (formula "10") (term "1,1,0,1,0,1,0,1,0") (ifseqformula "8"))
         (rule "add_zero_right" (formula "10") (term "1,0,1,0,1,0,1,0"))
         (rule "applyEq" (formula "3") (term "0") (ifseqformula "8"))
         (rule "leq_literals" (formula "3"))
         (rule "true_left" (formula "3"))
         (rule "applyEq" (formula "27") (term "1,1,1,0") (ifseqformula "7"))
         (rule "add_zero_right" (formula "27") (term "1,1,0"))
         (rule "applyEq" (formula "23") (term "1,1,0") (ifseqformula "7"))
         (rule "applyEq" (formula "35") (term "1,1,0,0,1,0,1") (ifseqformula "7"))
         (rule "applyEq" (formula "35") (term "1,1,1,0,1,0,1,0,1,0,0") (ifseqformula "7"))
         (rule "add_zero_right" (formula "35") (term "1,1,0,1,0,1,0,1,0,0"))
         (rule "applyEq" (formula "15") (term "1") (ifseqformula "7"))
         (rule "applyEq" (formula "14") (term "1") (ifseqformula "7"))
         (rule "applyEq" (formula "8") (term "1") (ifseqformula "7"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
         (rule "qeq_literals" (formula "1") (term "0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
   )
)
)
}
