\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Jan 30 14:58:10 GMT 2023
[SMTSettings]maxGenericSorts=2
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]UseBuiltUniqueness=false
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[Strategy]Timeout=-1
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[Choice]DefaultChoices=JavaCard-JavaCard\\:off , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:off , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_OFF
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_EXTERNAL
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Labels]UseOriginLabels=true
[SMTSettings]integersMaximum=2147483645
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[SMTSettings]SelectedTaclets=
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[SMTSettings]explicitTypeHierarchy=false
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
"
}

\javaSource "..";

\proofObligation "#Proof Obligation Settings
#Mon Jan 30 14:58:10 GMT 2023
name=LinkedList[LinkedList\\:\\:isEmpty()].JML normal_behavior operation contract.0
contract=LinkedList[LinkedList\\:\\:isEmpty()].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "jdmota" ) (keyVersion "666bcb0c95"))

(autoModeTime "561")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "heapAtPre_0,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "7") (term "1,0,0,1,0,1"))
(rule "eqSymm" (formula "7") (term "0,0,0,0,1"))
(rule "assignment" (formula "7") (term "1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_isEmpty,savedHeapBefore_isEmpty"))
 (builtin "One Step Simplification" (formula "7"))
(rule "returnUnfold" (formula "7") (term "1") (inst "#v0=x"))
(rule "variableDeclarationAssign" (formula "7") (term "1"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "x"))
(rule "compound_equality_comparison_1" (formula "7") (term "1") (inst "#v0=n"))
(rule "variableDeclarationAssign" (formula "7") (term "1"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "n"))
(rule "assignment_read_attribute_this" (formula "7"))
 (builtin "One Step Simplification" (formula "7"))
(rule "equality_comparison_simple" (formula "7") (term "1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "methodCallReturn" (formula "7") (term "1"))
(rule "assignment" (formula "7") (term "1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "methodCallEmpty" (formula "7") (term "1"))
(rule "tryEmpty" (formula "7") (term "1"))
(rule "emptyModality" (formula "7") (term "1"))
 (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "5")))
(rule "ifthenelse_split" (formula "7") (term "0"))
(branch "self.values = seqEmpty TRUE"
   (rule "eqSymm" (formula "8"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "equalityToSeqGetAndSeqLenLeft" (formula "1") (inst "iv=iv"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
   (rule "applyEq" (formula "2") (term "0,0,1,0") (ifseqformula "3"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "true_left" (formula "2"))
   (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "2"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "8") (term "0") (ifseqformula "2"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "9"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "Partial_inv_axiom_for_JML_class_invariant_nr_2_in_LinkedList" (formula "7") (inst "i=i") (inst "i_0=i_0") (inst "j=j") (inst "i_1=i_1") (inst "i_2=i_2") (inst "f=f") (inst "i_3=i_3") (inst "n=n_1"))
    (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "10")) (ifInst ""  (formula "10")))
   (rule "translateJavaSubInt" (formula "7") (term "1,1,0,0,1,0,0"))
   (rule "translateJavaSubInt" (formula "7") (term "1,0,1,1,1,0,0,0"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "12"))
   (rule "notLeft" (formula "12"))
   (rule "notLeft" (formula "12"))
   (rule "eqSymm" (formula "16") (term "0,1,0,1,0"))
   (rule "eqSymm" (formula "16") (term "1,1,0,1,0"))
   (rule "eqSymm" (formula "15") (term "1,0"))
   (rule "eqSymm" (formula "14"))
   (rule "eqSymm" (formula "13"))
   (rule "eqSymm" (formula "8"))
   (rule "polySimp_elimSub" (formula "15") (term "1,1,0,0"))
   (rule "mul_literals" (formula "15") (term "1,1,1,0,0"))
   (rule "polySimp_elimSub" (formula "14") (term "1,0,0"))
   (rule "mul_literals" (formula "14") (term "1,1,0,0"))
   (rule "polySimp_addComm0" (formula "15") (term "1,0,0,1,0"))
   (rule "polySimp_addComm0" (formula "15") (term "1,1,0,0"))
   (rule "polySimp_addComm0" (formula "14") (term "1,0,0"))
   (rule "castedGetAny" (formula "17") (term "1,1,1,0"))
   (rule "castedGetAny" (formula "16") (term "0,0,1,0,1,0"))
   (rule "castedGetAny" (formula "16") (term "1,0,1,0,1,0"))
   (rule "castedGetAny" (formula "15") (term "1,1,1,0"))
   (rule "castedGetAny" (formula "13") (term "0"))
   (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,1,0"))
   (rule "castedGetAny" (formula "15") (term "0,1,0"))
   (rule "eqSymm" (formula "15") (term "1,0"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
   (rule "castedGetAny" (formula "14") (term "0"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
   (rule "applyEq" (formula "17") (term "0,0,1,0") (ifseqformula "2"))
   (rule "applyEq" (formula "9") (term "0") (ifseqformula "7"))
   (rule "applyEq" (formula "11") (term "0,1,0,1,0,1,0") (ifseqformula "2"))
   (rule "applyEq" (formula "14") (term "1,1,0") (ifseqformula "7"))
   (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "2"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "eqSymm" (formula "8"))
   (rule "applyEq" (formula "11") (term "0,0,1,0,0,1,0,0") (ifseqformula "2"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "times_zero_2" (formula "11") (term "1,0,0,1,0,0"))
   (rule "add_zero_right" (formula "11") (term "0,0,1,0,0"))
   (rule "applyEq" (formula "17") (term "0,0,1,0,0,1,0,0") (ifseqformula "2"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "times_zero_2" (formula "17") (term "1,0,0,1,0,0"))
   (rule "add_zero_right" (formula "17") (term "0,0,1,0,0"))
   (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
   (rule "applyEq" (formula "15") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
   (rule "applyEq" (formula "16") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "7"))
   (rule "applyEq" (formula "16") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
   (rule "applyEq" (formula "7") (term "0") (ifseqformula "8"))
   (rule "eqSymm" (formula "7"))
   (rule "applyEq" (formula "9") (term "0") (ifseqformula "7"))
   (rule "leq_literals" (formula "9"))
   (rule "true_left" (formula "9"))
   (rule "applyEq" (formula "13") (term "1,1,0") (ifseqformula "7"))
   (rule "add_zero_right" (formula "13") (term "1,0"))
   (rule "applyEq" (formula "9") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
   (rule "mul_literals" (formula "9") (term "1,0,0,1,0,0"))
   (rule "add_zero_right" (formula "9") (term "0,0,1,0,0"))
   (rule "applyEq" (formula "14") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
   (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0"))
   (rule "add_zero_right" (formula "14") (term "0,0,1,0,0"))
   (rule "applyEq" (formula "15") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "7"))
   (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0,1,0"))
   (rule "add_zero_right" (formula "15") (term "0,0,1,0,0,1,0"))
   (rule "applyEq" (formula "15") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
   (rule "times_zero_2" (formula "15") (term "1,0,0,1,0,0"))
   (rule "add_zero_right" (formula "15") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
   (rule "mul_literals" (formula "10") (term "1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
   (rule "mul_literals" (formula "16") (term "1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
   (rule "mul_literals" (formula "9") (term "1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
   (rule "mul_literals" (formula "14") (term "1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,0"))
   (rule "mul_literals" (formula "15") (term "1,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
   (rule "mul_literals" (formula "15") (term "1,1,0,0"))
   (rule "equalityToSeqGetAndSeqLenRight" (formula "19") (inst "iv=iv"))
    (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "8")))
   (rule "allRight" (formula "19") (inst "sk=iv_0"))
   (rule "impRight" (formula "19"))
   (rule "andLeft" (formula "1"))
   (rule "inEqSimp_ltToLeq" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "1"))
   (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "10"))
   (rule "mul_literals" (formula "2") (term "1,0"))
   (rule "add_zero_right" (formula "2") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "2"))
   (rule "mul_literals" (formula "2") (term "1"))
   (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
   (rule "qeq_literals" (formula "2") (term "0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "closeFalse" (formula "2"))
)
(branch "self.values = seqEmpty FALSE"
   (rule "eqSymm" (formula "8"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "notRight" (formula "8"))
   (rule "equalityToSeqGetAndSeqLenRight" (formula "8") (inst "iv=iv"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,1"))
   (rule "mul_literals" (formula "8") (term "0,1,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,1"))
   (rule "nnf_imp2or" (formula "8") (term "0,1"))
   (rule "nnf_notAnd" (formula "8") (term "0,0,1"))
   (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,1"))
   (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0,1"))
   (rule "add_zero_right" (formula "8") (term "0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,1"))
   (rule "mul_literals" (formula "8") (term "1,0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0,1"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,1"))
   (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,1"))
   (rule "add_literals" (formula "8") (term "0,0,0,1,0,0,1"))
   (rule "add_zero_left" (formula "8") (term "0,0,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,1"))
   (rule "lenNonNegative" (formula "8") (term "0,0"))
   (rule "inEqSimp_commuteLeq" (formula "1"))
   (rule "cut_direct" (formula "9") (term "0"))
   (branch "CUT: self.values.length = 0 TRUE"
       (builtin "One Step Simplification" (formula "10"))
      (rule "allRight" (formula "10") (inst "sk=iv_0"))
      (rule "orRight" (formula "10"))
      (rule "orRight" (formula "10"))
      (rule "inEqSimp_geqRight" (formula "11"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "inEqSimp_leqRight" (formula "11"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "3"))
      (rule "times_zero_2" (formula "2") (term "1,0"))
      (rule "add_zero_right" (formula "2") (term "0"))
      (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
      (rule "qeq_literals" (formula "4"))
      (rule "true_left" (formula "4"))
      (rule "inEqSimp_sepPosMonomial0" (formula "2"))
      (rule "mul_literals" (formula "2") (term "1"))
      (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
      (rule "qeq_literals" (formula "2") (term "0"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "closeFalse" (formula "2"))
   )
   (branch "CUT: self.values.length = 0 FALSE"
       (builtin "One Step Simplification" (formula "10"))
      (rule "false_right" (formula "10"))
      (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "9"))
      (rule "add_zero_right" (formula "1") (term "1"))
      (rule "inEqSimp_contradEq7" (formula "9") (ifseqformula "1"))
      (rule "times_zero_1" (formula "9") (term "1,0,0"))
      (rule "add_zero_right" (formula "9") (term "0,0"))
      (rule "leq_literals" (formula "9") (term "0"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "false_right" (formula "9"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "2") (term "0") (ifseqformula "3"))
      (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "true_left" (formula "2"))
      (rule "Partial_inv_axiom_for_JML_class_invariant_nr_2_in_LinkedList" (formula "7") (inst "i=i") (inst "i_0=i_0") (inst "j=j") (inst "i_1=i_1") (inst "i_2=i_2") (inst "f=f") (inst "i_3=i_3") (inst "n=n_1"))
       (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "2")) (ifInst ""  (formula "2")))
      (rule "translateJavaSubInt" (formula "7") (term "1,1,0,0,1,0,0"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "eqSymm" (formula "15") (term "1,1,0,1,0"))
      (rule "eqSymm" (formula "15") (term "0,1,0,1,0"))
      (rule "eqSymm" (formula "14") (term "1,0"))
      (rule "eqSymm" (formula "8"))
      (rule "polySimp_elimSub" (formula "14") (term "1,1,0,0"))
      (rule "mul_literals" (formula "14") (term "1,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "14") (term "1,0,0,1,0"))
      (rule "polySimp_addComm0" (formula "14") (term "1,1,0,0"))
      (rule "castedGetAny" (formula "16") (term "1,1,1,0"))
      (rule "castedGetAny" (formula "15") (term "1,0,1,0,1,0"))
      (rule "castedGetAny" (formula "15") (term "0,0,1,0,1,0"))
      (rule "castedGetAny" (formula "14") (term "1,1,1,0"))
      (rule "castedGetAny" (formula "14") (term "0,1,0"))
      (rule "eqSymm" (formula "14") (term "1,0"))
      (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
      (rule "applyEq" (formula "15") (term "0,0,1,0,0,1,0,0,1,0") (ifseqformula "12"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "times_zero_2" (formula "15") (term "1,0,0,1,0,0,1,0"))
      (rule "add_literals" (formula "15") (term "0,0,1,0,0,1,0"))
      (rule "applyEq" (formula "14") (term "0,1,0,1,0") (ifseqformula "12"))
      (rule "applyEq" (formula "1") (term "0") (ifseqformula "8"))
      (rule "applyEq" (formula "10") (term "0,0,1,0,0,1,0,0") (ifseqformula "12"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "times_zero_2" (formula "10") (term "1,0,0,1,0,0"))
      (rule "add_literals" (formula "10") (term "0,0,1,0,0"))
      (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "12"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "leq_literals" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "applyEq" (formula "8") (term "0,1") (ifseqformula "11"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "11"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "eqSymm" (formula "7"))
      (rule "applyEq" (formula "15") (term "0,1,1,1,0") (ifseqformula "11"))
      (rule "applyEq" (formula "13") (term "0,0,1,0,0,1,0,0") (ifseqformula "11"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "times_zero_2" (formula "13") (term "1,0,0,1,0,0"))
      (rule "add_zero_right" (formula "13") (term "0,0,1,0,0"))
      (rule "applyEq" (formula "13") (term "0,1,1,0") (ifseqformula "11"))
      (rule "applyEq" (formula "14") (term "0,0,0,1,0,1,0") (ifseqformula "11"))
      (rule "applyEq" (formula "14") (term "0,0,1,0,0,1,0,0") (ifseqformula "11"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "times_zero_2" (formula "14") (term "1,0,0,1,0,0"))
      (rule "add_zero_right" (formula "14") (term "0,0,1,0,0"))
      (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "11"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "qeq_literals" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
)
}
