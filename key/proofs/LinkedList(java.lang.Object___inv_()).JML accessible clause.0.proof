\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Jun 13 21:03:21 BST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:off , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=1000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "..";

\proofObligation "#Proof Obligation Settings
#Mon Jun 13 21:03:21 BST 2022
contract=LinkedList[java.lang.Object\\:\\:<inv>()].JML accessible clause.0
name=LinkedList[java.lang.Object\\:\\:<inv>()].JML accessible clause.0
class=de.uka.ilkd.key.proof.init.DependencyContractPO
";

\proof {
(keyLog "0" (keyUser "JOTA" ) (keyVersion "666bcb0c95"))
(keyLog "1" (keyUser "JOTA" ) (keyVersion "666bcb0c95"))

(autoModeTime "24799")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "self,anon_heap"))
(rule "impRight" (formula "1") (userinteraction))
(rule "equiv_right" (formula "2") (userinteraction))
(branch "Case '->'"
   (rule "JML_represents_clause_for_LinkedList_footprint" (formula "3") (term "1,1,0") (inst "i=i") (userinteraction))
   (rule "Class_invariant_axiom_for_LinkedList" (formula "3") (inst "n=n") (inst "i_3=i_3") (inst "f=f") (inst "i_2=i_2") (inst "i_1=i_1") (inst "j=j") (inst "i_0=i_0") (inst "i=i_4") (userinteraction))
   (rule "andLeft" (formula "2"))
   (rule "andLeft" (formula "2"))
   (rule "andLeft" (formula "2"))
   (rule "andLeft" (formula "2"))
   (rule "andLeft" (formula "2"))
   (rule "andLeft" (formula "2"))
   (rule "notLeft" (formula "4"))
   (rule "Class_invariant_axiom_for_LinkedList" (formula "1") (inst "n=n") (inst "i_3=i_3") (inst "f=f") (inst "i_2=i_2") (inst "i_1=i_1") (inst "j=j") (inst "i_0=i_0") (inst "i=i") (userinteraction))
    (builtin "One Step Simplification" (formula "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "selectOfAnon" (formula "16") (term "0,0,0,0,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifthenelse_negated" (formula "16") (term "0,0,0,0,0,0,0,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,0,0,0,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,1,0,0,0,0,0,0,0,0,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,0,0,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,0,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "selectOfAnon" (formula "16") (term "0,0,1,1,0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,0,1,1,0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifthenelse_negated" (formula "16") (term "0,0,1,1,0,0,1,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,1,0,0,1,0,0"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,0,1,1,0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,1,0,0,0,1,1,0,0,1,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,1,1,0,0,1,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,1,1,0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,1,0,0,1,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,1,1,0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "selectOfAnon" (formula "16") (term "0,0,0,0,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,0,0,0,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifthenelse_negated" (formula "16") (term "0,0,0,0,1,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,0,1,0,0,0"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,0,0,0,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,1,0,0,0,0,0,1,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,0,0,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,0,0,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,0,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,0,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "selectOfAnon" (formula "16") (term "1,0,1,0,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "16") (term "0,1,0,1,0,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifthenelse_negated" (formula "16") (term "1,0,1,0,0,1,1,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,1,0,1,0,0,1,1,0,0,0"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,1,0,1,0,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,1,0,1,0,1,0,0,1,1,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,1,0,1,0,0,1,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,1,0,1,0,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
   (rule "elementOfUnion" (formula "16") (term "0,1,0,1,0,0,1,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,1,0,1,0,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfUnion" (formula "16") (term "0,1,0,1,0,0,1,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,1,0,1,0,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "selectOfAnon" (formula "16") (term "0,0,1,0,1"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,0,1,0,1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifthenelse_negated" (formula "16") (term "0,0,1,0,1"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,0,1"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,0,1,0,1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,1,0,0,0,1,0,1"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,1,0,1"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,1,0,1"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
   (rule "selectOfAnon" (formula "16") (term "0,1,0,0,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,1,0,0,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifthenelse_negated" (formula "16") (term "0,1,0,0,1,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,1,0,0,1,0,0,0"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,1,0,0,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,1,0,0,1,0,0,1,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,0,0,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,1,0,0,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
   (rule "elementOfUnion" (formula "16") (term "0,0,1,0,0,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,1,0,0,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfUnion" (formula "16") (term "0,0,1,0,0,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,1,0,0,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfUnion" (formula "16") (term "0,0,1,0,0,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,1,0,0,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "selectOfAnon" (formula "16") (term "0,0,1,0,1,1,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,0,1,0,1,1,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifthenelse_negated" (formula "16") (term "0,0,1,0,1,1,1,1,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,0,1,1,1,1,0,0,0"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,0,1,0,1,1,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,1,0,0,0,1,0,1,1,1,1,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,1,0,1,1,1,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,1,0,1,1,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,0,1,1,1,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,1,0,1,1,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "selectOfAnon" (formula "16") (term "0,1,1,0,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,1,1,0,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifthenelse_negated" (formula "16") (term "0,1,1,0,0,0,0,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,1,1,0,0,0,0,0,0,0"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,1,1,0,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,1,0,0,1,1,0,0,0,0,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,1,0,0,0,0,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,1,1,0,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
   (rule "selectOfAnon" (formula "16") (term "0,0,1,1,1,0,1"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,0,1,1,1,0,1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifthenelse_negated" (formula "16") (term "0,0,1,1,1,0,1"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,1,1,0,1"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,0,1,1,1,0,1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,1,0,0,0,1,1,1,0,1"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,1,1,1,0,1"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,1,1,1,0,1"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,1,1,0,1"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,1,1,1,0,1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "selectOfAnon" (formula "16") (term "0,0,1,0,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,0,1,0,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifthenelse_negated" (formula "16") (term "0,0,1,0,0,0,0,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,0,0,0,0,0,0,0"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,0,1,0,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,1,0,0,0,1,0,0,0,0,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,1,0,0,0,0,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,1,0,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,0,0,0,0,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,1,0,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "2")))
   (rule "selectOfAnon" (formula "16") (term "0,1,0,1,0,1,0,1,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,1,0,1,0,1,0,1,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifthenelse_negated" (formula "16") (term "0,1,0,1,0,1,0,1,0,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,1,0,1,0,1,0,1,0,0,0,0"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,1,0,1,0,1,0,1,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,1,0,0,1,0,1,0,1,0,1,0,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,0,1,0,1,0,1,0,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,1,0,1,0,1,0,1,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
   (rule "selectOfAnon" (formula "16") (term "0,0,1,1,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,0,1,1,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifthenelse_negated" (formula "16") (term "0,0,1,1,1,1,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,1,1,1,0,0,0"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,0,1,1,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,1,0,0,0,1,1,1,1,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,1,1,1,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,1,1,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,1,1,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,1,1,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "selectOfAnon" (formula "16") (term "0,1,1,0,0,1,0,1,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,1,1,0,0,1,0,1,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifthenelse_negated" (formula "16") (term "0,1,1,0,0,1,0,1,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,1,1,0,0,1,0,1,0"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,1,1,0,0,1,0,1,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,1,0,0,1,1,0,0,1,0,1,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,1,0,0,1,0,1,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,1,1,0,0,1,0,1,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
   (rule "elementOfUnion" (formula "16") (term "0,0,1,1,0,0,1,0,1,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,1,1,0,0,1,0,1,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "selectOfAnon" (formula "16") (term "0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,1,0,1,0,0"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,0,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,0,1,0,1,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,0,1,0,1,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,0,1,0,1,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,0,1,0,1,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfSingleton" (formula "16") (term "0,0,0,0,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "selectOfAnon" (formula "16") (term "0,0,1,1,0,1,0,1,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,0,0,1,1,0,1,0,1,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,0,1,1,0,1,0,1,0,0,0,0,0"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,0,0,0,1,1,0,1,0,1,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,0,0,1,1,0,1,0,1,0,0,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,0,0,1,1,0,1,0,1,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,0,0,1,1,0,1,0,1,0,0,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,0,0,1,1,0,1,0,1,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,0,0,1,1,0,1,0,1,0,0,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,0,0,1,1,0,1,0,1,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,0,0,1,1,0,1,0,1,0,0,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "0,0,0,0,0,0,0,1,1,0,1,0,1,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfSingleton" (formula "16") (term "0,0,0,0,0,0,1,1,0,1,0,1,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "selectOfAnon" (formula "16") (term "0,0,1,0,0,1,1,0,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,0,1,0,0,1,1,0,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifthenelse_negated" (formula "16") (term "0,0,1,0,0,1,1,0,0,1,0,1,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,0,0,1,1,0,0,1,0,1,0,0"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,0,1,0,0,1,1,0,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,1,0,0,0,1,0,0,1,1,0,0,1,0,1,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,1,0,0,1,1,0,0,1,0,1,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,1,0,0,1,1,0,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,0,0,1,1,0,0,1,0,1,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,1,0,0,1,1,0,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "selectOfAnon" (formula "16") (term "0,0,0,0,0,1,0,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,0,0,0,0,1,0,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifthenelse_negated" (formula "16") (term "0,0,0,0,0,1,0,0,1,0,1,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,0,0,1,0,0,1,0,1,0,0"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,0,0,0,0,1,0,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,1,0,0,0,0,0,0,1,0,0,1,0,1,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,0,0,0,1,0,0,1,0,1,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,0,0,1,0,0,1,0,1,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,0,0,1,0,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "selectOfAnon" (formula "16") (term "0,0,0,1,0,0,0,0,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,0,0,1,0,0,0,0,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifthenelse_negated" (formula "16") (term "0,0,0,1,0,0,0,0,0,1,0,1,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,1,0,0,0,0,0,1,0,1,0,0"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,1,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,1,0,0,0,0,0,1,0,1,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "selectOfAnon" (formula "16") (term "0,0,0,0,1,0,1,0,1,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,0,0,0,1,0,1,0,1,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifthenelse_negated" (formula "16") (term "0,0,0,0,1,0,1,0,1,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,0,1,0,1,0,1,0"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,0,0,0,1,0,1,0,1,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,1,0,0,0,0,0,1,0,1,0,1,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,0,0,1,0,1,0,1,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,0,0,1,0,1,0,1,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,0,1,0,1,0,1,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,0,1,0,1,0,1,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "selectOfAnon" (formula "16") (term "0,0,1,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,0,1,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifthenelse_negated" (formula "16") (term "0,0,1,1,0,1,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,1,0,1,0,0"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,0,1,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,1,0,0,0,1,1,0,1,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,1,1,0,1,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,1,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,1,0,1,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,1,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "selectOfAnon" (formula "16") (term "0,1,0,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,1,0,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifthenelse_negated" (formula "16") (term "0,1,0,1,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,1,0,1,0,0,0"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,1,0,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,1,0,0,1,0,1,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,0,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,1,0,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
   (rule "elementOfUnion" (formula "16") (term "0,0,1,0,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,1,0,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfUnion" (formula "16") (term "0,0,1,0,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,1,0,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "selectOfAnon" (formula "16") (term "0,1,1,0,0,1"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,1,1,0,0,1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifthenelse_negated" (formula "16") (term "0,1,1,0,0,1"))
   (rule "elementOfUnion" (formula "16") (term "0,0,1,1,0,0,1"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,1,1,0,0,1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,1,0,0,1,1,0,0,1"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,1,0,0,1"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,1,1,0,0,1"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
   (rule "selectOfAnon" (formula "16") (term "0,0,1,1,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,0,1,1,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifthenelse_negated" (formula "16") (term "0,0,1,1,0,1,0,1,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,1,0,1,0,1,0,0"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,0,1,1,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,1,0,0,0,1,1,0,1,0,1,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,1,1,0,1,0,1,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,1,1,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,1,0,1,0,1,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,1,1,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "selectOfAnon" (formula "16") (term "0,0,1,1,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,0,1,1,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifthenelse_negated" (formula "16") (term "0,0,1,1,0,1,1,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,1,0,1,1,0,0,0"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,0,1,1,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,1,0,0,0,1,1,0,1,1,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,1,1,0,1,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,1,1,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,1,0,1,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,1,1,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "selectOfAnon" (formula "16") (term "0,1,1,0,0,1,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,1,1,0,0,1,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifthenelse_negated" (formula "16") (term "0,1,1,0,0,1,0,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,1,1,0,0,1,0,0,0,0"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,1,1,0,0,1,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,1,0,0,1,1,0,0,1,0,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,1,0,0,1,0,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,1,1,0,0,1,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
   (rule "selectOfAnon" (formula "16") (term "0,1,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,1,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifthenelse_negated" (formula "16") (term "0,1,1,1,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,1,1,1,0,0,0"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,1,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,1,0,0,1,1,1,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,1,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,1,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
   (rule "elementOfUnion" (formula "16") (term "0,0,1,1,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,1,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfUnion" (formula "16") (term "0,0,1,1,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,1,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "selectOfAnon" (formula "16") (term "0,0,1,2,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,0,1,2,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifthenelse_negated" (formula "16") (term "0,0,1,2,0,1,0,1,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,2,0,1,0,1,0,0"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,0,1,2,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,1,0,0,0,1,2,0,1,0,1,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,1,2,0,1,0,1,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,1,2,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,2,0,1,0,1,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,1,2,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "selectOfAnon" (formula "16") (term "1,0,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "16") (term "0,1,0,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifthenelse_negated" (formula "16") (term "1,0,0,0,0,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,1,0,0,0,0,0,0,0"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,1,0,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,1,0,1,0,0,0,0,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,1,0,0,0,0,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,1,0,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
   (rule "elementOfUnion" (formula "16") (term "0,1,0,0,0,0,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,1,0,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfUnion" (formula "16") (term "0,1,0,0,0,0,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,1,0,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfUnion" (formula "16") (term "0,1,0,0,0,0,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,1,0,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfSingleton" (formula "16") (term "0,1,0,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "1")))
   (rule "selectOfAnon" (formula "16") (term "0,0,1,0,0,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,0,1,0,0,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifthenelse_negated" (formula "16") (term "0,0,1,0,0,0,1,1,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,0,0,0,1,1,0,0,0"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,0,1,0,0,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,1,0,0,0,1,0,0,0,1,1,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,1,0,0,0,1,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,1,0,0,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,0,0,0,1,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,1,0,0,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,0,0,0,1,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,1,0,0,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "selectOfAnon" (formula "16") (term "1,1,0,1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,1,1,0,1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,1,0,1"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,0,1,1,0,1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,1,1,0,1"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,1,1,0,1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,1,1,0,1"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,1,1,0,1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,1,1,0,1"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,1,1,0,1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,1,1,0,1"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,1,1,0,1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfSingleton" (formula "16") (term "0,0,0,0,1,1,0,1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "selectOfAnon" (formula "16") (term "0,1,0,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,0,1,0,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,1,0,0,1,1,0,0,0"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,0,0,1,0,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,0,1,0,0,1,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,0,1,0,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,0,1,0,0,1,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,0,1,0,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,0,1,0,0,1,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,0,1,0,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,0,1,0,0,1,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,0,1,0,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfSingleton" (formula "16") (term "0,0,0,0,0,1,0,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "selectOfAnon" (formula "16") (term "0,1,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,1,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifthenelse_negated" (formula "16") (term "0,1,0,1,1,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,1,0,1,1,0,0,0"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,1,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,1,0,0,1,0,1,1,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,0,1,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,1,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
   (rule "elementOfUnion" (formula "16") (term "0,0,1,0,1,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,1,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfUnion" (formula "16") (term "0,0,1,0,1,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,1,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfUnion" (formula "16") (term "0,0,1,0,1,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,1,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "selectOfAnon" (formula "16") (term "0,1,1,0,0,1,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,1,1,0,0,1,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifthenelse_negated" (formula "16") (term "0,1,1,0,0,1,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,1,1,0,0,1,0"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,1,1,0,0,1,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,1,0,0,1,1,0,0,1,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,1,0,0,1,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,1,1,0,0,1,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
   (rule "elementOfUnion" (formula "16") (term "0,0,1,1,0,0,1,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,1,1,0,0,1,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "selectOfAnon" (formula "16") (term "0,0,0,0,0,0,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,0,0,0,0,0,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifthenelse_negated" (formula "16") (term "0,0,0,0,0,0,0,1,1,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,0,0,0,0,1,1,0,0,0"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,0,0,0,0,0,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,0,0,0,0,0,1,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,0,0,0,0,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,0,0,0,0,1,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,0,0,0,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "selectOfAnon" (formula "16") (term "0,0,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,0,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifthenelse_negated" (formula "16") (term "0,0,0,0,0,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,0,0,0,0,0"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,0,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,1,0,0,0,0,0,0,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,0,0,0,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,0,0,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "3")))
   (rule "selectOfAnon" (formula "16") (term "0,0,1,0,0,0,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,0,1,0,0,0,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifthenelse_negated" (formula "16") (term "0,0,1,0,0,0,0,1,1,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,0,0,0,0,1,1,0,0,0"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,0,1,0,0,0,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,1,0,0,0,1,0,0,0,0,1,1,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,1,0,0,0,0,1,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,1,0,0,0,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,0,0,0,0,1,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,1,0,0,0,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,0,0,0,0,1,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,1,0,0,0,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,0,0,0,0,1,1,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "0,0,0,0,1,0,0,0,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "elementOfSingleton" (formula "16") (term "0,0,0,1,0,0,0,0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "selectOfAnon" (formula "16") (term "0,1,0,1,0,1,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,1,0,1,0,1,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifthenelse_negated" (formula "16") (term "0,1,0,1,0,1,0,0,0,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,1,0,1,0,1,0,0,0,0,0,0"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,1,0,1,0,1,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,1,0,0,1,0,1,0,1,0,0,0,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,0,1,0,1,0,0,0,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,1,0,1,0,1,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
   (rule "elementOfUnion" (formula "16") (term "0,0,1,0,1,0,1,0,0,0,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,1,0,1,0,1,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "selectOfAnon" (formula "16") (term "0,1,1,0,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,1,1,0,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifthenelse_negated" (formula "16") (term "0,1,1,0,0,0,0,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,1,1,0,0,0,0,0,0,0"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,1,1,0,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,1,0,0,1,1,0,0,0,0,0,0,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,1,0,0,0,0,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,1,1,0,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
   (rule "elementOfUnion" (formula "16") (term "0,0,1,1,0,0,0,0,0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,1,1,0,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "selectOfAnon" (formula "16") (term "0,0,1,0,1,0,1,0,1,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "12")))
   (rule "elementOfSetMinus" (formula "16") (term "0,0,0,1,0,1,0,1,0,1,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifthenelse_negated" (formula "16") (term "0,0,1,0,1,0,1,0,1,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,0,1,0,1,0,1,0"))
   (rule "elementOfInfiniteUnion" (formula "16") (term "1,0,0,0,1,0,1,0,1,0,1,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,1,0,0,0,1,0,1,0,1,0,1,0"))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,0,1,0,1,0,1,0,1,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,1,0,1,0,1,0,1,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
   (rule "elementOfUnion" (formula "16") (term "0,0,0,1,0,1,0,1,0,1,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,1,0,1,0,1,0,1,0"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "8")))
   (rule "andRight" (formula "16"))
   (branch "Case 1"
      (rule "andRight" (formula "16"))
      (branch "Case 1"
         (rule "andRight" (formula "16"))
         (branch "Case 1"
            (rule "andRight" (formula "16"))
            (branch "Case 1"
                (builtin "SMTRule")
            )
            (branch "Case 2"
               (rule "translateJavaSubInt" (formula "7") (term "1,1,0,0"))
               (rule "translateJavaSubInt" (formula "6") (term "1,0,1,1,1"))
               (rule "allRight" (formula "16") (inst "sk=i_2_0"))
               (rule "impRight" (formula "16"))
               (rule "andLeft" (formula "1"))
               (rule "eqSymm" (formula "8") (term "1,0,1"))
               (rule "eqSymm" (formula "10") (term "0,1,0,1,0"))
               (rule "eqSymm" (formula "9") (term "1,0"))
               (rule "eqSymm" (formula "4"))
               (rule "eqSymm" (formula "10") (term "1,1,0,1,0"))
               (rule "eqSymm" (formula "8") (term "1,1"))
               (rule "polySimp_elimSub" (formula "9") (term "1,1,0,0"))
               (rule "mul_literals" (formula "9") (term "1,1,1,0,0"))
               (rule "polySimp_elimSub" (formula "8") (term "1,0,0,1,1"))
               (rule "mul_literals" (formula "8") (term "1,1,0,0,1,1"))
               (rule "polySimp_addComm0" (formula "9") (term "1,0,0,1,0"))
               (rule "polySimp_addComm0" (formula "9") (term "1,1,0,0"))
               (rule "polySimp_addComm0" (formula "8") (term "1,0,0,1,1"))
               (rule "castedGetAny" (formula "11") (term "1,1,1,0"))
               (rule "castedGetAny" (formula "8") (term "0,1,0,1"))
               (rule "castedGetAny" (formula "10") (term "1,0,1,0,1,0"))
               (rule "castedGetAny" (formula "10") (term "0,0,1,0,1,0"))
               (rule "castedGetAny" (formula "9") (term "1,1,1,0"))
               (rule "castedGetAny" (formula "9") (term "0,1,0"))
               (rule "eqSymm" (formula "9") (term "1,0"))
               (rule "castedGetAny" (formula "8") (term "0,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "2") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "1"))
               (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "4"))
               (rule "applyEq" (formula "8") (term "1,1,0,1,1") (ifseqformula "3"))
               (rule "applyEq" (formula "5") (term "0") (ifseqformula "3"))
               (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "3"))
               (rule "applyEq" (formula "9") (term "0,1,0,0,1,0,0") (ifseqformula "3"))
               (rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0") (ifseqformula "4"))
               (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "3"))
               (rule "applyEq" (formula "4") (term "1") (ifseqformula "3"))
               (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "3"))
               (rule "applyEq" (formula "6") (term "0,1,0,0,1,0,0") (ifseqformula "3"))
               (rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0") (ifseqformula "3"))
               (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "4"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,0"))
               (rule "mul_literals" (formula "10") (term "0,1,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "5"))
               (rule "polySimp_rightDist" (formula "2") (term "0,0"))
               (rule "mul_literals" (formula "2") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "2") (term "0"))
               (rule "add_literals" (formula "2") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "nnf_ex2all" (formula "19"))
               (rule "nnf_imp2or" (formula "12") (term "1,0,1,0"))
               (rule "nnf_imp2or" (formula "11") (term "0"))
               (rule "nnf_imp2or" (formula "8") (term "0"))
               (rule "nnf_imp2or" (formula "9") (term "0"))
               (rule "nnf_imp2or" (formula "13") (term "0"))
               (rule "nnf_notAnd" (formula "1") (term "0"))
               (rule "nnf_imp2or" (formula "12") (term "0"))
               (rule "nnf_notAnd" (formula "11") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
               (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
               (rule "mul_literals" (formula "11") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "8") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
               (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
               (rule "mul_literals" (formula "8") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "9") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
               (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
               (rule "mul_literals" (formula "9") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
               (rule "nnf_notAnd" (formula "13") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
               (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
               (rule "mul_literals" (formula "13") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "1") (term "0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "nnf_notAnd" (formula "12") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
               (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
               (rule "mul_literals" (formula "12") (term "1,0,0,0"))
               (rule "nnf_imp2or" (formula "12") (term "0,1,0"))
               (rule "nnf_notAnd" (formula "1") (term "1,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "nnf_notOr" (formula "1") (term "0,0,0"))
               (rule "nnf_notAnd" (formula "12") (term "0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,1,0"))
               (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,1,0"))
               (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,0"))
               (rule "mul_literals" (formula "12") (term "1,0,0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,1,0"))
               (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1,0"))
               (rule "nnf_notOr" (formula "1") (term "1,0,0,0"))
               (rule "commute_and" (formula "10") (term "0,0"))
               (rule "commute_and" (formula "10") (term "0,0,0,0,1"))
               (rule "commute_or_2" (formula "11") (term "0"))
               (rule "commute_or_2" (formula "13") (term "0"))
               (rule "commute_and" (formula "8") (term "1,0,1,0"))
               (rule "commute_and" (formula "8") (term "0,0,1,0"))
               (rule "commute_and" (formula "9") (term "1,0,1,0"))
               (rule "commute_and" (formula "9") (term "0,0,1,0"))
               (rule "commute_or" (formula "1") (term "1,0"))
               (rule "commute_or" (formula "1") (term "0,0"))
               (rule "commute_or_2" (formula "1") (term "0"))
               (rule "commute_or" (formula "11") (term "0,0"))
               (rule "commute_or" (formula "13") (term "0,0"))
               (rule "commute_and_2" (formula "10") (term "0"))
               (rule "shift_paren_or" (formula "1") (term "0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "shift_paren_or" (formula "12") (term "0,1,0"))
               (rule "cnf_rightDist" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "cnf_rightDist" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "cnf_rightDist" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "commute_or" (formula "11"))
               (rule "cnf_rightDist" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "cnf_rightDist" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "cnf_rightDist" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "commute_or" (formula "11"))
               (rule "cnf_rightDist" (formula "1") (term "0"))
               (rule "distr_forallAnd" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "commute_or" (formula "1") (term "0"))
               (rule "cnf_rightDist" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "cnf_rightDist" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "commute_or" (formula "12"))
               (rule "cnf_rightDist" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "commute_or" (formula "11"))
               (rule "commute_and_2" (formula "10") (term "1"))
               (rule "commute_or_2" (formula "21") (term "0,0,1,0"))
               (rule "cnf_rightDist" (formula "1") (term "0"))
               (rule "distr_forallAnd" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "commute_or_2" (formula "1") (term "0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "castedGetAny" (formula "1") (term "0,0,0"))
               (rule "castedGetAny" (formula "1") (term "1,0,0,1,0"))
               (rule "shift_paren_or" (formula "2") (term "0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "castedGetAny" (formula "2") (term "0,1,0"))
               (rule "castedGetAny" (formula "2") (term "1,0,0,0,0"))
               (rule "commute_or" (formula "2") (term "0"))
               (rule "applyEq_and_gen2" (formula "10") (term "1,0,1,0"))
               (rule "cnf_rightDist" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "cnf_rightDist" (formula "12"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "cnf_rightDist" (formula "12"))
               (rule "andLeft" (formula "12"))
               (rule "commute_or" (formula "12"))
               (rule "cnf_rightDist" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "commute_or" (formula "11"))
               (rule "cnf_rightDist" (formula "12"))
               (rule "andLeft" (formula "12"))
               (rule "commute_or" (formula "13"))
               (rule "cnf_rightDist" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "commute_or" (formula "12"))
               (rule "cnf_rightDist" (formula "13"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "commute_or" (formula "13"))
               (rule "cnf_rightDist" (formula "11"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "commute_or" (formula "11"))
               (rule "lenNonNegative" (formula "6") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "6"))
               (rule "applyEq" (formula "6") (term "0") (ifseqformula "7"))
               (rule "lenNonNegative" (formula "8") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "8"))
               (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
               (rule "commute_or" (formula "28") (term "0,0,0,1,0"))
               (rule "shift_paren_and" (formula "10") (term "0,1,0"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "castedGetAny" (formula "10") (term "1,0,0,1,0,1,0"))
               (rule "castedGetAny" (formula "10") (term "0,0,1,0,0,1,0"))
               (rule "castedGetAny" (formula "10") (term "1,0,1,1,0,0,1,0"))
               (rule "castedGetAny" (formula "10") (term "0,0,0,0,0,1,0"))
               (rule "cnf_rightDist" (formula "10") (term "0"))
               (rule "distr_forallAnd" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "shift_paren_or" (formula "11") (term "0"))
               (rule "cnf_rightDist" (formula "10") (term "0"))
               (rule "distr_forallAnd" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "shift_paren_or" (formula "11") (term "0"))
               (rule "cnf_rightDist" (formula "10") (term "0"))
               (rule "distr_forallAnd" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "commute_or_2" (formula "10") (term "0"))
               (rule "shift_paren_or" (formula "11") (term "0"))
               (rule "commute_or" (formula "10") (term "0,0"))
               (rule "shift_paren_and" (formula "14") (term "0,1,0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "castedGetAny" (formula "14") (term "0,0,1,0,0,1,0"))
               (rule "castedGetAny" (formula "14") (term "1,0,1,1,0,0,1,0"))
               (rule "castedGetAny" (formula "14") (term "0,0,0,0,0,1,0"))
               (rule "cnf_rightDist" (formula "14") (term "0"))
               (rule "distr_forallAnd" (formula "14"))
               (rule "andLeft" (formula "14"))
               (rule "shift_paren_or" (formula "15") (term "0"))
               (rule "cnf_rightDist" (formula "14") (term "0"))
               (rule "distr_forallAnd" (formula "14"))
               (rule "andLeft" (formula "14"))
               (rule "shift_paren_or" (formula "15") (term "0"))
               (rule "cnf_rightDist" (formula "14") (term "0"))
               (rule "distr_forallAnd" (formula "14"))
               (rule "andLeft" (formula "14"))
               (rule "commute_or_2" (formula "14") (term "0"))
               (rule "shift_paren_or" (formula "15") (term "0"))
               (rule "commute_or" (formula "14") (term "0,0"))
               (rule "all_pull_out3" (formula "34") (term "0"))
               (rule "shift_paren_or" (formula "34") (term "0,0"))
               (rule "shift_paren_or" (formula "34") (term "0,0,0"))
               (rule "shift_paren_or" (formula "34") (term "0,0,0,0"))
               (rule "commute_or_2" (formula "34") (term "0,0,0,0,0"))
               (rule "commute_or" (formula "34") (term "0,0,0,0,0,0"))
               (rule "cut_direct" (formula "28") (term "0"))
               (branch "CUT: self_77.tail = null TRUE"
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "true_left" (formula "29"))
                  (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "28"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "true_left" (formula "18"))
                  (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "27"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "true_left" (formula "22"))
                  (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "26"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "true_left" (formula "29"))
                  (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "26"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "true_left" (formula "23"))
                  (rule "replace_known_left" (formula "20") (term "0,0") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "replace_known_left" (formula "19") (term "0,1") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "20"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "true_left" (formula "28"))
                  (rule "replace_known_left" (formula "26") (term "0") (ifseqformula "20"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "true_left" (formula "26"))
                  (rule "replace_known_left" (formula "21") (term "0") (ifseqformula "19"))
                   (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "20")))
                  (rule "true_left" (formula "21"))
                  (rule "replace_known_left" (formula "25") (term "0") (ifseqformula "19"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "true_left" (formula "25"))
                  (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "20"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "true_left" (formula "22"))
                  (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "20"))
                   (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "19")))
                  (rule "true_left" (formula "18"))
                  (rule "replace_known_left" (formula "21") (term "0") (ifseqformula "18"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "true_left" (formula "21"))
                  (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "18"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "true_left" (formula "20"))
                  (rule "applyEq" (formula "21") (term "0,1,0,0,0") (ifseqformula "19"))
                  (rule "applyEq" (formula "11") (term "0,0,0,0,0,0") (ifseqformula "19"))
                  (rule "applyEq" (formula "21") (term "0,1,0,0,0,0") (ifseqformula "19"))
                  (rule "applyEq" (formula "22") (term "0,0,0,0,0,0,0,0,0,0") (ifseqformula "19"))
                  (rule "applyEq" (formula "13") (term "0,0,0,0,0,0") (ifseqformula "19"))
                  (rule "applyEq" (formula "23") (term "0,1,1,0,0,0") (ifseqformula "19"))
                  (rule "applyEq" (formula "11") (term "0,1,0,1,0,0,0") (ifseqformula "19"))
                  (rule "applyEq" (formula "12") (term "0,1,0,0,0,0,0") (ifseqformula "19"))
                  (rule "applyEq" (formula "10") (term "0,0,0,0,0,0") (ifseqformula "19"))
                  (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "19"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "eqSymm" (formula "7"))
                  (rule "applyEq" (formula "22") (term "0,1,0,0,0,0,0,0,0,0") (ifseqformula "19"))
                  (rule "applyEq" (formula "12") (term "1,1,0") (ifseqformula "7"))
                  (rule "applyEq" (formula "17") (term "1,1,0") (ifseqformula "7"))
                  (rule "applyEq" (formula "22") (term "1,1,0,0,0,0,0") (ifseqformula "7"))
                  (rule "applyEq" (formula "9") (term "0") (ifseqformula "7"))
                  (rule "leq_literals" (formula "9"))
                  (rule "true_left" (formula "9"))
                  (rule "applyEq" (formula "14") (term "1,1,0") (ifseqformula "7"))
                  (rule "applyEq" (formula "21") (term "1,1,0,0,0") (ifseqformula "7"))
                  (rule "applyEq" (formula "12") (term "1,1,0") (ifseqformula "7"))
                  (rule "applyEq" (formula "13") (term "1,1,0") (ifseqformula "7"))
                  (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "7"))
                  (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "7"))
                  (rule "applyEq" (formula "6") (term "0") (ifseqformula "7"))
                  (rule "qeq_literals" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "applyEq" (formula "5") (term "0") (ifseqformula "6"))
                  (rule "inEqSimp_homoInEq1" (formula "5"))
                  (rule "times_zero_2" (formula "5") (term "1,0"))
                  (rule "add_zero_right" (formula "5") (term "0"))
                  (rule "applyEq" (formula "14") (term "1,1,0") (ifseqformula "6"))
                  (rule "applyEq" (formula "8") (term "1,1,0") (ifseqformula "6"))
                  (rule "applyEq" (formula "19") (term "1,1,1,0") (ifseqformula "6"))
                  (rule "add_zero_right" (formula "19") (term "1,1,0"))
                  (rule "applyEq" (formula "7") (term "1") (ifseqformula "6"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                  (rule "mul_literals" (formula "5") (term "1"))
                  (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "5"))
                  (rule "leq_literals" (formula "4") (term "0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "4"))
                  (rule "qeq_literals" (formula "3") (term "0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "closeFalse" (formula "3"))
               )
               (branch "CUT: self_77.tail = null FALSE"
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "replace_known_left" (formula "29") (term "1") (ifseqformula "28"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "true_left" (formula "29"))
                  (rule "replace_known_right" (formula "23") (term "0") (ifseqformula "40"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "notLeft" (formula "23"))
                  (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "27"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "true_left" (formula "26"))
                  (rule "replace_known_right" (formula "18") (term "1") (ifseqformula "39"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "notLeft" (formula "18"))
                  (rule "replace_known_right" (formula "20") (term "0,0") (ifseqformula "39"))
                   (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "38")))
                  (rule "true_left" (formula "20"))
                  (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "38"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "38"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "replace_known_right" (formula "19") (term "0,1") (ifseqformula "38"))
                   (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "36")))
                  (rule "true_left" (formula "19"))
                  (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "21"))
                   (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "36")))
                  (rule "true_left" (formula "22"))
                  (rule "replace_known_right" (formula "18") (term "0,0") (ifseqformula "34"))
                   (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "35")))
                  (rule "true_left" (formula "18"))
                  (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "33"))
                   (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "34")))
                  (rule "true_left" (formula "18"))
                  (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "22"))
                   (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "32")))
                  (rule "true_left" (formula "21"))
                  (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "19"))
                   (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "31")))
                  (rule "true_left" (formula "18"))
                  (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "20"))
                   (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "31")))
                  (rule "true_left" (formula "21"))
                  (rule "equalityToSeqGetAndSeqLenRight" (formula "30") (inst "iv=iv"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0,1"))
                  (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "7"))
                  (rule "applyEq" (formula "30") (term "0,1,0,0,1,0,0,1") (ifseqformula "7"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0,1"))
                  (rule "mul_literals" (formula "30") (term "0,1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0,1"))
                  (rule "nnf_imp2or" (formula "30") (term "0,1"))
                  (rule "nnf_notAnd" (formula "30") (term "0,0,1"))
                  (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0,1"))
                  (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0,1"))
                  (rule "add_zero_right" (formula "30") (term "0,0,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,1"))
                  (rule "mul_literals" (formula "30") (term "1,0,0,0,1"))
                  (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,1"))
                  (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,1"))
                  (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,1"))
                  (rule "add_zero_left" (formula "30") (term "0,0,1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,1"))
                  (rule "allLeft" (formula "23") (inst "t=i_2_0"))
                  (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "5"))
                  (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
                  (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                  (rule "add_literals" (formula "23") (term "0,0,1"))
                  (rule "leq_literals" (formula "23") (term "0,1"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "23") (term "0,1"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "typeEqDerived" (formula "1") (term "0,0,1") (ifseqformula "23"))
                  (rule "typeEqDerived" (formula "2") (term "0,0,1") (ifseqformula "23"))
                   (builtin "One Step Simplification" (formula "1"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "allLeft" (formula "14") (inst "t=i_2_0"))
                  (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "5"))
                  (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
                  (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
                  (rule "add_literals" (formula "14") (term "0,0,1"))
                  (rule "leq_literals" (formula "14") (term "0,1"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "14") (term "0,1"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "notLeft" (formula "14"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "30"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "30"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "allLeft" (formula "14") (inst "t=i_2_0"))
                  (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
                  (rule "applyEq" (formula "14") (term "0,0,0,0") (ifseqformula "22"))
                  (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
                  (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "14") (term "0,0,1"))
                  (rule "leq_literals" (formula "14") (term "0,1"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "14") (term "0,1"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "notLeft" (formula "14"))
                  (rule "allLeft" (formula "15") (inst "t=i_2_0"))
                  (rule "typeEqDerived" (formula "15") (term "0,0,0") (ifseqformula "22"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "true_left" (formula "15"))
                  (rule "allLeft" (formula "13") (inst "t=i_2_0"))
                  (rule "replace_known_right" (formula "13") (term "0,0,0") (ifseqformula "32"))
                   (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "31")))
                  (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "13") (term "0") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "13") (term "0,0"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "inEqSimp_contradInEq1" (formula "13") (ifseqformula "3"))
                  (rule "andLeft" (formula "13"))
                  (rule "inEqSimp_homoInEq1" (formula "13"))
                  (rule "polySimp_pullOutFactor1b" (formula "13") (term "0"))
                  (rule "add_literals" (formula "13") (term "1,1,0"))
                  (rule "times_zero_1" (formula "13") (term "1,0"))
                  (rule "add_literals" (formula "13") (term "0"))
                  (rule "leq_literals" (formula "13"))
                  (rule "closeFalse" (formula "13"))
               )
            )
         )
         (branch "Case 2"
            (rule "orRight" (formula "16"))
            (rule "andRight" (formula "16"))
            (branch "Case 1"
               (rule "andRight" (formula "17"))
               (branch "Case 1"
                  (rule "andRight" (formula "16"))
                  (branch "Case 1"
                     (rule "andRight" (formula "17"))
                     (branch "Case 1"
                        (rule "andRight" (formula "17"))
                        (branch "Case 1"
                           (rule "andRight" (formula "17"))
                           (branch "Case 1"
                              (rule "andRight" (formula "17"))
                              (branch
                                 (rule "notRight" (formula "17"))
                                 (rule "close" (formula "17") (ifseqformula "1"))
                              )
                              (branch "Case 2"
                                 (rule "notRight" (formula "17"))
                                 (rule "translateJavaSubInt" (formula "7") (term "1,0,1,1,1"))
                                 (rule "translateJavaSubInt" (formula "8") (term "1,1,0,0"))
                                 (rule "eqSymm" (formula "7") (term "1,0,1"))
                                 (rule "eqSymm" (formula "9") (term "0,1,0,1,0"))
                                 (rule "eqSymm" (formula "3"))
                                 (rule "eqSymm" (formula "9") (term "1,1,0,1,0"))
                                 (rule "eqSymm" (formula "8") (term "1,0"))
                                 (rule "eqSymm" (formula "7") (term "1,1"))
                                 (rule "replace_known_right" (formula "7") (term "0,0,0") (ifseqformula "17"))
                                  (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "1")) (ifInst ""  (formula "17")) (ifInst ""  (formula "1")))
                                 (rule "closeFalse" (formula "7"))
                              )
                           )
                           (branch "Case 2"
                              (rule "notRight" (formula "17"))
                              (rule "translateJavaSubInt" (formula "7") (term "1,0,1,1,1"))
                              (rule "translateJavaSubInt" (formula "8") (term "1,1,0,0"))
                              (rule "eqSymm" (formula "7") (term "1,0,1"))
                              (rule "eqSymm" (formula "9") (term "0,1,0,1,0"))
                              (rule "eqSymm" (formula "3"))
                              (rule "eqSymm" (formula "9") (term "1,1,0,1,0"))
                              (rule "eqSymm" (formula "8") (term "1,0"))
                              (rule "eqSymm" (formula "7") (term "1,1"))
                              (rule "replace_known_right" (formula "7") (term "0,0,0") (ifseqformula "17"))
                               (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "1")) (ifInst ""  (formula "17")) (ifInst ""  (formula "1")))
                              (rule "closeFalse" (formula "7"))
                           )
                        )
                        (branch "Case 2"
                           (rule "translateJavaSubInt" (formula "7") (term "1,1,0,0"))
                           (rule "translateJavaSubInt" (formula "6") (term "1,0,1,1,1"))
                           (rule "eqSymm" (formula "2"))
                           (rule "eqSymm" (formula "6") (term "1,0,1"))
                           (rule "eqSymm" (formula "17") (term "1,0,0,0,0,0"))
                           (rule "eqSymm" (formula "7") (term "1,0"))
                           (rule "eqSymm" (formula "8") (term "0,1,0,1,0"))
                           (rule "eqSymm" (formula "8") (term "1,1,0,1,0"))
                           (rule "eqSymm" (formula "6") (term "1,1"))
                           (rule "replace_known_right" (formula "6") (term "0,0,0") (ifseqformula "16"))
                            (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "16")))
                           (rule "andLeft" (formula "6"))
                           (rule "andLeft" (formula "6"))
                           (rule "andLeft" (formula "6"))
                           (rule "andLeft" (formula "6"))
                           (rule "notLeft" (formula "6"))
                           (rule "notLeft" (formula "6"))
                           (rule "replace_known_right" (formula "21") (term "0,0,1,0,0") (ifseqformula "17"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "polySimp_elimSub" (formula "9") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "9") (term "1,1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "8") (term "1,0,0"))
                           (rule "mul_literals" (formula "8") (term "1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "9") (term "1,0,0,1,0"))
                           (rule "polySimp_addComm0" (formula "9") (term "1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "8") (term "1,0,0"))
                           (rule "castedGetAny" (formula "11") (term "1,1,1,0"))
                           (rule "castedGetAny" (formula "9") (term "1,1,1,0"))
                           (rule "castedGetAny" (formula "10") (term "0,0,1,0,1,0"))
                           (rule "castedGetAny" (formula "10") (term "1,0,1,0,1,0"))
                           (rule "castedGetAny" (formula "7") (term "0"))
                           (rule "castedGetAny" (formula "21") (term "0,1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
                           (rule "castedGetAny" (formula "9") (term "0,1,0"))
                           (rule "eqSymm" (formula "9") (term "1,0"))
                           (rule "castedGetAny" (formula "8") (term "0"))
                           (rule "ifEqualsNull" (formula "21"))
                           (rule "orRight" (formula "21"))
                           (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "6"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "notRight" (formula "22"))
                           (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0,0"))
                           (rule "applyEq" (formula "4") (term "0") (ifseqformula "2"))
                           (rule "applyEq" (formula "9") (term "1,1,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "12") (term "0,1,0,0,1,0,0") (ifseqformula "3"))
                           (rule "applyEq" (formula "3") (term "1") (ifseqformula "2"))
                           (rule "applyEq" (formula "5") (term "0,1,0,0,1,0,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "1") (term "0,1,0,0,1,0,0,0,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "6") (term "0,1,0,0,1,0,0") (ifseqformula "3"))
                           (rule "applyEq" (formula "12") (term "0,1,0,0,1,0,0") (ifseqformula "2"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                           (rule "equalityToSeqGetAndSeqLenRight" (formula "21") (inst "iv=iv"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,1"))
                           (rule "applyEq" (formula "21") (term "0,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "21") (term "0,1,0,0,1,0,0,1") (ifseqformula "2"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,1"))
                           (rule "mul_literals" (formula "21") (term "0,1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,1"))
                           (rule "nnf_imp2or" (formula "11") (term "1,0,1,0"))
                           (rule "nnf_imp2or" (formula "5") (term "0"))
                           (rule "nnf_imp2or" (formula "10") (term "0"))
                           (rule "nnf_imp2or" (formula "6") (term "0"))
                           (rule "nnf_imp2or" (formula "12") (term "0"))
                           (rule "nnf_imp2or" (formula "11") (term "0"))
                           (rule "nnf_imp2or" (formula "21") (term "0,1"))
                           (rule "nnf_notAnd" (formula "5") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
                           (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "5") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                           (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "10") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
                           (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                           (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                           (rule "nnf_notAnd" (formula "6") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
                           (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "6") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                           (rule "mul_literals" (formula "6") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "12") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                           (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "11") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                           (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "11") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                           (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                           (rule "nnf_imp2or" (formula "11") (term "0,1,0"))
                           (rule "nnf_notAnd" (formula "21") (term "0,0,1"))
                           (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,1"))
                           (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,1"))
                           (rule "add_literals" (formula "21") (term "0,0,0,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,1"))
                           (rule "mul_literals" (formula "21") (term "1,0,0,0,1"))
                           (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,1"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,1"))
                           (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,1"))
                           (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,1"))
                           (rule "nnf_notAnd" (formula "11") (term "0,0,1,0"))
                           (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,0"))
                           (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,1,0"))
                           (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1,0"))
                           (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,1,0"))
                           (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,1,0"))
                           (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
                           (rule "mul_literals" (formula "11") (term "1,0,0,0,1,0"))
                           (rule "commute_or_2" (formula "10") (term "0"))
                           (rule "commute_and_2" (formula "1") (term "0,0,0"))
                           (rule "commute_or_2" (formula "12") (term "0"))
                           (rule "commute_and" (formula "5") (term "0,0,1,0"))
                           (rule "commute_and" (formula "5") (term "1,0,1,0"))
                           (rule "commute_and" (formula "6") (term "0,0,1,0"))
                           (rule "commute_and" (formula "6") (term "1,0,1,0"))
                           (rule "commute_or" (formula "10") (term "0,0"))
                           (rule "commute_or" (formula "12") (term "0,0"))
                           (rule "shift_paren_or" (formula "11") (term "0,1,0"))
                           (rule "commute_or_2" (formula "11") (term "0,0,1,0"))
                           (rule "lenNonNegative" (formula "2") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "2"))
                           (rule "applyEq" (formula "2") (term "0") (ifseqformula "3"))
                           (rule "lenNonNegative" (formula "4") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "4"))
                           (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
                           (rule "applyEq_and_gen2" (formula "7") (term "1,0,1,0"))
                           (rule "commute_or" (formula "12") (term "0,0,0,1,0"))
                           (rule "commute_and" (formula "1") (term "0,0,0,0"))
                           (rule "seqGetAlphaCast" (formula "9") (term "0"))
                           (rule "castedGetAny" (formula "9") (term "0"))
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "true_left" (formula "9"))
                           (rule "cut_direct" (formula "1") (term "0,1"))
                           (branch "CUT: self_77.tail.<created> = TRUE TRUE"
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "nnf_ex2all" (formula "19"))
                              (rule "nnf_notAnd" (formula "1") (term "0"))
                              (rule "inEqSimp_notLeq" (formula "1") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
                              (rule "nnf_notAnd" (formula "1") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "1,1,0,0"))
                              (rule "shift_paren_and" (formula "7") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "7"))
                              (rule "castedGetAny" (formula "7") (term "1,0,0,1,0,1,0"))
                              (rule "castedGetAny" (formula "7") (term "1,0,1,1,0,0,1,0"))
                              (rule "castedGetAny" (formula "7") (term "0,0,0,0,0,1,0"))
                              (rule "castedGetAny" (formula "7") (term "0,0,1,0,0,1,0"))
                              (rule "cnf_rightDist" (formula "7") (term "0"))
                              (rule "distr_forallAnd" (formula "7"))
                              (rule "andLeft" (formula "7"))
                              (rule "shift_paren_or" (formula "8") (term "0"))
                              (rule "cnf_rightDist" (formula "7") (term "0"))
                              (rule "distr_forallAnd" (formula "7"))
                              (rule "andLeft" (formula "7"))
                              (rule "shift_paren_or" (formula "8") (term "0"))
                              (rule "cnf_rightDist" (formula "7") (term "0"))
                              (rule "distr_forallAnd" (formula "7"))
                              (rule "andLeft" (formula "7"))
                              (rule "commute_or_2" (formula "7") (term "0"))
                              (rule "shift_paren_or" (formula "8") (term "0"))
                              (rule "commute_or" (formula "7") (term "0,0"))
                              (rule "shift_paren_and" (formula "11") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "castedGetAny" (formula "11") (term "0,0,0,0,0,1,0"))
                              (rule "castedGetAny" (formula "11") (term "0,0,1,0,0,1,0"))
                              (rule "castedGetAny" (formula "11") (term "1,0,1,1,0,0,1,0"))
                              (rule "cnf_rightDist" (formula "11") (term "0"))
                              (rule "distr_forallAnd" (formula "11"))
                              (rule "andLeft" (formula "11"))
                              (rule "shift_paren_or" (formula "12") (term "0"))
                              (rule "cnf_rightDist" (formula "11") (term "0"))
                              (rule "distr_forallAnd" (formula "11"))
                              (rule "andLeft" (formula "11"))
                              (rule "shift_paren_or" (formula "12") (term "0"))
                              (rule "cnf_rightDist" (formula "11") (term "0"))
                              (rule "distr_forallAnd" (formula "11"))
                              (rule "andLeft" (formula "11"))
                              (rule "commute_or_2" (formula "11") (term "0"))
                              (rule "shift_paren_or" (formula "12") (term "0"))
                              (rule "commute_or" (formula "11") (term "0,0"))
                              (rule "seqGetAlphaCast" (formula "17") (term "0"))
                              (rule "castedGetAny" (formula "17") (term "0"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "true_left" (formula "17"))
                              (rule "cut_direct" (formula "29") (term "0"))
                              (branch "CUT: self_77.size = 0 TRUE"
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "allRight" (formula "30") (inst "sk=iv_0"))
                                 (rule "orRight" (formula "30"))
                                 (rule "orRight" (formula "30"))
                                 (rule "inEqSimp_leqRight" (formula "30"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_geqRight" (formula "31"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                                 (rule "times_zero_2" (formula "1") (term "1,0"))
                                 (rule "add_zero_right" (formula "1") (term "0"))
                                 (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "applyEq" (formula "19") (term "1,1,0") (ifseqformula "3"))
                                 (rule "add_literals" (formula "19") (term "1,0"))
                                 (rule "applyEq" (formula "13") (term "1,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "15") (term "1,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "21") (term "1,1,0,0,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "21") (term "1,1,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "8") (term "0") (ifseqformula "3"))
                                 (rule "leq_literals" (formula "8"))
                                 (rule "true_left" (formula "8"))
                                 (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "13") (term "1,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "1,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "19") (term "1,1,1,0") (ifseqformula "3"))
                                 (rule "add_zero_right" (formula "19") (term "1,1,0"))
                                 (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "15") (term "1,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "1") (ifseqformula "3"))
                                 (rule "applyEq" (formula "7") (term "1") (ifseqformula "3"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "mul_literals" (formula "1") (term "1"))
                                 (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "2") (term "0"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "closeFalse" (formula "2"))
                              )
                              (branch "CUT: self_77.size = 0 FALSE"
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "false_right" (formula "30"))
                                 (rule "inEqSimp_strengthen1" (formula "3") (ifseqformula "29"))
                                 (rule "add_zero_right" (formula "3") (term "1"))
                                 (rule "inEqSimp_contradEq7" (formula "29") (ifseqformula "3"))
                                 (rule "times_zero_1" (formula "29") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "29") (term "0,0"))
                                 (rule "leq_literals" (formula "29") (term "0"))
                                  (builtin "One Step Simplification" (formula "29"))
                                 (rule "false_right" (formula "29"))
                                 (rule "all_pull_out3" (formula "19") (term "0"))
                                 (rule "shift_paren_or" (formula "19") (term "0,0"))
                                 (rule "shift_paren_or" (formula "19") (term "0,0,0"))
                                 (rule "shift_paren_or" (formula "19") (term "0,0,0,0"))
                                 (rule "commute_or_2" (formula "19") (term "0,0,0,0,0"))
                                 (rule "commute_or" (formula "19") (term "0,0,0,0,0,0"))
                                  (builtin "SMTRule")
                              )
                           )
                           (branch "CUT: self_77.tail.<created> = TRUE FALSE"
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "referencedObjectIsCreatedRight" (formula "19") (ifseqformula "20"))
                              (rule "close" (formula "19") (ifseqformula "14"))
                           )
                        )
                     )
                     (branch "Case 2"
                        (rule "translateJavaSubInt" (formula "6") (term "1,0,1,1,1"))
                        (rule "translateJavaSubInt" (formula "7") (term "1,1,0,0"))
                        (rule "eqSymm" (formula "7") (term "1,0"))
                        (rule "eqSymm" (formula "17"))
                        (rule "eqSymm" (formula "2"))
                        (rule "eqSymm" (formula "6") (term "1,0,1"))
                        (rule "eqSymm" (formula "8") (term "0,1,0,1,0"))
                        (rule "eqSymm" (formula "8") (term "1,1,0,1,0"))
                        (rule "eqSymm" (formula "6") (term "1,1"))
                        (rule "replace_known_right" (formula "6") (term "0,0,0") (ifseqformula "16"))
                         (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "16")) (ifInst ""  (formula "17")))
                        (rule "closeFalse" (formula "6"))
                     )
                  )
                  (branch "Case 2"
                     (rule "andRight" (formula "17"))
                     (branch "Case 1"
                        (rule "andRight" (formula "17"))
                        (branch "Case 1"
                           (rule "andRight" (formula "17"))
                           (branch "Case 1"
                              (rule "andRight" (formula "17"))
                              (branch "Case 1"
                                 (rule "notRight" (formula "17"))
                                 (rule "translateJavaSubInt" (formula "8") (term "1,1,0,0"))
                                 (rule "translateJavaSubInt" (formula "7") (term "1,0,1,1,1"))
                                 (rule "eqSymm" (formula "7") (term "1,0,1"))
                                 (rule "eqSymm" (formula "8") (term "1,0"))
                                 (rule "eqSymm" (formula "3"))
                                 (rule "eqSymm" (formula "9") (term "0,1,0,1,0"))
                                 (rule "eqSymm" (formula "9") (term "1,1,0,1,0"))
                                 (rule "eqSymm" (formula "7") (term "1,1"))
                                 (rule "replace_known_right" (formula "7") (term "1,0,0") (ifseqformula "17"))
                                  (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "17")))
                                 (rule "closeFalse" (formula "7"))
                              )
                              (branch
                                 (rule "notRight" (formula "17"))
                                 (rule "close" (formula "17") (ifseqformula "1"))
                              )
                           )
                           (branch "Case 2"
                              (rule "notRight" (formula "17"))
                              (rule "translateJavaSubInt" (formula "8") (term "1,1,0,0"))
                              (rule "translateJavaSubInt" (formula "7") (term "1,0,1,1,1"))
                              (rule "eqSymm" (formula "7") (term "1,0,1"))
                              (rule "eqSymm" (formula "8") (term "1,0"))
                              (rule "eqSymm" (formula "3"))
                              (rule "eqSymm" (formula "9") (term "0,1,0,1,0"))
                              (rule "eqSymm" (formula "9") (term "1,1,0,1,0"))
                              (rule "eqSymm" (formula "7") (term "1,1"))
                              (rule "replace_known_right" (formula "7") (term "1,0,0") (ifseqformula "17"))
                               (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "1")) (ifInst ""  (formula "17")) (ifInst ""  (formula "1")))
                              (rule "closeFalse" (formula "7"))
                           )
                        )
                        (branch "Case 2"
                           (rule "translateJavaSubInt" (formula "7") (term "1,1,0,0"))
                           (rule "translateJavaSubInt" (formula "6") (term "1,0,1,1,1"))
                           (rule "eqSymm" (formula "2"))
                           (rule "eqSymm" (formula "6") (term "1,0,1"))
                           (rule "eqSymm" (formula "17") (term "1,0,0,0,0,0"))
                           (rule "eqSymm" (formula "7") (term "1,0"))
                           (rule "eqSymm" (formula "8") (term "0,1,0,1,0"))
                           (rule "eqSymm" (formula "8") (term "1,1,0,1,0"))
                           (rule "eqSymm" (formula "6") (term "1,1"))
                           (rule "replace_known_right" (formula "6") (term "1,0,0") (ifseqformula "16"))
                            (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "16")))
                           (rule "andLeft" (formula "6"))
                           (rule "andLeft" (formula "6"))
                           (rule "andLeft" (formula "6"))
                           (rule "andLeft" (formula "6"))
                           (rule "notLeft" (formula "7"))
                           (rule "notLeft" (formula "6"))
                           (rule "replace_known_right" (formula "21") (term "0,0,1,0,0") (ifseqformula "18"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "polySimp_elimSub" (formula "9") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "9") (term "1,1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "8") (term "1,0,0"))
                           (rule "mul_literals" (formula "8") (term "1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "9") (term "1,0,0,1,0"))
                           (rule "polySimp_addComm0" (formula "9") (term "1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "8") (term "1,0,0"))
                           (rule "castedGetAny" (formula "11") (term "1,1,1,0"))
                           (rule "castedGetAny" (formula "9") (term "1,1,1,0"))
                           (rule "castedGetAny" (formula "10") (term "0,0,1,0,1,0"))
                           (rule "castedGetAny" (formula "10") (term "1,0,1,0,1,0"))
                           (rule "castedGetAny" (formula "7") (term "0"))
                           (rule "ifEqualsNull" (formula "21"))
                           (rule "orRight" (formula "21"))
                           (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "6"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "notRight" (formula "22"))
                           (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                           (rule "castedGetAny" (formula "10") (term "0,1,0"))
                           (rule "eqSymm" (formula "10") (term "1,0"))
                           (rule "castedGetAny" (formula "9") (term "0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0,0"))
                           (rule "applyEq" (formula "9") (term "1,1,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "4") (term "0") (ifseqformula "2"))
                           (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "12") (term "0,1,0,0,1,0,0") (ifseqformula "3"))
                           (rule "applyEq" (formula "3") (term "1") (ifseqformula "2"))
                           (rule "applyEq" (formula "5") (term "0,1,0,0,1,0,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "1") (term "0,1,0,0,1,0,0,0,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "2"))
                           (rule "apply_eq_monomials" (formula "6") (term "1,0,0,1,0,0") (ifseqformula "3"))
                           (rule "polySimp_rightDist" (formula "6") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,0,1,0,0,1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "6") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "6") (term "1,1,1,0,0,1,0,0"))
                           (rule "times_zero_1" (formula "6") (term "1,1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "6") (term "1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
                           (rule "applyEq" (formula "12") (term "0,1,0,0,1,0,0") (ifseqformula "2"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                           (rule "equalityToSeqGetAndSeqLenRight" (formula "18") (inst "iv=iv"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1"))
                           (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "18") (term "0,1,0,0,1,0,0,1") (ifseqformula "2"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,1"))
                           (rule "mul_literals" (formula "18") (term "0,1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,1"))
                           (rule "nnf_imp2or" (formula "11") (term "1,0,1,0"))
                           (rule "nnf_imp2or" (formula "5") (term "0"))
                           (rule "nnf_imp2or" (formula "10") (term "0"))
                           (rule "nnf_imp2or" (formula "6") (term "0"))
                           (rule "nnf_imp2or" (formula "12") (term "0"))
                           (rule "nnf_imp2or" (formula "11") (term "0"))
                           (rule "nnf_imp2or" (formula "18") (term "0,1"))
                           (rule "nnf_notAnd" (formula "5") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
                           (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "5") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                           (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "10") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
                           (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                           (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                           (rule "nnf_notAnd" (formula "6") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
                           (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "6") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                           (rule "mul_literals" (formula "6") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "12") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                           (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "11") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                           (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "11") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                           (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                           (rule "nnf_imp2or" (formula "11") (term "0,1,0"))
                           (rule "nnf_notAnd" (formula "18") (term "0,0,1"))
                           (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,1"))
                           (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0,1"))
                           (rule "add_literals" (formula "18") (term "0,0,0,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,1"))
                           (rule "mul_literals" (formula "18") (term "1,0,0,0,1"))
                           (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,1"))
                           (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,1"))
                           (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,1"))
                           (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,1"))
                           (rule "nnf_notAnd" (formula "11") (term "0,0,1,0"))
                           (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,0"))
                           (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,1,0"))
                           (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1,0"))
                           (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,1,0"))
                           (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,1,0"))
                           (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
                           (rule "mul_literals" (formula "11") (term "1,0,0,0,1,0"))
                           (rule "commute_or_2" (formula "10") (term "0"))
                           (rule "commute_and_2" (formula "1") (term "0,0,0"))
                           (rule "commute_or_2" (formula "12") (term "0"))
                           (rule "commute_and" (formula "5") (term "1,0,1,0"))
                           (rule "commute_and" (formula "5") (term "0,0,1,0"))
                           (rule "commute_and" (formula "6") (term "1,0,1,0"))
                           (rule "commute_and" (formula "6") (term "0,0,1,0"))
                           (rule "commute_or" (formula "10") (term "0,0"))
                           (rule "commute_or" (formula "12") (term "0,0"))
                           (rule "shift_paren_or" (formula "11") (term "0,1,0"))
                           (rule "commute_or_2" (formula "11") (term "0,0,1,0"))
                           (rule "lenNonNegative" (formula "2") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "2"))
                           (rule "applyEq" (formula "2") (term "0") (ifseqformula "3"))
                           (rule "lenNonNegative" (formula "4") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "4"))
                           (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
                           (rule "applyEq_and_gen2" (formula "7") (term "1,0,1,0"))
                           (rule "commute_or" (formula "12") (term "0,0,0,1,0"))
                           (rule "cut_direct" (formula "1") (term "0,1"))
                           (branch "CUT: self_77.tail.<created> = TRUE TRUE"
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "nnf_ex2all" (formula "19"))
                              (rule "nnf_notAnd" (formula "1") (term "0"))
                              (rule "inEqSimp_notLeq" (formula "1") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
                              (rule "nnf_notAnd" (formula "1") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                              (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                              (rule "commute_or" (formula "1") (term "0,0"))
                              (rule "seqGetAlphaCast" (formula "10") (term "0"))
                              (rule "castedGetAny" (formula "10") (term "0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "true_left" (formula "10"))
                              (rule "shift_paren_and" (formula "7") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "7"))
                              (rule "castedGetAny" (formula "7") (term "1,0,0,1,0,1,0"))
                              (rule "castedGetAny" (formula "7") (term "1,0,1,1,0,0,1,0"))
                              (rule "castedGetAny" (formula "7") (term "0,0,0,0,0,1,0"))
                              (rule "castedGetAny" (formula "7") (term "0,0,1,0,0,1,0"))
                              (rule "cnf_rightDist" (formula "7") (term "0"))
                              (rule "distr_forallAnd" (formula "7"))
                              (rule "andLeft" (formula "7"))
                              (rule "shift_paren_or" (formula "8") (term "0"))
                              (rule "cnf_rightDist" (formula "7") (term "0"))
                              (rule "distr_forallAnd" (formula "7"))
                              (rule "andLeft" (formula "7"))
                              (rule "shift_paren_or" (formula "8") (term "0"))
                              (rule "cnf_rightDist" (formula "7") (term "0"))
                              (rule "distr_forallAnd" (formula "7"))
                              (rule "andLeft" (formula "7"))
                              (rule "commute_or_2" (formula "7") (term "0"))
                              (rule "shift_paren_or" (formula "8") (term "0"))
                              (rule "commute_or" (formula "7") (term "0,0"))
                              (rule "seqGetAlphaCast" (formula "14") (term "0"))
                              (rule "castedGetAny" (formula "14") (term "0"))
                               (builtin "One Step Simplification" (formula "14"))
                              (rule "true_left" (formula "14"))
                              (rule "shift_paren_and" (formula "11") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "castedGetAny" (formula "11") (term "0,0,0,0,0,1,0"))
                              (rule "castedGetAny" (formula "11") (term "0,0,1,0,0,1,0"))
                              (rule "castedGetAny" (formula "11") (term "1,0,1,1,0,0,1,0"))
                              (rule "cnf_rightDist" (formula "11") (term "0"))
                              (rule "distr_forallAnd" (formula "11"))
                              (rule "andLeft" (formula "11"))
                              (rule "shift_paren_or" (formula "12") (term "0"))
                              (rule "cnf_rightDist" (formula "11") (term "0"))
                              (rule "distr_forallAnd" (formula "11"))
                              (rule "andLeft" (formula "11"))
                              (rule "shift_paren_or" (formula "12") (term "0"))
                              (rule "cnf_rightDist" (formula "11") (term "0"))
                              (rule "distr_forallAnd" (formula "11"))
                              (rule "andLeft" (formula "11"))
                              (rule "commute_or_2" (formula "11") (term "0"))
                              (rule "shift_paren_or" (formula "12") (term "0"))
                              (rule "commute_or" (formula "11") (term "0,0"))
                              (rule "cut_direct" (formula "26") (term "0"))
                              (branch "CUT: self_77.size = 0 TRUE"
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "allRight" (formula "27") (inst "sk=iv_0"))
                                 (rule "orRight" (formula "27"))
                                 (rule "orRight" (formula "27"))
                                 (rule "inEqSimp_leqRight" (formula "27"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_geqRight" (formula "28"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "applyEq" (formula "4") (term "1,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                                 (rule "times_zero_2" (formula "1") (term "1,0"))
                                 (rule "add_zero_right" (formula "1") (term "0"))
                                 (rule "applyEq" (formula "16") (term "1,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "14") (term "1,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "13") (term "1,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "12") (term "1,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "22") (term "1,1,0,0,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "9") (term "0") (ifseqformula "3"))
                                 (rule "leq_literals" (formula "9"))
                                 (rule "true_left" (formula "9"))
                                 (rule "applyEq" (formula "21") (term "1,1,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "9") (term "1,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "14") (term "1,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "applyEq" (formula "19") (term "1,1,1,0") (ifseqformula "3"))
                                 (rule "add_zero_right" (formula "19") (term "1,1,0"))
                                 (rule "applyEq" (formula "9") (term "1,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "15") (term "1,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "18") (term "1,1,0") (ifseqformula "3"))
                                 (rule "add_zero_right" (formula "18") (term "1,0"))
                                 (rule "applyEq" (formula "6") (term "1") (ifseqformula "3"))
                                 (rule "applyEq" (formula "7") (term "1") (ifseqformula "3"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "mul_literals" (formula "1") (term "1"))
                                 (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "2") (term "0"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "closeFalse" (formula "2"))
                              )
                              (branch "CUT: self_77.size = 0 FALSE"
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "false_right" (formula "27"))
                                 (rule "inEqSimp_strengthen1" (formula "3") (ifseqformula "26"))
                                 (rule "add_zero_right" (formula "3") (term "1"))
                                 (rule "inEqSimp_contradEq7" (formula "26") (ifseqformula "3"))
                                 (rule "times_zero_1" (formula "26") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "26") (term "0,0"))
                                 (rule "leq_literals" (formula "26") (term "0"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "false_right" (formula "26"))
                                 (rule "all_pull_out3" (formula "19") (term "0"))
                                 (rule "shift_paren_or" (formula "19") (term "0,0"))
                                 (rule "shift_paren_or" (formula "19") (term "0,0,0"))
                                 (rule "shift_paren_or" (formula "19") (term "0,0,0,0"))
                                 (rule "commute_or_2" (formula "19") (term "0,0,0,0,0"))
                                 (rule "commute_or" (formula "19") (term "0,0,0,0,0,0"))
                                  (builtin "SMTRule")
                              )
                           )
                           (branch "CUT: self_77.tail.<created> = TRUE FALSE"
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "referencedObjectIsCreatedRight" (formula "19") (ifseqformula "21"))
                              (rule "close" (formula "19") (ifseqformula "14"))
                           )
                        )
                     )
                     (branch "Case 2"
                        (rule "translateJavaSubInt" (formula "7") (term "1,1,0,0"))
                        (rule "translateJavaSubInt" (formula "6") (term "1,0,1,1,1"))
                        (rule "eqSymm" (formula "17"))
                        (rule "eqSymm" (formula "6") (term "1,0,1"))
                        (rule "eqSymm" (formula "8") (term "0,1,0,1,0"))
                        (rule "eqSymm" (formula "8") (term "1,1,0,1,0"))
                        (rule "eqSymm" (formula "2"))
                        (rule "eqSymm" (formula "7") (term "1,0"))
                        (rule "eqSymm" (formula "6") (term "1,1"))
                        (rule "replace_known_right" (formula "6") (term "1,0,0") (ifseqformula "16"))
                         (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "16")) (ifInst ""  (formula "17")))
                        (rule "closeFalse" (formula "6"))
                     )
                  )
               )
               (branch "Case 2"
                  (rule "andRight" (formula "16"))
                  (branch "Case 1"
                     (rule "translateJavaSubInt" (formula "17") (term "1,0,1"))
                     (rule "translateJavaSubInt" (formula "7") (term "1,1,0,0"))
                     (rule "translateJavaSubInt" (formula "6") (term "1,0,1,1,1"))
                     (rule "eqSymm" (formula "7") (term "1,0"))
                     (rule "eqSymm" (formula "2"))
                     (rule "eqSymm" (formula "6") (term "1,0,1"))
                     (rule "eqSymm" (formula "8") (term "0,1,0,1,0"))
                     (rule "eqSymm" (formula "8") (term "1,1,0,1,0"))
                     (rule "eqSymm" (formula "17"))
                     (rule "eqSymm" (formula "6") (term "1,1"))
                     (rule "replace_known_right" (formula "6") (term "0,0,0,0,0,0,1") (ifseqformula "16"))
                      (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "16")) (ifInst ""  (formula "17")))
                     (rule "closeFalse" (formula "6"))
                  )
                  (branch "Case 2"
                     (rule "translateJavaSubInt" (formula "17") (term "1,0,1"))
                     (rule "translateJavaSubInt" (formula "7") (term "1,1,0,0"))
                     (rule "translateJavaSubInt" (formula "6") (term "1,0,1,1,1"))
                     (rule "eqSymm" (formula "6") (term "1,0,1"))
                     (rule "eqSymm" (formula "8") (term "0,1,0,1,0"))
                     (rule "eqSymm" (formula "8") (term "1,1,0,1,0"))
                     (rule "eqSymm" (formula "7") (term "1,0"))
                     (rule "eqSymm" (formula "2"))
                     (rule "eqSymm" (formula "17"))
                     (rule "eqSymm" (formula "6") (term "1,1"))
                     (rule "replace_known_right" (formula "6") (term "0,1,0,0,0,0,1") (ifseqformula "16"))
                      (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "16")) (ifInst ""  (formula "17")))
                     (rule "closeFalse" (formula "6"))
                  )
               )
            )
            (branch "Case 2"
               (rule "andRight" (formula "17"))
               (branch "Case 1"
                  (rule "andRight" (formula "17"))
                  (branch "Case 1"
                     (rule "andRight" (formula "17"))
                     (branch "Case 1"
                        (rule "andRight" (formula "17"))
                        (branch "Case 1"
                           (rule "andRight" (formula "17"))
                           (branch "Case 1"
                              (rule "notRight" (formula "17"))
                              (rule "translateJavaSubInt" (formula "8") (term "1,1,0,0"))
                              (rule "translateJavaSubInt" (formula "7") (term "1,0,1,1,1"))
                              (rule "eqSymm" (formula "7") (term "1,0,1"))
                              (rule "eqSymm" (formula "8") (term "1,0"))
                              (rule "eqSymm" (formula "3"))
                              (rule "eqSymm" (formula "9") (term "0,1,0,1,0"))
                              (rule "eqSymm" (formula "9") (term "1,1,0,1,0"))
                              (rule "eqSymm" (formula "7") (term "1,1"))
                              (rule "replace_known_right" (formula "7") (term "1,0") (ifseqformula "17"))
                               (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "17")))
                              (rule "closeFalse" (formula "7"))
                           )
                           (branch "Case 2"
                              (rule "notRight" (formula "17"))
                              (rule "translateJavaSubInt" (formula "8") (term "1,1,0,0"))
                              (rule "translateJavaSubInt" (formula "7") (term "1,0,1,1,1"))
                              (rule "eqSymm" (formula "7") (term "1,0,1"))
                              (rule "eqSymm" (formula "8") (term "1,0"))
                              (rule "eqSymm" (formula "3"))
                              (rule "eqSymm" (formula "9") (term "0,1,0,1,0"))
                              (rule "eqSymm" (formula "9") (term "1,1,0,1,0"))
                              (rule "eqSymm" (formula "7") (term "1,1"))
                              (rule "replace_known_right" (formula "7") (term "1,0") (ifseqformula "17"))
                               (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "17")))
                              (rule "closeFalse" (formula "7"))
                           )
                        )
                        (branch
                           (rule "notRight" (formula "17"))
                           (rule "close" (formula "17") (ifseqformula "1"))
                        )
                     )
                     (branch "Case 2"
                        (rule "translateJavaSubInt" (formula "7") (term "1,1,0,0"))
                        (rule "translateJavaSubInt" (formula "6") (term "1,0,1,1,1"))
                        (rule "eqSymm" (formula "2"))
                        (rule "eqSymm" (formula "6") (term "1,0,1"))
                        (rule "eqSymm" (formula "17") (term "1,0,0,0,0,0"))
                        (rule "eqSymm" (formula "7") (term "1,0"))
                        (rule "eqSymm" (formula "8") (term "0,1,0,1,0"))
                        (rule "eqSymm" (formula "8") (term "1,1,0,1,0"))
                        (rule "eqSymm" (formula "6") (term "1,1"))
                        (rule "replace_known_right" (formula "17") (term "0,0,1,0,0") (ifseqformula "16"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "replace_known_right" (formula "6") (term "0,1,0,0,0,1") (ifseqformula "16"))
                         (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "16")))
                        (rule "andLeft" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "notLeft" (formula "7"))
                        (rule "notLeft" (formula "6"))
                        (rule "polySimp_elimSub" (formula "9") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "9") (term "1,1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "8") (term "1,0,0"))
                        (rule "mul_literals" (formula "8") (term "1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "9") (term "1,0,0,1,0"))
                        (rule "polySimp_addComm0" (formula "9") (term "1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "8") (term "1,0,0"))
                        (rule "castedGetAny" (formula "11") (term "1,1,1,0"))
                        (rule "castedGetAny" (formula "9") (term "1,1,1,0"))
                        (rule "castedGetAny" (formula "10") (term "1,0,1,0,1,0"))
                        (rule "castedGetAny" (formula "10") (term "0,0,1,0,1,0"))
                        (rule "ifEqualsNull" (formula "21"))
                        (rule "orRight" (formula "21"))
                        (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "6"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "notRight" (formula "22"))
                        (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "castedGetAny" (formula "8") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                        (rule "castedGetAny" (formula "10") (term "0,1,0"))
                        (rule "eqSymm" (formula "10") (term "1,0"))
                        (rule "castedGetAny" (formula "9") (term "0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0,0"))
                        (rule "applyEq" (formula "4") (term "0") (ifseqformula "2"))
                        (rule "applyEq" (formula "9") (term "1,1,0") (ifseqformula "2"))
                        (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "2"))
                        (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "2"))
                        (rule "applyEq" (formula "5") (term "0,1,0,0,1,0,0") (ifseqformula "2"))
                        (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "2"))
                        (rule "applyEq" (formula "12") (term "0,1,0,0,1,0,0") (ifseqformula "3"))
                        (rule "applyEq" (formula "6") (term "0,1,0,0,1,0,0") (ifseqformula "3"))
                        (rule "applyEq" (formula "3") (term "1") (ifseqformula "2"))
                        (rule "applyEq" (formula "1") (term "0,1,0,0,1,0,0,0,0") (ifseqformula "2"))
                        (rule "applyEq" (formula "6") (term "0,1,0,0,1,0,0") (ifseqformula "2"))
                        (rule "applyEq" (formula "12") (term "0,1,0,0,1,0,0") (ifseqformula "2"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                        (rule "equalityToSeqGetAndSeqLenRight" (formula "18") (inst "iv=iv"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1"))
                        (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "2"))
                        (rule "applyEq" (formula "18") (term "0,1,0,0,1,0,0,1") (ifseqformula "2"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "18") (term "0,1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,1"))
                        (rule "nnf_imp2or" (formula "11") (term "1,0,1,0"))
                        (rule "nnf_imp2or" (formula "5") (term "0"))
                        (rule "nnf_imp2or" (formula "10") (term "0"))
                        (rule "nnf_imp2or" (formula "6") (term "0"))
                        (rule "nnf_imp2or" (formula "12") (term "0"))
                        (rule "nnf_imp2or" (formula "11") (term "0"))
                        (rule "nnf_imp2or" (formula "18") (term "0,1"))
                        (rule "nnf_notAnd" (formula "5") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
                        (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "5") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                        (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "10") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
                        (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                        (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                        (rule "nnf_notAnd" (formula "6") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
                        (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "6") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                        (rule "mul_literals" (formula "6") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "12") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                        (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                        (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "11") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "11") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                        (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                        (rule "nnf_imp2or" (formula "11") (term "0,1,0"))
                        (rule "nnf_notAnd" (formula "18") (term "0,0,1"))
                        (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,1"))
                        (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0,1"))
                        (rule "add_literals" (formula "18") (term "0,0,0,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,1"))
                        (rule "mul_literals" (formula "18") (term "1,0,0,0,1"))
                        (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,1"))
                        (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,1"))
                        (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,1"))
                        (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,1"))
                        (rule "nnf_notAnd" (formula "11") (term "0,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,1,0"))
                        (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,1,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,1,0"))
                        (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
                        (rule "mul_literals" (formula "11") (term "1,0,0,0,1,0"))
                        (rule "commute_or_2" (formula "10") (term "0"))
                        (rule "commute_and_2" (formula "1") (term "0,0,0"))
                        (rule "commute_or_2" (formula "12") (term "0"))
                        (rule "commute_and" (formula "5") (term "0,0,1,0"))
                        (rule "commute_and" (formula "5") (term "1,0,1,0"))
                        (rule "commute_and" (formula "6") (term "1,0,1,0"))
                        (rule "commute_and" (formula "6") (term "0,0,1,0"))
                        (rule "commute_or" (formula "10") (term "0,0"))
                        (rule "commute_or" (formula "12") (term "0,0"))
                        (rule "shift_paren_or" (formula "11") (term "0,1,0"))
                        (rule "commute_or_2" (formula "11") (term "0,0,1,0"))
                        (rule "lenNonNegative" (formula "2") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "2"))
                        (rule "applyEq" (formula "2") (term "0") (ifseqformula "3"))
                        (rule "lenNonNegative" (formula "4") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "4"))
                        (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
                        (rule "applyEq_and_gen2" (formula "7") (term "1,0,1,0"))
                        (rule "commute_or" (formula "12") (term "0,0,0,1,0"))
                        (rule "commute_and" (formula "1") (term "0,0,0,0"))
                        (rule "cut_direct" (formula "1") (term "0,1"))
                        (branch "CUT: self_77.tail.<created> = TRUE TRUE"
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "notLeft" (formula "2"))
                           (rule "nnf_ex2all" (formula "19"))
                           (rule "nnf_notAnd" (formula "1") (term "0"))
                           (rule "inEqSimp_notLeq" (formula "1") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
                           (rule "nnf_notAnd" (formula "1") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "1,1,0,0"))
                           (rule "seqGetAlphaCast" (formula "10") (term "0"))
                           (rule "castedGetAny" (formula "10") (term "0"))
                            (builtin "One Step Simplification" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "shift_paren_and" (formula "7") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "7"))
                           (rule "castedGetAny" (formula "7") (term "0,0,1,0,0,1,0"))
                           (rule "castedGetAny" (formula "7") (term "1,0,1,1,0,0,1,0"))
                           (rule "castedGetAny" (formula "7") (term "0,0,0,0,0,1,0"))
                           (rule "castedGetAny" (formula "7") (term "1,0,0,1,0,1,0"))
                           (rule "cnf_rightDist" (formula "7") (term "0"))
                           (rule "distr_forallAnd" (formula "7"))
                           (rule "andLeft" (formula "7"))
                           (rule "shift_paren_or" (formula "8") (term "0"))
                           (rule "cnf_rightDist" (formula "7") (term "0"))
                           (rule "distr_forallAnd" (formula "7"))
                           (rule "andLeft" (formula "7"))
                           (rule "shift_paren_or" (formula "8") (term "0"))
                           (rule "cnf_rightDist" (formula "7") (term "0"))
                           (rule "distr_forallAnd" (formula "7"))
                           (rule "andLeft" (formula "7"))
                           (rule "commute_or_2" (formula "7") (term "0"))
                           (rule "shift_paren_or" (formula "8") (term "0"))
                           (rule "commute_or" (formula "7") (term "0,0"))
                           (rule "shift_paren_and" (formula "11") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "castedGetAny" (formula "11") (term "0,0,0,0,0,1,0"))
                           (rule "castedGetAny" (formula "11") (term "0,0,1,0,0,1,0"))
                           (rule "castedGetAny" (formula "11") (term "1,0,1,1,0,0,1,0"))
                           (rule "cnf_rightDist" (formula "11") (term "0"))
                           (rule "distr_forallAnd" (formula "11"))
                           (rule "andLeft" (formula "11"))
                           (rule "shift_paren_or" (formula "12") (term "0"))
                           (rule "cnf_rightDist" (formula "11") (term "0"))
                           (rule "distr_forallAnd" (formula "11"))
                           (rule "andLeft" (formula "11"))
                           (rule "shift_paren_or" (formula "12") (term "0"))
                           (rule "cnf_rightDist" (formula "11") (term "0"))
                           (rule "distr_forallAnd" (formula "11"))
                           (rule "andLeft" (formula "11"))
                           (rule "commute_or_2" (formula "11") (term "0"))
                           (rule "shift_paren_or" (formula "12") (term "0"))
                           (rule "commute_or" (formula "11") (term "0,0"))
                           (rule "seqGetAlphaCast" (formula "17") (term "0"))
                           (rule "castedGetAny" (formula "17") (term "0"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "true_left" (formula "17"))
                           (rule "cut_direct" (formula "26") (term "0"))
                           (branch "CUT: self_77.size = 0 TRUE"
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "allRight" (formula "27") (inst "sk=iv_0"))
                              (rule "orRight" (formula "27"))
                              (rule "orRight" (formula "27"))
                              (rule "inEqSimp_leqRight" (formula "27"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_geqRight" (formula "28"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                              (rule "times_zero_2" (formula "1") (term "1,0"))
                              (rule "add_zero_right" (formula "1") (term "0"))
                              (rule "applyEq" (formula "23") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "4") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "14") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "22") (term "1,1,0,0,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "20") (term "1,1,0") (ifseqformula "3"))
                              (rule "add_zero_right" (formula "20") (term "1,0"))
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "3"))
                              (rule "leq_literals" (formula "9"))
                              (rule "true_left" (formula "9"))
                              (rule "applyEq" (formula "14") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "20") (term "1,1,1,0") (ifseqformula "3"))
                              (rule "add_zero_right" (formula "20") (term "1,1,0"))
                              (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "15") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "12") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "6") (term "0") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "6"))
                              (rule "true_left" (formula "6"))
                              (rule "applyEq" (formula "15") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "20") (term "1,1,0,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "9") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "8") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "7") (term "1") (ifseqformula "3"))
                              (rule "applyEq" (formula "6") (term "1") (ifseqformula "3"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "CUT: self_77.size = 0 FALSE"
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "false_right" (formula "27"))
                              (rule "inEqSimp_strengthen1" (formula "3") (ifseqformula "26"))
                              (rule "add_zero_right" (formula "3") (term "1"))
                              (rule "inEqSimp_contradEq7" (formula "26") (ifseqformula "3"))
                              (rule "times_zero_1" (formula "26") (term "1,0,0"))
                              (rule "add_zero_right" (formula "26") (term "0,0"))
                              (rule "leq_literals" (formula "26") (term "0"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "false_right" (formula "26"))
                              (rule "all_pull_out3" (formula "19") (term "0"))
                              (rule "shift_paren_or" (formula "19") (term "0,0"))
                              (rule "shift_paren_or" (formula "19") (term "0,0,0"))
                              (rule "shift_paren_or" (formula "19") (term "0,0,0,0"))
                              (rule "commute_or_2" (formula "19") (term "0,0,0,0,0"))
                              (rule "commute_or" (formula "19") (term "0,0,0,0,0,0"))
                               (builtin "SMTRule")
                           )
                        )
                        (branch "CUT: self_77.tail.<created> = TRUE FALSE"
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "referencedObjectIsCreatedRight" (formula "19") (ifseqformula "23"))
                           (rule "close" (formula "19") (ifseqformula "14"))
                        )
                     )
                  )
                  (branch "Case 2"
                     (rule "translateJavaSubInt" (formula "7") (term "1,1,0,0"))
                     (rule "translateJavaSubInt" (formula "6") (term "1,0,1,1,1"))
                     (rule "eqSymm" (formula "17"))
                     (rule "eqSymm" (formula "6") (term "1,0,1"))
                     (rule "eqSymm" (formula "8") (term "0,1,0,1,0"))
                     (rule "eqSymm" (formula "8") (term "1,1,0,1,0"))
                     (rule "eqSymm" (formula "2"))
                     (rule "eqSymm" (formula "7") (term "1,0"))
                     (rule "eqSymm" (formula "6") (term "1,1"))
                     (rule "replace_known_right" (formula "6") (term "1,0") (ifseqformula "16"))
                      (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "16")) (ifInst ""  (formula "17")))
                     (rule "closeFalse" (formula "6"))
                  )
               )
               (branch "Case 2"
                  (rule "translateJavaSubInt" (formula "6") (term "1,0,1,1,1"))
                  (rule "translateJavaSubInt" (formula "17") (term "1,0,1"))
                  (rule "translateJavaSubInt" (formula "7") (term "1,1,0,0"))
                  (rule "eqSymm" (formula "6") (term "1,0,1"))
                  (rule "eqSymm" (formula "7") (term "1,0"))
                  (rule "eqSymm" (formula "2"))
                  (rule "eqSymm" (formula "8") (term "0,1,0,1,0"))
                  (rule "eqSymm" (formula "8") (term "1,1,0,1,0"))
                  (rule "eqSymm" (formula "6") (term "1,1"))
                  (rule "eqSymm" (formula "17"))
                  (rule "replace_known_right" (formula "6") (term "0,1,0,0,0,1") (ifseqformula "16"))
                   (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "16")) (ifInst ""  (formula "17")))
                  (rule "closeFalse" (formula "6"))
               )
            )
         )
      )
      (branch "Case 2"
         (rule "allRight" (formula "16") (inst "sk=i_1_0") (userinteraction))
         (rule "impRight" (formula "16") (userinteraction))
         (rule "translateJavaSubInt" (formula "7") (term "1,0,1,1,1"))
         (rule "translateJavaSubInt" (formula "8") (term "1,1,0,0"))
         (rule "translateJavaSubInt" (formula "1") (term "1,1"))
         (rule "sub" (formula "1") (term "1,1"))
         (rule "neg_literal" (formula "1") (term "1,1,1"))
         (rule "sub" (formula "8") (term "1,1,0,0"))
         (rule "neg_literal" (formula "8") (term "1,1,1,0,0"))
         (rule "sub" (formula "7") (term "1,0,1,1,1"))
         (rule "neg_literal" (formula "7") (term "1,1,0,1,1,1"))
         (rule "ifthenelse_split" (formula "17") (term "0") (userinteraction))
         (branch " !exists int i; ( 0 <= i & i < self_77.nodeList.length & (Node)(self_77.nodeList[i_1_0]) = (Node)(self_77.nodeList[i])) | !(Node)(self_77.nodeList[i_1_0]) = null & !(Node)(self_77.nodeList[i_1_0]).<created> = TRUE TRUE"
            (rule "andLeft" (formula "2"))
            (rule "eqSymm" (formula "1") (term "1,0,0,0"))
            (rule "eqSymm" (formula "9") (term "1,0,1"))
            (rule "eqSymm" (formula "10") (term "1,0"))
            (rule "eqSymm" (formula "19"))
            (rule "eqSymm" (formula "5"))
            (rule "eqSymm" (formula "11") (term "1,1,0,1,0"))
            (rule "eqSymm" (formula "11") (term "0,1,0,1,0"))
            (rule "eqSymm" (formula "9") (term "1,1"))
            (rule "polySimp_addComm0" (formula "10") (term "1,1,0,0"))
            (rule "polySimp_addComm0" (formula "3") (term "1"))
            (rule "polySimp_addComm0" (formula "10") (term "1,0,0,1,0"))
            (rule "polySimp_addComm0" (formula "19") (term "1,0,0"))
            (rule "polySimp_addComm0" (formula "9") (term "1,0,0,1,1"))
            (rule "castedGetAny" (formula "12") (term "1,1,1,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,1"))
            (rule "castedGetAny" (formula "1") (term "1,0,0,1,1"))
            (rule "castedGetAny" (formula "1") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,1,0,0,0"))
            (rule "castedGetAny" (formula "9") (term "0,1,0,1"))
            (rule "castedGetAny" (formula "10") (term "1,1,1,0"))
            (rule "castedGetAny" (formula "19") (term "1,1"))
            (rule "castedGetAny" (formula "11") (term "0,0,1,0,1,0"))
            (rule "castedGetAny" (formula "11") (term "1,0,1,0,1,0"))
            (rule "castedGetAny" (formula "10") (term "0,1,0"))
            (rule "eqSymm" (formula "10") (term "1,0"))
            (rule "castedGetAny" (formula "19") (term "0"))
            (rule "eqSymm" (formula "19"))
            (rule "castedGetAny" (formula "9") (term "0,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "3"))
            (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
            (rule "mul_literals" (formula "3") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
            (rule "add_literals" (formula "3") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "2"))
            (rule "applyEq" (formula "6") (term "0") (ifseqformula "4"))
            (rule "applyEq" (formula "9") (term "1,1,0,1,1") (ifseqformula "4"))
            (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "4"))
            (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "5"))
            (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "4"))
            (rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0") (ifseqformula "4"))
            (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "4"))
            (rule "applyEq" (formula "12") (term "0,1,0,0,1,0,0") (ifseqformula "5"))
            (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "4"))
            (rule "applyEq" (formula "1") (term "0,1,0,0,1,0,0,0,0") (ifseqformula "4"))
            (rule "applyEq" (formula "5") (term "1") (ifseqformula "4"))
            (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "4"))
            (rule "applyEq" (formula "12") (term "0,1,0,0,1,0,0") (ifseqformula "4"))
            (rule "inEqSimp_sepNegMonomial0" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
            (rule "polySimp_elimOne" (formula "3") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0"))
            (rule "mul_literals" (formula "11") (term "0,1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
            (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
            (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "6"))
            (rule "polySimp_rightDist" (formula "3") (term "0,0"))
            (rule "mul_literals" (formula "3") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0"))
            (rule "add_literals" (formula "3") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
            (rule "polySimp_elimOne" (formula "3") (term "0"))
            (rule "nnf_imp2or" (formula "12") (term "1,0,1,0"))
            (rule "nnf_imp2or" (formula "8") (term "0"))
            (rule "nnf_imp2or" (formula "11") (term "0"))
            (rule "nnf_imp2or" (formula "9") (term "0"))
            (rule "nnf_imp2or" (formula "13") (term "0"))
            (rule "nnf_imp2or" (formula "12") (term "0"))
            (rule "nnf_notAnd" (formula "8") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
            (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
            (rule "mul_literals" (formula "8") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "11") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
            (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
            (rule "mul_literals" (formula "11") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
            (rule "nnf_notAnd" (formula "9") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
            (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
            (rule "mul_literals" (formula "9") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "13") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
            (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
            (rule "mul_literals" (formula "13") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,0"))
            (rule "nnf_imp2or" (formula "12") (term "0,1,0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,1,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,1,0"))
            (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,0,1,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,1,0"))
            (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1,0"))
            (rule "commute_and" (formula "10") (term "0,0"))
            (rule "commute_and" (formula "10") (term "0,0,0,0,1"))
            (rule "commute_or_2" (formula "11") (term "0"))
            (rule "commute_and_2" (formula "1") (term "0,0,0"))
            (rule "commute_or_2" (formula "13") (term "0"))
            (rule "commute_and" (formula "8") (term "0,0,1,0"))
            (rule "commute_and" (formula "8") (term "1,0,1,0"))
            (rule "commute_and" (formula "9") (term "1,0,1,0"))
            (rule "commute_and" (formula "9") (term "0,0,1,0"))
            (rule "commute_or" (formula "11") (term "0,0"))
            (rule "commute_or" (formula "13") (term "0,0"))
            (rule "commute_and_2" (formula "10") (term "0"))
            (rule "cnf_rightDist" (formula "10"))
            (rule "andLeft" (formula "10"))
            (rule "cnf_rightDist" (formula "11"))
            (rule "andLeft" (formula "11"))
            (rule "cnf_rightDist" (formula "11"))
            (rule "andLeft" (formula "11"))
            (rule "commute_or" (formula "11"))
            (rule "cnf_rightDist" (formula "10"))
            (rule "andLeft" (formula "10"))
            (rule "cnf_rightDist" (formula "11"))
            (rule "andLeft" (formula "11"))
            (rule "cnf_rightDist" (formula "11"))
            (rule "andLeft" (formula "11"))
            (rule "commute_or" (formula "11"))
            (rule "shift_paren_or" (formula "18") (term "0,1,0"))
            (rule "cnf_rightDist" (formula "10"))
            (rule "andLeft" (formula "10"))
            (rule "cnf_rightDist" (formula "11"))
            (rule "andLeft" (formula "11"))
            (rule "commute_or" (formula "12"))
            (rule "cnf_rightDist" (formula "11"))
            (rule "andLeft" (formula "11"))
            (rule "commute_or" (formula "11"))
            (rule "commute_and_2" (formula "10") (term "1"))
            (rule "cnf_rightDist" (formula "10"))
            (rule "andLeft" (formula "10"))
            (rule "cnf_rightDist" (formula "11"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "cnf_rightDist" (formula "11"))
            (rule "andLeft" (formula "11"))
            (rule "commute_or" (formula "11"))
            (rule "cnf_rightDist" (formula "10"))
            (rule "andLeft" (formula "10"))
            (rule "commute_or" (formula "10"))
            (rule "cnf_rightDist" (formula "11"))
            (rule "andLeft" (formula "11"))
            (rule "commute_or" (formula "12"))
            (rule "cnf_rightDist" (formula "10"))
            (rule "andLeft" (formula "10"))
            (rule "commute_or" (formula "11"))
            (rule "cnf_rightDist" (formula "12"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "commute_or" (formula "12"))
            (rule "cnf_rightDist" (formula "10"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "commute_or" (formula "10"))
            (rule "commute_or_2" (formula "26") (term "0,0,1,0"))
            (rule "applyEq_and_gen2" (formula "9") (term "1,0,1,0"))
            (rule "commute_and" (formula "1") (term "0,0,0,0"))
            (rule "lenNonNegative" (formula "5") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "5"))
            (rule "applyEq" (formula "5") (term "0") (ifseqformula "6"))
            (rule "lenNonNegative" (formula "7") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "7"))
            (rule "applyEq" (formula "7") (term "0") (ifseqformula "8"))
            (rule "seqGetAlphaCast" (formula "1") (term "0,0,0,1"))
            (rule "castedGetAny" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "seqGetAlphaCast" (formula "35") (term "1"))
            (rule "castedGetAny" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "shift_paren_and" (formula "9") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "castedGetAny" (formula "9") (term "1,0,0,1,0,1,0"))
            (rule "castedGetAny" (formula "9") (term "0,0,1,0,0,1,0"))
            (rule "castedGetAny" (formula "9") (term "1,0,1,1,0,0,1,0"))
            (rule "castedGetAny" (formula "9") (term "0,0,0,0,0,1,0"))
            (rule "cnf_rightDist" (formula "9") (term "0"))
            (rule "distr_forallAnd" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "shift_paren_or" (formula "10") (term "0"))
            (rule "cnf_rightDist" (formula "9") (term "0"))
            (rule "distr_forallAnd" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "shift_paren_or" (formula "10") (term "0"))
            (rule "cnf_rightDist" (formula "9") (term "0"))
            (rule "distr_forallAnd" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "commute_or_2" (formula "9") (term "0"))
            (rule "shift_paren_or" (formula "10") (term "0"))
            (rule "commute_or" (formula "9") (term "0,0"))
            (rule "commute_or" (formula "30") (term "0,0,0,1,0"))
            (rule "shift_paren_and" (formula "13") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "castedGetAny" (formula "13") (term "0,0,0,0,0,1,0"))
            (rule "castedGetAny" (formula "13") (term "1,0,1,1,0,0,1,0"))
            (rule "castedGetAny" (formula "13") (term "0,0,1,0,0,1,0"))
            (rule "cnf_rightDist" (formula "13") (term "0"))
            (rule "distr_forallAnd" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "shift_paren_or" (formula "14") (term "0"))
            (rule "cnf_rightDist" (formula "13") (term "0"))
            (rule "distr_forallAnd" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "shift_paren_or" (formula "14") (term "0"))
            (rule "cnf_rightDist" (formula "13") (term "0"))
            (rule "distr_forallAnd" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "commute_or_2" (formula "13") (term "0"))
            (rule "shift_paren_or" (formula "14") (term "0"))
            (rule "commute_or" (formula "13") (term "0,0"))
            (rule "cut_direct" (formula "20") (term "0,0"))
            (branch "CUT: self_77.tail = null TRUE"
                (builtin "One Step Simplification" (formula "21"))
               (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "21"))
                (builtin "One Step Simplification" (formula "32"))
               (rule "true_left" (formula "32"))
               (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "21"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "true_left" (formula "26"))
               (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "20"))
                (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "21")))
               (rule "true_left" (formula "23"))
               (rule "replace_known_left" (formula "22") (term "0,1") (ifseqformula "21"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "20"))
                (builtin "One Step Simplification" (formula "29"))
               (rule "true_left" (formula "29"))
               (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "20"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "true_left" (formula "24"))
               (rule "replace_known_left" (formula "19") (term "0,1") (ifseqformula "20"))
                (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "22")))
               (rule "true_left" (formula "19"))
               (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "20"))
                (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "21")))
               (rule "true_left" (formula "18"))
               (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "19"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "true_left" (formula "24"))
               (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "18"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "true_left" (formula "23"))
               (rule "replace_known_left" (formula "17") (term "1") (ifseqformula "18"))
                (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "20")))
               (rule "true_left" (formula "17"))
               (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "19"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "true_left" (formula "22"))
               (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "19"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "true_left" (formula "20"))
               (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "19"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "true_left" (formula "20"))
               (rule "applyEq" (formula "20") (term "0,1,0,0,0") (ifseqformula "18"))
               (rule "applyEq" (formula "1") (term "0,1,0,0,0,0,0") (ifseqformula "18"))
               (rule "applyEq" (formula "21") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "18"))
               (rule "applyEq" (formula "12") (term "0,0,0,0,0,0") (ifseqformula "18"))
               (rule "applyEq" (formula "22") (term "0,1,1,0,0,0") (ifseqformula "18"))
               (rule "applyEq" (formula "21") (term "0,0,0,0,0,0,0,1,0") (ifseqformula "18"))
               (rule "applyEq" (formula "29") (term "0,1,0") (ifseqformula "18"))
               (rule "eqSymm" (formula "29"))
               (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "18"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "eqSymm" (formula "6"))
               (rule "applyEq" (formula "9") (term "0,0,0,0,0,0") (ifseqformula "18"))
               (rule "applyEq" (formula "11") (term "0,1,0,0,0,0,0") (ifseqformula "18"))
               (rule "applyEq" (formula "10") (term "0,0,0,0,0,0") (ifseqformula "18"))
               (rule "applyEq" (formula "1") (term "0,1,0,0,1,1") (ifseqformula "18"))
               (rule "applyEq" (formula "20") (term "0,1,0,0,0,0") (ifseqformula "18"))
               (rule "applyEq" (formula "1") (term "0,0,0,0,1") (ifseqformula "18"))
               (rule "applyEq" (formula "10") (term "0,1,0,1,0,0,0") (ifseqformula "18"))
               (rule "applyEq" (formula "1") (term "0,0,0,0,0,0,0") (ifseqformula "18"))
               (rule "applyEq" (formula "21") (term "1,1,0,0") (ifseqformula "6"))
               (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "6"))
               (rule "applyEq" (formula "15") (term "1,1,0") (ifseqformula "6"))
               (rule "applyEq" (formula "21") (term "1,1,0,0,1,0") (ifseqformula "6"))
               (rule "applyEq" (formula "1") (term "1,1,1,0,0,0") (ifseqformula "6"))
               (rule "add_zero_right" (formula "1") (term "1,1,0,0,0"))
               (rule "applyEq" (formula "12") (term "1,1,0") (ifseqformula "6"))
               (rule "applyEq" (formula "9") (term "1,1,0") (ifseqformula "6"))
               (rule "applyEq" (formula "8") (term "0") (ifseqformula "6"))
               (rule "leq_literals" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "6"))
               (rule "applyEq" (formula "5") (term "0") (ifseqformula "6"))
               (rule "qeq_literals" (formula "5"))
               (rule "true_left" (formula "5"))
               (rule "applyEq" (formula "8") (term "1,1,0") (ifseqformula "5"))
               (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "5"))
               (rule "applyEq" (formula "18") (term "1,1,1,0") (ifseqformula "5"))
               (rule "add_zero_right" (formula "18") (term "1,1,0"))
               (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
               (rule "inEqSimp_homoInEq1" (formula "4"))
               (rule "times_zero_2" (formula "4") (term "1,0"))
               (rule "add_zero_right" (formula "4") (term "0"))
               (rule "applyEq" (formula "14") (term "1,1,0") (ifseqformula "5"))
               (rule "applyEq" (formula "12") (term "1,1,0") (ifseqformula "5"))
               (rule "applyEq" (formula "27") (term "0,0") (ifseqformula "16"))
               (rule "eqSymm" (formula "27"))
               (rule "applyEq" (formula "6") (term "1") (ifseqformula "5"))
               (rule "inEqSimp_sepPosMonomial0" (formula "4"))
               (rule "mul_literals" (formula "4") (term "1"))
               (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "4"))
               (rule "qeq_literals" (formula "2") (term "0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "closeFalse" (formula "2"))
            )
            (branch "CUT: self_77.tail = null FALSE"
                (builtin "One Step Simplification" (formula "20"))
               (rule "true_left" (formula "20"))
               (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "39"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "notLeft" (formula "21"))
               (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "39"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "replace_known_right" (formula "19") (term "0,1") (ifseqformula "39"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "true_left" (formula "19"))
               (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "38"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "replace_known_right" (formula "17") (term "1") (ifseqformula "38"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "notLeft" (formula "17"))
               (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "38"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "replace_known_right" (formula "18") (term "0,1") (ifseqformula "37"))
                (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "36")))
               (rule "true_left" (formula "18"))
               (rule "replace_known_right" (formula "23") (term "0") (ifseqformula "36"))
                (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "22")))
               (rule "true_left" (formula "23"))
               (rule "replace_known_right" (formula "17") (term "1") (ifseqformula "35"))
                (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "34")))
               (rule "true_left" (formula "17"))
               (rule "replace_known_right" (formula "19") (term "1") (ifseqformula "34"))
                (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "18")))
               (rule "true_left" (formula "19"))
               (rule "replace_known_right" (formula "23") (term "0") (ifseqformula "33"))
                (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "22")))
               (rule "true_left" (formula "23"))
               (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "31"))
                (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "18")))
               (rule "true_left" (formula "17"))
               (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "21")))
               (rule "true_left" (formula "20"))
               (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "19"))
                (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "29")))
               (rule "true_left" (formula "18"))
               (rule "equalityToSeqGetAndSeqLenRight" (formula "29") (inst "iv=iv"))
                (builtin "One Step Simplification" (formula "29"))
               (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,1"))
               (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0,1"))
               (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "6"))
               (rule "applyEq" (formula "29") (term "0,1,0,0,1,0,0,1") (ifseqformula "6"))
               (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,1"))
               (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,1"))
               (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,1"))
               (rule "mul_literals" (formula "29") (term "0,1,1,0,0,1"))
               (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,1"))
               (rule "nnf_imp2or" (formula "29") (term "0,1"))
               (rule "nnf_notAnd" (formula "29") (term "0,0,1"))
               (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,1"))
               (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0,1"))
               (rule "add_literals" (formula "29") (term "0,0,0,0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,1"))
               (rule "mul_literals" (formula "29") (term "1,0,0,0,1"))
               (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,1"))
               (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,1"))
               (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,1"))
               (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,1"))
               (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,1"))
               (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,1"))
               (rule "all_pull_out3" (formula "21") (term "0"))
               (rule "shift_paren_or" (formula "21") (term "0,0"))
               (rule "shift_paren_or" (formula "21") (term "0,0,0"))
               (rule "shift_paren_or" (formula "21") (term "0,0,0,0"))
               (rule "commute_or_2" (formula "21") (term "0,0,0,0,0"))
               (rule "commute_or" (formula "21") (term "0,0,0,0,0,0"))
               (rule "orLeft" (formula "1"))
               (branch "!exists int i; ( (Node)self_77.nodeList[i] = (Node)self_77.nodeList[i_1_0] & i >= 0 & i <= -1 + self_77.size)"
                  (rule "notLeft" (formula "1"))
                  (rule "nnf_ex2all" (formula "27"))
                  (rule "nnf_notAnd" (formula "1") (term "0"))
                  (rule "inEqSimp_notLeq" (formula "1") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                  (rule "mul_literals" (formula "1") (term "1,1,0,0"))
                  (rule "allLeft" (formula "22") (inst "t=i_1_0"))
                  (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "4"))
                  (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                  (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "22") (term "0,0,1"))
                  (rule "leq_literals" (formula "22") (term "0,1"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "22") (term "0,1"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "allLeft" (formula "20") (inst "t=i_1_0"))
                  (rule "inEqSimp_homoInEq1" (formula "20") (term "1"))
                  (rule "polySimp_addComm1" (formula "20") (term "0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,1"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1"))
                  (rule "mul_literals" (formula "20") (term "0,1,1"))
                  (rule "polySimp_elimOne" (formula "20") (term "1,1,1"))
                  (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "4"))
                  (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "20") (term "0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "20") (term "0,0,1"))
                  (rule "polySimp_addComm1" (formula "20") (term "0,0,0,1"))
                  (rule "add_literals" (formula "20") (term "0,0,0,0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                  (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "20") (term "0,0,1"))
                  (rule "leq_literals" (formula "20") (term "0,1"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "20") (term "0,1"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "allLeft" (formula "24") (inst "t=add(Z(1(#)), i_1_0)"))
                  (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                  (rule "inEqSimp_homoInEq0" (formula "24") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0,1,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "24") (term "0,1,0"))
                  (rule "add_literals" (formula "24") (term "0,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "24") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "0,1,0"))
                  (rule "polySimp_elimOne" (formula "24") (term "0,1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "24") (term "1,0") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "24") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "4"))
                  (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "24") (term "0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "24") (term "0,0,1"))
                  (rule "polySimp_addComm1" (formula "24") (term "0,0,0,1"))
                  (rule "add_literals" (formula "24") (term "0,0,0,0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                  (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "24") (term "0,0,1"))
                  (rule "leq_literals" (formula "24") (term "0,1"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "35") (term "0") (ifseqformula "27"))
                  (rule "allLeft" (formula "12") (inst "t=add(Z(1(#)), i_1_0)"))
                  (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                  (rule "inEqSimp_homoInEq0" (formula "12") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,1,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,1,0"))
                  (rule "add_literals" (formula "12") (term "0,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "12") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "0,1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "5"))
                  (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,0,1"))
                  (rule "polySimp_addComm1" (formula "12") (term "0,0,0,1"))
                  (rule "add_literals" (formula "12") (term "0,0,0,0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
                  (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
                  (rule "add_literals" (formula "12") (term "0,0,1"))
                  (rule "leq_literals" (formula "12") (term "0,1"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "12") (term "0,1"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "notLeft" (formula "12"))
                  (rule "allLeft" (formula "10") (inst "t=i_1_0"))
                  (rule "inEqSimp_commuteGeq" (formula "10") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "5"))
                  (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                  (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "10") (term "0,0,1"))
                  (rule "leq_literals" (formula "10") (term "0,1"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "10") (term "0,1"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "notLeft" (formula "10"))
                  (rule "allLeft" (formula "12") (inst "t=i_1_0"))
                  (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "12") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "5"))
                  (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
                  (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "12") (term "0,0,1"))
                  (rule "leq_literals" (formula "12") (term "0,1"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "notLeft" (formula "12"))
                  (rule "allLeft" (formula "10") (inst "t=add(Z(1(#)), i_1_0)"))
                  (rule "inEqSimp_commuteGeq" (formula "10") (term "1"))
                  (rule "inEqSimp_homoInEq0" (formula "10") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,1,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "10") (term "0,1,0"))
                  (rule "add_literals" (formula "10") (term "0,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "10") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0"))
                  (rule "polySimp_elimOne" (formula "10") (term "0,1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "10") (term "1,0") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "10") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "5"))
                  (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "10") (term "0,0,1"))
                  (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1"))
                  (rule "add_literals" (formula "10") (term "0,0,0,0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                  (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                  (rule "add_literals" (formula "10") (term "0,0,1"))
                  (rule "leq_literals" (formula "10") (term "0,1"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "notLeft" (formula "10"))
                  (rule "allLeft" (formula "2") (inst "t=i_1_0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "inEqSimp_commuteGeq" (formula "2") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "2") (term "1") (ifseqformula "6"))
                  (rule "inEqSimp_homoInEq1" (formula "2") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,1"))
                  (rule "add_literals" (formula "2") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "2") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "2") (term "0,0,1"))
                  (rule "leq_literals" (formula "2") (term "0,1"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "4") (term "0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "closeFalse" (formula "4"))
               )
               (branch " !(Node)self_77.nodeList[i_1_0] = null & !(Node)self_77.nodeList[i_1_0].<created> = TRUE"
                  (rule "andLeft" (formula "1"))
                  (rule "notLeft" (formula "2"))
                  (rule "notLeft" (formula "1"))
                  (rule "allLeft" (formula "21") (inst "t=i_1_0"))
                  (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "21") (term "1,0") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "21") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                  (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                  (rule "add_literals" (formula "21") (term "0,0,1"))
                  (rule "leq_literals" (formula "21") (term "0,1"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "allLeft" (formula "22") (inst "t=add(Z(1(#)), i_1_0)"))
                  (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                  (rule "inEqSimp_homoInEq0" (formula "22") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "22") (term "1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "22") (term "1,0,1,0"))
                  (rule "mul_literals" (formula "22") (term "0,1,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "22") (term "0,1,0"))
                  (rule "add_literals" (formula "22") (term "0,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "22") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "22") (term "0,1,0"))
                  (rule "polySimp_elimOne" (formula "22") (term "0,1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "22") (term "0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "22") (term "0,0,1"))
                  (rule "polySimp_addComm1" (formula "22") (term "0,0,0,1"))
                  (rule "add_literals" (formula "22") (term "0,0,0,0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                  (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                  (rule "add_literals" (formula "22") (term "0,0,1"))
                  (rule "leq_literals" (formula "22") (term "0,1"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "22") (term "0,1"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "allLeft" (formula "19") (inst "t=i_1_0"))
                  (rule "inEqSimp_homoInEq1" (formula "19") (term "1"))
                  (rule "polySimp_addComm1" (formula "19") (term "0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "19") (term "1,1"))
                  (rule "mul_literals" (formula "19") (term "0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1"))
                  (rule "polySimp_elimOne" (formula "19") (term "1,1,1"))
                  (rule "inEqSimp_contradInEq1" (formula "19") (term "1,0") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "19") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "19") (term "0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "19") (term "0,0,1"))
                  (rule "polySimp_addComm1" (formula "19") (term "0,0,0,1"))
                  (rule "add_literals" (formula "19") (term "0,0,0,0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                  (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                  (rule "add_literals" (formula "19") (term "0,0,1"))
                  (rule "leq_literals" (formula "19") (term "0,1"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "36") (term "0") (ifseqformula "26"))
                  (rule "allLeft" (formula "10") (inst "t=i_1_0"))
                  (rule "replace_known_right" (formula "10") (term "0,0,0") (ifseqformula "32"))
                   (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "33")))
                  (rule "inEqSimp_commuteGeq" (formula "10") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "4"))
                  (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                  (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "10") (term "0,0,1"))
                  (rule "leq_literals" (formula "10") (term "0,1"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "10") (term "0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "closeFalse" (formula "10"))
               )
            )
         )
         (branch " !exists int i; ( 0 <= i & i < self_77.nodeList.length & (Node)(self_77.nodeList[i_1_0]) = (Node)(self_77.nodeList[i])) | !(Node)(self_77.nodeList[i_1_0]) = null & !(Node)(self_77.nodeList[i_1_0]).<created> = TRUE FALSE"
            (rule "andLeft" (formula "1"))
            (rule "orRight" (formula "18"))
            (rule "notRight" (formula "18"))
            (rule "exLeft" (formula "1") (inst "sk=i_0"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "eqSymm" (formula "13") (term "0,1,0,1,0"))
            (rule "eqSymm" (formula "7"))
            (rule "eqSymm" (formula "22"))
            (rule "eqSymm" (formula "12") (term "1,0"))
            (rule "eqSymm" (formula "11") (term "1,1"))
            (rule "eqSymm" (formula "11") (term "1,0,1"))
            (rule "eqSymm" (formula "13") (term "1,1,0,1,0"))
            (rule "polySimp_addComm0" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_addComm0" (formula "5") (term "1"))
            (rule "polySimp_addComm0" (formula "22") (term "1,0,0"))
            (rule "polySimp_addComm0" (formula "12") (term "1,0,0,1,0"))
            (rule "polySimp_addComm0" (formula "11") (term "1,0,0,1,1"))
            (rule "castedGetAny" (formula "14") (term "1,1,1,0"))
            (rule "castedGetAny" (formula "21") (term "1,0,0,1"))
            (rule "castedGetAny" (formula "21") (term "0,0,0"))
            (rule "castedGetAny" (formula "3") (term "1"))
            (rule "castedGetAny" (formula "3") (term "0"))
            (rule "castedGetAny" (formula "13") (term "1,0,1,0,1,0"))
            (rule "castedGetAny" (formula "13") (term "0,0,1,0,1,0"))
            (rule "castedGetAny" (formula "22") (term "1,1"))
            (rule "castedGetAny" (formula "12") (term "1,1,1,0"))
            (rule "castedGetAny" (formula "11") (term "0,1,0,1"))
            (rule "castedGetAny" (formula "22") (term "0"))
            (rule "eqSymm" (formula "22"))
            (rule "castedGetAny" (formula "12") (term "0,1,0"))
            (rule "eqSymm" (formula "12") (term "1,0"))
            (rule "castedGetAny" (formula "11") (term "0,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "5"))
            (rule "polySimp_rightDist" (formula "5") (term "1,0,0"))
            (rule "mul_literals" (formula "5") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
            (rule "add_literals" (formula "5") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "5") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "4"))
            (rule "inEqSimp_commuteLeq" (formula "1"))
            (rule "applyEq" (formula "11") (term "1,1,0,1,1") (ifseqformula "6"))
            (rule "applyEq" (formula "5") (term "0,1,0") (ifseqformula "6"))
            (rule "applyEq" (formula "21") (term "1,0,0,1") (ifseqformula "3"))
            (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "6"))
            (rule "applyEq" (formula "22") (term "1,0") (ifseqformula "3"))
            (rule "applyEq" (formula "21") (term "0,0,0") (ifseqformula "3"))
            (rule "applyEq" (formula "8") (term "0") (ifseqformula "6"))
            (rule "applyEq" (formula "7") (term "1") (ifseqformula "6"))
            (rule "applyEq" (formula "13") (term "0,1,0,0,1,0,0") (ifseqformula "6"))
            (rule "applyEq" (formula "9") (term "0,1,0,0,1,0,0") (ifseqformula "6"))
            (rule "applyEq" (formula "13") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "6"))
            (rule "applyEq" (formula "12") (term "0,1,0,0,1,0,0") (ifseqformula "6"))
            (rule "apply_eq_monomials" (formula "10") (term "1,0,0,1,0,0") (ifseqformula "7"))
            (rule "polySimp_rightDist" (formula "10") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "10") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "10") (term "1,1,1,0,0,1,0,0"))
            (rule "times_zero_1" (formula "10") (term "1,1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "10") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
            (rule "apply_eq_monomials" (formula "14") (term "1,0,0,1,0,0") (ifseqformula "7"))
            (rule "polySimp_rightDist" (formula "14") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "14") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "14") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "14") (term "1,1,1,0,0,1,0,0"))
            (rule "times_zero_1" (formula "14") (term "1,1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "14") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "5"))
            (rule "polySimp_mulLiterals" (formula "5") (term "0"))
            (rule "polySimp_elimOne" (formula "5") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "polySimp_elimOne" (formula "2") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1,0"))
            (rule "mul_literals" (formula "13") (term "0,1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
            (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "8"))
            (rule "polySimp_rightDist" (formula "5") (term "0,0"))
            (rule "mul_literals" (formula "5") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "5") (term "0"))
            (rule "add_literals" (formula "5") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "5"))
            (rule "polySimp_mulLiterals" (formula "5") (term "0"))
            (rule "polySimp_elimOne" (formula "5") (term "0"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "9"))
            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
            (rule "mul_literals" (formula "2") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "polySimp_elimOne" (formula "2") (term "0"))
            (rule "nnf_imp2or" (formula "15") (term "1,0,1,0"))
            (rule "nnf_imp2or" (formula "11") (term "0"))
            (rule "nnf_imp2or" (formula "14") (term "0"))
            (rule "nnf_imp2or" (formula "12") (term "0"))
            (rule "nnf_imp2or" (formula "16") (term "0"))
            (rule "nnf_imp2or" (formula "15") (term "0"))
            (rule "nnf_notAnd" (formula "11") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
            (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
            (rule "mul_literals" (formula "11") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "14") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
            (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "14") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
            (rule "mul_literals" (formula "14") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "16") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
            (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "16") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
            (rule "mul_literals" (formula "16") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "15") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
            (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "15") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
            (rule "mul_literals" (formula "15") (term "1,0,0,0"))
            (rule "nnf_imp2or" (formula "15") (term "0,1,0"))
            (rule "nnf_notAnd" (formula "15") (term "0,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,1,0"))
            (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,1,0"))
            (rule "add_literals" (formula "15") (term "0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,1,0"))
            (rule "mul_literals" (formula "15") (term "1,0,0,0,1,0"))
            (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,1,0"))
            (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,1,0"))
            (rule "commute_and" (formula "13") (term "0,0"))
            (rule "commute_and" (formula "13") (term "0,0,0,0,1"))
            (rule "commute_or_2" (formula "14") (term "0"))
            (rule "commute_or_2" (formula "16") (term "0"))
            (rule "commute_and" (formula "11") (term "0,0,1,0"))
            (rule "commute_and" (formula "11") (term "1,0,1,0"))
            (rule "commute_and" (formula "12") (term "1,0,1,0"))
            (rule "commute_and" (formula "12") (term "0,0,1,0"))
            (rule "commute_or" (formula "14") (term "0,0"))
            (rule "commute_or" (formula "16") (term "0,0"))
            (rule "commute_and_2" (formula "13") (term "0"))
            (rule "cnf_rightDist" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "cnf_rightDist" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "cnf_rightDist" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "commute_or" (formula "14"))
            (rule "cnf_rightDist" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "cnf_rightDist" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "cnf_rightDist" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "commute_or" (formula "14"))
            (rule "shift_paren_or" (formula "21") (term "0,1,0"))
            (rule "cnf_rightDist" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "cnf_rightDist" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "commute_or" (formula "15"))
            (rule "cnf_rightDist" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "commute_or" (formula "14"))
            (rule "commute_and_2" (formula "13") (term "1"))
            (rule "lenNonNegative" (formula "8") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "8"))
            (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
            (rule "cnf_rightDist" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "cnf_rightDist" (formula "15"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "cnf_rightDist" (formula "15"))
            (rule "andLeft" (formula "15"))
            (rule "commute_or" (formula "15"))
            (rule "cnf_rightDist" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "commute_or" (formula "14"))
            (rule "cnf_rightDist" (formula "15"))
            (rule "andLeft" (formula "15"))
            (rule "commute_or" (formula "16"))
            (rule "cnf_rightDist" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "commute_or" (formula "15"))
            (rule "cnf_rightDist" (formula "16"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "commute_or" (formula "16"))
            (rule "cnf_rightDist" (formula "14"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "commute_or" (formula "14"))
            (rule "commute_or_2" (formula "30") (term "0,0,1,0"))
            (rule "applyEq_and_gen2" (formula "13") (term "1,0,1,0"))
            (rule "lenNonNegative" (formula "10") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "10"))
            (rule "applyEq" (formula "10") (term "0") (ifseqformula "11"))
            (rule "seqGetAlphaCast" (formula "4") (term "1"))
            (rule "castedGetAny" (formula "4") (term "0"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "true_left" (formula "4"))
            (rule "seqGetAlphaCast" (formula "4") (term "0"))
            (rule "castedGetAny" (formula "4") (term "0"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "true_left" (formula "4"))
            (rule "seqGetAlphaCast" (formula "39") (term "1"))
            (rule "castedGetAny" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "shift_paren_and" (formula "12") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "castedGetAny" (formula "12") (term "1,0,1,1,0,0,1,0"))
            (rule "castedGetAny" (formula "12") (term "0,0,0,0,0,1,0"))
            (rule "castedGetAny" (formula "12") (term "0,0,1,0,0,1,0"))
            (rule "castedGetAny" (formula "12") (term "1,0,0,1,0,1,0"))
            (rule "cnf_rightDist" (formula "12") (term "0"))
            (rule "distr_forallAnd" (formula "12"))
            (rule "andLeft" (formula "12"))
            (rule "shift_paren_or" (formula "13") (term "0"))
            (rule "cnf_rightDist" (formula "12") (term "0"))
            (rule "distr_forallAnd" (formula "12"))
            (rule "andLeft" (formula "12"))
            (rule "shift_paren_or" (formula "13") (term "0"))
            (rule "cnf_rightDist" (formula "12") (term "0"))
            (rule "distr_forallAnd" (formula "12"))
            (rule "andLeft" (formula "12"))
            (rule "commute_or_2" (formula "12") (term "0"))
            (rule "shift_paren_or" (formula "13") (term "0"))
            (rule "commute_or" (formula "12") (term "0,0"))
            (rule "commute_or" (formula "33") (term "0,0,0,1,0"))
            (rule "cut_direct" (formula "41") (term "0,0"))
            (branch "CUT: (Node)self_77.nodeList[i_0] = null TRUE"
                (builtin "One Step Simplification" (formula "42"))
               (rule "false_right" (formula "42"))
               (rule "applyEq" (formula "42") (term "1,0") (ifseqformula "1"))
               (rule "eqSymm" (formula "42"))
               (rule "applyEq" (formula "5") (term "1") (ifseqformula "1"))
               (rule "shift_paren_and" (formula "17") (term "0,1,0"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "castedGetAny" (formula "17") (term "0,0,0,0,0,1,0"))
               (rule "castedGetAny" (formula "17") (term "1,0,1,1,0,0,1,0"))
               (rule "castedGetAny" (formula "17") (term "0,0,1,0,0,1,0"))
               (rule "cnf_rightDist" (formula "17") (term "0"))
               (rule "distr_forallAnd" (formula "17"))
               (rule "andLeft" (formula "17"))
               (rule "shift_paren_or" (formula "18") (term "0"))
               (rule "cnf_rightDist" (formula "17") (term "0"))
               (rule "distr_forallAnd" (formula "17"))
               (rule "andLeft" (formula "17"))
               (rule "shift_paren_or" (formula "18") (term "0"))
               (rule "cnf_rightDist" (formula "17") (term "0"))
               (rule "distr_forallAnd" (formula "17"))
               (rule "andLeft" (formula "17"))
               (rule "commute_or_2" (formula "17") (term "0"))
               (rule "shift_paren_or" (formula "18") (term "0"))
               (rule "commute_or" (formula "17") (term "0,0"))
               (rule "cut_direct" (formula "24") (term "0,0"))
               (branch "CUT: self_77.tail = null TRUE"
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "true_left" (formula "30"))
                  (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "true_left" (formula "32"))
                  (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "24"))
                   (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "25")))
                  (rule "true_left" (formula "27"))
                  (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "24"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "true_left" (formula "28"))
                  (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "true_left" (formula "32"))
                  (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "24"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "true_left" (formula "21"))
                  (rule "replace_known_left" (formula "22") (term "0,1") (ifseqformula "23"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "replace_known_left" (formula "25") (term "0,1") (ifseqformula "24"))
                   (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "22")))
                  (rule "true_left" (formula "25"))
                  (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "23"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "true_left" (formula "27"))
                  (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "23"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "true_left" (formula "28"))
                  (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "24"))
                   (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "22")))
                  (rule "true_left" (formula "21"))
                  (rule "replace_known_left" (formula "26") (term "0") (ifseqformula "21"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "true_left" (formula "26"))
                  (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "21"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "true_left" (formula "24"))
                  (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "21"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "true_left" (formula "24"))
                  (rule "applyEq" (formula "24") (term "0,1,0,0,0,0") (ifseqformula "23"))
                  (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "23"))
                  (rule "eqSymm" (formula "33"))
                  (rule "applyEq" (formula "14") (term "0,0,0,0,0,0") (ifseqformula "23"))
                  (rule "applyEq" (formula "25") (term "0,0,0,0,0,0,0,1,0") (ifseqformula "23"))
                  (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "23"))
                  (rule "applyEq" (formula "24") (term "0,1,0,0,0") (ifseqformula "23"))
                  (rule "applyEq" (formula "16") (term "0,0,0,0,0,0") (ifseqformula "23"))
                  (rule "applyEq" (formula "26") (term "0,1,1,0,0,0") (ifseqformula "23"))
                  (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "23"))
                  (rule "applyEq" (formula "14") (term "0,1,0,1,0,0,0") (ifseqformula "23"))
                  (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "23"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "eqSymm" (formula "10"))
                  (rule "applyEq" (formula "25") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "23"))
                  (rule "applyEq" (formula "15") (term "0,1,0,0,0,0,0") (ifseqformula "23"))
                  (rule "applyEq" (formula "13") (term "0,0,0,0,0,0") (ifseqformula "23"))
                  (rule "applyEq" (formula "25") (term "1,1,0,0,1,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "15") (term "1,1,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "24") (term "1,1,1,0") (ifseqformula "10"))
                  (rule "add_zero_right" (formula "24") (term "1,1,0"))
                  (rule "applyEq" (formula "17") (term "1,1,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "4") (term "0") (ifseqformula "10"))
                  (rule "inEqSimp_homoInEq1" (formula "4"))
                  (rule "mul_literals" (formula "4") (term "1,0"))
                  (rule "add_zero_right" (formula "4") (term "0"))
                  (rule "applyEq" (formula "14") (term "1,1,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "20") (term "1,1,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "25") (term "1,1,0,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "16") (term "1,1,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                  (rule "qeq_literals" (formula "9"))
                  (rule "true_left" (formula "9"))
                  (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "9"))
                  (rule "applyEq" (formula "17") (term "1,1,0") (ifseqformula "9"))
                  (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
                  (rule "inEqSimp_homoInEq1" (formula "8"))
                  (rule "times_zero_2" (formula "8") (term "1,0"))
                  (rule "add_zero_right" (formula "8") (term "0"))
                  (rule "applyEq" (formula "11") (term "0") (ifseqformula "9"))
                  (rule "leq_literals" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "9"))
                  (rule "applyEq" (formula "17") (term "1,1,0") (ifseqformula "9"))
                  (rule "applyEq" (formula "10") (term "1") (ifseqformula "9"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                  (rule "mul_literals" (formula "4") (term "1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "8"))
                  (rule "mul_literals" (formula "8") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "4") (term "0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "closeFalse" (formula "4"))
               )
               (branch "CUT: self_77.tail = null FALSE"
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "true_left" (formula "24"))
                  (rule "replace_known_right" (formula "23") (term "0,1") (ifseqformula "43"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "true_left" (formula "23"))
                  (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "42"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "notLeft" (formula "24"))
                  (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "42"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "42"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "42"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "replace_known_right" (formula "21") (term "1") (ifseqformula "42"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "notLeft" (formula "21"))
                  (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "27"))
                   (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "40")))
                  (rule "true_left" (formula "26"))
                  (rule "replace_known_right" (formula "21") (term "1") (ifseqformula "40"))
                   (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "39")))
                  (rule "true_left" (formula "21"))
                  (rule "replace_known_right" (formula "21") (term "0,1") (ifseqformula "39"))
                   (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "38")))
                  (rule "true_left" (formula "21"))
                  (rule "replace_known_right" (formula "23") (term "1") (ifseqformula "38"))
                   (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "22")))
                  (rule "true_left" (formula "23"))
                  (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "37"))
                   (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "26")))
                  (rule "true_left" (formula "27"))
                  (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "35"))
                   (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "22")))
                  (rule "true_left" (formula "21"))
                  (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "22"))
                   (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "35")))
                  (rule "true_left" (formula "23"))
                  (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "24"))
                   (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "33")))
                  (rule "true_left" (formula "23"))
                  (rule "equalityToSeqGetAndSeqLenRight" (formula "33") (inst "iv=iv"))
                   (builtin "One Step Simplification" (formula "33"))
                  (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0,1"))
                  (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "33") (term "0,1,0,0,1,0,0,1") (ifseqformula "10"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,1"))
                  (rule "mul_literals" (formula "33") (term "0,1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,1"))
                  (rule "nnf_imp2or" (formula "33") (term "0,1"))
                  (rule "nnf_notAnd" (formula "33") (term "0,0,1"))
                  (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,1"))
                  (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,1"))
                  (rule "add_literals" (formula "33") (term "0,0,0,1,0,0,1"))
                  (rule "add_zero_left" (formula "33") (term "0,0,1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0,1"))
                  (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0,1"))
                  (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0,1"))
                  (rule "add_zero_right" (formula "33") (term "0,0,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,1"))
                  (rule "mul_literals" (formula "33") (term "1,0,0,0,1"))
                  (rule "all_pull_out3" (formula "25") (term "0"))
                  (rule "shift_paren_or" (formula "25") (term "0,0"))
                  (rule "shift_paren_or" (formula "25") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "25") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "25") (term "0,0,0,0,0"))
                  (rule "commute_or" (formula "25") (term "0,0,0,0,0,0"))
                  (rule "allLeft" (formula "13") (inst "t=i_1_0"))
                  (rule "replace_known_left" (formula "13") (term "0,0,0") (ifseqformula "5"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
                  (rule "allLeft" (formula "14") (inst "t=i_0"))
                  (rule "replace_known_left" (formula "14") (term "0,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "4"))
                  (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
                  (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "14") (term "0,0,1"))
                  (rule "leq_literals" (formula "14") (term "0,1"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "inEqSimp_contradInEq1" (formula "13") (term "0") (ifseqformula "6"))
                  (rule "qeq_literals" (formula "13") (term "0,0"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "14"))
                  (rule "leq_literals" (formula "3") (term "0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "13"))
                  (rule "qeq_literals" (formula "2") (term "0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "closeFalse" (formula "2"))
               )
            )
            (branch "CUT: (Node)self_77.nodeList[i_0] = null FALSE"
                (builtin "One Step Simplification" (formula "42"))
               (rule "notRight" (formula "42"))
               (rule "shift_paren_and" (formula "17") (term "0,1,0"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "castedGetAny" (formula "17") (term "0,0,1,0,0,1,0"))
               (rule "castedGetAny" (formula "17") (term "0,0,0,0,0,1,0"))
               (rule "castedGetAny" (formula "17") (term "1,0,1,1,0,0,1,0"))
               (rule "cnf_rightDist" (formula "17") (term "0"))
               (rule "distr_forallAnd" (formula "17"))
               (rule "andLeft" (formula "17"))
               (rule "shift_paren_or" (formula "18") (term "0"))
               (rule "cnf_rightDist" (formula "17") (term "0"))
               (rule "distr_forallAnd" (formula "17"))
               (rule "andLeft" (formula "17"))
               (rule "shift_paren_or" (formula "18") (term "0"))
               (rule "cnf_rightDist" (formula "17") (term "0"))
               (rule "distr_forallAnd" (formula "17"))
               (rule "andLeft" (formula "17"))
               (rule "commute_or_2" (formula "17") (term "0"))
               (rule "shift_paren_or" (formula "18") (term "0"))
               (rule "commute_or" (formula "17") (term "0,0"))
               (rule "cut_direct" (formula "24") (term "0,0"))
               (branch "CUT: self_77.tail = null TRUE"
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "24"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "true_left" (formula "29"))
                  (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "35"))
                  (rule "true_left" (formula "35"))
                  (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "24"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "true_left" (formula "31"))
                  (rule "replace_known_left" (formula "27") (term "0,1") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "24")))
                  (rule "true_left" (formula "27"))
                  (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "true_left" (formula "28"))
                  (rule "replace_known_left" (formula "23") (term "0,1") (ifseqformula "24"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "24"))
                   (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "23")))
                  (rule "true_left" (formula "21"))
                  (rule "replace_known_left" (formula "25") (term "0,1") (ifseqformula "24"))
                   (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "22")))
                  (rule "true_left" (formula "25"))
                  (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "23"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "true_left" (formula "29"))
                  (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "24"))
                   (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "22")))
                  (rule "true_left" (formula "21"))
                  (rule "replace_known_left" (formula "26") (term "0") (ifseqformula "23"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "true_left" (formula "26"))
                  (rule "replace_known_left" (formula "26") (term "0") (ifseqformula "21"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "true_left" (formula "26"))
                  (rule "replace_known_left" (formula "25") (term "0") (ifseqformula "21"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "true_left" (formula "25"))
                  (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "21"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "true_left" (formula "24"))
                  (rule "applyEq" (formula "16") (term "0,0,0,0,0,0") (ifseqformula "23"))
                  (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "23"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "eqSymm" (formula "10"))
                  (rule "applyEq" (formula "34") (term "0,1,0") (ifseqformula "23"))
                  (rule "eqSymm" (formula "34"))
                  (rule "applyEq" (formula "15") (term "0,1,0,0,0,0,0") (ifseqformula "23"))
                  (rule "applyEq" (formula "14") (term "0,0,0,0,0,0") (ifseqformula "23"))
                  (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "23"))
                  (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "23"))
                  (rule "eqSymm" (formula "5"))
                  (rule "applyEq" (formula "25") (term "0,0,0,0,0,0,0,1,0") (ifseqformula "23"))
                  (rule "applyEq" (formula "14") (term "0,1,0,1,0,0,0") (ifseqformula "23"))
                  (rule "applyEq" (formula "13") (term "0,0,0,0,0,0") (ifseqformula "23"))
                  (rule "applyEq" (formula "26") (term "0,1,1,0,0,0") (ifseqformula "23"))
                  (rule "applyEq" (formula "24") (term "0,1,0,0,0") (ifseqformula "23"))
                  (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "23"))
                  (rule "applyEq" (formula "24") (term "0,1,0,0,0,0") (ifseqformula "23"))
                  (rule "applyEq" (formula "25") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "23"))
                  (rule "applyEq" (formula "13") (term "1,1,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "23"))
                  (rule "eqSymm" (formula "5"))
                  (rule "applyEq" (formula "19") (term "1,1,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "17") (term "1,1,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "16") (term "1,1,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "25") (term "1,1,0,0,1,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "8") (term "0") (ifseqformula "10"))
                  (rule "inEqSimp_homoInEq1" (formula "8"))
                  (rule "times_zero_2" (formula "8") (term "1,0"))
                  (rule "add_zero_right" (formula "8") (term "0"))
                  (rule "applyEq" (formula "20") (term "1,1,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "4") (term "0") (ifseqformula "10"))
                  (rule "inEqSimp_homoInEq1" (formula "4"))
                  (rule "times_zero_2" (formula "4") (term "1,0"))
                  (rule "add_zero_right" (formula "4") (term "0"))
                  (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                  (rule "leq_literals" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "22"))
                  (rule "eqSymm" (formula "33"))
                  (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                  (rule "qeq_literals" (formula "9"))
                  (rule "true_left" (formula "9"))
                  (rule "applyEq" (formula "16") (term "1,1,0") (ifseqformula "9"))
                  (rule "applyEq" (formula "12") (term "1,1,0") (ifseqformula "9"))
                  (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "9"))
                  (rule "applyEq" (formula "23") (term "1,1,0,0") (ifseqformula "9"))
                  (rule "applyEq" (formula "13") (term "1,1,0") (ifseqformula "9"))
                  (rule "applyEq" (formula "22") (term "1,1,1,0") (ifseqformula "9"))
                  (rule "add_zero_right" (formula "22") (term "1,1,0"))
                  (rule "applyEq" (formula "10") (term "1") (ifseqformula "9"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "8"))
                  (rule "mul_literals" (formula "8") (term "1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                  (rule "mul_literals" (formula "4") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "4") (term "0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "closeFalse" (formula "4"))
               )
               (branch "CUT: self_77.tail = null FALSE"
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "true_left" (formula "24"))
                  (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "43"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "43"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "notLeft" (formula "25"))
                  (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "43"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "replace_known_right" (formula "32") (term "0") (ifseqformula "43"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "replace_known_right" (formula "21") (term "1") (ifseqformula "43"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "notLeft" (formula "21"))
                  (rule "replace_known_right" (formula "22") (term "0,1") (ifseqformula "43"))
                   (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "41")))
                  (rule "true_left" (formula "22"))
                  (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "24"))
                   (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "40")))
                  (rule "true_left" (formula "23"))
                  (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "23"))
                   (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "40")))
                  (rule "true_left" (formula "24"))
                  (rule "replace_known_right" (formula "21") (term "0,0") (ifseqformula "38"))
                   (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "39")))
                  (rule "true_left" (formula "21"))
                  (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "27"))
                   (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "38")))
                  (rule "true_left" (formula "28"))
                  (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "24"))
                   (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "37")))
                  (rule "true_left" (formula "25"))
                  (rule "replace_known_right" (formula "21") (term "0,1") (ifseqformula "36"))
                   (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "35")))
                  (rule "true_left" (formula "21"))
                  (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "34")))
                  (rule "true_left" (formula "24"))
                  (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "33"))
                   (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "23")))
                  (rule "true_left" (formula "22"))
                  (rule "equalityToSeqGetAndSeqLenRight" (formula "33") (inst "iv=iv"))
                   (builtin "One Step Simplification" (formula "33"))
                  (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0,1"))
                  (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "33") (term "0,1,0,0,1,0,0,1") (ifseqformula "10"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,1"))
                  (rule "mul_literals" (formula "33") (term "0,1,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,1"))
                  (rule "nnf_imp2or" (formula "33") (term "0,1"))
                  (rule "nnf_notAnd" (formula "33") (term "0,0,1"))
                  (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,1"))
                  (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,1"))
                  (rule "add_literals" (formula "33") (term "0,0,0,1,0,0,1"))
                  (rule "add_zero_left" (formula "33") (term "0,0,1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0,1"))
                  (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0,1"))
                  (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0,1"))
                  (rule "add_literals" (formula "33") (term "0,0,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,1"))
                  (rule "mul_literals" (formula "33") (term "1,0,0,0,1"))
                  (rule "all_pull_out3" (formula "25") (term "0"))
                  (rule "shift_paren_or" (formula "25") (term "0,0"))
                  (rule "shift_paren_or" (formula "25") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "25") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "25") (term "0,0,0,0,0"))
                  (rule "commute_or" (formula "25") (term "0,0,0,0,0,0"))
                  (rule "allLeft" (formula "26") (inst "t=i_0"))
                  (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "26") (term "1,0") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "26") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "4"))
                  (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                  (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "0,0,1"))
                  (rule "leq_literals" (formula "26") (term "0,1"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "allLeft" (formula "27") (inst "t=i_1_0"))
                  (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                  (rule "applyEq" (formula "27") (term "1,1,0,0") (ifseqformula "5"))
                  (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "8"))
                  (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
                  (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "27") (term "0,0,1"))
                  (rule "leq_literals" (formula "27") (term "0,1"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "6"))
                  (rule "qeq_literals" (formula "27") (term "0,1"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "allLeft" (formula "28") (inst "t=add(Z(1(#)), i_1_0)"))
                  (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                  (rule "inEqSimp_homoInEq0" (formula "28") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "1,0,1,0"))
                  (rule "mul_literals" (formula "28") (term "0,1,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "28") (term "0,1,0"))
                  (rule "add_literals" (formula "28") (term "0,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "28") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "0,1,0"))
                  (rule "polySimp_elimOne" (formula "28") (term "0,1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "28") (term "1,0") (ifseqformula "6"))
                  (rule "qeq_literals" (formula "28") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "8"))
                  (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "28") (term "0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "28") (term "0,0,1"))
                  (rule "polySimp_addComm1" (formula "28") (term "0,0,0,1"))
                  (rule "add_literals" (formula "28") (term "0,0,0,0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                  (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "28") (term "0,0,1"))
                  (rule "leq_literals" (formula "28") (term "0,1"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "allLeft" (formula "24") (inst "t=i_1_0"))
                  (rule "inEqSimp_homoInEq1" (formula "24") (term "1"))
                  (rule "polySimp_addComm1" (formula "24") (term "0,1"))
                  (rule "applyEq" (formula "24") (term "1,0,0,0") (ifseqformula "5"))
                  (rule "replace_known_right" (formula "24") (term "0,0") (ifseqformula "41"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,1"))
                  (rule "mul_literals" (formula "24") (term "0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1"))
                  (rule "polySimp_elimOne" (formula "24") (term "1,1,1"))
                  (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "8"))
                  (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "24") (term "0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "24") (term "0,0,1"))
                  (rule "polySimp_addComm1" (formula "24") (term "0,0,0,1"))
                  (rule "add_literals" (formula "24") (term "0,0,0,0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                  (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "24") (term "0,0,1"))
                  (rule "leq_literals" (formula "24") (term "0,1"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "24"))
                  (rule "qeq_literals" (formula "6") (term "0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "closeFalse" (formula "6"))
               )
            )
         )
      )
   )
   (branch "Case 2"
      (rule "translateJavaSubInt" (formula "7") (term "1,1,0,0"))
      (rule "translateJavaSubInt" (formula "6") (term "1,0,1,1,1"))
      (rule "allRight" (formula "16") (inst "sk=i_4_0"))
      (rule "impRight" (formula "16"))
      (rule "andLeft" (formula "1"))
      (rule "eqSymm" (formula "9") (term "1,0"))
      (rule "eqSymm" (formula "8") (term "1,0,1"))
      (rule "eqSymm" (formula "10") (term "0,1,0,1,0"))
      (rule "eqSymm" (formula "10") (term "1,1,0,1,0"))
      (rule "eqSymm" (formula "4"))
      (rule "eqSymm" (formula "8") (term "1,1"))
      (rule "eqSymm" (formula "18") (term "1,0,0,0,0,1"))
      (rule "eqSymm" (formula "18"))
      (rule "polySimp_elimSub" (formula "9") (term "1,1,0,0"))
      (rule "mul_literals" (formula "9") (term "1,1,1,0,0"))
      (rule "polySimp_elimSub" (formula "8") (term "1,0,0,1,1"))
      (rule "mul_literals" (formula "8") (term "1,1,0,0,1,1"))
      (rule "polySimp_addComm0" (formula "9") (term "1,0,0,1,0"))
      (rule "polySimp_addComm0" (formula "9") (term "1,1,0,0"))
      (rule "polySimp_addComm0" (formula "8") (term "1,0,0,1,1"))
      (rule "castedGetAny" (formula "11") (term "1,1,1,0"))
      (rule "castedGetAny" (formula "9") (term "1,1,1,0"))
      (rule "castedGetAny" (formula "8") (term "0,1,0,1"))
      (rule "castedGetAny" (formula "10") (term "0,0,1,0,1,0"))
      (rule "castedGetAny" (formula "10") (term "1,0,1,0,1,0"))
      (rule "castedGetAny" (formula "18") (term "0,1,0,0,0,0,0"))
      (rule "castedGetAny" (formula "18") (term "0,0,0,1,0,0"))
      (rule "castedGetAny" (formula "18") (term "1,0,0,1,1,0,0"))
      (rule "castedGetAny" (formula "18") (term "1,1,0,0,0,0,0"))
      (rule "castedGetAny" (formula "18") (term "1,2,0"))
      (rule "castedGetAny" (formula "18") (term "1,1,0"))
      (rule "castedGetAny" (formula "9") (term "0,1,0"))
      (rule "eqSymm" (formula "9") (term "1,0"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
      (rule "castedGetAny" (formula "8") (term "0,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "2"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "2") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "1"))
      (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,0,0,0,0"))
      (rule "applyEq" (formula "5") (term "0") (ifseqformula "3"))
      (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "4"))
      (rule "applyEq" (formula "8") (term "1,1,0,1,1") (ifseqformula "3"))
      (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "3"))
      (rule "applyEq" (formula "6") (term "0,1,0,0,1,0,0") (ifseqformula "3"))
      (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "3"))
      (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "3"))
      (rule "applyEq" (formula "18") (term "0,1,0,0,1,0,0,0,0,0,0") (ifseqformula "3"))
      (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "4"))
      (rule "applyEq" (formula "4") (term "1") (ifseqformula "3"))
      (rule "applyEq" (formula "9") (term "0,1,0,0,1,0,0") (ifseqformula "3"))
      (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "3"))
      (rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0") (ifseqformula "4"))
      (rule "inEqSimp_sepNegMonomial0" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
      (rule "polySimp_elimOne" (formula "2") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,0"))
      (rule "mul_literals" (formula "10") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "18") (term "0,1,1,0,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
      (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
      (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "5"))
      (rule "polySimp_rightDist" (formula "2") (term "0,0"))
      (rule "mul_literals" (formula "2") (term "0,0,0"))
      (rule "polySimp_addComm1" (formula "2") (term "0"))
      (rule "add_literals" (formula "2") (term "0,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
      (rule "polySimp_elimOne" (formula "2") (term "0"))
      (rule "nnf_imp2or" (formula "11") (term "1,0,1,0"))
      (rule "nnf_imp2or" (formula "7") (term "0"))
      (rule "nnf_imp2or" (formula "10") (term "0"))
      (rule "nnf_imp2or" (formula "12") (term "0"))
      (rule "nnf_imp2or" (formula "8") (term "0"))
      (rule "nnf_imp2or" (formula "11") (term "0"))
      (rule "nnf_notAnd" (formula "7") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
      (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
      (rule "mul_literals" (formula "7") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
      (rule "nnf_notAnd" (formula "10") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
      (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
      (rule "mul_literals" (formula "10") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
      (rule "nnf_notAnd" (formula "12") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
      (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
      (rule "mul_literals" (formula "12") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
      (rule "nnf_notAnd" (formula "8") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
      (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
      (rule "mul_literals" (formula "8") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "11") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
      (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
      (rule "mul_literals" (formula "11") (term "1,0,0,0"))
      (rule "nnf_imp2or" (formula "11") (term "0,1,0"))
      (rule "nnf_notAnd" (formula "11") (term "0,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,1,0"))
      (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0,1,0"))
      (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
      (rule "mul_literals" (formula "11") (term "1,0,0,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,0"))
      (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,0"))
      (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,1,0"))
      (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1,0"))
      (rule "commute_and" (formula "9") (term "0,0"))
      (rule "commute_and" (formula "9") (term "0,0,0,0,1"))
      (rule "commute_or_2" (formula "10") (term "0"))
      (rule "commute_or_2" (formula "12") (term "0"))
      (rule "commute_and" (formula "7") (term "0,0,1,0"))
      (rule "commute_and" (formula "7") (term "1,0,1,0"))
      (rule "commute_and" (formula "8") (term "0,0,1,0"))
      (rule "commute_and" (formula "8") (term "1,0,1,0"))
      (rule "commute_or" (formula "10") (term "0,0"))
      (rule "commute_or" (formula "12") (term "0,0"))
      (rule "commute_and_2" (formula "9") (term "0"))
      (rule "cnf_rightDist" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "cnf_rightDist" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "cnf_rightDist" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "commute_or" (formula "10"))
      (rule "cnf_rightDist" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "cnf_rightDist" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "cnf_rightDist" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "commute_or" (formula "10"))
      (rule "shift_paren_or" (formula "17") (term "0,1,0"))
      (rule "cnf_rightDist" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "cnf_rightDist" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "commute_or" (formula "11"))
      (rule "cnf_rightDist" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "commute_or" (formula "10"))
      (rule "commute_and_2" (formula "9") (term "1"))
      (rule "cnf_rightDist" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "cnf_rightDist" (formula "10"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "cnf_rightDist" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "commute_or" (formula "10"))
      (rule "cnf_rightDist" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "commute_or" (formula "9"))
      (rule "cnf_rightDist" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "commute_or" (formula "11"))
      (rule "cnf_rightDist" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "commute_or" (formula "10"))
      (rule "cnf_rightDist" (formula "11"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "commute_or" (formula "11"))
      (rule "cnf_rightDist" (formula "9"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "commute_or" (formula "9"))
      (rule "commute_or_2" (formula "25") (term "0,0,1,0"))
      (rule "applyEq_and_gen2" (formula "8") (term "1,0,1,0"))
      (rule "lenNonNegative" (formula "4") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "4"))
      (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
      (rule "lenNonNegative" (formula "6") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "6"))
      (rule "applyEq" (formula "6") (term "0") (ifseqformula "7"))
      (rule "seqGetAlphaCast" (formula "34") (term "1"))
      (rule "castDel" (formula "1") (term "0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "seqGetAlphaCast" (formula "34") (term "0,0,0,1,0,0"))
      (rule "castedGetAny" (formula "1") (term "0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "ifthenelse_split" (formula "34") (term "0"))
      (branch " !exists int i; ( i >= 0 & i <= -1 + self_77.size & (Node)self_77.nodeList[i] = (Node)self_77.nodeList[i_4_0]) | !(Node)self_77.nodeList[i_4_0] = null & !(Node)self_77.nodeList[i_4_0].<created> = TRUE TRUE"
         (rule "eqSymm" (formula "35"))
         (rule "shift_paren_and" (formula "9") (term "0,1,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "castedGetAny" (formula "9") (term "1,0,0,1,0,1,0"))
         (rule "castedGetAny" (formula "9") (term "0,0,1,0,0,1,0"))
         (rule "castedGetAny" (formula "9") (term "0,0,0,0,0,1,0"))
         (rule "castedGetAny" (formula "9") (term "1,0,1,1,0,0,1,0"))
         (rule "cnf_rightDist" (formula "9") (term "0"))
         (rule "distr_forallAnd" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "shift_paren_or" (formula "10") (term "0"))
         (rule "cnf_rightDist" (formula "9") (term "0"))
         (rule "distr_forallAnd" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "shift_paren_or" (formula "10") (term "0"))
         (rule "cnf_rightDist" (formula "9") (term "0"))
         (rule "distr_forallAnd" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "commute_or_2" (formula "9") (term "0"))
         (rule "shift_paren_or" (formula "10") (term "0"))
         (rule "commute_or" (formula "9") (term "0,0"))
         (rule "commute_or" (formula "30") (term "0,0,0,1,0"))
         (rule "commute_and_2" (formula "1") (term "0,0,0"))
         (rule "shift_paren_and" (formula "13") (term "0,1,0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "castedGetAny" (formula "13") (term "0,0,0,0,0,1,0"))
         (rule "castedGetAny" (formula "13") (term "1,0,1,1,0,0,1,0"))
         (rule "castedGetAny" (formula "13") (term "0,0,1,0,0,1,0"))
         (rule "cnf_rightDist" (formula "13") (term "0"))
         (rule "distr_forallAnd" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "shift_paren_or" (formula "14") (term "0"))
         (rule "cnf_rightDist" (formula "13") (term "0"))
         (rule "distr_forallAnd" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "shift_paren_or" (formula "14") (term "0"))
         (rule "cnf_rightDist" (formula "13") (term "0"))
         (rule "distr_forallAnd" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "commute_or_2" (formula "13") (term "0"))
         (rule "shift_paren_or" (formula "14") (term "0"))
         (rule "commute_or" (formula "13") (term "0,0"))
         (rule "commute_and" (formula "1") (term "0,0,0,0"))
         (rule "cut_direct" (formula "20") (term "0,0"))
         (branch "CUT: self_77.tail = null TRUE"
             (builtin "One Step Simplification" (formula "21"))
            (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "32"))
            (rule "true_left" (formula "32"))
            (rule "replace_known_left" (formula "23") (term "0,1") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "20")))
            (rule "true_left" (formula "23"))
            (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "true_left" (formula "27"))
            (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "true_left" (formula "18"))
            (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "19"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "true_left" (formula "23"))
            (rule "replace_known_left" (formula "18") (term "0,1") (ifseqformula "19"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "19"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "true_left" (formula "27"))
            (rule "replace_known_left" (formula "25") (term "0") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "true_left" (formula "25"))
            (rule "replace_known_left" (formula "21") (term "0,1") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "18")))
            (rule "true_left" (formula "21"))
            (rule "replace_known_left" (formula "17") (term "1") (ifseqformula "19"))
             (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "18")))
            (rule "true_left" (formula "17"))
            (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "19"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "true_left" (formula "21"))
            (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "17"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "true_left" (formula "20"))
            (rule "replace_known_left" (formula "21") (term "0") (ifseqformula "17"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "true_left" (formula "21"))
            (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "17"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "true_left" (formula "20"))
            (rule "applyEq" (formula "22") (term "0,1,1,0,0,0") (ifseqformula "19"))
            (rule "applyEq" (formula "9") (term "0,0,0,0,0,0") (ifseqformula "19"))
            (rule "applyEq" (formula "20") (term "0,1,0,0,0,0") (ifseqformula "19"))
            (rule "applyEq" (formula "21") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "19"))
            (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "19"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "eqSymm" (formula "6"))
            (rule "applyEq" (formula "11") (term "0,1,0,0,0,0,0") (ifseqformula "19"))
            (rule "applyEq" (formula "29") (term "0,1,1") (ifseqformula "19"))
            (rule "applyEq" (formula "12") (term "0,0,0,0,0,0") (ifseqformula "19"))
            (rule "applyEq" (formula "10") (term "0,1,0,1,0,0,0") (ifseqformula "19"))
            (rule "applyEq" (formula "10") (term "0,0,0,0,0,0") (ifseqformula "19"))
            (rule "applyEq" (formula "21") (term "0,0,0,0,0,0,0,1,0") (ifseqformula "19"))
            (rule "applyEq" (formula "1") (term "0,1,0,0,1,1") (ifseqformula "19"))
            (rule "applyEq" (formula "1") (term "0,0,0,0,1") (ifseqformula "19"))
            (rule "applyEq" (formula "20") (term "0,1,0,0,0") (ifseqformula "19"))
            (rule "applyEq" (formula "1") (term "0,0,0,0,0,0,0") (ifseqformula "19"))
            (rule "applyEq" (formula "1") (term "0,1,0,0,0,0,0") (ifseqformula "19"))
            (rule "applyEq" (formula "16") (term "1,1,0") (ifseqformula "6"))
            (rule "applyEq" (formula "20") (term "1,1,1,0") (ifseqformula "6"))
            (rule "add_zero_right" (formula "20") (term "1,1,0"))
            (rule "applyEq" (formula "21") (term "1,1,0,0") (ifseqformula "6"))
            (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "6"))
            (rule "applyEq" (formula "8") (term "0") (ifseqformula "6"))
            (rule "leq_literals" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "applyEq" (formula "14") (term "1,1,0") (ifseqformula "6"))
            (rule "applyEq" (formula "12") (term "1,1,0") (ifseqformula "6"))
            (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "6"))
            (rule "applyEq" (formula "20") (term "1,1,0,0,1,0") (ifseqformula "6"))
            (rule "applyEq" (formula "13") (term "1,1,0") (ifseqformula "6"))
            (rule "applyEq" (formula "9") (term "1,1,0") (ifseqformula "6"))
            (rule "applyEq" (formula "4") (term "0") (ifseqformula "6"))
            (rule "inEqSimp_homoInEq1" (formula "4"))
            (rule "mul_literals" (formula "4") (term "1,0"))
            (rule "add_zero_right" (formula "4") (term "0"))
            (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "6"))
            (rule "applyEq" (formula "8") (term "1,1,0") (ifseqformula "6"))
            (rule "applyEq" (formula "1") (term "1,1,1,0,0,0") (ifseqformula "6"))
            (rule "add_zero_right" (formula "1") (term "1,1,0,0,0"))
            (rule "applyEq" (formula "5") (term "0") (ifseqformula "6"))
            (rule "qeq_literals" (formula "5"))
            (rule "true_left" (formula "5"))
            (rule "applyEq" (formula "6") (term "1") (ifseqformula "5"))
            (rule "inEqSimp_sepPosMonomial0" (formula "4"))
            (rule "mul_literals" (formula "4") (term "1"))
            (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "4"))
            (rule "qeq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "closeFalse" (formula "2"))
         )
         (branch "CUT: self_77.tail = null FALSE"
             (builtin "One Step Simplification" (formula "20"))
            (rule "true_left" (formula "20"))
            (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "39"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "39"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "notLeft" (formula "21"))
            (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "39"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "replace_known_right" (formula "19") (term "0,1") (ifseqformula "39"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "true_left" (formula "19"))
            (rule "replace_known_right" (formula "17") (term "1") (ifseqformula "38"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "notLeft" (formula "17"))
            (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "38"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "23"))
             (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "36")))
            (rule "true_left" (formula "22"))
            (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "22"))
             (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "36")))
            (rule "true_left" (formula "23"))
            (rule "replace_known_right" (formula "23") (term "0") (ifseqformula "34"))
             (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "24")))
            (rule "true_left" (formula "23"))
            (rule "replace_known_right" (formula "21") (term "1") (ifseqformula "34"))
             (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "20")))
            (rule "true_left" (formula "21"))
            (rule "replace_known_right" (formula "18") (term "0,1") (ifseqformula "33"))
             (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "32")))
            (rule "true_left" (formula "18"))
            (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "31"))
             (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "19")))
            (rule "true_left" (formula "18"))
            (rule "replace_known_right" (formula "17") (term "1") (ifseqformula "31"))
             (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "30")))
            (rule "true_left" (formula "17"))
            (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "30"))
             (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "19")))
            (rule "true_left" (formula "20"))
            (rule "equalityToSeqGetAndSeqLenRight" (formula "29") (inst "iv=iv"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,1"))
            (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0,1"))
            (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "6"))
            (rule "applyEq" (formula "29") (term "0,1,0,0,1,0,0,1") (ifseqformula "6"))
            (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,1"))
            (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,1"))
            (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,1"))
            (rule "mul_literals" (formula "29") (term "0,1,1,0,0,1"))
            (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,1"))
            (rule "nnf_imp2or" (formula "29") (term "0,1"))
            (rule "nnf_notAnd" (formula "29") (term "0,0,1"))
            (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,1"))
            (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,1"))
            (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,1"))
            (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,1"))
            (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,1"))
            (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,1"))
            (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,1"))
            (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0,1"))
            (rule "add_literals" (formula "29") (term "0,0,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,1"))
            (rule "mul_literals" (formula "29") (term "1,0,0,0,1"))
            (rule "all_pull_out3" (formula "21") (term "0"))
            (rule "shift_paren_or" (formula "21") (term "0,0"))
            (rule "shift_paren_or" (formula "21") (term "0,0,0"))
            (rule "shift_paren_or" (formula "21") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "21") (term "0,0,0,0,0"))
            (rule "commute_or" (formula "21") (term "0,0,0,0,0,0"))
            (rule "allLeft" (formula "22") (inst "t=i_4_0"))
            (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "4"))
            (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
            (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
            (rule "add_literals" (formula "22") (term "0,0,1"))
            (rule "leq_literals" (formula "22") (term "0,1"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "2"))
            (rule "qeq_literals" (formula "22") (term "0,1"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "applyEq" (formula "33") (term "0") (ifseqformula "22"))
            (rule "eqSymm" (formula "33"))
            (rule "orLeft" (formula "1"))
            (branch "!exists int i; ( (Node)self_77.nodeList[i] = (Node)self_77.nodeList[i_4_0] & i >= 0 & i <= -1 + self_77.size)"
               (rule "notLeft" (formula "1"))
               (rule "nnf_ex2all" (formula "28"))
               (rule "nnf_notAnd" (formula "1") (term "0"))
               (rule "inEqSimp_notLeq" (formula "1") (term "1,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
               (rule "add_zero_left" (formula "1") (term "0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
               (rule "nnf_notAnd" (formula "1") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "1,1,0,0"))
               (rule "allLeft" (formula "16") (inst "t=i_4_0"))
               (rule "typeEqDerived" (formula "16") (term "0,0,0") (ifseqformula "23"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "true_left" (formula "16"))
               (rule "allLeft" (formula "11") (inst "t=i_4_0"))
               (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0") (ifseqformula "2"))
               (rule "qeq_literals" (formula "11") (term "0,1,0"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "4"))
               (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
               (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "11") (term "0,0,1"))
               (rule "leq_literals" (formula "11") (term "0,1"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "notLeft" (formula "11"))
               (rule "allLeft" (formula "9") (inst "t=i_4_0"))
               (rule "inEqSimp_commuteGeq" (formula "9") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "9") (term "1") (ifseqformula "4"))
               (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1"))
               (rule "add_literals" (formula "9") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "9") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "9") (term "0,0,1"))
               (rule "leq_literals" (formula "9") (term "0,1"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "inEqSimp_contradInEq1" (formula "9") (term "1") (ifseqformula "2"))
               (rule "qeq_literals" (formula "9") (term "0,1"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "notLeft" (formula "9"))
               (rule "allLeft" (formula "15") (inst "t=i_4_0"))
               (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
               (rule "applyEq" (formula "15") (term "0,0,0,0") (ifseqformula "23"))
               (rule "replace_known_right" (formula "15") (term "0,0,0") (ifseqformula "31"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "true_left" (formula "15"))
               (rule "seqGetAlphaCast" (formula "18") (term "0"))
               (rule "castedGetAny" (formula "18") (term "0"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "true_left" (formula "18"))
               (rule "allLeft" (formula "1") (inst "t=i_4_0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "3"))
               (rule "qeq_literals" (formula "1") (term "0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "1"))
               (rule "andLeft" (formula "5"))
               (rule "inEqSimp_homoInEq1" (formula "5"))
               (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
               (rule "add_literals" (formula "5") (term "1,1,0"))
               (rule "times_zero_1" (formula "5") (term "1,0"))
               (rule "add_literals" (formula "5") (term "0"))
               (rule "leq_literals" (formula "5"))
               (rule "closeFalse" (formula "5"))
            )
            (branch " !(Node)self_77.nodeList[i_4_0] = null & !(Node)self_77.nodeList[i_4_0].<created> = TRUE"
               (rule "andLeft" (formula "1"))
               (rule "notLeft" (formula "2"))
               (rule "notLeft" (formula "1"))
               (rule "allLeft" (formula "9") (inst "t=i_4_0"))
               (rule "replace_known_right" (formula "9") (term "0,0,0") (ifseqformula "29"))
                (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "30")))
               (rule "inEqSimp_commuteGeq" (formula "9") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "9") (term "1") (ifseqformula "3"))
               (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1"))
               (rule "add_literals" (formula "9") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "9") (term "1,0,0,1"))
               (rule "add_literals" (formula "9") (term "0,0,1"))
               (rule "leq_literals" (formula "9") (term "0,1"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "inEqSimp_subsumption0" (formula "2") (ifseqformula "9"))
               (rule "leq_literals" (formula "2") (term "0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "inEqSimp_contradInEq1" (formula "8") (ifseqformula "1"))
               (rule "qeq_literals" (formula "8") (term "0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "closeFalse" (formula "8"))
            )
         )
      )
      (branch " !exists int i; ( i >= 0 & i <= -1 + self_77.size & (Node)self_77.nodeList[i] = (Node)self_77.nodeList[i_4_0]) | !(Node)self_77.nodeList[i_4_0] = null & !(Node)self_77.nodeList[i_4_0].<created> = TRUE FALSE"
         (rule "orRight" (formula "34"))
         (rule "notRight" (formula "34"))
         (rule "exLeft" (formula "1") (inst "sk=i_0"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "eqSymm" (formula "38"))
         (rule "eqSymm" (formula "3"))
         (rule "inEqSimp_homoInEq0" (formula "2"))
         (rule "polySimp_addComm1" (formula "2") (term "0"))
         (rule "applyEq" (formula "38") (term "1,1") (ifseqformula "3"))
         (rule "applyEq" (formula "37") (term "1,0,0,1") (ifseqformula "3"))
         (rule "applyEq" (formula "37") (term "0,0,0") (ifseqformula "3"))
         (rule "inEqSimp_sepPosMonomial1" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1"))
         (rule "polySimp_rightDist" (formula "2") (term "1"))
         (rule "mul_literals" (formula "2") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1"))
         (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "10"))
         (rule "polySimp_rightDist" (formula "2") (term "0,0"))
         (rule "mul_literals" (formula "2") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "2") (term "0"))
         (rule "add_literals" (formula "2") (term "0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "2"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
         (rule "polySimp_elimOne" (formula "2") (term "0"))
         (rule "shift_paren_and" (formula "12") (term "0,1,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "castedGetAny" (formula "12") (term "1,0,1,1,0,0,1,0"))
         (rule "castedGetAny" (formula "12") (term "0,0,1,0,0,1,0"))
         (rule "castedGetAny" (formula "12") (term "1,0,0,1,0,1,0"))
         (rule "castedGetAny" (formula "12") (term "0,0,0,0,0,1,0"))
         (rule "commute_or" (formula "30") (term "0,0,0,1,0"))
         (rule "cnf_rightDist" (formula "12") (term "0"))
         (rule "distr_forallAnd" (formula "12"))
         (rule "andLeft" (formula "12"))
         (rule "shift_paren_or" (formula "13") (term "0"))
         (rule "cnf_rightDist" (formula "12") (term "0"))
         (rule "distr_forallAnd" (formula "12"))
         (rule "andLeft" (formula "12"))
         (rule "shift_paren_or" (formula "13") (term "0"))
         (rule "cnf_rightDist" (formula "12") (term "0"))
         (rule "distr_forallAnd" (formula "12"))
         (rule "andLeft" (formula "12"))
         (rule "commute_or_2" (formula "12") (term "0"))
         (rule "shift_paren_or" (formula "13") (term "0"))
         (rule "commute_or" (formula "12") (term "0,0"))
         (rule "shift_paren_and" (formula "16") (term "0,1,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "castedGetAny" (formula "16") (term "0,0,0,0,0,1,0"))
         (rule "castedGetAny" (formula "16") (term "1,0,1,1,0,0,1,0"))
         (rule "castedGetAny" (formula "16") (term "0,0,1,0,0,1,0"))
         (rule "cnf_rightDist" (formula "16") (term "0"))
         (rule "distr_forallAnd" (formula "16"))
         (rule "andLeft" (formula "16"))
         (rule "shift_paren_or" (formula "17") (term "0"))
         (rule "cnf_rightDist" (formula "16") (term "0"))
         (rule "distr_forallAnd" (formula "16"))
         (rule "andLeft" (formula "16"))
         (rule "shift_paren_or" (formula "17") (term "0"))
         (rule "cnf_rightDist" (formula "16") (term "0"))
         (rule "distr_forallAnd" (formula "16"))
         (rule "andLeft" (formula "16"))
         (rule "commute_or_2" (formula "16") (term "0"))
         (rule "shift_paren_or" (formula "17") (term "0"))
         (rule "commute_or" (formula "16") (term "0,0"))
         (rule "cut_direct" (formula "23") (term "0,0"))
         (branch "CUT: self_77.tail = null TRUE"
             (builtin "One Step Simplification" (formula "24"))
            (rule "replace_known_left" (formula "26") (term "0") (ifseqformula "23"))
             (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "24")))
            (rule "true_left" (formula "26"))
            (rule "replace_known_left" (formula "25") (term "0,1") (ifseqformula "24"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "24"))
             (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "25")))
            (rule "true_left" (formula "21"))
            (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "22"))
             (builtin "One Step Simplification" (formula "32"))
            (rule "true_left" (formula "32"))
            (rule "replace_known_left" (formula "21") (term "0,1") (ifseqformula "22"))
             (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "24")))
            (rule "true_left" (formula "21"))
            (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "22"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "true_left" (formula "29"))
            (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "23")))
            (rule "true_left" (formula "20"))
            (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "true_left" (formula "29"))
            (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "true_left" (formula "25"))
            (rule "replace_known_left" (formula "26") (term "0") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "true_left" (formula "26"))
            (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "true_left" (formula "24"))
            (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "22"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "true_left" (formula "24"))
            (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "22"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "true_left" (formula "24"))
            (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "22"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "true_left" (formula "23"))
            (rule "applyEq" (formula "23") (term "0,1,0,0,0,0") (ifseqformula "21"))
            (rule "applyEq" (formula "13") (term "0,0,0,0,0,0") (ifseqformula "21"))
            (rule "applyEq" (formula "32") (term "0,0,0,0") (ifseqformula "21"))
            (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "eqSymm" (formula "9"))
            (rule "applyEq" (formula "4") (term "0,1") (ifseqformula "21"))
            (rule "applyEq" (formula "12") (term "0,0,0,0,0,0") (ifseqformula "21"))
            (rule "applyEq" (formula "15") (term "0,0,0,0,0,0") (ifseqformula "21"))
            (rule "applyEq" (formula "24") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "21"))
            (rule "applyEq" (formula "33") (term "0,1,1") (ifseqformula "21"))
            (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "21"))
            (rule "applyEq" (formula "23") (term "0,1,0,0,0") (ifseqformula "21"))
            (rule "applyEq" (formula "25") (term "0,1,1,0,0,0") (ifseqformula "21"))
            (rule "applyEq" (formula "13") (term "0,1,0,1,0,0,0") (ifseqformula "21"))
            (rule "applyEq" (formula "24") (term "0,0,0,0,0,0,0,1,0") (ifseqformula "21"))
            (rule "applyEq" (formula "14") (term "0,1,0,0,0,0,0") (ifseqformula "21"))
            (rule "applyEq" (formula "32") (term "0,1,0,0,1") (ifseqformula "21"))
            (rule "applyEq" (formula "12") (term "1,1,0") (ifseqformula "9"))
            (rule "applyEq" (formula "23") (term "1,1,1,0") (ifseqformula "9"))
            (rule "add_zero_right" (formula "23") (term "1,1,0"))
            (rule "applyEq" (formula "19") (term "1,1,0") (ifseqformula "9"))
            (rule "applyEq" (formula "16") (term "1,1,0") (ifseqformula "9"))
            (rule "applyEq" (formula "7") (term "0") (ifseqformula "9"))
            (rule "inEqSimp_homoInEq1" (formula "7"))
            (rule "times_zero_2" (formula "7") (term "1,0"))
            (rule "add_zero_right" (formula "7") (term "0"))
            (rule "applyEq" (formula "24") (term "1,1,0,0") (ifseqformula "9"))
            (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "9"))
            (rule "applyEq" (formula "13") (term "1,1,0") (ifseqformula "9"))
            (rule "applyEq" (formula "14") (term "1,1,0") (ifseqformula "9"))
            (rule "applyEq" (formula "15") (term "1,1,0") (ifseqformula "9"))
            (rule "applyEq" (formula "3") (term "0") (ifseqformula "9"))
            (rule "inEqSimp_homoInEq1" (formula "3"))
            (rule "times_zero_2" (formula "3") (term "1,0"))
            (rule "add_zero_right" (formula "3") (term "0"))
            (rule "applyEq" (formula "11") (term "0") (ifseqformula "9"))
            (rule "leq_literals" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
            (rule "qeq_literals" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "applyEq" (formula "15") (term "1,1,0") (ifseqformula "8"))
            (rule "applyEq" (formula "16") (term "1,1,0") (ifseqformula "8"))
            (rule "applyEq" (formula "22") (term "1,1,0,0,1,0") (ifseqformula "8"))
            (rule "applyEq" (formula "9") (term "1") (ifseqformula "8"))
            (rule "inEqSimp_sepPosMonomial0" (formula "7"))
            (rule "mul_literals" (formula "7") (term "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3"))
            (rule "mul_literals" (formula "3") (term "1"))
            (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "7"))
            (rule "leq_literals" (formula "6") (term "0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "5"))
            (rule "qeq_literals" (formula "6") (term "0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "closeFalse" (formula "6"))
         )
         (branch "CUT: self_77.tail = null FALSE"
             (builtin "One Step Simplification" (formula "23"))
            (rule "true_left" (formula "23"))
            (rule "replace_known_right" (formula "22") (term "0,1") (ifseqformula "42"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "true_left" (formula "22"))
            (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "41"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "41"))
             (builtin "One Step Simplification" (formula "28"))
            (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "41"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "replace_known_right" (formula "20") (term "1") (ifseqformula "41"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "notLeft" (formula "20"))
            (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "41"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "notLeft" (formula "22"))
            (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "39"))
             (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "29")))
            (rule "true_left" (formula "30"))
            (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "38"))
             (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "23")))
            (rule "true_left" (formula "24"))
            (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "38"))
             (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "28")))
            (rule "true_left" (formula "27"))
            (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "37"))
             (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "25")))
            (rule "true_left" (formula "24"))
            (rule "replace_known_right" (formula "21") (term "0,1") (ifseqformula "35"))
             (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "36")))
            (rule "true_left" (formula "21"))
            (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "22"))
             (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "35")))
            (rule "true_left" (formula "21"))
            (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "22"))
             (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "33")))
            (rule "true_left" (formula "23"))
            (rule "replace_known_right" (formula "20") (term "0,0") (ifseqformula "33"))
             (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "32")))
            (rule "true_left" (formula "20"))
            (rule "equalityToSeqGetAndSeqLenRight" (formula "31") (inst "iv=iv"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,1"))
            (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,1"))
            (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "9"))
            (rule "applyEq" (formula "31") (term "0,1,0,0,1,0,0,1") (ifseqformula "9"))
            (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,1"))
            (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,1"))
            (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,1"))
            (rule "mul_literals" (formula "31") (term "0,1,1,0,0,1"))
            (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,1"))
            (rule "nnf_imp2or" (formula "31") (term "0,1"))
            (rule "nnf_notAnd" (formula "31") (term "0,0,1"))
            (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0,1"))
            (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,1"))
            (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,1"))
            (rule "add_literals" (formula "31") (term "0,0,0,1,0,0,1"))
            (rule "add_zero_left" (formula "31") (term "0,0,1,0,0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0,1"))
            (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0,1"))
            (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0,1"))
            (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0,1"))
            (rule "add_literals" (formula "31") (term "0,0,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0,1"))
            (rule "mul_literals" (formula "31") (term "1,0,0,0,1"))
            (rule "all_pull_out3" (formula "24") (term "0"))
            (rule "shift_paren_or" (formula "24") (term "0,0"))
            (rule "shift_paren_or" (formula "24") (term "0,0,0"))
            (rule "shift_paren_or" (formula "24") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "24") (term "0,0,0,0,0"))
            (rule "commute_or" (formula "24") (term "0,0,0,0,0,0"))
            (rule "allLeft" (formula "25") (inst "t=i_0"))
            (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "3"))
            (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
            (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "0,0,1"))
            (rule "leq_literals" (formula "25") (term "0,1"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "1"))
            (rule "qeq_literals" (formula "25") (term "0,1"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "allLeft" (formula "26") (inst "t=i_4_0"))
            (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
            (rule "applyEq" (formula "26") (term "1,1,0,0") (ifseqformula "4"))
            (rule "replace_known_right" (formula "26") (term "0,0") (ifseqformula "38"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "7"))
            (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
            (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "26") (term "0,0,1"))
            (rule "leq_literals" (formula "26") (term "0,1"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "26"))
            (rule "qeq_literals" (formula "5") (term "0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "closeFalse" (formula "5"))
         )
      )
   )
)
(branch "Case '<-'"
    (builtin "SMTRule")
)
)
}
