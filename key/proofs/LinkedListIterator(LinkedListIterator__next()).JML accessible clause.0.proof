\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Jun 14 13:42:49 BST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:off , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=2000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_OFF
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "..";

\proofObligation "#Proof Obligation Settings
#Tue Jun 14 13:42:49 BST 2022
contract=LinkedListIterator[LinkedListIterator\\:\\:next()].JML accessible clause.0
name=LinkedListIterator[LinkedListIterator\\:\\:next()].JML accessible clause.0
class=de.uka.ilkd.key.proof.init.DependencyContractPO
";

\proof {
(keyLog "0" (keyUser "JOTA" ) (keyVersion "666bcb0c95"))
(keyLog "1" (keyUser "JOTA" ) (keyVersion "666bcb0c95"))
(keyLog "2" (keyUser "JOTA" ) (keyVersion "666bcb0c95"))
(keyLog "3" (keyUser "JOTA" ) (keyVersion "666bcb0c95"))
(keyLog "4" (keyUser "JOTA" ) (keyVersion "666bcb0c95"))
(keyLog "5" (keyUser "JOTA" ) (keyVersion "666bcb0c95"))

(autoModeTime "192406")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "self,anon_heap"))
(rule "impRight" (formula "1") (userinteraction))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "Query_axiom_for_next__in_LinkedListIterator" (formula "9") (term "0") (inst "#res=f") (inst "#self=l") (inst "next_sk=next_sk_0") (ifseqformula "4") (userinteraction))
(rule "boxToDiamond" (formula "1") (term "1"))
 (builtin "One Step Simplification" (formula "1"))
(rule "notLeft" (formula "1"))
(rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_next,savedHeapBefore_next"))
 (builtin "One Step Simplification" (formula "8"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "value"))
(rule "eval_order_access2" (formula "8") (term "1") (inst "#v0=n"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "n"))
(rule "assignment_read_attribute_this" (formula "8"))
 (builtin "One Step Simplification" (formula "8"))
(rule "assignment_read_attribute" (formula "8"))
(branch "Normal Execution (n != null)"
    (builtin "One Step Simplification" (formula "8"))
   (rule "eval_order_access4" (formula "8") (term "1") (inst "#v0=l") (inst "#v1=n"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "l"))
   (rule "assignment" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "n_1"))
   (rule "eval_order_access2" (formula "8") (term "1") (inst "#v0=n_2"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "n_2"))
   (rule "assignment_read_attribute_this" (formula "8"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "assignment_read_attribute" (formula "8"))
   (branch "Normal Execution (n_2 != null)"
       (builtin "One Step Simplification" (formula "8"))
      (rule "assignment_write_attribute" (formula "8"))
      (branch "Normal Execution (l != null)"
          (builtin "One Step Simplification" (formula "8"))
         (rule "eval_order_access4" (formula "8") (term "1") (inst "#v0=l") (inst "#v1=x"))
         (rule "variableDeclarationAssign" (formula "8") (term "1"))
         (rule "variableDeclaration" (formula "8") (term "1") (newnames "l_1"))
         (rule "assignment" (formula "8") (term "1"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "variableDeclarationAssign" (formula "8") (term "1"))
         (rule "variableDeclaration" (formula "8") (term "1") (newnames "x"))
         (rule "compound_addition_1" (formula "8") (term "1") (inst "#v=x_1"))
         (rule "variableDeclarationAssign" (formula "8") (term "1"))
         (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_1"))
         (rule "assignment_read_attribute_this" (formula "8"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "dismissNonSelectedField" (formula "8") (term "0,1,0"))
         (rule "assignmentAdditionBigint1" (formula "8") (term "1"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "polySimp_addComm0" (formula "8") (term "0,1,0"))
         (rule "assignment_write_attribute" (formula "8"))
         (branch "Normal Execution (l_1 != null)"
             (builtin "One Step Simplification" (formula "8"))
            (rule "eval_order_access4_this" (formula "8") (term "1") (inst "#v1=x"))
            (rule "variableDeclarationAssign" (formula "8") (term "1"))
            (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_2"))
            (rule "seqConcatUnfoldLeft" (formula "8") (term "1") (inst "#vLeftNew=x_3"))
            (rule "variableDeclarationAssign" (formula "8") (term "1"))
            (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_3"))
            (rule "assignment_read_attribute_this" (formula "8"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "dismissNonSelectedField" (formula "8") (term "0,1,0"))
            (rule "dismissNonSelectedField" (formula "8") (term "0,1,0"))
            (rule "assignment" (formula "8") (term "1"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "assignment_write_attribute_this" (formula "8"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "eval_order_access4_this" (formula "8") (term "1") (inst "#v1=x"))
            (rule "variableDeclarationAssign" (formula "8") (term "1"))
            (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_4"))
            (rule "seqSubUnfoldLeft" (formula "8") (term "1") (inst "#vLeftNew=x_5"))
            (rule "variableDeclarationAssign" (formula "8") (term "1"))
            (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_5"))
            (rule "assignment_read_attribute_this" (formula "8"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "dismissNonSelectedField" (formula "8") (term "0,1,0"))
            (rule "dismissNonSelectedField" (formula "8") (term "0,1,0"))
            (rule "dismissNonSelectedField" (formula "8") (term "0,1,0"))
            (rule "seqSubUnfoldRight" (formula "8") (term "1") (inst "#vRightNew=x_6"))
            (rule "variableDeclarationAssign" (formula "8") (term "1"))
            (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_6"))
            (rule "seqLengthUnfold" (formula "8") (term "1") (inst "#vNew=x_7"))
            (rule "variableDeclarationAssign" (formula "8") (term "1"))
            (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_7"))
            (rule "assignment_read_attribute_this" (formula "8"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "dismissNonSelectedField" (formula "8") (term "0,1,0"))
            (rule "dismissNonSelectedField" (formula "8") (term "0,1,0"))
            (rule "dismissNonSelectedField" (formula "8") (term "0,1,0"))
            (rule "assignment" (formula "8") (term "1"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "assignment" (formula "8") (term "1"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "assignment_write_attribute_this" (formula "8"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "methodCallReturn" (formula "8") (term "1"))
            (rule "assignment" (formula "8") (term "1"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "methodCallEmpty" (formula "8") (term "1"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "emptyModality" (formula "8") (term "1"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "notRight" (formula "8") (userinteraction))
            (rule "impLeft" (formula "1") (userinteraction))
            (branch "Case 1"
               (rule "orRight" (formula "8") (userinteraction))
               (rule "dismissNonSelectedField" (formula "9") (term "0") (userinteraction))
               (rule "dismissNonSelectedField" (formula "9") (term "0") (userinteraction))
               (rule "dismissNonSelectedField" (formula "9") (term "0") (userinteraction))
               (rule "dismissNonSelectedField" (formula "9") (term "0") (userinteraction))
               (rule "Class_invariant_axiom_for_LinkedListIterator" (formula "7") (inst "f_0=f_0") (inst "i_0=i_0") (inst "f=f") (inst "i=i") (userinteraction))
               (rule "andLeft" (formula "7"))
               (rule "notLeft" (formula "7"))
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "7"))
               (rule "referencedObjectIsCreatedRight" (formula "17") (ifseqformula "16"))
               (rule "close" (formula "17") (ifseqformula "1"))
            )
            (branch "Case 2"
               (rule "applyEq" (formula "10") (term "0") (ifseqformula "1") (userinteraction))
               (rule "hide_left" (formula "1") (userinteraction))
               (rule "Query_axiom_for_next__in_LinkedListIterator" (formula "9") (term "1") (inst "#res=f") (inst "#self=l") (inst "next_sk=next_sk_1") (ifseqformula "4") (userinteraction))
               (rule "boxToDiamond" (formula "1") (term "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_next_0,savedHeapBefore_next_0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "variableDeclarationAssign" (formula "8") (term "1"))
               (rule "variableDeclaration" (formula "8") (term "1") (newnames "value_1"))
               (rule "eval_order_access2" (formula "8") (term "1") (inst "#v0=n"))
               (rule "variableDeclarationAssign" (formula "8") (term "1"))
               (rule "variableDeclaration" (formula "8") (term "1") (newnames "n_3"))
               (rule "assignment_read_attribute_this" (formula "8"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "pullOutSelect" (formula "8") (term "0,1,0") (inst "selectSK=LinkedListIterator_curr_0"))
               (rule "simplifySelectOfAnon" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")) (ifInst ""  (formula "4")))
               (rule "assignment_read_attribute" (formula "9"))
               (branch "Normal Execution (n_3 != null)"
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "pullOutSelect" (formula "9") (term "0,1,0") (inst "selectSK=Node_value_0"))
                  (rule "simplifySelectOfAnon" (formula "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eval_order_access4_this" (formula "10") (term "1") (inst "#v1=n"))
                  (rule "variableDeclarationAssign" (formula "10") (term "1"))
                  (rule "variableDeclaration" (formula "10") (term "1") (newnames "n_4"))
                  (rule "eval_order_access2" (formula "10") (term "1") (inst "#v0=n_5"))
                  (rule "variableDeclarationAssign" (formula "10") (term "1"))
                  (rule "variableDeclaration" (formula "10") (term "1") (newnames "n_5"))
                  (rule "assignment_read_attribute_this" (formula "10"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "replaceKnownSelect_taclet10000_1" (formula "10") (term "0,1,0"))
                  (rule "assignment_read_attribute" (formula "10"))
                  (branch "Normal Execution (n_5 != null)"
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "pullOutSelect" (formula "10") (term "0,1,0") (inst "selectSK=Node_next_0"))
                     (rule "simplifySelectOfAnon" (formula "1"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "assignment_write_attribute_this" (formula "11"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "eval_order_access4" (formula "11") (term "1") (inst "#v0=l") (inst "#v1=x"))
                     (rule "variableDeclarationAssign" (formula "11") (term "1"))
                     (rule "variableDeclaration" (formula "11") (term "1") (newnames "l_2"))
                     (rule "assignment" (formula "11") (term "1"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "variableDeclarationAssign" (formula "11") (term "1"))
                     (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_8"))
                     (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "ifthenelse_negated" (formula "3") (term "0"))
                     (rule "elementOfSetMinus" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfUnion" (formula "3") (term "0,0"))
                     (rule "elementOfUnion" (formula "2") (term "0,0,0,0"))
                     (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                     (rule "compound_addition_1" (formula "11") (term "1") (inst "#v=x_9"))
                     (rule "variableDeclarationAssign" (formula "11") (term "1"))
                     (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_9"))
                     (rule "assignment_read_attribute_this" (formula "11"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "dismissNonSelectedField" (formula "11") (term "0,1,0"))
                     (rule "pullOutSelect" (formula "11") (term "0,1,0") (inst "selectSK=LinkedListIterator_index_0"))
                     (rule "simplifySelectOfAnon" (formula "1"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")) (ifInst ""  (formula "7")))
                     (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "ifthenelse_negated" (formula "1") (term "0"))
                     (rule "elementOfUnion" (formula "1") (term "0,0"))
                     (rule "assignmentAdditionBigint1" (formula "12") (term "1"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "polySimp_addComm0" (formula "12") (term "0,1,0"))
                     (rule "assignment_write_attribute" (formula "12"))
                     (branch "Normal Execution (l_2 != null)"
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "eval_order_access4" (formula "12") (term "1") (inst "#v0=l") (inst "#v1=x"))
                        (rule "variableDeclarationAssign" (formula "12") (term "1"))
                        (rule "variableDeclaration" (formula "12") (term "1") (newnames "l_3"))
                        (rule "assignment" (formula "12") (term "1"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "variableDeclarationAssign" (formula "12") (term "1"))
                        (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_10"))
                        (rule "seqConcatUnfoldLeft" (formula "12") (term "1") (inst "#vLeftNew=x_11"))
                        (rule "variableDeclarationAssign" (formula "12") (term "1"))
                        (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_11"))
                        (rule "assignment_read_attribute_this" (formula "12"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "dismissNonSelectedField" (formula "12") (term "0,1,0"))
                        (rule "dismissNonSelectedField" (formula "12") (term "0,1,0"))
                        (rule "pullOutSelect" (formula "12") (term "0,1,0") (inst "selectSK=LinkedListIterator_seen_0"))
                        (rule "simplifySelectOfAnon" (formula "1"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")) (ifInst ""  (formula "8")))
                        (rule "assignment" (formula "13") (term "1"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "assignment_write_attribute" (formula "13"))
                        (branch "Normal Execution (l_3 != null)"
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "eval_order_access4_this" (formula "13") (term "1") (inst "#v1=x"))
                           (rule "variableDeclarationAssign" (formula "13") (term "1"))
                           (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_12"))
                           (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "ifthenelse_negated" (formula "1") (term "0"))
                           (rule "elementOfUnion" (formula "1") (term "0,0"))
                           (rule "seqSubUnfoldLeft" (formula "13") (term "1") (inst "#vLeftNew=x_13"))
                           (rule "variableDeclarationAssign" (formula "13") (term "1"))
                           (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_13"))
                           (rule "assignment_read_attribute_this" (formula "13"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "dismissNonSelectedField" (formula "13") (term "0,1,0"))
                           (rule "dismissNonSelectedField" (formula "13") (term "0,1,0"))
                           (rule "dismissNonSelectedField" (formula "13") (term "0,1,0"))
                           (rule "pullOutSelect" (formula "13") (term "0,1,0") (inst "selectSK=LinkedListIterator_to_see_0"))
                           (rule "simplifySelectOfAnon" (formula "1"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")) (ifInst ""  (formula "9")))
                           (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "ifthenelse_negated" (formula "1") (term "0"))
                           (rule "elementOfUnion" (formula "1") (term "0,0"))
                           (rule "seqSubUnfoldRight" (formula "14") (term "1") (inst "#vRightNew=x_14"))
                           (rule "variableDeclarationAssign" (formula "14") (term "1"))
                           (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_14"))
                           (rule "seqLengthUnfold" (formula "14") (term "1") (inst "#vNew=x_15"))
                           (rule "variableDeclarationAssign" (formula "14") (term "1"))
                           (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_15"))
                           (rule "assignment_read_attribute_this" (formula "14"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "dismissNonSelectedField" (formula "14") (term "0,1,0"))
                           (rule "dismissNonSelectedField" (formula "14") (term "0,1,0"))
                           (rule "dismissNonSelectedField" (formula "14") (term "0,1,0"))
                           (rule "replaceKnownSelect_taclet000010000_6" (formula "14") (term "0,1,0"))
                           (rule "assignment" (formula "14") (term "1"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "assignment" (formula "14") (term "1"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "assignment_write_attribute_this" (formula "14"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "methodCallReturn" (formula "14") (term "1"))
                           (rule "assignment" (formula "14") (term "1"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "methodCallEmpty" (formula "14") (term "1"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "emptyModality" (formula "14") (term "1"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "notRight" (formula "14") (userinteraction))
                           (rule "impLeft" (formula "1") (userinteraction))
                           (branch "Case 1"
                              (rule "orRight" (formula "14") (userinteraction))
                              (rule "cut_direct" (formula "1") (term "0,0") (userinteraction))
                              (branch "CUT: (self, LinkedListIterator::$to_see) in self.list.footprint | (self, LinkedListIterator::$to_see) in self.footprint TRUE"
                                 (rule "cut_direct" (formula "3") (term "0,0") (userinteraction))
                                 (branch "CUT: (self, LinkedListIterator::$seen) in self.list.footprint | (self, LinkedListIterator::$seen) in self.footprint TRUE"
                                    (rule "cut_direct" (formula "5") (term "0,0") (userinteraction))
                                    (branch "CUT: (self, LinkedListIterator::$index) in self.list.footprint | (self, LinkedListIterator::$index) in self.footprint TRUE"
                                        (builtin "One Step Simplification" (formula "2"))
                                        (builtin "One Step Simplification" (formula "4"))
                                        (builtin "One Step Simplification" (formula "6"))
                                       (rule "cut_direct" (formula "8") (term "0,0,0,0,0") (userinteraction))
                                       (branch "CUT: (LinkedListIterator_curr_0<<selectSK>>, Node::$value) in self.list.footprint TRUE"
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "dismissNonSelectedField" (formula "19") (term "0"))
                                          (rule "dismissNonSelectedField" (formula "19") (term "0"))
                                          (rule "dismissNonSelectedField" (formula "19") (term "0"))
                                          (rule "dismissNonSelectedField" (formula "19") (term "0"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "orRight" (formula "19"))
                                          (rule "cut_direct" (formula "7") (term "0,0,0,0,0") (userinteraction))
                                          (branch "CUT: (LinkedListIterator_curr_0<<selectSK>>, Node::$next) in self.list.footprint TRUE"
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "cut_direct" (formula "11") (term "1,0,0") (userinteraction))
                                             (branch "CUT: (self, LinkedListIterator::$curr) in self.footprint TRUE"
                                                 (builtin "One Step Simplification" (formula "12"))
                                                (rule "ifthenelse_split" (formula "10") (term "0") (userinteraction))
                                                (branch " !LinkedListIterator_curr_0<<selectSK>> = null & ! LinkedListIterator_curr_0<<selectSK>>.<created> = TRUE TRUE"
                                                   (rule "andLeft" (formula "10") (userinteraction))
                                                   (rule "applyEqReverse" (formula "24") (term "1,0") (ifseqformula "12") (userinteraction))
                                                   (rule "applyEqReverse" (formula "24") (term "1,1,0") (ifseqformula "14") (userinteraction))
                                                   (rule "applyEqReverse" (formula "23") (term "1,0") (ifseqformula "12") (userinteraction))
                                                   (rule "applyEqReverse" (formula "22") (term "0") (ifseqformula "12") (userinteraction))
                                                   (rule "applyEqReverse" (formula "22") (term "1,0") (ifseqformula "14") (userinteraction))
                                                   (rule "applyEqReverse" (formula "12") (term "1,0") (ifseqformula "14") (userinteraction))
                                                   (rule "applyEqReverse" (formula "23") (term "1,1,0") (ifseqformula "14") (userinteraction))
                                                   (rule "applyEqReverse" (formula "11") (term "1,0,0") (ifseqformula "14") (userinteraction))
                                                   (rule "notLeft" (formula "11") (userinteraction))
                                                   (rule "Class_invariant_axiom_for_LinkedListIterator" (formula "20") (inst "i=i") (inst "f=f") (inst "i_0=i_0") (inst "f_0=f_0") (userinteraction))
                                                   (rule "andLeft" (formula "20"))
                                                   (rule "notLeft" (formula "20"))
                                                   (rule "andLeft" (formula "20"))
                                                   (rule "andLeft" (formula "20"))
                                                   (rule "andLeft" (formula "20"))
                                                   (rule "andLeft" (formula "20"))
                                                   (rule "andLeft" (formula "20"))
                                                   (rule "andLeft" (formula "20"))
                                                   (rule "andLeft" (formula "20"))
                                                   (rule "referencedObjectIsCreatedRight" (formula "32") (ifseqformula "30"))
                                                   (rule "close" (formula "32") (ifseqformula "15"))
                                                )
                                                (branch " !LinkedListIterator_curr_0<<selectSK>> = null & ! LinkedListIterator_curr_0<<selectSK>>.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRightEQ" (formula "22") (ifseqformula "10") (ifseqformula "21"))
                                                   (rule "close" (formula "22") (ifseqformula "13"))
                                                )
                                             )
                                             (branch "CUT: (self, LinkedListIterator::$curr) in self.footprint FALSE"
                                                (rule "JML_represents_clause_for_LinkedListIterator_footprint" (formula "19") (term "2") (userinteraction))
                                                (rule "elementOfUnion" (formula "19"))
                                                (rule "orRight" (formula "19"))
                                                (rule "elementOfSingleton" (formula "20"))
                                                 (builtin "One Step Simplification" (formula "20"))
                                                (rule "false_right" (formula "20"))
                                                (rule "elementOfUnion" (formula "19"))
                                                (rule "orRight" (formula "19"))
                                                (rule "elementOfSingleton" (formula "20"))
                                                 (builtin "One Step Simplification" (formula "20"))
                                                (rule "false_right" (formula "20"))
                                                (rule "elementOfUnion" (formula "19"))
                                                (rule "orRight" (formula "19"))
                                                (rule "elementOfSingleton" (formula "20"))
                                                 (builtin "One Step Simplification" (formula "20"))
                                                (rule "false_right" (formula "20"))
                                                (rule "elementOfUnion" (formula "19"))
                                                (rule "orRight" (formula "19"))
                                                (rule "elementOfSingleton" (formula "20"))
                                                 (builtin "One Step Simplification" (formula "20"))
                                                (rule "closeTrue" (formula "20"))
                                             )
                                          )
                                          (branch "CUT: (LinkedListIterator_curr_0<<selectSK>>, Node::$next) in self.list.footprint FALSE"
                                             (rule "JML_represents_clause_for_LinkedList_footprint" (formula "18") (term "2") (inst "i=i") (userinteraction))
                                             (rule "elementOfUnion" (formula "18") (userinteraction))
                                             (rule "orRight" (formula "18") (userinteraction))
                                             (rule "hide_right" (formula "18") (userinteraction))
                                             (rule "elementOfInfiniteUnion" (formula "18") (userinteraction))
                                             (rule "applyEqReverse" (formula "18") (term "0,0") (ifseqformula "10") (userinteraction))
                                             (rule "cut_direct" (formula "18") (term "1,0,0,0") (userinteraction))
                                             (branch "CUT: (self, LinkedListIterator::$curr) in self.footprint TRUE"
                                                 (builtin "One Step Simplification" (formula "19"))
                                                (rule "exRight" (formula "19") (inst "t=int::select(heap, self, LinkedListIterator::$index)") (userinteraction))
                                                (rule "hide_right" (formula "20") (userinteraction))
                                                (rule "Class_invariant_axiom_for_LinkedListIterator" (formula "18") (inst "i=i") (inst "f=f") (inst "i_0=i_0") (inst "f_0=f_0") (userinteraction))
                                                (rule "andLeft" (formula "18"))
                                                (rule "notLeft" (formula "18"))
                                                (rule "andLeft" (formula "18"))
                                                (rule "andLeft" (formula "18"))
                                                (rule "andLeft" (formula "18"))
                                                (rule "andLeft" (formula "18"))
                                                (rule "andLeft" (formula "18"))
                                                (rule "andLeft" (formula "18"))
                                                (rule "andLeft" (formula "18"))
                                                (rule "ifthenelse_split_for" (formula "24") (userinteraction))
                                                (branch "self.index < self.list.values.length TRUE"
                                                   (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "25") (userinteraction))
                                                   (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "18") (userinteraction))
                                                   (rule "Class_invariant_axiom_for_LinkedList" (formula "26") (inst "i=i") (inst "i_0=i_0") (inst "j=j") (inst "i_1=i_1") (inst "i_2=i_2") (inst "f=f") (inst "i_3=i_3") (inst "n=n_6") (userinteraction))
                                                    (builtin "One Step Simplification" (formula "26"))
                                                   (rule "andLeft" (formula "26"))
                                                   (rule "andLeft" (formula "26"))
                                                   (rule "andLeft" (formula "26"))
                                                   (rule "andLeft" (formula "26"))
                                                   (rule "andLeft" (formula "26"))
                                                   (rule "andLeft" (formula "26"))
                                                   (rule "andLeft" (formula "26"))
                                                   (rule "andLeft" (formula "26"))
                                                   (rule "applyEq" (formula "36") (term "1,1,0") (ifseqformula "27") (userinteraction))
                                                   (rule "replace_known_left" (formula "36") (term "1,0") (ifseqformula "24") (userinteraction))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "closeTrue" (formula "36"))
                                                )
                                                (branch "self.index < self.list.values.length FALSE"
                                                    (builtin "One Step Simplification" (formula "8"))
                                                   (rule "hideAuxiliaryEq" (formula "5"))
                                                   (rule "hideAuxiliaryEq" (formula "3"))
                                                   (rule "hideAuxiliaryEq" (formula "5"))
                                                   (rule "eqSymm" (formula "20"))
                                                   (rule "eqSymm" (formula "19"))
                                                   (rule "eqSymm" (formula "25") (term "1"))
                                                   (rule "replace_known_left" (formula "8") (term "1,0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "8"))
                                                   (rule "applyEqReverse" (formula "7") (term "1,1,0") (ifseqformula "8"))
                                                   (rule "applyEqReverse" (formula "5") (term "0,0,0,0,0") (ifseqformula "8"))
                                                   (rule "applyEqReverse" (formula "5") (term "1,0,0,1,1,0,0") (ifseqformula "8"))
                                                   (rule "applyEqReverse" (formula "7") (term "1,2,0") (ifseqformula "8"))
                                                   (rule "applyEqReverse" (formula "5") (term "1,2,0") (ifseqformula "8"))
                                                   (rule "applyEqReverse" (formula "6") (term "0") (ifseqformula "8"))
                                                   (rule "applyEqReverse" (formula "5") (term "1,1,0") (ifseqformula "8"))
                                                   (rule "applyEqReverse" (formula "7") (term "0,0,0,0,0") (ifseqformula "8"))
                                                   (rule "applyEqReverse" (formula "5") (term "0,0,0,1,0,0") (ifseqformula "8"))
                                                   (rule "applyEqReverse" (formula "7") (term "1,0,0,1,0,0") (ifseqformula "8"))
                                                   (rule "hideAuxiliaryEq" (formula "8"))
                                                   (rule "replace_known_left" (formula "7") (term "0,0,0,0") (ifseqformula "20"))
                                                    (builtin "One Step Simplification" (formula "7"))
                                                   (rule "referencedObjectIsCreatedRightEQ" (formula "26") (ifseqformula "7") (ifseqformula "25"))
                                                   (rule "close" (formula "26") (ifseqformula "8"))
                                                )
                                             )
                                             (branch "CUT: (self, LinkedListIterator::$curr) in self.footprint FALSE"
                                                (rule "JML_represents_clause_for_LinkedListIterator_footprint" (formula "18") (term "2") (userinteraction))
                                                (rule "elementOfUnion" (formula "18"))
                                                (rule "orRight" (formula "18"))
                                                (rule "elementOfSingleton" (formula "19"))
                                                 (builtin "One Step Simplification" (formula "19"))
                                                (rule "false_right" (formula "19"))
                                                (rule "elementOfUnion" (formula "18"))
                                                (rule "orRight" (formula "18"))
                                                (rule "elementOfSingleton" (formula "19"))
                                                 (builtin "One Step Simplification" (formula "19"))
                                                (rule "false_right" (formula "19"))
                                                (rule "elementOfUnion" (formula "18"))
                                                (rule "orRight" (formula "18"))
                                                (rule "elementOfSingleton" (formula "19"))
                                                 (builtin "One Step Simplification" (formula "19"))
                                                (rule "false_right" (formula "19"))
                                                (rule "elementOfUnion" (formula "18"))
                                                (rule "orRight" (formula "18"))
                                                (rule "elementOfSingleton" (formula "19"))
                                                 (builtin "One Step Simplification" (formula "19"))
                                                (rule "closeTrue" (formula "19"))
                                             )
                                          )
                                       )
                                       (branch "CUT: (LinkedListIterator_curr_0<<selectSK>>, Node::$value) in self.list.footprint FALSE"
                                          (rule "applyEqReverse" (formula "17") (term "0") (ifseqformula "9") (userinteraction))
                                          (rule "cut_direct" (formula "17") (term "1,0,0") (userinteraction))
                                          (branch "CUT: (self, LinkedListIterator::$curr) in self.footprint TRUE"
                                              (builtin "One Step Simplification" (formula "18"))
                                             (rule "JML_represents_clause_for_LinkedList_footprint" (formula "18") (term "2") (inst "i=i") (userinteraction))
                                             (rule "elementOfUnion" (formula "18") (userinteraction))
                                             (rule "orRight" (formula "18") (userinteraction))
                                             (rule "elementOfInfiniteUnion" (formula "19") (userinteraction))
                                             (rule "hide_right" (formula "18") (userinteraction))
                                             (rule "hide_right" (formula "20") (userinteraction))
                                             (rule "Class_invariant_axiom_for_LinkedListIterator" (formula "17") (inst "i=i") (inst "f=f") (inst "i_0=i_0") (inst "f_0=f_0") (userinteraction))
                                             (rule "andLeft" (formula "17"))
                                             (rule "notLeft" (formula "17"))
                                             (rule "andLeft" (formula "17"))
                                             (rule "andLeft" (formula "17"))
                                             (rule "andLeft" (formula "17"))
                                             (rule "andLeft" (formula "17"))
                                             (rule "andLeft" (formula "17"))
                                             (rule "andLeft" (formula "17"))
                                             (rule "andLeft" (formula "17"))
                                             (rule "ifthenelse_split_for" (formula "23") (userinteraction))
                                             (branch "self.index < self.list.values.length TRUE"
                                                (rule "exRight" (formula "27") (inst "t=int::select(heap, self, LinkedListIterator::$index)") (userinteraction))
                                                (rule "hide_right" (formula "28") (userinteraction))
                                                 (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "17")) (ifInst ""  (formula "24")))
                                                (rule "Class_invariant_axiom_for_LinkedList" (formula "25") (inst "i=i") (inst "i_0=i_0") (inst "j=j") (inst "i_1=i_1") (inst "i_2=i_2") (inst "f=f") (inst "i_3=i_3") (inst "n=n_6") (userinteraction))
                                                 (builtin "One Step Simplification" (formula "25"))
                                                (rule "andLeft" (formula "25"))
                                                (rule "andLeft" (formula "25"))
                                                (rule "andLeft" (formula "25"))
                                                (rule "andLeft" (formula "25"))
                                                (rule "andLeft" (formula "25"))
                                                (rule "andLeft" (formula "25"))
                                                (rule "andLeft" (formula "25"))
                                                (rule "andLeft" (formula "25"))
                                                (rule "applyEq" (formula "35") (term "1") (ifseqformula "26") (userinteraction))
                                                (rule "close" (formula "35") (ifseqformula "23") (userinteraction))
                                             )
                                             (branch "self.index < self.list.values.length FALSE"
                                                 (builtin "One Step Simplification" (formula "9"))
                                                 (builtin "One Step Simplification" (formula "27"))
                                                (rule "hideAuxiliaryEq" (formula "5"))
                                                (rule "hideAuxiliaryEq" (formula "6"))
                                                (rule "hideAuxiliaryEq" (formula "3"))
                                                (rule "eqSymm" (formula "19"))
                                                (rule "eqSymm" (formula "18"))
                                                (rule "eqSymm" (formula "24") (term "1,0"))
                                                (rule "replace_known_left" (formula "7") (term "1,0,0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "7"))
                                                (rule "applyEqReverse" (formula "5") (term "1,0,0,1,1,0,0") (ifseqformula "7"))
                                                (rule "applyEqReverse" (formula "5") (term "0,0,0,1,0,0") (ifseqformula "7"))
                                                (rule "applyEqReverse" (formula "6") (term "0,0,0,1,0,0") (ifseqformula "7"))
                                                (rule "applyEqReverse" (formula "5") (term "0,1,0,0,0,0") (ifseqformula "7"))
                                                (rule "applyEqReverse" (formula "6") (term "1,1,0") (ifseqformula "7"))
                                                (rule "applyEqReverse" (formula "5") (term "1,2,0") (ifseqformula "7"))
                                                (rule "applyEqReverse" (formula "6") (term "1,0,0,1,1,0,0") (ifseqformula "7"))
                                                (rule "applyEqReverse" (formula "6") (term "1,2,0") (ifseqformula "7"))
                                                (rule "applyEqReverse" (formula "5") (term "1,1,0") (ifseqformula "7"))
                                                (rule "applyEqReverse" (formula "5") (term "0,0,0,0,0,0") (ifseqformula "7"))
                                                (rule "applyEqReverse" (formula "6") (term "0,0,0,0,0") (ifseqformula "7"))
                                                (rule "hideAuxiliaryEq" (formula "7"))
                                                (rule "replace_known_left" (formula "5") (term "0,0,1,0,0") (ifseqformula "19"))
                                                 (builtin "One Step Simplification" (formula "5"))
                                                (rule "replace_known_left" (formula "6") (term "0,0,1,0,0") (ifseqformula "19"))
                                                 (builtin "One Step Simplification" (formula "6"))
                                                (rule "castedGetAny" (formula "23") (term "0,1,0"))
                                                (rule "inEqSimp_ltRight" (formula "21"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                                (rule "polySimp_addComm0" (formula "1") (term "0"))
                                                (rule "inEqSimp_gtToGeq" (formula "13"))
                                                (rule "times_zero_1" (formula "13") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "13") (term "0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                                                (rule "ifthenelse_negated" (formula "6") (term "0"))
                                                (rule "ifthenelse_negated" (formula "7") (term "0"))
                                                (rule "lenOfSeqSubEQ" (formula "17") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                                                (rule "polySimp_elimSub" (formula "17") (term "1,0,1,0,0,1,0,0"))
                                                (rule "polySimp_addComm0" (formula "17") (term "1,0,1,0,0,1,0,0"))
                                                (rule "lenOfSeqSubEQ" (formula "13") (term "1,0") (ifseqformula "19"))
                                                (rule "polySimp_elimSub" (formula "13") (term "1,1,0"))
                                                (rule "polySimp_addComm0" (formula "13") (term "1,1,0"))
                                                (rule "lenOfSeqSubEQ" (formula "16") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
                                                (rule "polySimp_elimSub" (formula "16") (term "1,0,1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "16") (term "1,1,0,1,0,0,1,0,0"))
                                                (rule "add_zero_right" (formula "16") (term "1,0,1,0,0,1,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "15"))
                                                (rule "inEqSimp_commuteLeq" (formula "14"))
                                                (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,1,0,0,1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,1,0,0,1,0,0"))
                                                (rule "polySimp_addComm1" (formula "17") (term "0,0,0,1,0,0,1,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_addComm1" (formula "13") (term "0,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,0,0,1,0,0"))
                                                (rule "add_zero_right" (formula "16") (term "0,0,0,1,0,0,1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0,0,1,0,0"))
                                                (rule "applyEq" (formula "6") (term "1,1,0") (ifseqformula "20"))
                                                (rule "applyEq" (formula "23") (term "1,1,0") (ifseqformula "20"))
                                                (rule "applyEq" (formula "7") (term "0,0,0") (ifseqformula "20"))
                                                (rule "applyEq" (formula "6") (term "0,1,0,0") (ifseqformula "20"))
                                                (rule "applyEq" (formula "6") (term "1,2,0") (ifseqformula "20"))
                                                (rule "applyEq" (formula "6") (term "0,0,0,0") (ifseqformula "20"))
                                                (rule "applyEq" (formula "7") (term "1,1,0") (ifseqformula "20"))
                                                (rule "applyEq" (formula "7") (term "1,2,0") (ifseqformula "20"))
                                                (rule "applyEq" (formula "26") (term "1,0") (ifseqformula "20"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                                                (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                                                (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                                                (rule "mul_literals" (formula "13") (term "1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                                                (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,1,1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "17") (term "0,0,1,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "17") (term "0,0,1,1,1,0,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0"))
                                                (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0"))
                                                (rule "polySimp_elimOne" (formula "13") (term "0,0,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,1,1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "16") (term "0,0,1,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "16") (term "0,0,1,1,1,0,0"))
                                                (rule "inEqSimp_contradInEq0" (formula "17") (term "0,1,1,1,0,0") (ifseqformula "1"))
                                                (rule "inEqSimp_homoInEq1" (formula "17") (term "0,0,1,1,1,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,0,1,1,1,0,0"))
                                                (rule "add_literals" (formula "17") (term "1,1,0,0,0,1,1,1,0,0"))
                                                (rule "times_zero_1" (formula "17") (term "1,0,0,0,1,1,1,0,0"))
                                                (rule "add_literals" (formula "17") (term "0,0,0,1,1,1,0,0"))
                                                (rule "leq_literals" (formula "17") (term "0,0,1,1,1,0,0"))
                                                 (builtin "One Step Simplification" (formula "17"))
                                                (rule "add_zero_right" (formula "17") (term "1,1,0,0"))
                                                (rule "inEqSimp_contradInEq0" (formula "13") (term "0,0") (ifseqformula "1"))
                                                (rule "inEqSimp_homoInEq1" (formula "13") (term "0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,0,0"))
                                                (rule "add_literals" (formula "13") (term "1,1,0,0,0,0"))
                                                (rule "times_zero_1" (formula "13") (term "1,0,0,0,0"))
                                                (rule "add_literals" (formula "13") (term "0,0,0,0"))
                                                (rule "leq_literals" (formula "13") (term "0,0,0"))
                                                 (builtin "One Step Simplification" (formula "13"))
                                                (rule "qeq_literals" (formula "13"))
                                                (rule "closeFalse" (formula "13"))
                                             )
                                          )
                                          (branch "CUT: (self, LinkedListIterator::$curr) in self.footprint FALSE"
                                             (rule "JML_represents_clause_for_LinkedListIterator_footprint" (formula "17") (term "2") (userinteraction))
                                             (rule "elementOfUnion" (formula "17"))
                                             (rule "orRight" (formula "17"))
                                             (rule "elementOfSingleton" (formula "18"))
                                              (builtin "One Step Simplification" (formula "18"))
                                             (rule "false_right" (formula "18"))
                                             (rule "elementOfUnion" (formula "17"))
                                             (rule "orRight" (formula "17"))
                                             (rule "elementOfSingleton" (formula "18"))
                                              (builtin "One Step Simplification" (formula "18"))
                                             (rule "false_right" (formula "18"))
                                             (rule "elementOfUnion" (formula "17"))
                                             (rule "orRight" (formula "17"))
                                             (rule "elementOfSingleton" (formula "18"))
                                              (builtin "One Step Simplification" (formula "18"))
                                             (rule "false_right" (formula "18"))
                                             (rule "elementOfUnion" (formula "17"))
                                             (rule "orRight" (formula "17"))
                                             (rule "elementOfSingleton" (formula "18"))
                                              (builtin "One Step Simplification" (formula "18"))
                                             (rule "closeTrue" (formula "18"))
                                          )
                                       )
                                    )
                                    (branch "CUT: (self, LinkedListIterator::$index) in self.list.footprint | (self, LinkedListIterator::$index) in self.footprint FALSE"
                                       (rule "orRight" (formula "16") (userinteraction))
                                       (rule "JML_represents_clause_for_LinkedListIterator_footprint" (formula "17") (term "2") (userinteraction))
                                       (rule "elementOfUnion" (formula "17"))
                                       (rule "orRight" (formula "17"))
                                       (rule "elementOfSingleton" (formula "18"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "false_right" (formula "18"))
                                       (rule "elementOfUnion" (formula "17"))
                                       (rule "orRight" (formula "17"))
                                       (rule "elementOfSingleton" (formula "18"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "false_right" (formula "18"))
                                       (rule "elementOfUnion" (formula "17"))
                                       (rule "orRight" (formula "17"))
                                       (rule "elementOfSingleton" (formula "18"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "closeTrue" (formula "18"))
                                    )
                                 )
                                 (branch "CUT: (self, LinkedListIterator::$seen) in self.list.footprint | (self, LinkedListIterator::$seen) in self.footprint FALSE"
                                    (rule "orRight" (formula "15") (userinteraction))
                                    (rule "JML_represents_clause_for_LinkedListIterator_footprint" (formula "16") (term "2") (userinteraction))
                                    (rule "elementOfUnion" (formula "16"))
                                    (rule "orRight" (formula "16"))
                                    (rule "elementOfSingleton" (formula "17"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "false_right" (formula "17"))
                                    (rule "elementOfUnion" (formula "16"))
                                    (rule "orRight" (formula "16"))
                                    (rule "elementOfSingleton" (formula "17"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "closeTrue" (formula "17"))
                                 )
                              )
                              (branch "CUT: (self, LinkedListIterator::$to_see) in self.list.footprint | (self, LinkedListIterator::$to_see) in self.footprint FALSE"
                                 (rule "orRight" (formula "14") (userinteraction))
                                 (rule "JML_represents_clause_for_LinkedListIterator_footprint" (formula "15") (term "2") (userinteraction))
                                 (rule "elementOfUnion" (formula "15"))
                                 (rule "orRight" (formula "15"))
                                 (rule "elementOfSingleton" (formula "16"))
                                  (builtin "One Step Simplification" (formula "16"))
                                 (rule "closeTrue" (formula "16"))
                              )
                           )
                           (branch "Case 2"
                              (rule "cut_direct" (formula "2") (term "0,0") (userinteraction))
                              (branch "CUT: (self_25, LinkedListIterator::$to_see) in self_25.list.footprint | (self_25, LinkedListIterator::$to_see) in self_25.footprint TRUE"
                                 (rule "cut_direct" (formula "4") (term "0,0") (userinteraction))
                                 (branch "CUT: (self_25, LinkedListIterator::$seen) in self_25.list.footprint | (self_25, LinkedListIterator::$seen) in self_25.footprint TRUE"
                                    (rule "cut_direct" (formula "6") (term "0,0") (userinteraction))
                                    (branch "CUT: (self_25, LinkedListIterator::$index) in self_25.list.footprint | (self_25, LinkedListIterator::$index) in self_25.footprint TRUE"
                                        (builtin "One Step Simplification" (formula "3"))
                                        (builtin "One Step Simplification" (formula "5"))
                                        (builtin "One Step Simplification" (formula "7"))
                                       (rule "applyEqRigid" (formula "19") (term "1") (ifseqformula "1") (userinteraction))
                                       (rule "applyEqReverse" (formula "19") (term "1") (ifseqformula "9") (userinteraction))
                                       (rule "cut_direct" (formula "19") (term "0,0,0,0,1") (userinteraction))
                                       (branch "CUT: (LinkedListIterator_curr_0<<selectSK>>, Node::$value) in self_25.list.footprint TRUE"
                                           (builtin "One Step Simplification" (formula "20"))
                                          (rule "applyEqReverse" (formula "20") (term "1,2,1") (ifseqformula "11") (userinteraction))
                                          (rule "applyEqReverse" (formula "20") (term "1,1,1") (ifseqformula "11") (userinteraction))
                                          (rule "cut_direct" (formula "20") (term "0,1,1,1") (userinteraction))
                                          (branch "CUT: (self_25, LinkedListIterator::$curr) in self_25.list.footprint | (self_25, LinkedListIterator::$curr) in self_25.footprint TRUE"
                                             (rule "cut_direct" (formula "21") (term "0,1,2,1") (userinteraction))
                                             (branch "CUT: (self_25, LinkedListIterator::$curr) in self_25.list.footprint | (self_25, LinkedListIterator::$curr) in self_25.footprint TRUE"
                                                 (builtin "One Step Simplification" (formula "21"))
                                                (rule "applyEqReverse" (formula "21") (term "0,0,0,0,1") (ifseqformula "12") (userinteraction))
                                                (rule "replace_known_left" (formula "21") (term "0,0,0,0,0,1") (ifseqformula "1") (userinteraction))
                                                 (builtin "One Step Simplification" (formula "21"))
                                                (rule "ifthenelse_split" (formula "21") (term "1") (userinteraction))
                                                (branch " !self_25.curr = null & ! LinkedListIterator_curr_0<<selectSK>>.<created> = TRUE TRUE"
                                                   (rule "pullOutSelect" (formula "22") (term "1") (inst "selectSK=Node_value_1") (userinteraction))
                                                   (rule "applyEqReverse" (formula "23") (term "1") (ifseqformula "1") (userinteraction))
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "notLeft" (formula "2"))
                                                   (rule "notLeft" (formula "2"))
                                                   (rule "applyEqReverse" (formula "12") (term "1") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "6"))
                                                   (rule "hideAuxiliaryEq" (formula "9"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "6"))
                                                   (rule "hideAuxiliaryEq" (formula "3"))
                                                   (rule "eqSymm" (formula "19"))
                                                   (rule "replace_known_right" (formula "6") (term "0,1,1,0,0") (ifseqformula "16"))
                                                    (builtin "One Step Simplification" (formula "6"))
                                                   (rule "replace_known_left" (formula "7") (term "0,0,0,0,0") (ifseqformula "2"))
                                                    (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "16")))
                                                   (rule "replace_known_left" (formula "8") (term "0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "8"))
                                                   (rule "applyEqReverse" (formula "16") (term "1,0") (ifseqformula "8"))
                                                   (rule "referencedObjectIsCreatedRight" (formula "16") (ifseqformula "17"))
                                                   (rule "close" (formula "16") (ifseqformula "9"))
                                                )
                                                (branch " !self_25.curr = null & ! LinkedListIterator_curr_0<<selectSK>>.<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "22"))
                                                   (rule "closeTrue" (formula "22"))
                                                )
                                             )
                                             (branch "CUT: (self_25, LinkedListIterator::$curr) in self_25.list.footprint | (self_25, LinkedListIterator::$curr) in self_25.footprint FALSE"
                                                 (builtin "SMTRule")
                                             )
                                          )
                                          (branch "CUT: (self_25, LinkedListIterator::$curr) in self_25.list.footprint | (self_25, LinkedListIterator::$curr) in self_25.footprint FALSE"
                                             (rule "JML_represents_clause_for_LinkedList_footprint" (formula "1") (term "2") (inst "i=i") (userinteraction))
                                             (rule "elementOfUnion" (formula "1") (userinteraction))
                                             (rule "elementOfUnion" (formula "1") (term "0") (userinteraction))
                                             (rule "elementOfUnion" (formula "1") (term "0,0") (userinteraction))
                                             (rule "elementOfUnion" (formula "1") (term "0,0,0") (userinteraction))
                                             (rule "elementOfInfiniteUnion" (formula "1") (term "1") (userinteraction))
                                             (rule "elementOfUnion" (formula "1") (term "0,0,0,0") (userinteraction))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "orLeft" (formula "1"))
                                             (branch " (LinkedListIterator_curr_0<<selectSK>>, Node::$value) in {(self_25.list, LinkedList::$size)} | (LinkedListIterator_curr_0<<selectSK>>, Node::$value) in {(self_25.list, LinkedList::$head)} | (LinkedListIterator_curr_0<<selectSK>>, Node::$value) in {(self_25.list, LinkedList::$tail)} | (LinkedListIterator_curr_0<<selectSK>>, Node::$value) in {(self_25.list, LinkedList::$nodeList)} | (LinkedListIterator_curr_0<<selectSK>>, Node::$value) in {(self_25.list, LinkedList::$values)}"
                                                (rule "orLeft" (formula "1"))
                                                (branch " (LinkedListIterator_curr_0<<selectSK>>, Node::$value) in {(self_25.list, LinkedList::$size)} | (LinkedListIterator_curr_0<<selectSK>>, Node::$value) in {(self_25.list, LinkedList::$head)} | (LinkedListIterator_curr_0<<selectSK>>, Node::$value) in {(self_25.list, LinkedList::$tail)} | (LinkedListIterator_curr_0<<selectSK>>, Node::$value) in {(self_25.list, LinkedList::$nodeList)}"
                                                   (rule "orLeft" (formula "1"))
                                                   (branch " (LinkedListIterator_curr_0<<selectSK>>, Node::$value) in {(self_25.list, LinkedList::$size)} | (LinkedListIterator_curr_0<<selectSK>>, Node::$value) in {(self_25.list, LinkedList::$head)} | (LinkedListIterator_curr_0<<selectSK>>, Node::$value) in {(self_25.list, LinkedList::$tail)}"
                                                      (rule "orLeft" (formula "1"))
                                                      (branch " (LinkedListIterator_curr_0<<selectSK>>, Node::$value) in {(self_25.list, LinkedList::$size)} | (LinkedListIterator_curr_0<<selectSK>>, Node::$value) in {(self_25.list, LinkedList::$head)}"
                                                         (rule "orLeft" (formula "1"))
                                                         (branch "(LinkedListIterator_curr_0<<selectSK>>, Node::$value) in {(self_25.list, LinkedList::$size)}"
                                                             (builtin "SMTRule")
                                                         )
                                                         (branch "(LinkedListIterator_curr_0<<selectSK>>, Node::$value) in {(self_25.list, LinkedList::$head)}"
                                                             (builtin "SMTRule")
                                                         )
                                                      )
                                                      (branch "(LinkedListIterator_curr_0<<selectSK>>, Node::$value) in {(self_25.list, LinkedList::$tail)}"
                                                          (builtin "SMTRule")
                                                      )
                                                   )
                                                   (branch "(LinkedListIterator_curr_0<<selectSK>>, Node::$value) in {(self_25.list, LinkedList::$nodeList)}"
                                                       (builtin "SMTRule")
                                                   )
                                                )
                                                (branch "(LinkedListIterator_curr_0<<selectSK>>, Node::$value) in {(self_25.list, LinkedList::$values)}"
                                                    (builtin "SMTRule")
                                                )
                                             )
                                             (branch "exists int i; ( 0 <= i & i < self_25.list.nodeList.length & LinkedListIterator_curr_0<<selectSK>> = (Node)(self_25.list.nodeList[i]))"
                                                (rule "exLeft" (formula "1") (inst "sk=i_0") (userinteraction))
                                                (rule "andLeft" (formula "1") (userinteraction))
                                                (rule "andLeft" (formula "1") (userinteraction))
                                                (rule "applyEqReverse" (formula "3") (term "0") (ifseqformula "13") (userinteraction))
                                                (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "22") (userinteraction))
                                                 (builtin "One Step Simplification" (formula "3"))
                                                 (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "22")))
                                                (rule "orRight" (formula "22") (userinteraction))
                                                (rule "JML_represents_clause_for_LinkedListIterator_footprint" (formula "23") (term "2") (userinteraction))
                                                (rule "elementOfUnion" (formula "23"))
                                                (rule "orRight" (formula "23"))
                                                (rule "elementOfSingleton" (formula "24"))
                                                 (builtin "One Step Simplification" (formula "24"))
                                                (rule "false_right" (formula "24"))
                                                (rule "elementOfUnion" (formula "23"))
                                                (rule "orRight" (formula "23"))
                                                (rule "elementOfSingleton" (formula "24"))
                                                 (builtin "One Step Simplification" (formula "24"))
                                                (rule "false_right" (formula "24"))
                                                (rule "elementOfUnion" (formula "23"))
                                                (rule "orRight" (formula "23"))
                                                (rule "elementOfSingleton" (formula "24"))
                                                 (builtin "One Step Simplification" (formula "24"))
                                                (rule "false_right" (formula "24"))
                                                (rule "elementOfUnion" (formula "23"))
                                                (rule "orRight" (formula "23"))
                                                (rule "elementOfSingleton" (formula "24"))
                                                 (builtin "One Step Simplification" (formula "24"))
                                                (rule "closeTrue" (formula "24"))
                                             )
                                          )
                                       )
                                       (branch "CUT: (LinkedListIterator_curr_0<<selectSK>>, Node::$value) in self_25.list.footprint FALSE"
                                          (rule "hide_right" (formula "20") (userinteraction))
                                          (rule "JML_represents_clause_for_LinkedList_footprint" (formula "19") (term "2") (inst "i=i") (userinteraction))
                                          (rule "elementOfUnion" (formula "19") (userinteraction))
                                          (rule "orRight" (formula "19") (userinteraction))
                                          (rule "hide_right" (formula "19") (userinteraction))
                                          (rule "elementOfInfiniteUnion" (formula "19") (userinteraction))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "applyEqReverse" (formula "19") (term "0,1,0") (ifseqformula "10") (userinteraction))
                                          (rule "ifthenelse_split" (formula "19") (term "0,1,0") (userinteraction))
                                          (branch " (self_25, LinkedListIterator::$curr) in self_25.list.footprint | (self_25, LinkedListIterator::$curr) in self_25.footprint TRUE"
                                             (rule "Class_invariant_axiom_for_LinkedListIterator" (formula "18") (inst "f_0=f_0") (inst "i_0=i_0") (inst "f=f") (inst "i=i") (userinteraction))
                                             (rule "andLeft" (formula "18"))
                                             (rule "notLeft" (formula "18"))
                                             (rule "andLeft" (formula "18"))
                                             (rule "andLeft" (formula "18"))
                                             (rule "andLeft" (formula "18"))
                                             (rule "andLeft" (formula "18"))
                                             (rule "andLeft" (formula "18"))
                                             (rule "andLeft" (formula "18"))
                                             (rule "andLeft" (formula "18"))
                                             (rule "ifthenelse_split_for" (formula "24") (userinteraction))
                                             (branch "self.index < self.list.values.length TRUE"
                                                (rule "exRight" (formula "29") (inst "t=int::select(heap, self, LinkedListIterator::$index)") (userinteraction))
                                                (rule "hide_right" (formula "30") (userinteraction))
                                                (rule "replace_known_left" (formula "29") (term "1") (ifseqformula "25") (userinteraction))
                                                (rule "replace_known_left" (formula "29") (term "0,0") (ifseqformula "18") (userinteraction))
                                                (rule "Class_invariant_axiom_for_LinkedList" (formula "26") (inst "i=i") (inst "i_0=i_0") (inst "j=j") (inst "i_1=i_1") (inst "i_2=i_2") (inst "f=f") (inst "i_3=i_3") (inst "n=n_6") (userinteraction))
                                                 (builtin "One Step Simplification" (formula "26"))
                                                (rule "andLeft" (formula "26"))
                                                (rule "andLeft" (formula "26"))
                                                (rule "andLeft" (formula "26"))
                                                (rule "andLeft" (formula "26"))
                                                (rule "andLeft" (formula "26"))
                                                (rule "andLeft" (formula "26"))
                                                (rule "andLeft" (formula "26"))
                                                (rule "andLeft" (formula "26"))
                                                (rule "applyEq" (formula "37") (term "1,1,0") (ifseqformula "27") (userinteraction))
                                                (rule "replace_known_left" (formula "37") (term "1,0") (ifseqformula "24") (userinteraction))
                                                 (builtin "One Step Simplification" (formula "37"))
                                                (rule "closeTrue" (formula "37") (userinteraction))
                                             )
                                             (branch "self_25.index < self_25.list.values.length FALSE"
                                                (rule "applyEqReverse" (formula "10") (term "1") (ifseqformula "2"))
                                                (rule "hideAuxiliaryEq" (formula "8"))
                                                (rule "hideAuxiliaryEq" (formula "2"))
                                                (rule "hideAuxiliaryEq" (formula "5"))
                                                (rule "hideAuxiliaryEq" (formula "3"))
                                                (rule "eqSymm" (formula "19"))
                                                (rule "eqSymm" (formula "18"))
                                                (rule "eqSymm" (formula "25") (term "1,0"))
                                                (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "7"))
                                                (rule "applyEqReverse" (formula "5") (term "1,1,0") (ifseqformula "7"))
                                                (rule "applyEqReverse" (formula "5") (term "1,2,0") (ifseqformula "7"))
                                                (rule "applyEqReverse" (formula "6") (term "0,0,0,1,0,0") (ifseqformula "7"))
                                                (rule "applyEqReverse" (formula "5") (term "0,1,0,0,0,0") (ifseqformula "7"))
                                                (rule "applyEqReverse" (formula "6") (term "0,0,0,0,0,0") (ifseqformula "7"))
                                                (rule "applyEqReverse" (formula "5") (term "0,0,0,1,0,0") (ifseqformula "7"))
                                                (rule "applyEqReverse" (formula "6") (term "1,0,0,1,1,0,0") (ifseqformula "7"))
                                                (rule "applyEqReverse" (formula "6") (term "0,1,0,0,0,0") (ifseqformula "7"))
                                                (rule "applyEqReverse" (formula "5") (term "0,0,0,0,0,0") (ifseqformula "7"))
                                                (rule "applyEqReverse" (formula "5") (term "1,0,0,1,1,0,0") (ifseqformula "7"))
                                                (rule "applyEqReverse" (formula "6") (term "1,2,0") (ifseqformula "7"))
                                                (rule "applyEqReverse" (formula "6") (term "1,1,0") (ifseqformula "7"))
                                                (rule "hideAuxiliaryEq" (formula "7"))
                                                (rule "replace_known_left" (formula "5") (term "0,0,1,0,0") (ifseqformula "19"))
                                                 (builtin "One Step Simplification" (formula "5"))
                                                (rule "replace_known_left" (formula "6") (term "0,0,1,0,0") (ifseqformula "19"))
                                                 (builtin "One Step Simplification" (formula "6"))
                                                (rule "castedGetAny" (formula "24") (term "0,1,0"))
                                                (rule "inEqSimp_ltRight" (formula "21"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                                (rule "polySimp_addComm0" (formula "1") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_gtToGeq" (formula "13"))
                                                (rule "mul_literals" (formula "13") (term "1,0,0"))
                                                (rule "add_literals" (formula "13") (term "0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                                                (rule "ifthenelse_negated" (formula "6") (term "0"))
                                                (rule "ifthenelse_negated" (formula "7") (term "0"))
                                                (rule "lenOfSeqSubEQ" (formula "13") (term "1,0") (ifseqformula "19"))
                                                (rule "polySimp_elimSub" (formula "13") (term "1,1,0"))
                                                (rule "polySimp_addComm0" (formula "13") (term "1,1,0"))
                                                (rule "lenOfSeqSubEQ" (formula "17") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                                                (rule "polySimp_elimSub" (formula "17") (term "1,0,1,0,0,1,0,0"))
                                                (rule "polySimp_addComm0" (formula "17") (term "1,0,1,0,0,1,0,0"))
                                                (rule "lenOfSeqSubEQ" (formula "16") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
                                                (rule "polySimp_elimSub" (formula "16") (term "1,0,1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "16") (term "1,1,0,1,0,0,1,0,0"))
                                                (rule "add_zero_right" (formula "16") (term "1,0,1,0,0,1,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "14"))
                                                (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "15"))
                                                (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_addComm1" (formula "13") (term "0,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,1,0,0,1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,1,0,0,1,0,0"))
                                                (rule "polySimp_addComm1" (formula "17") (term "0,0,0,1,0,0,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,0,0,1,0,0"))
                                                (rule "add_zero_right" (formula "16") (term "0,0,0,1,0,0,1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0,0,1,0,0"))
                                                (rule "applyEq" (formula "6") (term "1,1,0") (ifseqformula "20"))
                                                (rule "applyEq" (formula "6") (term "0,0,0,0") (ifseqformula "20"))
                                                (rule "applyEq" (formula "7") (term "1,1,0") (ifseqformula "20"))
                                                (rule "applyEq" (formula "6") (term "0,1,0,0") (ifseqformula "20"))
                                                (rule "applyEq" (formula "7") (term "0,0,0,0") (ifseqformula "20"))
                                                (rule "applyEq" (formula "7") (term "0,1,0,0") (ifseqformula "20"))
                                                (rule "applyEq" (formula "6") (term "1,2,0") (ifseqformula "20"))
                                                (rule "applyEq" (formula "7") (term "1,2,0") (ifseqformula "20"))
                                                (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "20"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                                                (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                                                (rule "mul_literals" (formula "13") (term "1"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0,1,0,0,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0,1,0,0,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "17") (term "0,0,0,1,0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                                                (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0"))
                                                (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0"))
                                                (rule "polySimp_elimOne" (formula "13") (term "0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                                                (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,1,1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "16") (term "0,0,1,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "16") (term "0,0,1,1,1,0,0"))
                                                (rule "inEqSimp_contradInEq0" (formula "17") (term "0,1,1,1,0,0") (ifseqformula "1"))
                                                (rule "inEqSimp_homoInEq1" (formula "17") (term "0,0,1,1,1,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,0,1,1,1,0,0"))
                                                (rule "add_literals" (formula "17") (term "1,1,0,0,0,1,1,1,0,0"))
                                                (rule "times_zero_1" (formula "17") (term "1,0,0,0,1,1,1,0,0"))
                                                (rule "add_literals" (formula "17") (term "0,0,0,1,1,1,0,0"))
                                                (rule "leq_literals" (formula "17") (term "0,0,1,1,1,0,0"))
                                                 (builtin "One Step Simplification" (formula "17"))
                                                (rule "add_zero_right" (formula "17") (term "1,1,0,0"))
                                                (rule "inEqSimp_contradInEq0" (formula "13") (term "0,0") (ifseqformula "1"))
                                                (rule "inEqSimp_homoInEq1" (formula "13") (term "0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,0,0"))
                                                (rule "add_literals" (formula "13") (term "1,1,0,0,0,0"))
                                                (rule "times_zero_1" (formula "13") (term "1,0,0,0,0"))
                                                (rule "add_zero_right" (formula "13") (term "0,0,0,0"))
                                                (rule "leq_literals" (formula "13") (term "0,0,0"))
                                                 (builtin "One Step Simplification" (formula "13"))
                                                (rule "qeq_literals" (formula "13"))
                                                (rule "closeFalse" (formula "13"))
                                             )
                                          )
                                          (branch " (self_25, LinkedListIterator::$curr) in self_25.list.footprint | (self_25, LinkedListIterator::$curr) in self_25.footprint FALSE"
                                             (rule "orRight" (formula "19") (userinteraction))
                                             (rule "JML_represents_clause_for_LinkedListIterator_footprint" (formula "20") (term "2") (userinteraction))
                                             (rule "elementOfUnion" (formula "20"))
                                             (rule "orRight" (formula "20"))
                                             (rule "elementOfSingleton" (formula "21"))
                                              (builtin "One Step Simplification" (formula "21"))
                                             (rule "false_right" (formula "21"))
                                             (rule "elementOfUnion" (formula "20"))
                                             (rule "orRight" (formula "20"))
                                             (rule "elementOfSingleton" (formula "21"))
                                              (builtin "One Step Simplification" (formula "21"))
                                             (rule "false_right" (formula "21"))
                                             (rule "elementOfUnion" (formula "20"))
                                             (rule "orRight" (formula "20"))
                                             (rule "elementOfSingleton" (formula "21"))
                                              (builtin "One Step Simplification" (formula "21"))
                                             (rule "false_right" (formula "21"))
                                             (rule "elementOfUnion" (formula "20"))
                                             (rule "orRight" (formula "20"))
                                             (rule "elementOfSingleton" (formula "21"))
                                              (builtin "One Step Simplification" (formula "21"))
                                             (rule "closeTrue" (formula "21"))
                                          )
                                       )
                                    )
                                    (branch "CUT: (self_25, LinkedListIterator::$index) in self_25.list.footprint | (self_25, LinkedListIterator::$index) in self_25.footprint FALSE"
                                       (rule "orRight" (formula "17") (userinteraction))
                                       (rule "JML_represents_clause_for_LinkedListIterator_footprint" (formula "18") (term "2") (userinteraction))
                                       (rule "elementOfUnion" (formula "18"))
                                       (rule "orRight" (formula "18"))
                                       (rule "elementOfSingleton" (formula "19"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "false_right" (formula "19"))
                                       (rule "elementOfUnion" (formula "18"))
                                       (rule "orRight" (formula "18"))
                                       (rule "elementOfSingleton" (formula "19"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "false_right" (formula "19"))
                                       (rule "elementOfUnion" (formula "18"))
                                       (rule "orRight" (formula "18"))
                                       (rule "elementOfSingleton" (formula "19"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "closeTrue" (formula "19"))
                                    )
                                 )
                                 (branch "CUT: (self_25, LinkedListIterator::$seen) in self_25.list.footprint | (self_25, LinkedListIterator::$seen) in self_25.footprint FALSE"
                                    (rule "orRight" (formula "16") (userinteraction))
                                    (rule "JML_represents_clause_for_LinkedListIterator_footprint" (formula "17") (term "2") (userinteraction))
                                    (rule "elementOfUnion" (formula "17"))
                                    (rule "orRight" (formula "17"))
                                    (rule "elementOfSingleton" (formula "18"))
                                     (builtin "One Step Simplification" (formula "18"))
                                    (rule "false_right" (formula "18"))
                                    (rule "elementOfUnion" (formula "17"))
                                    (rule "orRight" (formula "17"))
                                    (rule "elementOfSingleton" (formula "18"))
                                     (builtin "One Step Simplification" (formula "18"))
                                    (rule "closeTrue" (formula "18"))
                                 )
                              )
                              (branch "CUT: (self_25, LinkedListIterator::$to_see) in self_25.list.footprint | (self_25, LinkedListIterator::$to_see) in self_25.footprint FALSE"
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "orRight" (formula "15") (userinteraction))
                                 (rule "JML_represents_clause_for_LinkedListIterator_footprint" (formula "16") (term "2") (userinteraction))
                                 (rule "elementOfUnion" (formula "16"))
                                 (rule "orRight" (formula "16"))
                                 (rule "elementOfSingleton" (formula "17"))
                                  (builtin "One Step Simplification" (formula "17"))
                                 (rule "closeTrue" (formula "17"))
                              )
                           )
                        )
                        (branch "Null Reference (l_3 = null)"
                            (builtin "SMTRule")
                        )
                     )
                     (branch "Null Reference (l_2 = null)"
                         (builtin "SMTRule")
                     )
                  )
                  (branch "Null Reference (n_5 = null)"
                      (builtin "One Step Simplification" (formula "11"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "ifthenelse_split" (formula "3") (term "0") (userinteraction))
                     (branch "(self_25, LinkedListIterator::$curr) in allLocs setMinus self_25.list.footprint cup self_25.footprint TRUE"
                        (rule "elementOfSetMinus" (formula "3") (userinteraction))
                        (rule "andLeft" (formula "3") (userinteraction))
                        (rule "notLeft" (formula "4") (userinteraction))
                        (rule "elementOfUnion" (formula "12") (userinteraction))
                        (rule "orRight" (formula "12") (userinteraction))
                        (rule "JML_represents_clause_for_LinkedListIterator_footprint" (formula "13") (term "2") (userinteraction))
                        (rule "elementOfUnion" (formula "13"))
                        (rule "orRight" (formula "13"))
                        (rule "elementOfSingleton" (formula "14"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "elementOfUnion" (formula "13"))
                        (rule "orRight" (formula "13"))
                        (rule "elementOfSingleton" (formula "14"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "elementOfUnion" (formula "13"))
                        (rule "orRight" (formula "13"))
                        (rule "elementOfSingleton" (formula "14"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "elementOfUnion" (formula "13"))
                        (rule "orRight" (formula "13"))
                        (rule "elementOfSingleton" (formula "14"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "closeTrue" (formula "14"))
                     )
                     (branch "(self_25, LinkedListIterator::$curr) in allLocs setMinus self_25.list.footprint cup self_25.footprint FALSE"
                        (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "1") (userinteraction))
                        (rule "Class_invariant_axiom_for_LinkedListIterator" (formula "10") (inst "f_0=f_0") (inst "i_0=i_0") (inst "f=f") (inst "i=i") (userinteraction))
                        (rule "Class_invariant_axiom_for_LinkedList" (formula "10") (term "1,1") (inst "n=n_6") (inst "i_3=i_3") (inst "f=f") (inst "i_2=i_2") (inst "i_1=i_1") (inst "j=j") (inst "i_0=i_0") (inst "i=i") (userinteraction))
                         (builtin "SMTRule")
                     )
                  )
               )
               (branch "Null Reference (n_3 = null)"
                   (builtin "One Step Simplification" (formula "1"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "ifthenelse_split" (formula "2") (term "0") (userinteraction))
                  (branch "(self_25, LinkedListIterator::$curr) in allLocs setMinus self_25.list.footprint cup self_25.footprint TRUE"
                     (rule "elementOfSetMinus" (formula "2") (userinteraction))
                     (rule "andLeft" (formula "2") (userinteraction))
                     (rule "notLeft" (formula "3") (userinteraction))
                     (rule "elementOfUnion" (formula "11") (userinteraction))
                     (rule "orRight" (formula "11") (userinteraction))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "JML_represents_clause_for_LinkedListIterator_footprint" (formula "11") (term "2") (userinteraction))
                     (rule "false_right" (formula "12"))
                     (rule "applyEqReverse" (formula "1") (term "0") (ifseqformula "2"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "inEqSimp_gtToGeq" (formula "7"))
                     (rule "times_zero_1" (formula "7") (term "1,0,0"))
                     (rule "add_literals" (formula "7") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                     (rule "mul_literals" (formula "7") (term "1"))
                     (rule "elementOfUnion" (formula "10"))
                     (rule "orRight" (formula "10"))
                     (rule "elementOfSingleton" (formula "11"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "false_right" (formula "11"))
                     (rule "elementOfUnion" (formula "10"))
                     (rule "orRight" (formula "10"))
                     (rule "elementOfSingleton" (formula "11"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "false_right" (formula "11"))
                     (rule "elementOfUnion" (formula "10"))
                     (rule "orRight" (formula "10"))
                     (rule "elementOfSingleton" (formula "11"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "false_right" (formula "11"))
                     (rule "elementOfUnion" (formula "10"))
                     (rule "orRight" (formula "10"))
                     (rule "elementOfSingleton" (formula "11"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "closeTrue" (formula "11"))
                  )
                  (branch "(self_25, LinkedListIterator::$curr) in allLocs setMinus self_25.list.footprint cup self_25.footprint FALSE"
                     (rule "elementOfSetMinus" (formula "10") (userinteraction))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "1") (userinteraction))
                     (rule "Class_invariant_axiom_for_LinkedListIterator" (formula "9") (inst "f_0=f_0") (inst "i_0=i_0") (inst "f=f") (inst "i=i") (userinteraction))
                     (rule "andLeft" (formula "9"))
                     (rule "notLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "ifthenelse_split_for" (formula "15") (userinteraction))
                     (branch "self_25.index < self_25.list.values.length TRUE"
                        (rule "Class_invariant_axiom_for_LinkedList" (formula "17") (inst "n=n_4") (inst "i_3=i_3") (inst "f=f") (inst "i_2=i_2") (inst "i_1=i_1") (inst "j=j") (inst "i_0=i_0") (inst "i=i") (userinteraction))
                         (builtin "SMTRule")
                     )
                     (branch "self_25.index < self_25.list.values.length FALSE"
                         (builtin "SMTRule")
                     )
                  )
               )
            )
         )
         (branch "Null Reference (l_1 = null)"
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
            (rule "closeFalse" (formula "1") (userinteraction))
         )
      )
      (branch "Null Reference (l = null)"
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
         (rule "closeFalse" (formula "1") (userinteraction))
      )
   )
   (branch "Null Reference (n_2 = null)"
       (builtin "One Step Simplification" (formula "1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "hide_right" (formula "11") (userinteraction))
      (rule "Class_invariant_axiom_for_LinkedListIterator" (formula "8") (inst "f_0=f_0") (inst "i_0=i_0") (inst "f=f") (inst "i=i") (userinteraction))
      (rule "false_right" (formula "9"))
      (rule "andLeft" (formula "8"))
      (rule "notLeft" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "eqSymm" (formula "14") (term "1"))
      (rule "eqSymm" (formula "13"))
      (rule "eqSymm" (formula "12"))
      (rule "replace_known_left" (formula "14") (term "2") (ifseqformula "1"))
      (rule "castedGetAny" (formula "14") (term "0,1"))
      (rule "lenOfSeqSubEQ" (formula "11") (term "1,1,0,0") (ifseqformula "13"))
      (rule "polySimp_elimSub" (formula "11") (term "1,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "11") (term "1,1,1,0,0"))
      (rule "lenOfSeqSubEQ" (formula "7") (term "0") (ifseqformula "13"))
      (rule "polySimp_elimSub" (formula "7") (term "1,0"))
      (rule "polySimp_addComm0" (formula "7") (term "1,0"))
      (rule "lenOfSeqSubEQ" (formula "10") (term "1,1,0,0") (ifseqformula "12"))
      (rule "polySimp_elimSub" (formula "10") (term "1,1,1,0,0"))
      (rule "times_zero_2" (formula "10") (term "1,1,1,1,0,0"))
      (rule "add_zero_right" (formula "10") (term "1,1,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "14") (term "0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
      (rule "polySimp_addComm1" (formula "14") (term "0,0"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,1,0,0"))
      (rule "polySimp_addComm1" (formula "11") (term "0,0,1,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0"))
      (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,1,0,0"))
      (rule "add_zero_right" (formula "10") (term "0,0,1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_gtToGeq" (formula "7"))
      (rule "times_zero_1" (formula "7") (term "1,0,0"))
      (rule "add_zero_right" (formula "7") (term "0,0"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "9"))
      (rule "inEqSimp_commuteLeq" (formula "8"))
      (rule "applyEq" (formula "14") (term "1,1") (ifseqformula "1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "0,0"))
      (rule "polySimp_elimOne" (formula "14") (term "0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0,1,0,0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,0,0,1,0,0"))
      (rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,0,0,1,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,1,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "0,0,1,0"))
      (rule "polySimp_elimOne" (formula "7") (term "0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,1,0,0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,1,0,0,1,0,0"))
      (rule "polySimp_elimOne" (formula "10") (term "0,0,0,1,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
      (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "7"))
      (rule "mul_literals" (formula "7") (term "1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
      (rule "getOfSeqSubEQ" (formula "10") (term "1,0,1,0,1,0") (ifseqformula "12"))
      (rule "castDel" (formula "10") (term "2,1,0,1,0,1,0"))
      (rule "add_zero_right" (formula "10") (term "1,1,1,0,1,0,1,0"))
      (rule "polySimp_elimSub" (formula "10") (term "1,1,0,1,0,1,0,1,0"))
      (rule "mul_literals" (formula "10") (term "1,1,1,0,1,0,1,0,1,0"))
      (rule "add_zero_right" (formula "10") (term "1,1,0,1,0,1,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,1,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,1,0,1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,1,0,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,1,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,1,0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,1,0,1,0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,1,0,1,0,1,0"))
      (rule "mul_literals" (formula "10") (term "0,1,1,0,1,0,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,1,0,1,0,1,0"))
      (rule "getOfSeqSubEQ" (formula "11") (term "1,0,1,0,1,0") (ifseqformula "13"))
      (rule "castDel" (formula "11") (term "2,1,0,1,0,1,0"))
      (rule "polySimp_elimSub" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
      (rule "polySimp_addComm0" (formula "11") (term "1,1,1,0,1,0,1,0"))
      (rule "polySimp_addComm0" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,1,0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,1,0,1,0,1,0"))
      (rule "polySimp_mulAssoc" (formula "11") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0,0,1,0,1,0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "11") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,1,0,1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,1,0,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,1,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "11") (term "0,1,1,0,1,0,1,0,1,0"))
      (rule "mul_literals" (formula "11") (term "0,0,1,1,0,1,0,1,0,1,0"))
      (rule "nnf_imp2or" (formula "10") (term "0"))
      (rule "nnf_imp2or" (formula "11") (term "0"))
      (rule "nnf_notAnd" (formula "10") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
      (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
      (rule "add_literals" (formula "10") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
      (rule "mul_literals" (formula "10") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "11") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
      (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
      (rule "add_literals" (formula "11") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
      (rule "mul_literals" (formula "11") (term "1,0,0,0"))
      (rule "commute_and" (formula "10") (term "0,0,1,0"))
      (rule "commute_and" (formula "10") (term "1,0,1,0"))
      (rule "commute_and" (formula "11") (term "0,0,1,0"))
      (rule "commute_and" (formula "11") (term "1,0,1,0"))
      (rule "applyEq_and_gen2" (formula "10") (term "1,0,1,0"))
      (rule "ifEqualsNull" (formula "10") (term "0,0,1,0,1,0"))
      (rule "nnf_notOr" (formula "10") (term "0,1,0,1,0"))
      (rule "nnf_notAnd" (formula "10") (term "0,0,1,0,1,0"))
      (rule "nnf_notAnd" (formula "10") (term "1,0,1,0,1,0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "nnf_notAnd" (formula "10") (term "0,0,0,1,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0,1,0,1,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0,1,0,1,0"))
      (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0,1,0,1,0"))
      (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,0,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,1,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,0,1,0,1,0"))
      (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,0,1,0,1,0"))
      (rule "add_literals" (formula "10") (term "0,0,0,0,0,0,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,1,0,1,0"))
      (rule "mul_literals" (formula "10") (term "1,0,0,0,0,1,0,1,0"))
      (rule "applyEq_and_gen2" (formula "11") (term "1,0,1,0"))
      (rule "ifEqualsNull" (formula "11") (term "0,0,1,0,1,0"))
      (rule "nnf_notOr" (formula "11") (term "0,1,0,1,0"))
      (rule "nnf_notAnd" (formula "11") (term "0,0,1,0,1,0"))
      (rule "nnf_notAnd" (formula "11") (term "1,0,1,0,1,0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "nnf_notAnd" (formula "11") (term "0,0,0,1,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0,1,0,1,0"))
      (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,0,1,0,1,0"))
      (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,0,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,1,0,1,0"))
      (rule "mul_literals" (formula "11") (term "1,0,0,0,0,1,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "11") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
      (rule "mul_literals" (formula "11") (term "0,0,1,0,0,1,0,0,0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,1,0,0,0,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,0,1,0,0,1,0,0,0,1,0,1,0"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0,1,0,1,0"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,0,0,0,1,0,1,0"))
      (rule "add_literals" (formula "11") (term "0,0,0,0,1,0,0,0,1,0,1,0"))
      (rule "add_zero_left" (formula "11") (term "0,0,0,1,0,0,0,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "0,1,1,0,0,0,1,0,1,0"))
      (rule "commute_or" (formula "10") (term "1,0,1,0,1,0"))
      (rule "commute_or_2" (formula "10") (term "0,0,1,0,1,0"))
      (rule "commute_or" (formula "11") (term "1,0,1,0,1,0"))
      (rule "commute_or_2" (formula "11") (term "0,0,1,0,1,0"))
      (rule "ifthenelse_split" (formula "7") (term "0"))
      (branch "self_25.list.values.length >= 1 + self_25.index TRUE"
         (rule "replace_known_left" (formula "12") (term "0,1,1,0,0") (ifseqformula "7"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "7"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "inEqSimp_homoInEq1" (formula "8"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,0"))
         (rule "polySimp_mulAssoc" (formula "8") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "0,1,0"))
         (rule "polySimp_elimOne" (formula "8") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "8") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "8"))
         (rule "polySimp_mulLiterals" (formula "8") (term "0"))
         (rule "polySimp_elimOne" (formula "8") (term "0"))
         (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
         (rule "inEqSimp_homoInEq0" (formula "9") (term "0"))
         (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0"))
         (rule "add_literals" (formula "9") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "9") (term "1,0,0"))
         (rule "add_zero_right" (formula "9") (term "0,0"))
         (rule "qeq_literals" (formula "9") (term "0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "commute_or" (formula "9") (term "0,0,0,1,0,1,0"))
         (rule "commute_or" (formula "10") (term "0,0,0,1,0,1,0"))
         (rule "ifthenelse_to_or_right" (formula "9") (term "1,1,0,1,0"))
         (rule "nnf_notAnd" (formula "9") (term "0,0,1,1,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,1,1,0,1,0"))
         (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0,1,1,0,1,0"))
         (rule "add_zero_right" (formula "9") (term "0,0,0,0,0,1,1,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,1,1,0,1,0"))
         (rule "mul_literals" (formula "9") (term "1,0,0,0,1,1,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,1,1,0,1,0"))
         (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,1,1,0,1,0"))
         (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,1,1,0,1,0"))
         (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,1,1,0,1,0"))
         (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,1,1,0,1,0"))
         (rule "add_zero_left" (formula "9") (term "0,0,1,0,0,1,1,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,1,1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,1,1,0,1,0"))
         (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,1,1,0,1,0"))
         (rule "commute_or" (formula "9") (term "1,1,1,0,1,0"))
         (rule "commute_or_2" (formula "9") (term "0,1,1,0,1,0"))
         (rule "lenNonNegative" (formula "12") (term "2,0"))
         (rule "inEqSimp_commuteLeq" (formula "12"))
         (rule "equalityToSeqGetAndSeqLenLeft" (formula "13") (inst "iv=iv"))
         (rule "andLeft" (formula "13"))
         (rule "lenOfSeqSub" (formula "14") (term "1,1,0,0"))
         (rule "polySimp_elimSub" (formula "14") (term "1,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "14") (term "1,1,1,0,0"))
         (rule "lenOfSeqSubEQ" (formula "13") (term "1") (ifseqformula "15"))
         (rule "eqSymm" (formula "13"))
         (rule "polySimp_elimSub" (formula "13") (term "1,0"))
         (rule "polySimp_addComm0" (formula "13") (term "1,0"))
         (rule "lenOfSeqSub" (formula "13") (term "1"))
         (rule "eqSymm" (formula "13"))
         (rule "polySimp_elimSub" (formula "13") (term "1,0"))
         (rule "polySimp_addComm0" (formula "13") (term "1,0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "true_left" (formula "13"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,1,0,0"))
         (rule "polySimp_addComm1" (formula "13") (term "0,0,1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
         (rule "applyEq" (formula "13") (term "0,0,1,0") (ifseqformula "14"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "true_left" (formula "13"))
         (rule "equalityToSeqGetAndSeqLenLeft" (formula "11") (inst "iv=iv"))
         (rule "andLeft" (formula "11"))
         (rule "lenOfSeqSub" (formula "11") (term "0"))
         (rule "polySimp_elimSub" (formula "11") (term "1,0"))
         (rule "times_zero_2" (formula "11") (term "1,1,0"))
         (rule "add_zero_right" (formula "11") (term "1,0"))
         (rule "lenOfSeqSubEQ" (formula "11") (term "1") (ifseqformula "13"))
         (rule "eqSymm" (formula "11"))
         (rule "polySimp_elimSub" (formula "11") (term "1,0"))
         (rule "mul_literals" (formula "11") (term "1,1,0"))
         (rule "add_zero_right" (formula "11") (term "1,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "lenOfSeqSub" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_elimSub" (formula "11") (term "1,1,1,0,0"))
         (rule "times_zero_2" (formula "11") (term "1,1,1,1,0,0"))
         (rule "add_zero_right" (formula "11") (term "1,1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,1,0,0"))
         (rule "add_zero_right" (formula "11") (term "0,0,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
         (rule "applyEq" (formula "11") (term "0,0,1,0") (ifseqformula "12"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "cnf_rightDist" (formula "9") (term "1,0,1,0,1,0"))
         (rule "cnf_rightDist" (formula "10") (term "1,0,1,0,1,0"))
         (rule "commute_or" (formula "9") (term "0,0,1,1,0,1,0"))
         (rule "ifthenelse_to_or_right" (formula "10") (term "1,1,0,1,0"))
         (rule "nnf_notAnd" (formula "10") (term "0,0,1,1,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,1,1,0,1,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,1,1,0,1,0"))
         (rule "polySimp_rightDist" (formula "10") (term "0,1,0,0,1,0,0,1,1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0,0,1,0,0,1,1,0,1,0"))
         (rule "mul_literals" (formula "10") (term "0,0,1,0,0,1,0,0,1,1,0,1,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,0,1,0,0,1,0,0,1,1,0,1,0"))
         (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,1,1,0,1,0"))
         (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,1,0,0,1,1,0,1,0"))
         (rule "add_literals" (formula "10") (term "0,0,0,0,1,0,0,1,1,0,1,0"))
         (rule "add_zero_left" (formula "10") (term "0,0,0,1,0,0,1,1,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,1,1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,1,0,1,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,1,0,1,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "0,1,1,0,0,1,1,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,1,1,0,1,0"))
         (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0,1,1,0,1,0"))
         (rule "add_literals" (formula "10") (term "0,0,0,0,0,1,1,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1,1,0,1,0"))
         (rule "mul_literals" (formula "10") (term "1,0,0,0,1,1,0,1,0"))
         (rule "cnf_rightDist" (formula "9") (term "1,1,1,0,1,0"))
         (rule "commute_or" (formula "10") (term "1,1,1,0,1,0"))
         (rule "ifthenelse_split" (formula "9") (term "1,1,0,0"))
         (branch "self_25.index >= 1 TRUE"
            (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "9"))
            (rule "leq_literals" (formula "8") (term "0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "commute_or" (formula "9") (term "0,1,0,1,0,1,0"))
            (rule "commute_or" (formula "10") (term "0,1,0,1,0,1,0"))
            (rule "commute_or_2" (formula "10") (term "0,1,1,0,1,0"))
            (rule "commute_or" (formula "9") (term "1,1,1,1,0,1,0"))
            (rule "commute_or" (formula "10") (term "0,0,1,1,0,1,0"))
            (rule "cnf_rightDist" (formula "10") (term "1,1,1,0,1,0"))
            (rule "commute_or" (formula "10") (term "1,1,1,1,0,1,0"))
            (rule "shift_paren_and" (formula "9") (term "0,1,0,1,0"))
            (rule "shift_paren_and" (formula "10") (term "0,1,0,1,0"))
            (rule "shift_paren_and" (formula "9") (term "1,1,0,1,0"))
            (rule "shift_paren_and" (formula "9") (term "1,0,1,0"))
            (rule "shift_paren_and" (formula "10") (term "1,1,0,1,0"))
            (rule "shift_paren_and" (formula "10") (term "1,0,1,0"))
            (rule "shift_paren_and" (formula "9") (term "0,1,0,1,0"))
            (rule "shift_paren_and" (formula "9") (term "0,1,0"))
            (rule "shift_paren_and" (formula "9") (term "0,0,1,0"))
            (rule "shift_paren_and" (formula "10") (term "0,1,0,1,0"))
            (rule "shift_paren_and" (formula "10") (term "0,1,0"))
            (rule "shift_paren_and" (formula "10") (term "0,0,1,0"))
            (rule "shift_paren_and" (formula "9") (term "0,0,0,1,0"))
            (rule "shift_paren_and" (formula "10") (term "0,0,0,1,0"))
            (rule "seqGetAlphaCast" (formula "14") (term "0"))
            (rule "castedGetAny" (formula "14") (term "0"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "shift_paren_and" (formula "9") (term "0,0,0,0,1,0"))
            (rule "shift_paren_and" (formula "10") (term "0,0,0,0,1,0"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "1") (term "0") (ifseqformula "2"))
            (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "shift_paren_and" (formula "9") (term "0,0,0,0,0,1,0"))
            (rule "ex_pull_out3" (formula "9") (term "0"))
            (rule "cnf_rightDist" (formula "9") (term "0,0"))
            (rule "shift_paren_or" (formula "9") (term "1,0,0"))
            (rule "commute_or_2" (formula "9") (term "0,1,0,0"))
            (rule "inEqSimp_or_tautInEq1" (formula "9") (term "1,0,0"))
            (rule "inEqSimp_homoInEq1" (formula "9") (term "1,1,0,0"))
            (rule "polySimp_pullOutFactor1" (formula "9") (term "0,1,1,0,0"))
            (rule "add_literals" (formula "9") (term "1,0,1,1,0,0"))
            (rule "times_zero_1" (formula "9") (term "0,1,1,0,0"))
            (rule "leq_literals" (formula "9") (term "1,1,0,0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "cnf_rightDist" (formula "9") (term "0,0"))
            (rule "shift_paren_or" (formula "9") (term "1,0,0"))
            (rule "inEqSimp_or_tautInEq3" (formula "9") (term "0,1,0,0"))
            (rule "add_zero_right" (formula "9") (term "1,1,0,1,0,0"))
            (rule "qeq_literals" (formula "9") (term "1,0,1,0,0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "cnf_rightDist" (formula "9") (term "0,0"))
            (rule "shift_paren_or" (formula "9") (term "1,0,0"))
            (rule "commute_or_2" (formula "9") (term "0,1,0,0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "cnf_rightDist" (formula "9") (term "0,0,0"))
            (rule "commute_or_2" (formula "9") (term "1,0,0,0"))
            (rule "shift_paren_or" (formula "9") (term "0,1,0,0,0"))
            (rule "commute_or" (formula "9") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_or_tautInEq1" (formula "9") (term "0,1,0,0,0"))
            (rule "inEqSimp_homoInEq1" (formula "9") (term "1,0,1,0,0,0"))
            (rule "polySimp_pullOutFactor1" (formula "9") (term "0,1,0,1,0,0,0"))
            (rule "add_literals" (formula "9") (term "1,0,1,0,1,0,0,0"))
            (rule "times_zero_1" (formula "9") (term "0,1,0,1,0,0,0"))
            (rule "leq_literals" (formula "9") (term "1,0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "cnf_rightDist" (formula "9") (term "0,0,0"))
            (rule "commute_or_2" (formula "9") (term "1,0,0,0"))
            (rule "shift_paren_or" (formula "9") (term "0,1,0,0,0"))
            (rule "inEqSimp_or_tautInEq2" (formula "9") (term "0,0,1,0,0,0"))
            (rule "add_zero_right" (formula "9") (term "1,1,0,0,1,0,0,0"))
            (rule "qeq_literals" (formula "9") (term "1,0,0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "cnf_rightDist" (formula "9") (term "0,0,0"))
            (rule "shift_paren_or" (formula "9") (term "1,0,0,0"))
            (rule "commute_or_2" (formula "9") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "cnf_rightDist" (formula "9") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "9") (term "0,0,0,0,0"))
            (rule "shift_paren_or" (formula "9") (term "1,0,0,0,0"))
            (rule "commute_or" (formula "9") (term "0,0,0,0,0,0"))
            (rule "shift_paren_and" (formula "10") (term "0,0,0,0,0,1,0"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,0,0") (ifseqformula "2"))
            (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "17"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "ex_pull_out3" (formula "10") (term "0"))
            (rule "cnf_rightDist" (formula "10") (term "0,0"))
            (rule "shift_paren_or" (formula "10") (term "1,0,0"))
            (rule "commute_or_2" (formula "10") (term "0,1,0,0"))
            (rule "inEqSimp_or_tautInEq1" (formula "10") (term "1,0,0"))
            (rule "polySimp_addAssoc" (formula "10") (term "1,1,1,0,0"))
            (rule "inEqSimp_homoInEq1" (formula "10") (term "1,1,0,0"))
            (rule "polySimp_pullOutFactor1" (formula "10") (term "0,1,1,0,0"))
            (rule "add_literals" (formula "10") (term "1,0,1,1,0,0"))
            (rule "times_zero_1" (formula "10") (term "0,1,1,0,0"))
            (rule "leq_literals" (formula "10") (term "1,1,0,0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "cnf_rightDist" (formula "10") (term "0,0"))
            (rule "shift_paren_or" (formula "10") (term "1,0,0"))
            (rule "inEqSimp_or_tautInEq3" (formula "10") (term "0,1,0,0"))
            (rule "add_zero_right" (formula "10") (term "1,1,0,1,0,0"))
            (rule "qeq_literals" (formula "10") (term "1,0,1,0,0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "cnf_rightDist" (formula "10") (term "0,0"))
            (rule "shift_paren_or" (formula "10") (term "1,0,0"))
            (rule "commute_or_2" (formula "10") (term "0,1,0,0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "cnf_rightDist" (formula "10") (term "0,0,0"))
            (rule "commute_or_2" (formula "10") (term "1,0,0,0"))
            (rule "shift_paren_or" (formula "10") (term "0,1,0,0,0"))
            (rule "commute_or" (formula "10") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_or_tautInEq1" (formula "10") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "10") (term "1,1,0,1,0,0,0"))
            (rule "inEqSimp_homoInEq1" (formula "10") (term "1,0,1,0,0,0"))
            (rule "polySimp_pullOutFactor1" (formula "10") (term "0,1,0,1,0,0,0"))
            (rule "add_literals" (formula "10") (term "1,0,1,0,1,0,0,0"))
            (rule "times_zero_1" (formula "10") (term "0,1,0,1,0,0,0"))
            (rule "leq_literals" (formula "10") (term "1,0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "cnf_rightDist" (formula "10") (term "0,0,0"))
            (rule "commute_or_2" (formula "10") (term "1,0,0,0"))
            (rule "shift_paren_or" (formula "10") (term "0,1,0,0,0"))
            (rule "inEqSimp_or_tautInEq2" (formula "10") (term "0,0,1,0,0,0"))
            (rule "add_zero_right" (formula "10") (term "1,1,0,0,1,0,0,0"))
            (rule "qeq_literals" (formula "10") (term "1,0,0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "cnf_rightDist" (formula "10") (term "0,0,0"))
            (rule "shift_paren_or" (formula "10") (term "1,0,0,0"))
            (rule "commute_or_2" (formula "10") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "cnf_rightDist" (formula "10") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "10") (term "0,0,0,0,0"))
            (rule "shift_paren_or" (formula "10") (term "1,0,0,0,0"))
            (rule "commute_or" (formula "10") (term "0,0,0,0,0,0"))
            (rule "commute_and_2" (formula "9") (term "0,0,0"))
            (rule "commute_and_2" (formula "9") (term "0,0"))
            (rule "commute_and_2" (formula "10") (term "0,0,0"))
            (rule "commute_and_2" (formula "10") (term "0,0"))
            (rule "commute_and" (formula "9") (term "0,0,0,0"))
            (rule "commute_and" (formula "10") (term "0,0,0,0"))
            (rule "Partial_inv_axiom_for_JML_class_invariant_nr_2_in_LinkedList" (formula "16") (inst "n=n_3") (inst "i_3=i_3") (inst "f=f") (inst "i_2=i_2") (inst "i_1=i_1") (inst "j=j") (inst "i_0=i_0") (inst "i=i"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "translateJavaSubInt" (formula "16") (term "1,1,0,0,1,0,0"))
            (rule "translateJavaSubInt" (formula "16") (term "1,0,1,1,1,1,0,0,0"))
            (rule "andLeft" (formula "16"))
            (rule "andLeft" (formula "16"))
            (rule "andLeft" (formula "16"))
            (rule "andLeft" (formula "16"))
            (rule "andLeft" (formula "16"))
            (rule "andLeft" (formula "16"))
            (rule "andLeft" (formula "16"))
            (rule "andLeft" (formula "16"))
            (rule "eqSymm" (formula "23") (term "1,1,0,1,0"))
            (rule "eqSymm" (formula "23") (term "0,1,0,1,0"))
            (rule "eqSymm" (formula "22") (term "1,0"))
            (rule "eqSymm" (formula "21") (term "1,0,1"))
            (rule "eqSymm" (formula "21") (term "1,1"))
            (rule "eqSymm" (formula "17"))
            (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0"))
            (rule "mul_literals" (formula "22") (term "1,1,1,0,0"))
            (rule "polySimp_elimSub" (formula "21") (term "1,0,0,1,1"))
            (rule "mul_literals" (formula "21") (term "1,1,0,0,1,1"))
            (rule "polySimp_addComm0" (formula "22") (term "1,0,0,1,0"))
            (rule "polySimp_addComm0" (formula "22") (term "1,1,0,0"))
            (rule "polySimp_addComm0" (formula "21") (term "1,0,0,1,1"))
            (rule "castedGetAny" (formula "24") (term "1,1,1,0"))
            (rule "castedGetAny" (formula "23") (term "1,0,1,0,1,0"))
            (rule "castedGetAny" (formula "23") (term "0,0,1,0,1,0"))
            (rule "castedGetAny" (formula "22") (term "1,1,1,0"))
            (rule "castedGetAny" (formula "21") (term "0,1,0,1"))
            (rule "castedGetAny" (formula "22") (term "0,1,0"))
            (rule "eqSymm" (formula "22") (term "1,0"))
            (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
            (rule "castedGetAny" (formula "21") (term "0,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
            (rule "applyEq" (formula "10") (term "1,1,1,0,0,0,0,0") (ifseqformula "17"))
            (rule "applyEq" (formula "14") (term "2,0") (ifseqformula "17"))
            (rule "applyEq" (formula "12") (term "0") (ifseqformula "17"))
            (rule "applyEq" (formula "10") (term "1,1,1,1,0,0") (ifseqformula "17"))
            (rule "applyEq" (formula "21") (term "1,1,0,1,1") (ifseqformula "16"))
            (rule "applyEq" (formula "18") (term "0") (ifseqformula "16"))
            (rule "applyEq" (formula "10") (term "1,1,1,1,0,0,0") (ifseqformula "17"))
            (rule "applyEq" (formula "10") (term "1,1,1,1,0,0,0,0") (ifseqformula "17"))
            (rule "applyEq" (formula "7") (term "0") (ifseqformula "17"))
            (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
            (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
            (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
            (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "16"))
            (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
            (rule "applyEq" (formula "17") (term "1") (ifseqformula "16"))
            (rule "applyEq" (formula "14") (term "2,0") (ifseqformula "16"))
            (rule "applyEq" (formula "10") (term "1,1,1,0,0,0,0,0") (ifseqformula "16"))
            (rule "applyEq" (formula "12") (term "0") (ifseqformula "16"))
            (rule "applyEq" (formula "10") (term "1,1,1,1,0,0") (ifseqformula "16"))
            (rule "applyEq" (formula "7") (term "0") (ifseqformula "16"))
            (rule "applyEq" (formula "10") (term "1,1,1,1,0,0,0,0") (ifseqformula "16"))
            (rule "applyEq" (formula "10") (term "1,1,1,1,0,0,0") (ifseqformula "16"))
            (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
            (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
            (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
            (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
            (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0"))
            (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
            (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
            (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
            (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "18"))
            (rule "polySimp_rightDist" (formula "7") (term "0,0"))
            (rule "mul_literals" (formula "7") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "7") (term "0"))
            (rule "add_literals" (formula "7") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "7"))
            (rule "polySimp_mulLiterals" (formula "7") (term "0"))
            (rule "polySimp_elimOne" (formula "7") (term "0"))
            (rule "nnf_imp2or" (formula "24") (term "1,0,1,0"))
            (rule "nnf_imp2or" (formula "23") (term "0"))
            (rule "nnf_imp2or" (formula "20") (term "0"))
            (rule "nnf_imp2or" (formula "25") (term "0"))
            (rule "nnf_imp2or" (formula "21") (term "0"))
            (rule "nnf_imp2or" (formula "24") (term "0"))
            (rule "nnf_notAnd" (formula "23") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
            (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
            (rule "mul_literals" (formula "23") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
            (rule "nnf_notAnd" (formula "20") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
            (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
            (rule "mul_literals" (formula "20") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "25") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
            (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
            (rule "mul_literals" (formula "25") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "21") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
            (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
            (rule "mul_literals" (formula "21") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "24") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
            (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
            (rule "mul_literals" (formula "24") (term "1,0,0,0"))
            (rule "nnf_imp2or" (formula "24") (term "0,1,0"))
            (rule "nnf_notAnd" (formula "24") (term "0,0,1,0"))
            (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,1,0"))
            (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,1,0"))
            (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0,1,0"))
            (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1,0"))
            (rule "mul_literals" (formula "24") (term "1,0,0,0,1,0"))
            (rule "commute_and" (formula "22") (term "0,0"))
            (rule "commute_and" (formula "22") (term "0,0,0,0,1"))
            (rule "commute_or_2" (formula "23") (term "0"))
            (rule "commute_or_2" (formula "25") (term "0"))
            (rule "commute_and" (formula "20") (term "0,0,1,0"))
            (rule "commute_and" (formula "20") (term "1,0,1,0"))
            (rule "commute_and" (formula "21") (term "1,0,1,0"))
            (rule "commute_and" (formula "21") (term "0,0,1,0"))
            (rule "commute_or" (formula "23") (term "0,0"))
            (rule "commute_or" (formula "25") (term "0,0"))
            (rule "commute_and_2" (formula "22") (term "0"))
            (rule "cnf_rightDist" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "cnf_rightDist" (formula "23"))
            (rule "andLeft" (formula "23"))
            (rule "cnf_rightDist" (formula "23"))
            (rule "andLeft" (formula "23"))
            (rule "commute_or" (formula "23"))
            (rule "cnf_rightDist" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "cnf_rightDist" (formula "23"))
            (rule "andLeft" (formula "23"))
            (rule "cnf_rightDist" (formula "23"))
            (rule "andLeft" (formula "23"))
            (rule "commute_or" (formula "23"))
            (rule "shift_paren_or" (formula "30") (term "0,1,0"))
            (rule "cnf_rightDist" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "cnf_rightDist" (formula "23"))
            (rule "andLeft" (formula "23"))
            (rule "commute_or" (formula "24"))
            (rule "cnf_rightDist" (formula "23"))
            (rule "andLeft" (formula "23"))
            (rule "commute_or" (formula "23"))
            (rule "commute_and_2" (formula "22") (term "1"))
            (rule "cnf_rightDist" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "cnf_rightDist" (formula "23"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "cnf_rightDist" (formula "23"))
            (rule "andLeft" (formula "23"))
            (rule "commute_or" (formula "23"))
            (rule "cnf_rightDist" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "commute_or" (formula "22"))
            (rule "cnf_rightDist" (formula "23"))
            (rule "andLeft" (formula "23"))
            (rule "commute_or" (formula "24"))
            (rule "cnf_rightDist" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "commute_or" (formula "23"))
            (rule "cnf_rightDist" (formula "24"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "commute_or" (formula "24"))
            (rule "cnf_rightDist" (formula "22"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "commute_or" (formula "22"))
            (rule "commute_or_2" (formula "38") (term "0,0,1,0"))
            (rule "applyEq_and_gen2" (formula "21") (term "1,0,1,0"))
            (rule "lenNonNegative" (formula "17") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "17"))
            (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
            (rule "shift_paren_and" (formula "20") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "castedGetAny" (formula "20") (term "0,0,1,0,0,1,0"))
            (rule "castedGetAny" (formula "20") (term "1,0,1,1,0,0,1,0"))
            (rule "castedGetAny" (formula "20") (term "1,0,0,1,0,1,0"))
            (rule "castedGetAny" (formula "20") (term "0,0,0,0,0,1,0"))
            (rule "cnf_rightDist" (formula "20") (term "0"))
            (rule "distr_forallAnd" (formula "20"))
            (rule "andLeft" (formula "20"))
            (rule "shift_paren_or" (formula "21") (term "0"))
            (rule "cnf_rightDist" (formula "20") (term "0"))
            (rule "distr_forallAnd" (formula "20"))
            (rule "andLeft" (formula "20"))
            (rule "shift_paren_or" (formula "21") (term "0"))
            (rule "cnf_rightDist" (formula "20") (term "0"))
            (rule "distr_forallAnd" (formula "20"))
            (rule "andLeft" (formula "20"))
            (rule "commute_or_2" (formula "20") (term "0"))
            (rule "shift_paren_or" (formula "21") (term "0"))
            (rule "commute_or" (formula "20") (term "0,0"))
            (rule "commute_or" (formula "41") (term "0,0,0,1,0"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "15") (inst "iv=iv"))
            (rule "andLeft" (formula "15"))
            (rule "lenOfSeqSub" (formula "16") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "16") (term "1,1,1,0,0"))
            (rule "polySimp_addComm0" (formula "16") (term "1,1,1,0,0"))
            (rule "lenOfSeqSub" (formula "15") (term "0"))
            (rule "polySimp_elimSub" (formula "15") (term "1,0"))
            (rule "polySimp_addComm0" (formula "15") (term "1,0"))
            (rule "lenOfSeqSubEQ" (formula "15") (term "1") (ifseqformula "17"))
            (rule "eqSymm" (formula "15"))
            (rule "polySimp_elimSub" (formula "15") (term "1,0"))
            (rule "polySimp_addComm0" (formula "15") (term "1,0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "true_left" (formula "15"))
            (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,1,1,0,0"))
            (rule "polySimp_addComm1" (formula "15") (term "0,0,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
            (rule "applyEq" (formula "15") (term "0,0,1,0") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "true_left" (formula "15"))
            (rule "shift_paren_and" (formula "24") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "castedGetAny" (formula "24") (term "1,0,1,1,0,0,1,0"))
            (rule "castedGetAny" (formula "24") (term "0,0,1,0,0,1,0"))
            (rule "castedGetAny" (formula "24") (term "0,0,0,0,0,1,0"))
            (rule "cnf_rightDist" (formula "24") (term "0"))
            (rule "distr_forallAnd" (formula "24"))
            (rule "andLeft" (formula "24"))
            (rule "shift_paren_or" (formula "25") (term "0"))
            (rule "cnf_rightDist" (formula "24") (term "0"))
            (rule "distr_forallAnd" (formula "24"))
            (rule "andLeft" (formula "24"))
            (rule "shift_paren_or" (formula "25") (term "0"))
            (rule "cnf_rightDist" (formula "24") (term "0"))
            (rule "distr_forallAnd" (formula "24"))
            (rule "andLeft" (formula "24"))
            (rule "commute_or_2" (formula "24") (term "0"))
            (rule "shift_paren_or" (formula "25") (term "0"))
            (rule "commute_or" (formula "24") (term "0,0"))
            (rule "all_pull_out3" (formula "44") (term "0"))
            (rule "shift_paren_or" (formula "44") (term "0,0"))
            (rule "shift_paren_or" (formula "44") (term "0,0,0"))
            (rule "shift_paren_or" (formula "44") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "44") (term "0,0,0,0,0"))
            (rule "commute_or" (formula "44") (term "0,0,0,0,0,0"))
            (rule "cut_direct" (formula "31") (term "0,0"))
            (branch "CUT: self_25.list.tail = null TRUE"
                (builtin "One Step Simplification" (formula "32"))
               (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "31"))
                (builtin "One Step Simplification" (formula "28"))
               (rule "true_left" (formula "28"))
               (rule "replace_known_left" (formula "38") (term "0") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "38"))
               (rule "true_left" (formula "38"))
               (rule "replace_known_left" (formula "33") (term "0") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "31")))
               (rule "true_left" (formula "33"))
               (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "34"))
               (rule "true_left" (formula "34"))
               (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "31"))
                (builtin "One Step Simplification" (formula "28"))
               (rule "true_left" (formula "28"))
               (rule "replace_known_left" (formula "28") (term "0,1") (ifseqformula "29"))
                (builtin "One Step Simplification" (formula "28"))
               (rule "replace_known_left" (formula "33") (term "1") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "33"))
               (rule "true_left" (formula "33"))
               (rule "replace_known_left" (formula "37") (term "0") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "37"))
               (rule "true_left" (formula "37"))
               (rule "replace_known_left" (formula "36") (term "0") (ifseqformula "29"))
                (builtin "One Step Simplification" (formula "36"))
               (rule "true_left" (formula "36"))
               (rule "replace_known_left" (formula "31") (term "0,1") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "28")))
               (rule "true_left" (formula "31"))
               (rule "replace_known_left" (formula "33") (term "0") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "33"))
               (rule "true_left" (formula "33"))
               (rule "replace_known_left" (formula "33") (term "0") (ifseqformula "28"))
                (builtin "One Step Simplification" (formula "33"))
               (rule "true_left" (formula "33"))
               (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "28"))
                (builtin "One Step Simplification" (formula "32"))
               (rule "true_left" (formula "32"))
               (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "28"))
                (builtin "One Step Simplification" (formula "31"))
               (rule "true_left" (formula "31"))
               (rule "applyEq" (formula "23") (term "0,0,0,0,0,0") (ifseqformula "30"))
               (rule "applyEq" (formula "33") (term "0,1,1,0,0,0") (ifseqformula "30"))
               (rule "applyEq" (formula "32") (term "0,1,0,0,0,0,0,0,0,0") (ifseqformula "30"))
               (rule "applyEq" (formula "21") (term "0,1,0,1,0,0,0") (ifseqformula "30"))
               (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "eqSymm" (formula "17"))
               (rule "applyEq" (formula "22") (term "0,1,0,0,0,0,0") (ifseqformula "30"))
               (rule "applyEq" (formula "31") (term "0,1,0,0,0") (ifseqformula "30"))
               (rule "applyEq" (formula "21") (term "0,0,0,0,0,0") (ifseqformula "30"))
               (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "30"))
               (rule "applyEq" (formula "31") (term "0,1,0,0,0,0") (ifseqformula "30"))
               (rule "applyEq" (formula "20") (term "0,0,0,0,0,0") (ifseqformula "30"))
               (rule "applyEq" (formula "32") (term "0,0,0,0,0,0,0,0,0,0") (ifseqformula "30"))
               (rule "applyEq" (formula "23") (term "1,1,0") (ifseqformula "17"))
               (rule "applyEq" (formula "20") (term "1,1,0") (ifseqformula "17"))
               (rule "applyEq" (formula "31") (term "1,1,1,0") (ifseqformula "17"))
               (rule "add_literals" (formula "31") (term "1,1,0"))
               (rule "applyEq" (formula "11") (term "1,1,1,1,0,0,0") (ifseqformula "17"))
               (rule "add_zero_right" (formula "11") (term "1,1,1,0,0,0"))
               (rule "applyEq" (formula "32") (term "1,1,0,0,0,0,0") (ifseqformula "17"))
               (rule "applyEq" (formula "33") (term "1,1,0") (ifseqformula "17"))
               (rule "applyEq" (formula "19") (term "0") (ifseqformula "17"))
               (rule "leq_literals" (formula "19"))
               (rule "true_left" (formula "19"))
               (rule "applyEq" (formula "15") (term "2,0") (ifseqformula "17"))
               (rule "applyEq" (formula "26") (term "1,1,0") (ifseqformula "17"))
               (rule "applyEq" (formula "11") (term "1,1,1,1,0,0") (ifseqformula "17"))
               (rule "add_zero_right" (formula "11") (term "1,1,1,0,0"))
               (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "17"))
               (rule "applyEq" (formula "20") (term "1,1,0") (ifseqformula "17"))
               (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "17"))
               (rule "applyEq" (formula "23") (term "1,1,0") (ifseqformula "17"))
               (rule "applyEq" (formula "11") (term "1,1,1,0,0,0,0,0") (ifseqformula "17"))
               (rule "add_zero_right" (formula "11") (term "1,1,0,0,0,0,0"))
               (rule "applyEq" (formula "8") (term "0") (ifseqformula "17"))
               (rule "inEqSimp_homoInEq1" (formula "8"))
               (rule "times_zero_2" (formula "8") (term "1,0"))
               (rule "add_zero_right" (formula "8") (term "0"))
               (rule "applyEq" (formula "11") (term "1,1,1,1,0,0,0,0") (ifseqformula "17"))
               (rule "add_zero_right" (formula "11") (term "1,1,1,0,0,0,0"))
               (rule "applyEq" (formula "31") (term "1,1,0,0,0") (ifseqformula "17"))
               (rule "applyEq" (formula "13") (term "0") (ifseqformula "17"))
               (rule "qeq_literals" (formula "13"))
               (rule "true_left" (formula "13"))
               (rule "applyEq" (formula "20") (term "1,1,0") (ifseqformula "16"))
               (rule "applyEq" (formula "17") (term "1") (ifseqformula "16"))
               (rule "inEqSimp_sepPosMonomial0" (formula "8"))
               (rule "mul_literals" (formula "8") (term "1"))
               (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "8"))
               (rule "qeq_literals" (formula "9") (term "0"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "closeFalse" (formula "9"))
            )
            (branch "CUT: self_25.list.tail = null FALSE"
                (builtin "One Step Simplification" (formula "31"))
               (rule "true_left" (formula "31"))
               (rule "replace_known_right" (formula "34") (term "0") (ifseqformula "46"))
                (builtin "One Step Simplification" (formula "34"))
               (rule "replace_known_right" (formula "40") (term "0") (ifseqformula "46"))
                (builtin "One Step Simplification" (formula "40"))
               (rule "replace_known_right" (formula "37") (term "0") (ifseqformula "46"))
                (builtin "One Step Simplification" (formula "37"))
               (rule "replace_known_right" (formula "28") (term "1") (ifseqformula "46"))
                (builtin "One Step Simplification" (formula "28"))
               (rule "notLeft" (formula "28"))
               (rule "replace_known_right" (formula "29") (term "0,1") (ifseqformula "46"))
                (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "45")))
               (rule "true_left" (formula "29"))
               (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "45"))
                (builtin "One Step Simplification" (formula "30"))
               (rule "notLeft" (formula "30"))
               (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "31"))
                (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "43")))
               (rule "true_left" (formula "32"))
               (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "31"))
                (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "43")))
               (rule "true_left" (formula "30"))
               (rule "replace_known_left" (formula "36") (term "1") (ifseqformula "35"))
                (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "41")))
               (rule "true_left" (formula "36"))
               (rule "replace_known_right" (formula "28") (term "1") (ifseqformula "40"))
                (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "41")))
               (rule "true_left" (formula "28"))
               (rule "replace_known_left" (formula "33") (term "1") (ifseqformula "34"))
                (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "40")))
               (rule "true_left" (formula "33"))
               (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "39"))
                (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "31")))
               (rule "true_left" (formula "30"))
               (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "37")))
               (rule "true_left" (formula "31"))
               (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "37"))
                (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "36")))
               (rule "true_left" (formula "28"))
               (rule "equalityToSeqGetAndSeqLenRight" (formula "35") (inst "iv=iv"))
                (builtin "One Step Simplification" (formula "35"))
               (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1"))
               (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1"))
               (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "17"))
               (rule "applyEq" (formula "35") (term "0,1,0,0,1,0,0,1") (ifseqformula "17"))
               (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1"))
               (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1"))
               (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1"))
               (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1"))
               (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1"))
               (rule "nnf_imp2or" (formula "35") (term "0,1"))
               (rule "nnf_notAnd" (formula "35") (term "0,0,1"))
               (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,1"))
               (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1"))
               (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1"))
               (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1"))
               (rule "add_zero_left" (formula "35") (term "0,0,1,0,0,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,1"))
               (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,1"))
               (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,1"))
               (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0,1"))
               (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,1"))
               (rule "mul_literals" (formula "35") (term "1,0,0,0,1"))
                (builtin "SMTRule")
            )
         )
         (branch "self_25.index >= 1 FALSE"
            (rule "inEqSimp_geqRight" (formula "16"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_antiSymm" (formula "9") (ifseqformula "1"))
            (rule "applyEq" (formula "11") (term "1,1,0,0,1,0,1,0") (ifseqformula "9"))
            (rule "applyEq" (formula "1") (term "0") (ifseqformula "9"))
            (rule "leq_literals" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "applyEq" (formula "10") (term "1,1,0,1,1,1,1,0,1,0") (ifseqformula "8"))
            (rule "add_zero_right" (formula "10") (term "1,0,1,1,1,1,0,1,0"))
            (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "8"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "8"))
            (rule "add_zero_right" (formula "7") (term "1"))
            (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "8"))
            (rule "applyEq" (formula "10") (term "1,1,0,1,1,0,1,0") (ifseqformula "8"))
            (rule "applyEq" (formula "12") (term "2,0") (ifseqformula "8"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "eqSymm" (formula "12"))
            (rule "applyEq" (formula "9") (term "0") (ifseqformula "8"))
            (rule "qeq_literals" (formula "9"))
            (rule "true_left" (formula "9"))
            (rule "applyEq" (formula "9") (term "1,1,0,1,1,0,1,0,1,0") (ifseqformula "8"))
            (rule "add_zero_right" (formula "9") (term "1,0,1,1,0,1,0,1,0"))
            (rule "applyEq" (formula "10") (term "0,1,1,1,0,0") (ifseqformula "13"))
            (rule "applyEq" (formula "10") (term "0,1,1,0,1,1,0,1,0,1,0") (ifseqformula "13"))
            (rule "applyEq" (formula "10") (term "0,1,1,0,1,1,0,1,0") (ifseqformula "13"))
            (rule "applyEq" (formula "10") (term "0,1,1,1,0,0,1,0,1,0") (ifseqformula "13"))
            (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "13"))
            (rule "applyEq" (formula "9") (term "0,0,0,0,0,0,0,1,0,1,0") (ifseqformula "13"))
            (rule "applyEq" (formula "10") (term "0,0,0,0,0,0,0,1,0,1,0") (ifseqformula "13"))
            (rule "applyEq" (formula "10") (term "0,1,1,1,0,0,1,1,0,1,0") (ifseqformula "13"))
            (rule "applyEq" (formula "9") (term "0,1,0,0,0,1,1,0,1,0") (ifseqformula "13"))
            (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "13"))
            (rule "applyEq" (formula "10") (term "0,1,1,1,1,1,1,1,0,1,0") (ifseqformula "13"))
            (rule "applyEq" (formula "10") (term "0,0,1,1,0,0,1,1,0,1,0") (ifseqformula "8"))
            (rule "times_zero_2" (formula "10") (term "0,1,1,0,0,1,1,0,1,0"))
            (rule "add_zero_left" (formula "10") (term "1,1,0,0,1,1,0,1,0"))
            (rule "applyEq" (formula "10") (term "0,1,0,0,0,0,0,0,1,0,1,0") (ifseqformula "8"))
            (rule "add_zero_left" (formula "10") (term "1,0,0,0,0,0,0,1,0,1,0"))
            (rule "applyEq" (formula "10") (term "0,0,1,1,0,0,1,0,1,0") (ifseqformula "8"))
            (rule "times_zero_2" (formula "10") (term "0,1,1,0,0,1,0,1,0"))
            (rule "add_zero_left" (formula "10") (term "1,1,0,0,1,0,1,0"))
            (rule "applyEq" (formula "10") (term "0,1,0,1,0,1,1,0,1,0,1,0") (ifseqformula "8"))
            (rule "times_zero_2" (formula "10") (term "1,0,1,0,1,1,0,1,0,1,0"))
            (rule "add_literals" (formula "10") (term "0,1,0,1,1,0,1,0,1,0"))
            (rule "applyEq" (formula "10") (term "0,0,1,1,0,0") (ifseqformula "8"))
            (rule "times_zero_2" (formula "10") (term "0,1,1,0,0"))
            (rule "add_zero_left" (formula "10") (term "1,1,0,0"))
            (rule "applyEq" (formula "10") (term "0,1,0,1,1,1,1,1,1,0,1,0") (ifseqformula "8"))
            (rule "times_zero_2" (formula "10") (term "1,0,1,1,1,1,1,1,0,1,0"))
            (rule "add_literals" (formula "10") (term "0,1,1,1,1,1,1,0,1,0"))
            (rule "applyEq" (formula "10") (term "0,1,1,1,0,1,1,0,1,0") (ifseqformula "8"))
            (rule "add_zero_left" (formula "10") (term "1,1,1,0,1,1,0,1,0"))
            (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "7"))
            (rule "leq_literals" (formula "12") (term "0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "true_left" (formula "12"))
            (rule "inEqSimp_or_tautInEq0" (formula "9") (term "0,0"))
            (rule "add_zero_right" (formula "9") (term "1,1,0,0"))
            (rule "qeq_literals" (formula "9") (term "1,0,0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "true_left" (formula "9"))
            (rule "commute_or" (formula "9") (term "0,1,0,1,0,1,0"))
            (rule "commute_or_2" (formula "9") (term "0,1,1,0,1,0"))
            (rule "commute_or" (formula "9") (term "0,0,1,1,0,1,0"))
            (rule "cnf_rightDist" (formula "9") (term "1,1,1,0,1,0"))
            (rule "commute_or" (formula "9") (term "1,1,1,1,0,1,0"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "1") (term "0") (ifseqformula "2"))
            (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "shift_paren_and" (formula "9") (term "0,1,0,1,0"))
            (rule "shift_paren_and" (formula "9") (term "1,1,0,1,0"))
            (rule "shift_paren_and" (formula "9") (term "1,0,1,0"))
            (rule "shift_paren_and" (formula "9") (term "0,1,0,1,0"))
            (rule "shift_paren_and" (formula "9") (term "0,1,0"))
            (rule "shift_paren_and" (formula "9") (term "0,0,1,0"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1") (ifseqformula "2"))
            (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "15"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "shift_paren_and" (formula "9") (term "0,0,0,1,0"))
            (rule "shift_paren_and" (formula "9") (term "0,0,0,0,1,0"))
            (rule "shift_paren_and" (formula "9") (term "0,0,0,0,0,1,0"))
            (rule "ex_pull_out3" (formula "9") (term "0"))
            (rule "cnf_rightDist" (formula "9") (term "0,0"))
            (rule "shift_paren_or" (formula "9") (term "1,0,0"))
            (rule "commute_or_2" (formula "9") (term "0,1,0,0"))
            (rule "inEqSimp_or_tautInEq1" (formula "9") (term "1,0,0"))
            (rule "inEqSimp_homoInEq1" (formula "9") (term "1,1,0,0"))
            (rule "polySimp_pullOutFactor1" (formula "9") (term "0,1,1,0,0"))
            (rule "add_literals" (formula "9") (term "1,0,1,1,0,0"))
            (rule "times_zero_1" (formula "9") (term "0,1,1,0,0"))
            (rule "leq_literals" (formula "9") (term "1,1,0,0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "cnf_rightDist" (formula "9") (term "0,0"))
            (rule "shift_paren_or" (formula "9") (term "1,0,0"))
            (rule "inEqSimp_or_tautInEq3" (formula "9") (term "0,1,0,0"))
            (rule "add_zero_right" (formula "9") (term "1,1,0,1,0,0"))
            (rule "qeq_literals" (formula "9") (term "1,0,1,0,0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "cnf_rightDist" (formula "9") (term "0,0"))
            (rule "shift_paren_or" (formula "9") (term "1,0,0"))
            (rule "commute_or_2" (formula "9") (term "0,1,0,0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "cnf_rightDist" (formula "9") (term "0,0,0"))
            (rule "commute_or_2" (formula "9") (term "1,0,0,0"))
            (rule "shift_paren_or" (formula "9") (term "0,1,0,0,0"))
            (rule "commute_or" (formula "9") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_or_tautInEq1" (formula "9") (term "0,1,0,0,0"))
            (rule "inEqSimp_homoInEq1" (formula "9") (term "1,0,1,0,0,0"))
            (rule "polySimp_pullOutFactor1" (formula "9") (term "0,1,0,1,0,0,0"))
            (rule "add_literals" (formula "9") (term "1,0,1,0,1,0,0,0"))
            (rule "times_zero_1" (formula "9") (term "0,1,0,1,0,0,0"))
            (rule "leq_literals" (formula "9") (term "1,0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "cnf_rightDist" (formula "9") (term "0,0,0"))
            (rule "commute_or_2" (formula "9") (term "1,0,0,0"))
            (rule "shift_paren_or" (formula "9") (term "0,1,0,0,0"))
            (rule "inEqSimp_or_tautInEq2" (formula "9") (term "0,0,1,0,0,0"))
            (rule "add_zero_right" (formula "9") (term "1,1,0,0,1,0,0,0"))
            (rule "qeq_literals" (formula "9") (term "1,0,0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "cnf_rightDist" (formula "9") (term "0,0,0"))
            (rule "shift_paren_or" (formula "9") (term "1,0,0,0"))
            (rule "commute_or_2" (formula "9") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "cnf_rightDist" (formula "9") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "9") (term "0,0,0,0,0"))
            (rule "shift_paren_or" (formula "9") (term "1,0,0,0,0"))
            (rule "commute_or" (formula "9") (term "0,0,0,0,0,0"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "11") (inst "iv=iv"))
            (rule "andLeft" (formula "11"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
            (rule "applyEq" (formula "12") (term "0,0,1,0,0,1,0,0") (ifseqformula "13"))
            (rule "applyEq" (formula "12") (term "0,0,1,0") (ifseqformula "13"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "true_left" (formula "12"))
            (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "12"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "seqGetAlphaCast" (formula "12") (term "0"))
            (rule "castedGetAny" (formula "12") (term "0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "true_left" (formula "12"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "10") (inst "iv=iv"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "andLeft" (formula "10"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
            (rule "applyEq" (formula "11") (term "0,0,1,0") (ifseqformula "12"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "11"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "lenNonNegative" (formula "7") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "7"))
            (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "8"))
            (rule "leq_literals" (formula "7") (term "0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "true_left" (formula "7"))
            (rule "commute_and_2" (formula "9") (term "0,0,0"))
            (rule "commute_and_2" (formula "9") (term "0,0"))
            (rule "commute_and" (formula "9") (term "0,0,0,0"))
            (rule "Partial_inv_axiom_for_JML_class_invariant_nr_2_in_LinkedList" (formula "14") (inst "n=n_3") (inst "i_3=i_3") (inst "f=f") (inst "i_2=i_2") (inst "i_1=i_1") (inst "j=j") (inst "i_0=i_0") (inst "i=i"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "translateJavaSubInt" (formula "14") (term "1,0,1,1,1,1,0,0,0"))
            (rule "translateJavaSubInt" (formula "14") (term "1,1,0,0,1,0,0"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "eqSymm" (formula "21") (term "1,1,0,1,0"))
            (rule "eqSymm" (formula "21") (term "0,1,0,1,0"))
            (rule "eqSymm" (formula "20") (term "1,0"))
            (rule "eqSymm" (formula "19") (term "1,0,1"))
            (rule "eqSymm" (formula "19") (term "1,1"))
            (rule "eqSymm" (formula "15"))
            (rule "polySimp_elimSub" (formula "20") (term "1,1,0,0"))
            (rule "mul_literals" (formula "20") (term "1,1,1,0,0"))
            (rule "polySimp_elimSub" (formula "19") (term "1,0,0,1,1"))
            (rule "mul_literals" (formula "19") (term "1,1,0,0,1,1"))
            (rule "polySimp_addComm0" (formula "20") (term "1,0,0,1,0"))
            (rule "polySimp_addComm0" (formula "20") (term "1,1,0,0"))
            (rule "polySimp_addComm0" (formula "19") (term "1,0,0,1,1"))
            (rule "castedGetAny" (formula "22") (term "1,1,1,0"))
            (rule "castedGetAny" (formula "21") (term "0,0,1,0,1,0"))
            (rule "castedGetAny" (formula "21") (term "1,0,1,0,1,0"))
            (rule "castedGetAny" (formula "20") (term "1,1,1,0"))
            (rule "castedGetAny" (formula "19") (term "0,1,0,1"))
            (rule "castedGetAny" (formula "20") (term "0,1,0"))
            (rule "eqSymm" (formula "20") (term "1,0"))
            (rule "castedGetAny" (formula "19") (term "0,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
            (rule "applyEq" (formula "22") (term "0,0,1,0") (ifseqformula "11"))
            (rule "applyEq" (formula "22") (term "0,0,1,0,0,1,0,0") (ifseqformula "11"))
            (rule "applyEq" (formula "19") (term "0,1,0,1") (ifseqformula "12"))
            (rule "eqSymm" (formula "19") (term "1,0,1"))
            (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "11"))
            (rule "eqSymm" (formula "15"))
            (rule "applyEq" (formula "16") (term "0") (ifseqformula "14"))
            (rule "applyEq" (formula "18") (term "0,1,0,1,0,1,0") (ifseqformula "11"))
            (rule "applyEq" (formula "18") (term "0,0,1,0,0,1,0,0") (ifseqformula "11"))
            (rule "applyEq" (formula "19") (term "1,1,0,1,1") (ifseqformula "14"))
            (rule "applyEq" (formula "17") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
            (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
            (rule "applyEq" (formula "21") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "14"))
            (rule "applyEq" (formula "21") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
            (rule "applyEq" (formula "14") (term "0") (ifseqformula "15"))
            (rule "applyEq" (formula "9") (term "1,1,1,0,0,0,0") (ifseqformula "14"))
            (rule "applyEq" (formula "9") (term "1,1,1,0,0,0") (ifseqformula "14"))
            (rule "applyEq" (formula "7") (term "0") (ifseqformula "14"))
            (rule "applyEq" (formula "9") (term "1,1,0,0,0,0,0") (ifseqformula "14"))
            (rule "applyEq" (formula "9") (term "1,1,1,0,0") (ifseqformula "14"))
            (rule "applyEq" (formula "18") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
            (rule "applyEq" (formula "15") (term "1") (ifseqformula "14"))
            (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
            (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,1,0"))
            (rule "mul_literals" (formula "21") (term "0,1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
            (rule "nnf_imp2or" (formula "21") (term "1,0,1,0"))
            (rule "nnf_imp2or" (formula "17") (term "0"))
            (rule "nnf_imp2or" (formula "20") (term "0"))
            (rule "nnf_imp2or" (formula "18") (term "0"))
            (rule "nnf_imp2or" (formula "22") (term "0"))
            (rule "nnf_imp2or" (formula "21") (term "0"))
            (rule "nnf_notAnd" (formula "17") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
            (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "17") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
            (rule "mul_literals" (formula "17") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "20") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
            (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "20") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
            (rule "mul_literals" (formula "20") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
            (rule "nnf_notAnd" (formula "18") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
            (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "18") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
            (rule "mul_literals" (formula "18") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "22") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
            (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "22") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
            (rule "mul_literals" (formula "22") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "21") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
            (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
            (rule "mul_literals" (formula "21") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
            (rule "nnf_imp2or" (formula "21") (term "0,1,0"))
            (rule "nnf_notAnd" (formula "21") (term "0,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,1,0"))
            (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,1,0"))
            (rule "add_literals" (formula "21") (term "0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,1,0"))
            (rule "mul_literals" (formula "21") (term "1,0,0,0,1,0"))
            (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,1,0"))
            (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,1,0"))
            (rule "commute_and" (formula "19") (term "0,0"))
            (rule "commute_and_2" (formula "19") (term "0,1"))
            (rule "commute_or_2" (formula "20") (term "0"))
            (rule "commute_or_2" (formula "22") (term "0"))
            (rule "commute_and" (formula "17") (term "1,0,1,0"))
            (rule "commute_and" (formula "17") (term "0,0,1,0"))
            (rule "commute_and" (formula "18") (term "1,0,1,0"))
            (rule "commute_and" (formula "18") (term "0,0,1,0"))
            (rule "commute_or" (formula "20") (term "0,0"))
            (rule "commute_or" (formula "22") (term "0,0"))
            (rule "commute_and_2" (formula "19") (term "0"))
            (rule "cnf_rightDist" (formula "19"))
            (rule "andLeft" (formula "19"))
            (rule "cnf_rightDist" (formula "20"))
            (rule "andLeft" (formula "20"))
            (rule "cnf_rightDist" (formula "20"))
            (rule "andLeft" (formula "20"))
            (rule "commute_or" (formula "20"))
            (rule "cnf_rightDist" (formula "19"))
            (rule "andLeft" (formula "19"))
            (rule "cnf_rightDist" (formula "20"))
            (rule "andLeft" (formula "20"))
            (rule "commute_or" (formula "21"))
            (rule "cnf_rightDist" (formula "20"))
            (rule "andLeft" (formula "20"))
            (rule "commute_or" (formula "20"))
            (rule "shift_paren_or" (formula "27") (term "0,1,0"))
            (rule "commute_and_2" (formula "19") (term "1"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "andLeft" (formula "19"))
            (rule "andLeft" (formula "19"))
            (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "true_left" (formula "23"))
            (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "19"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "true_left" (formula "24"))
            (rule "replace_known_left" (formula "25") (term "0") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "true_left" (formula "25"))
            (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "19"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "true_left" (formula "22"))
            (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "true_left" (formula "23"))
            (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "true_left" (formula "22"))
            (rule "applyEq" (formula "23") (term "0,1,0,1,0,0,1,0") (ifseqformula "21"))
            (rule "applyEq" (formula "23") (term "0,0,0,1,0,0,1,0") (ifseqformula "21"))
            (rule "applyEq" (formula "22") (term "0,1,0,0,0,0") (ifseqformula "21"))
            (rule "applyEq" (formula "22") (term "0,1,0,0,0") (ifseqformula "21"))
            (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "eqSymm" (formula "15"))
            (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "21"))
            (rule "applyEq" (formula "24") (term "0,1,1,0,0,0") (ifseqformula "21"))
            (rule "applyEq" (formula "17") (term "0,1,1,1,0,1,0") (ifseqformula "21"))
            (rule "applyEq" (formula "17") (term "1,1,0,0") (ifseqformula "15"))
            (rule "applyEq" (formula "9") (term "1,1,1,0,0,0,0") (ifseqformula "15"))
            (rule "applyEq" (formula "7") (term "0") (ifseqformula "15"))
            (rule "qeq_literals" (formula "7"))
            (rule "closeFalse" (formula "7"))
         )
      )
      (branch "self_25.list.values.length >= 1 + self_25.index FALSE"
         (rule "qeq_literals" (formula "7"))
         (rule "closeFalse" (formula "7"))
      )
   )
)
(branch "Null Reference (n = null)"
    (builtin "One Step Simplification" (formula "1"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "Class_invariant_axiom_for_LinkedListIterator" (formula "8") (inst "f_0=f_0") (inst "i_0=i_0") (inst "f=f") (inst "i=i") (userinteraction))
   (rule "hide_right" (formula "11") (userinteraction))
   (rule "false_right" (formula "9"))
   (rule "andLeft" (formula "8"))
   (rule "notLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "eqSymm" (formula "14") (term "1"))
   (rule "eqSymm" (formula "13"))
   (rule "eqSymm" (formula "12"))
   (rule "replace_known_left" (formula "14") (term "2") (ifseqformula "1"))
   (rule "castedGetAny" (formula "14") (term "0,1"))
   (rule "lenOfSeqSubEQ" (formula "10") (term "1,1,0,0") (ifseqformula "12"))
   (rule "polySimp_elimSub" (formula "10") (term "1,1,1,0,0"))
   (rule "times_zero_2" (formula "10") (term "1,1,1,1,0,0"))
   (rule "add_zero_right" (formula "10") (term "1,1,1,0,0"))
   (rule "lenOfSeqSubEQ" (formula "11") (term "1,1,0,0") (ifseqformula "13"))
   (rule "polySimp_elimSub" (formula "11") (term "1,1,1,0,0"))
   (rule "polySimp_addComm0" (formula "11") (term "1,1,1,0,0"))
   (rule "lenOfSeqSubEQ" (formula "7") (term "0") (ifseqformula "13"))
   (rule "polySimp_elimSub" (formula "7") (term "1,0"))
   (rule "polySimp_addComm0" (formula "7") (term "1,0"))
   (rule "inEqSimp_ltToLeq" (formula "14") (term "0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
   (rule "polySimp_addComm1" (formula "14") (term "0,0"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,1,0,0"))
   (rule "add_zero_right" (formula "10") (term "0,0,1,1,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,1,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,1,0,0"))
   (rule "polySimp_addComm1" (formula "11") (term "0,0,1,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0"))
   (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_gtToGeq" (formula "7"))
   (rule "times_zero_1" (formula "7") (term "1,0,0"))
   (rule "add_zero_right" (formula "7") (term "0,0"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "9"))
   (rule "inEqSimp_commuteLeq" (formula "8"))
   (rule "applyEq" (formula "14") (term "1,1") (ifseqformula "1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "0,0"))
   (rule "polySimp_elimOne" (formula "14") (term "0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,1,0,0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,1,0,0,1,0,0"))
   (rule "polySimp_elimOne" (formula "10") (term "0,0,0,1,0,0,1,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0,1,0,0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,0,0,1,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,0,0,1,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,1,0"))
   (rule "polySimp_mulLiterals" (formula "7") (term "0,0,1,0"))
   (rule "polySimp_elimOne" (formula "7") (term "0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
   (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "7"))
   (rule "mul_literals" (formula "7") (term "1"))
   (rule "getOfSeqSubEQ" (formula "10") (term "1,0,1,0,1,0") (ifseqformula "12"))
   (rule "castDel" (formula "10") (term "2,1,0,1,0,1,0"))
   (rule "add_zero_right" (formula "10") (term "1,1,1,0,1,0,1,0"))
   (rule "polySimp_elimSub" (formula "10") (term "1,1,0,1,0,1,0,1,0"))
   (rule "mul_literals" (formula "10") (term "1,1,1,0,1,0,1,0,1,0"))
   (rule "add_zero_right" (formula "10") (term "1,1,0,1,0,1,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,1,0,1,0,1,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,1,0,1,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,1,0,1,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,1,0,1,0,1,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,1,0,1,0,1,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,1,0,1,0,1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,1,0,1,0,1,0"))
   (rule "mul_literals" (formula "10") (term "0,1,1,0,1,0,1,0,1,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,1,0,1,0,1,0"))
   (rule "getOfSeqSubEQ" (formula "11") (term "1,0,1,0,1,0") (ifseqformula "13"))
   (rule "castDel" (formula "11") (term "2,1,0,1,0,1,0"))
   (rule "polySimp_elimSub" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
   (rule "polySimp_addComm0" (formula "11") (term "1,1,1,0,1,0,1,0"))
   (rule "polySimp_addComm0" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,1,0,1,0,1,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,1,0,1,0,1,0"))
   (rule "polySimp_mulAssoc" (formula "11") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0,0,1,0,1,0,1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
   (rule "polySimp_elimOne" (formula "11") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,1,0,1,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,1,0,1,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,1,0,1,0,1,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,1,0,1,0,1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,1,0,1,0,1,0"))
   (rule "polySimp_rightDist" (formula "11") (term "0,1,1,0,1,0,1,0,1,0"))
   (rule "mul_literals" (formula "11") (term "0,0,1,1,0,1,0,1,0,1,0"))
   (rule "nnf_imp2or" (formula "10") (term "0"))
   (rule "nnf_imp2or" (formula "11") (term "0"))
   (rule "nnf_notAnd" (formula "10") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
   (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "10") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
   (rule "mul_literals" (formula "10") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "11") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
   (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "11") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
   (rule "mul_literals" (formula "11") (term "1,0,0,0"))
   (rule "commute_and" (formula "10") (term "1,0,1,0"))
   (rule "commute_and" (formula "10") (term "0,0,1,0"))
   (rule "commute_and" (formula "11") (term "1,0,1,0"))
   (rule "commute_and" (formula "11") (term "0,0,1,0"))
   (rule "applyEq_and_gen2" (formula "10") (term "1,0,1,0"))
   (rule "ifEqualsNull" (formula "10") (term "0,0,1,0,1,0"))
   (rule "nnf_notOr" (formula "10") (term "0,1,0,1,0"))
   (rule "nnf_notAnd" (formula "10") (term "0,0,1,0,1,0"))
   (rule "nnf_notAnd" (formula "10") (term "1,0,1,0,1,0"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "nnf_notAnd" (formula "10") (term "0,0,0,1,0,1,0"))
   (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0,1,0,1,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0,1,0,1,0"))
   (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
   (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0,1,0,1,0"))
   (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0,1,0,1,0"))
   (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,0,1,0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0,1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,1,0,1,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,1,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,0,1,0,1,0"))
   (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,0,1,0,1,0"))
   (rule "add_literals" (formula "10") (term "0,0,0,0,0,0,1,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,1,0,1,0"))
   (rule "mul_literals" (formula "10") (term "1,0,0,0,0,1,0,1,0"))
   (rule "applyEq_and_gen2" (formula "11") (term "1,0,1,0"))
   (rule "ifEqualsNull" (formula "11") (term "0,0,1,0,1,0"))
   (rule "nnf_notOr" (formula "11") (term "0,1,0,1,0"))
   (rule "nnf_notAnd" (formula "11") (term "0,0,1,0,1,0"))
   (rule "nnf_notAnd" (formula "11") (term "1,0,1,0,1,0"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "nnf_notAnd" (formula "11") (term "0,0,0,1,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0,1,0,1,0"))
   (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,0,1,0,1,0"))
   (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,0,1,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,1,0,1,0"))
   (rule "mul_literals" (formula "11") (term "1,0,0,0,0,1,0,1,0"))
   (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0,1,0,1,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0,1,0,1,0"))
   (rule "polySimp_rightDist" (formula "11") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
   (rule "mul_literals" (formula "11") (term "0,0,1,0,0,1,0,0,0,1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,1,0,0,0,1,0,1,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,0,1,0,0,1,0,0,0,1,0,1,0"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0,1,0,1,0"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,0,0,0,1,0,1,0"))
   (rule "add_literals" (formula "11") (term "0,0,0,0,1,0,0,0,1,0,1,0"))
   (rule "add_zero_left" (formula "11") (term "0,0,0,1,0,0,0,1,0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0,1,0,1,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0,1,0,1,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0,1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0,1,0,1,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0,1,0,1,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "0,1,1,0,0,0,1,0,1,0"))
   (rule "commute_or" (formula "10") (term "1,0,1,0,1,0"))
   (rule "commute_or_2" (formula "10") (term "0,0,1,0,1,0"))
   (rule "commute_or" (formula "11") (term "1,0,1,0,1,0"))
   (rule "commute_or_2" (formula "11") (term "0,0,1,0,1,0"))
   (rule "ifthenelse_split_for" (formula "14"))
   (branch "self_25.list.values.length >= 1 + self_25.index TRUE"
      (rule "replace_known_left" (formula "11") (term "0,1,1,0,0") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "inEqSimp_homoInEq1" (formula "7"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
      (rule "polySimp_rightDist" (formula "7") (term "1,0"))
      (rule "polySimp_mulAssoc" (formula "7") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "7") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "0,1,0"))
      (rule "polySimp_elimOne" (formula "7") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "7") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "7"))
      (rule "polySimp_mulLiterals" (formula "7") (term "0"))
      (rule "polySimp_elimOne" (formula "7") (term "0"))
      (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "13"))
      (rule "inEqSimp_homoInEq0" (formula "8") (term "0"))
      (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0"))
      (rule "add_literals" (formula "8") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "8") (term "1,0,0"))
      (rule "add_zero_right" (formula "8") (term "0,0"))
      (rule "qeq_literals" (formula "8") (term "0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "commute_or" (formula "8") (term "0,0,0,1,0,1,0"))
      (rule "commute_or" (formula "9") (term "0,0,0,1,0,1,0"))
      (rule "ifthenelse_to_or_right" (formula "8") (term "1,1,0,1,0"))
      (rule "nnf_notAnd" (formula "8") (term "0,0,1,1,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,1,1,0,1,0"))
      (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0,1,1,0,1,0"))
      (rule "add_zero_right" (formula "8") (term "0,0,0,0,0,1,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,1,1,0,1,0"))
      (rule "mul_literals" (formula "8") (term "1,0,0,0,1,1,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0,1,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,1,1,0,1,0"))
      (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,1,1,0,1,0"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,1,1,0,1,0"))
      (rule "add_literals" (formula "8") (term "0,0,0,1,0,0,1,1,0,1,0"))
      (rule "add_zero_left" (formula "8") (term "0,0,1,0,0,1,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0,1,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,1,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,1,1,0,1,0"))
      (rule "commute_or" (formula "8") (term "1,1,1,0,1,0"))
      (rule "commute_or_2" (formula "8") (term "0,1,1,0,1,0"))
      (rule "equalityToSeqGetAndSeqLenLeft" (formula "11") (inst "iv=iv"))
      (rule "andLeft" (formula "11"))
      (rule "lenOfSeqSub" (formula "11") (term "0"))
      (rule "polySimp_elimSub" (formula "11") (term "1,0"))
      (rule "polySimp_addComm0" (formula "11") (term "1,0"))
      (rule "lenOfSeqSub" (formula "12") (term "1,1,0,0"))
      (rule "polySimp_elimSub" (formula "12") (term "1,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "12") (term "1,1,1,0,0"))
      (rule "lenOfSeqSubEQ" (formula "11") (term "1") (ifseqformula "13"))
      (rule "eqSymm" (formula "11"))
      (rule "polySimp_elimSub" (formula "11") (term "1,0"))
      (rule "polySimp_addComm0" (formula "11") (term "1,0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "true_left" (formula "11"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,1,0,0"))
      (rule "polySimp_addComm1" (formula "11") (term "0,0,1,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
      (rule "applyEq" (formula "11") (term "0,0,1,0") (ifseqformula "12"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "true_left" (formula "11"))
      (rule "lenNonNegative" (formula "11") (term "2,0"))
      (rule "inEqSimp_commuteLeq" (formula "11"))
      (rule "equalityToSeqGetAndSeqLenLeft" (formula "10") (inst "iv=iv"))
      (rule "andLeft" (formula "10"))
      (rule "lenOfSeqSub" (formula "10") (term "0"))
      (rule "polySimp_elimSub" (formula "10") (term "1,0"))
      (rule "times_zero_2" (formula "10") (term "1,1,0"))
      (rule "add_zero_right" (formula "10") (term "1,0"))
      (rule "lenOfSeqSubEQ" (formula "10") (term "1") (ifseqformula "12"))
      (rule "eqSymm" (formula "10"))
      (rule "polySimp_elimSub" (formula "10") (term "1,0"))
      (rule "mul_literals" (formula "10") (term "1,1,0"))
      (rule "add_zero_right" (formula "10") (term "1,0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "true_left" (formula "10"))
      (rule "lenOfSeqSub" (formula "10") (term "1,1,0,0"))
      (rule "polySimp_elimSub" (formula "10") (term "1,1,1,0,0"))
      (rule "times_zero_2" (formula "10") (term "1,1,1,1,0,0"))
      (rule "add_zero_right" (formula "10") (term "1,1,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,1,0,0"))
      (rule "add_zero_right" (formula "10") (term "0,0,1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
      (rule "applyEq" (formula "10") (term "0,0,1,0") (ifseqformula "11"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "true_left" (formula "10"))
      (rule "cnf_rightDist" (formula "8") (term "1,0,1,0,1,0"))
      (rule "cnf_rightDist" (formula "9") (term "1,0,1,0,1,0"))
      (rule "commute_or" (formula "8") (term "0,0,1,1,0,1,0"))
      (rule "ifthenelse_to_or_right" (formula "9") (term "1,1,0,1,0"))
      (rule "nnf_notAnd" (formula "9") (term "0,0,1,1,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,1,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,1,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "9") (term "0,1,0,0,1,0,0,1,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,0,0,1,0,0,1,1,0,1,0"))
      (rule "mul_literals" (formula "9") (term "0,0,1,0,0,1,0,0,1,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "9") (term "1,0,1,0,0,1,0,0,1,1,0,1,0"))
      (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,1,1,0,1,0"))
      (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,1,0,0,1,1,0,1,0"))
      (rule "add_literals" (formula "9") (term "0,0,0,0,1,0,0,1,1,0,1,0"))
      (rule "add_zero_left" (formula "9") (term "0,0,0,1,0,0,1,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,1,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "0,1,1,0,0,1,1,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,1,1,0,1,0"))
      (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0,1,1,0,1,0"))
      (rule "add_literals" (formula "9") (term "0,0,0,0,0,1,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,1,1,0,1,0"))
      (rule "mul_literals" (formula "9") (term "1,0,0,0,1,1,0,1,0"))
      (rule "cnf_rightDist" (formula "8") (term "1,1,1,0,1,0"))
      (rule "commute_or" (formula "9") (term "1,1,1,0,1,0"))
      (rule "ifthenelse_split" (formula "8") (term "1,1,0,0"))
      (branch "self_25.index >= 1 TRUE"
         (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "8"))
         (rule "leq_literals" (formula "7") (term "0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "true_left" (formula "7"))
         (rule "commute_or" (formula "8") (term "0,1,0,1,0,1,0"))
         (rule "commute_or" (formula "9") (term "0,1,0,1,0,1,0"))
         (rule "commute_or_2" (formula "9") (term "0,1,1,0,1,0"))
         (rule "commute_or" (formula "8") (term "1,1,1,1,0,1,0"))
         (rule "commute_or" (formula "9") (term "0,0,1,1,0,1,0"))
         (rule "cnf_rightDist" (formula "9") (term "1,1,1,0,1,0"))
         (rule "commute_or" (formula "9") (term "1,1,1,1,0,1,0"))
         (rule "shift_paren_and" (formula "8") (term "0,1,0,1,0"))
         (rule "shift_paren_and" (formula "9") (term "0,1,0,1,0"))
         (rule "shift_paren_and" (formula "8") (term "1,1,0,1,0"))
         (rule "shift_paren_and" (formula "8") (term "1,0,1,0"))
         (rule "shift_paren_and" (formula "9") (term "1,1,0,1,0"))
         (rule "shift_paren_and" (formula "9") (term "1,0,1,0"))
         (rule "shift_paren_and" (formula "8") (term "0,1,0,1,0"))
         (rule "shift_paren_and" (formula "8") (term "0,1,0"))
         (rule "shift_paren_and" (formula "8") (term "0,0,1,0"))
         (rule "shift_paren_and" (formula "9") (term "0,1,0,1,0"))
         (rule "shift_paren_and" (formula "9") (term "0,1,0"))
         (rule "shift_paren_and" (formula "9") (term "0,0,1,0"))
         (rule "shift_paren_and" (formula "8") (term "0,0,0,1,0"))
         (rule "shift_paren_and" (formula "9") (term "0,0,0,1,0"))
         (rule "seqGetAlphaCast" (formula "14") (term "0"))
         (rule "castedGetAny" (formula "14") (term "0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "true_left" (formula "14"))
         (rule "shift_paren_and" (formula "8") (term "0,0,0,0,1,0"))
         (rule "shift_paren_and" (formula "9") (term "0,0,0,0,1,0"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "1") (term "0") (ifseqformula "2"))
         (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "shift_paren_and" (formula "8") (term "0,0,0,0,0,1,0"))
         (rule "ex_pull_out3" (formula "8") (term "0"))
         (rule "cnf_rightDist" (formula "8") (term "0,0"))
         (rule "shift_paren_or" (formula "8") (term "1,0,0"))
         (rule "commute_or_2" (formula "8") (term "0,1,0,0"))
         (rule "inEqSimp_or_tautInEq1" (formula "8") (term "1,0,0"))
         (rule "inEqSimp_homoInEq1" (formula "8") (term "1,1,0,0"))
         (rule "polySimp_pullOutFactor1" (formula "8") (term "0,1,1,0,0"))
         (rule "add_literals" (formula "8") (term "1,0,1,1,0,0"))
         (rule "times_zero_1" (formula "8") (term "0,1,1,0,0"))
         (rule "leq_literals" (formula "8") (term "1,1,0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "cnf_rightDist" (formula "8") (term "0,0"))
         (rule "shift_paren_or" (formula "8") (term "1,0,0"))
         (rule "inEqSimp_or_tautInEq3" (formula "8") (term "0,1,0,0"))
         (rule "add_zero_right" (formula "8") (term "1,1,0,1,0,0"))
         (rule "qeq_literals" (formula "8") (term "1,0,1,0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "cnf_rightDist" (formula "8") (term "0,0"))
         (rule "shift_paren_or" (formula "8") (term "1,0,0"))
         (rule "commute_or_2" (formula "8") (term "0,1,0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
         (rule "commute_or_2" (formula "8") (term "1,0,0,0"))
         (rule "shift_paren_or" (formula "8") (term "0,1,0,0,0"))
         (rule "commute_or" (formula "8") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_or_tautInEq1" (formula "8") (term "0,1,0,0,0"))
         (rule "inEqSimp_homoInEq1" (formula "8") (term "1,0,1,0,0,0"))
         (rule "polySimp_pullOutFactor1" (formula "8") (term "0,1,0,1,0,0,0"))
         (rule "add_literals" (formula "8") (term "1,0,1,0,1,0,0,0"))
         (rule "times_zero_1" (formula "8") (term "0,1,0,1,0,0,0"))
         (rule "leq_literals" (formula "8") (term "1,0,1,0,0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
         (rule "commute_or_2" (formula "8") (term "1,0,0,0"))
         (rule "shift_paren_or" (formula "8") (term "0,1,0,0,0"))
         (rule "inEqSimp_or_tautInEq2" (formula "8") (term "0,0,1,0,0,0"))
         (rule "add_zero_right" (formula "8") (term "1,1,0,0,1,0,0,0"))
         (rule "qeq_literals" (formula "8") (term "1,0,0,1,0,0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
         (rule "shift_paren_or" (formula "8") (term "1,0,0,0"))
         (rule "commute_or_2" (formula "8") (term "0,1,0,0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "cnf_rightDist" (formula "8") (term "0,0,0,0"))
         (rule "commute_or_2" (formula "8") (term "0,0,0,0,0"))
         (rule "shift_paren_or" (formula "8") (term "1,0,0,0,0"))
         (rule "commute_or" (formula "8") (term "0,0,0,0,0,0"))
         (rule "shift_paren_and" (formula "9") (term "0,0,0,0,0,1,0"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1,0,2,0") (ifseqformula "2"))
         (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "17"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "ex_pull_out3" (formula "9") (term "0"))
         (rule "cnf_rightDist" (formula "9") (term "0,0"))
         (rule "shift_paren_or" (formula "9") (term "1,0,0"))
         (rule "commute_or_2" (formula "9") (term "0,1,0,0"))
         (rule "inEqSimp_or_tautInEq1" (formula "9") (term "1,0,0"))
         (rule "polySimp_addAssoc" (formula "9") (term "1,1,1,0,0"))
         (rule "inEqSimp_homoInEq1" (formula "9") (term "1,1,0,0"))
         (rule "polySimp_pullOutFactor1" (formula "9") (term "0,1,1,0,0"))
         (rule "add_literals" (formula "9") (term "1,0,1,1,0,0"))
         (rule "times_zero_1" (formula "9") (term "0,1,1,0,0"))
         (rule "leq_literals" (formula "9") (term "1,1,0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "cnf_rightDist" (formula "9") (term "0,0"))
         (rule "shift_paren_or" (formula "9") (term "1,0,0"))
         (rule "inEqSimp_or_tautInEq3" (formula "9") (term "0,1,0,0"))
         (rule "add_zero_right" (formula "9") (term "1,1,0,1,0,0"))
         (rule "qeq_literals" (formula "9") (term "1,0,1,0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "cnf_rightDist" (formula "9") (term "0,0"))
         (rule "shift_paren_or" (formula "9") (term "1,0,0"))
         (rule "commute_or_2" (formula "9") (term "0,1,0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "cnf_rightDist" (formula "9") (term "0,0,0"))
         (rule "commute_or_2" (formula "9") (term "1,0,0,0"))
         (rule "shift_paren_or" (formula "9") (term "0,1,0,0,0"))
         (rule "commute_or" (formula "9") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_or_tautInEq1" (formula "9") (term "0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "9") (term "1,1,0,1,0,0,0"))
         (rule "inEqSimp_homoInEq1" (formula "9") (term "1,0,1,0,0,0"))
         (rule "polySimp_pullOutFactor1" (formula "9") (term "0,1,0,1,0,0,0"))
         (rule "add_literals" (formula "9") (term "1,0,1,0,1,0,0,0"))
         (rule "times_zero_1" (formula "9") (term "0,1,0,1,0,0,0"))
         (rule "leq_literals" (formula "9") (term "1,0,1,0,0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "cnf_rightDist" (formula "9") (term "0,0,0"))
         (rule "commute_or_2" (formula "9") (term "1,0,0,0"))
         (rule "shift_paren_or" (formula "9") (term "0,1,0,0,0"))
         (rule "inEqSimp_or_tautInEq2" (formula "9") (term "0,0,1,0,0,0"))
         (rule "add_zero_right" (formula "9") (term "1,1,0,0,1,0,0,0"))
         (rule "qeq_literals" (formula "9") (term "1,0,0,1,0,0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "cnf_rightDist" (formula "9") (term "0,0,0"))
         (rule "shift_paren_or" (formula "9") (term "1,0,0,0"))
         (rule "commute_or_2" (formula "9") (term "0,1,0,0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "cnf_rightDist" (formula "9") (term "0,0,0,0"))
         (rule "commute_or_2" (formula "9") (term "0,0,0,0,0"))
         (rule "shift_paren_or" (formula "9") (term "1,0,0,0,0"))
         (rule "commute_or" (formula "9") (term "0,0,0,0,0,0"))
         (rule "commute_and_2" (formula "8") (term "0,0,0"))
         (rule "commute_and_2" (formula "8") (term "0,0"))
         (rule "commute_and_2" (formula "9") (term "0,0,0"))
         (rule "commute_and_2" (formula "9") (term "0,0"))
         (rule "commute_and" (formula "8") (term "0,0,0,0"))
         (rule "commute_and" (formula "9") (term "0,0,0,0"))
         (rule "Partial_inv_axiom_for_JML_class_invariant_nr_2_in_LinkedList" (formula "16") (inst "n=n_1") (inst "i_3=i_3") (inst "f=f") (inst "i_2=i_2") (inst "i_1=i_1") (inst "j=j") (inst "i_0=i_0") (inst "i=i"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "translateJavaSubInt" (formula "16") (term "1,1,0,0,1,0,0"))
         (rule "translateJavaSubInt" (formula "16") (term "1,0,1,1,1,1,0,0,0"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "16"))
         (rule "eqSymm" (formula "23") (term "1,1,0,1,0"))
         (rule "eqSymm" (formula "23") (term "0,1,0,1,0"))
         (rule "eqSymm" (formula "22") (term "1,0"))
         (rule "eqSymm" (formula "21") (term "1,0,1"))
         (rule "eqSymm" (formula "21") (term "1,1"))
         (rule "eqSymm" (formula "17"))
         (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0"))
         (rule "mul_literals" (formula "22") (term "1,1,1,0,0"))
         (rule "polySimp_elimSub" (formula "21") (term "1,0,0,1,1"))
         (rule "mul_literals" (formula "21") (term "1,1,0,0,1,1"))
         (rule "polySimp_addComm0" (formula "22") (term "1,0,0,1,0"))
         (rule "polySimp_addComm0" (formula "22") (term "1,1,0,0"))
         (rule "polySimp_addComm0" (formula "21") (term "1,0,0,1,1"))
         (rule "castedGetAny" (formula "24") (term "1,1,1,0"))
         (rule "castedGetAny" (formula "23") (term "1,0,1,0,1,0"))
         (rule "castedGetAny" (formula "23") (term "0,0,1,0,1,0"))
         (rule "castedGetAny" (formula "22") (term "1,1,1,0"))
         (rule "castedGetAny" (formula "21") (term "0,1,0,1"))
         (rule "castedGetAny" (formula "22") (term "0,1,0"))
         (rule "eqSymm" (formula "22") (term "1,0"))
         (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
         (rule "castedGetAny" (formula "21") (term "0,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
         (rule "applyEq" (formula "9") (term "1,1,1,1,0,0,0") (ifseqformula "17"))
         (rule "applyEq" (formula "14") (term "0") (ifseqformula "17"))
         (rule "applyEq" (formula "9") (term "1,1,1,1,0,0,0,0") (ifseqformula "17"))
         (rule "applyEq" (formula "13") (term "2,0") (ifseqformula "17"))
         (rule "applyEq" (formula "11") (term "0") (ifseqformula "17"))
         (rule "applyEq" (formula "9") (term "1,1,1,0,0,0,0,0") (ifseqformula "17"))
         (rule "applyEq" (formula "21") (term "1,1,0,1,1") (ifseqformula "16"))
         (rule "applyEq" (formula "18") (term "0") (ifseqformula "16"))
         (rule "applyEq" (formula "9") (term "1,1,1,1,0,0") (ifseqformula "17"))
         (rule "applyEq" (formula "9") (term "1,1,1,1,0,0,0") (ifseqformula "16"))
         (rule "applyEq" (formula "17") (term "1") (ifseqformula "16"))
         (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
         (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
         (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "16"))
         (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
         (rule "applyEq" (formula "14") (term "0") (ifseqformula "16"))
         (rule "applyEq" (formula "13") (term "2,0") (ifseqformula "16"))
         (rule "applyEq" (formula "11") (term "0") (ifseqformula "16"))
         (rule "applyEq" (formula "9") (term "1,1,1,1,0,0,0,0") (ifseqformula "16"))
         (rule "applyEq" (formula "9") (term "1,1,1,0,0,0,0,0") (ifseqformula "16"))
         (rule "applyEq" (formula "9") (term "1,1,1,1,0,0") (ifseqformula "16"))
         (rule "apply_eq_monomials" (formula "24") (term "1,0,0,1,0,0") (ifseqformula "17"))
         (rule "polySimp_rightDist" (formula "24") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,0,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "24") (term "1,0,1,0,0,1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "24") (term "1,0,0,1,0,0"))
         (rule "add_literals" (formula "24") (term "1,1,1,0,0,1,0,0"))
         (rule "times_zero_1" (formula "24") (term "1,1,0,0,1,0,0"))
         (rule "add_zero_right" (formula "24") (term "1,0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
         (rule "apply_eq_monomials" (formula "20") (term "1,0,0,1,0,0") (ifseqformula "17"))
         (rule "polySimp_rightDist" (formula "20") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0,0,1,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "20") (term "1,0,0,1,0,0"))
         (rule "add_literals" (formula "20") (term "1,1,1,0,0,1,0,0"))
         (rule "times_zero_1" (formula "20") (term "1,1,0,0,1,0,0"))
         (rule "add_zero_right" (formula "20") (term "1,0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
         (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0"))
         (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
         (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
         (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
         (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
         (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "18"))
         (rule "polySimp_rightDist" (formula "14") (term "0,0"))
         (rule "mul_literals" (formula "14") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "14") (term "0"))
         (rule "add_literals" (formula "14") (term "0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "14"))
         (rule "polySimp_mulLiterals" (formula "14") (term "0"))
         (rule "polySimp_elimOne" (formula "14") (term "0"))
         (rule "nnf_imp2or" (formula "24") (term "1,0,1,0"))
         (rule "nnf_imp2or" (formula "23") (term "0"))
         (rule "nnf_imp2or" (formula "20") (term "0"))
         (rule "nnf_imp2or" (formula "25") (term "0"))
         (rule "nnf_imp2or" (formula "21") (term "0"))
         (rule "nnf_imp2or" (formula "24") (term "0"))
         (rule "nnf_notAnd" (formula "23") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
         (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
         (rule "mul_literals" (formula "23") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
         (rule "nnf_notAnd" (formula "20") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
         (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
         (rule "mul_literals" (formula "20") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "25") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
         (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
         (rule "mul_literals" (formula "25") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "21") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
         (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
         (rule "mul_literals" (formula "21") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "24") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
         (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
         (rule "mul_literals" (formula "24") (term "1,0,0,0"))
         (rule "nnf_imp2or" (formula "24") (term "0,1,0"))
         (rule "nnf_notAnd" (formula "24") (term "0,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,1,0"))
         (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,1,0"))
         (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,1,0"))
         (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,1,0"))
         (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0,1,0"))
         (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1,0"))
         (rule "mul_literals" (formula "24") (term "1,0,0,0,1,0"))
         (rule "commute_and" (formula "22") (term "0,0"))
         (rule "commute_and" (formula "22") (term "0,0,0,0,1"))
         (rule "commute_or_2" (formula "23") (term "0"))
         (rule "commute_or_2" (formula "25") (term "0"))
         (rule "commute_and" (formula "20") (term "0,0,1,0"))
         (rule "commute_and" (formula "20") (term "1,0,1,0"))
         (rule "commute_and" (formula "21") (term "1,0,1,0"))
         (rule "commute_and" (formula "21") (term "0,0,1,0"))
         (rule "commute_or" (formula "23") (term "0,0"))
         (rule "commute_or" (formula "25") (term "0,0"))
         (rule "commute_and_2" (formula "22") (term "0"))
         (rule "cnf_rightDist" (formula "22"))
         (rule "andLeft" (formula "22"))
         (rule "cnf_rightDist" (formula "23"))
         (rule "andLeft" (formula "23"))
         (rule "cnf_rightDist" (formula "23"))
         (rule "andLeft" (formula "23"))
         (rule "commute_or" (formula "23"))
         (rule "cnf_rightDist" (formula "22"))
         (rule "andLeft" (formula "22"))
         (rule "cnf_rightDist" (formula "23"))
         (rule "andLeft" (formula "23"))
         (rule "cnf_rightDist" (formula "23"))
         (rule "andLeft" (formula "23"))
         (rule "commute_or" (formula "23"))
         (rule "shift_paren_or" (formula "30") (term "0,1,0"))
         (rule "cnf_rightDist" (formula "22"))
         (rule "andLeft" (formula "22"))
         (rule "cnf_rightDist" (formula "23"))
         (rule "andLeft" (formula "23"))
         (rule "commute_or" (formula "24"))
         (rule "cnf_rightDist" (formula "23"))
         (rule "andLeft" (formula "23"))
         (rule "commute_or" (formula "23"))
         (rule "commute_and_2" (formula "22") (term "1"))
         (rule "cnf_rightDist" (formula "22"))
         (rule "andLeft" (formula "22"))
         (rule "cnf_rightDist" (formula "23"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "cnf_rightDist" (formula "23"))
         (rule "andLeft" (formula "23"))
         (rule "commute_or" (formula "23"))
         (rule "cnf_rightDist" (formula "22"))
         (rule "andLeft" (formula "22"))
         (rule "commute_or" (formula "22"))
         (rule "cnf_rightDist" (formula "23"))
         (rule "andLeft" (formula "23"))
         (rule "commute_or" (formula "24"))
         (rule "cnf_rightDist" (formula "22"))
         (rule "andLeft" (formula "22"))
         (rule "commute_or" (formula "23"))
         (rule "cnf_rightDist" (formula "24"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "commute_or" (formula "24"))
         (rule "cnf_rightDist" (formula "22"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "commute_or" (formula "22"))
         (rule "commute_or_2" (formula "38") (term "0,0,1,0"))
         (rule "applyEq_and_gen2" (formula "21") (term "1,0,1,0"))
         (rule "lenNonNegative" (formula "17") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "17"))
         (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
         (rule "shift_paren_and" (formula "20") (term "0,1,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "castedGetAny" (formula "20") (term "0,0,1,0,0,1,0"))
         (rule "castedGetAny" (formula "20") (term "1,0,1,1,0,0,1,0"))
         (rule "castedGetAny" (formula "20") (term "1,0,0,1,0,1,0"))
         (rule "castedGetAny" (formula "20") (term "0,0,0,0,0,1,0"))
         (rule "cnf_rightDist" (formula "20") (term "0"))
         (rule "distr_forallAnd" (formula "20"))
         (rule "andLeft" (formula "20"))
         (rule "shift_paren_or" (formula "21") (term "0"))
         (rule "cnf_rightDist" (formula "20") (term "0"))
         (rule "distr_forallAnd" (formula "20"))
         (rule "andLeft" (formula "20"))
         (rule "shift_paren_or" (formula "21") (term "0"))
         (rule "cnf_rightDist" (formula "20") (term "0"))
         (rule "distr_forallAnd" (formula "20"))
         (rule "andLeft" (formula "20"))
         (rule "commute_or_2" (formula "20") (term "0"))
         (rule "shift_paren_or" (formula "21") (term "0"))
         (rule "commute_or" (formula "20") (term "0,0"))
         (rule "commute_or" (formula "41") (term "0,0,0,1,0"))
         (rule "equalityToSeqGetAndSeqLenLeft" (formula "13") (inst "iv=iv"))
         (rule "andLeft" (formula "13"))
         (rule "lenOfSeqSub" (formula "14") (term "1,1,0,0"))
         (rule "polySimp_elimSub" (formula "14") (term "1,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "14") (term "1,1,1,0,0"))
         (rule "lenOfSeqSub" (formula "13") (term "0"))
         (rule "polySimp_elimSub" (formula "13") (term "1,0"))
         (rule "polySimp_addComm0" (formula "13") (term "1,0"))
         (rule "lenOfSeqSubEQ" (formula "13") (term "1") (ifseqformula "15"))
         (rule "eqSymm" (formula "13"))
         (rule "polySimp_elimSub" (formula "13") (term "1,0"))
         (rule "polySimp_addComm0" (formula "13") (term "1,0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "true_left" (formula "13"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,1,0,0"))
         (rule "polySimp_addComm1" (formula "13") (term "0,0,1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
         (rule "applyEq" (formula "13") (term "0,0,1,0") (ifseqformula "14"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "true_left" (formula "13"))
         (rule "shift_paren_and" (formula "24") (term "0,1,0"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "castedGetAny" (formula "24") (term "1,0,1,1,0,0,1,0"))
         (rule "castedGetAny" (formula "24") (term "0,0,1,0,0,1,0"))
         (rule "castedGetAny" (formula "24") (term "0,0,0,0,0,1,0"))
         (rule "cnf_rightDist" (formula "24") (term "0"))
         (rule "distr_forallAnd" (formula "24"))
         (rule "andLeft" (formula "24"))
         (rule "shift_paren_or" (formula "25") (term "0"))
         (rule "cnf_rightDist" (formula "24") (term "0"))
         (rule "distr_forallAnd" (formula "24"))
         (rule "andLeft" (formula "24"))
         (rule "shift_paren_or" (formula "25") (term "0"))
         (rule "cnf_rightDist" (formula "24") (term "0"))
         (rule "distr_forallAnd" (formula "24"))
         (rule "andLeft" (formula "24"))
         (rule "commute_or_2" (formula "24") (term "0"))
         (rule "shift_paren_or" (formula "25") (term "0"))
         (rule "commute_or" (formula "24") (term "0,0"))
         (rule "all_pull_out3" (formula "44") (term "0"))
         (rule "shift_paren_or" (formula "44") (term "0,0"))
         (rule "shift_paren_or" (formula "44") (term "0,0,0"))
         (rule "shift_paren_or" (formula "44") (term "0,0,0,0"))
         (rule "commute_or_2" (formula "44") (term "0,0,0,0,0"))
         (rule "commute_or" (formula "44") (term "0,0,0,0,0,0"))
         (rule "cut_direct" (formula "31") (term "0,0"))
         (branch "CUT: self_25.list.tail = null TRUE"
             (builtin "One Step Simplification" (formula "32"))
            (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "31"))
             (builtin "One Step Simplification" (formula "28"))
            (rule "true_left" (formula "28"))
            (rule "replace_known_left" (formula "42") (term "0") (ifseqformula "31"))
             (builtin "One Step Simplification" (formula "42"))
            (rule "true_left" (formula "42"))
            (rule "replace_known_left" (formula "39") (term "0") (ifseqformula "31"))
             (builtin "One Step Simplification" (formula "39"))
            (rule "true_left" (formula "39"))
            (rule "replace_known_left" (formula "33") (term "0") (ifseqformula "30"))
             (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "31")))
            (rule "true_left" (formula "33"))
            (rule "replace_known_left" (formula "37") (term "0") (ifseqformula "30"))
             (builtin "One Step Simplification" (formula "37"))
            (rule "true_left" (formula "37"))
            (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "30"))
             (builtin "One Step Simplification" (formula "34"))
            (rule "true_left" (formula "34"))
            (rule "replace_known_left" (formula "34") (term "1") (ifseqformula "31"))
             (builtin "One Step Simplification" (formula "34"))
            (rule "true_left" (formula "34"))
            (rule "replace_known_left" (formula "36") (term "0") (ifseqformula "30"))
             (builtin "One Step Simplification" (formula "36"))
            (rule "true_left" (formula "36"))
            (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "31"))
             (builtin "One Step Simplification" (formula "28"))
            (rule "true_left" (formula "28"))
            (rule "replace_known_left" (formula "31") (term "0,1") (ifseqformula "30"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "replace_known_left" (formula "28") (term "0,1") (ifseqformula "29"))
             (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "31")))
            (rule "true_left" (formula "28"))
            (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "30"))
             (builtin "One Step Simplification" (formula "32"))
            (rule "true_left" (formula "32"))
            (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "30"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "true_left" (formula "31"))
            (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "30"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "true_left" (formula "31"))
            (rule "applyEq" (formula "21") (term "0,0,0,0,0,0") (ifseqformula "29"))
            (rule "applyEq" (formula "32") (term "0,1,0,0,0,0,0,0,0,0") (ifseqformula "29"))
            (rule "applyEq" (formula "21") (term "0,1,0,1,0,0,0") (ifseqformula "29"))
            (rule "applyEq" (formula "32") (term "0,0,0,0,0,0,0,0,0,0") (ifseqformula "29"))
            (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "29"))
            (rule "applyEq" (formula "31") (term "0,1,0,0,0") (ifseqformula "29"))
            (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "29"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "eqSymm" (formula "17"))
            (rule "applyEq" (formula "23") (term "0,0,0,0,0,0") (ifseqformula "29"))
            (rule "applyEq" (formula "31") (term "0,1,0,0,0,0") (ifseqformula "29"))
            (rule "applyEq" (formula "20") (term "0,0,0,0,0,0") (ifseqformula "29"))
            (rule "applyEq" (formula "33") (term "0,1,1,0,0,0") (ifseqformula "29"))
            (rule "applyEq" (formula "22") (term "0,1,0,0,0,0,0") (ifseqformula "29"))
            (rule "applyEq" (formula "31") (term "1,1,1,0") (ifseqformula "17"))
            (rule "add_zero_right" (formula "31") (term "1,1,0"))
            (rule "applyEq" (formula "13") (term "2,0") (ifseqformula "17"))
            (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "17"))
            (rule "applyEq" (formula "20") (term "1,1,0") (ifseqformula "17"))
            (rule "applyEq" (formula "33") (term "1,1,0") (ifseqformula "17"))
            (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "17"))
            (rule "applyEq" (formula "15") (term "0") (ifseqformula "17"))
            (rule "inEqSimp_homoInEq1" (formula "15"))
            (rule "times_zero_2" (formula "15") (term "1,0"))
            (rule "add_zero_right" (formula "15") (term "0"))
            (rule "applyEq" (formula "32") (term "1,1,0,0,0,0,0") (ifseqformula "17"))
            (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "17"))
            (rule "applyEq" (formula "19") (term "0") (ifseqformula "17"))
            (rule "leq_literals" (formula "19"))
            (rule "true_left" (formula "19"))
            (rule "applyEq" (formula "9") (term "1,1,1,0,0,0,0,0") (ifseqformula "17"))
            (rule "add_zero_right" (formula "9") (term "1,1,0,0,0,0,0"))
            (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "17"))
            (rule "applyEq" (formula "11") (term "0") (ifseqformula "17"))
            (rule "qeq_literals" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "applyEq" (formula "19") (term "1,1,0") (ifseqformula "16"))
            (rule "applyEq" (formula "9") (term "1,1,1,1,0,0,0,0") (ifseqformula "16"))
            (rule "add_zero_right" (formula "9") (term "1,1,1,0,0,0,0"))
            (rule "applyEq" (formula "30") (term "1,1,0,0,0") (ifseqformula "16"))
            (rule "applyEq" (formula "9") (term "1,1,1,1,0,0") (ifseqformula "16"))
            (rule "add_zero_right" (formula "9") (term "1,1,1,0,0"))
            (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "16"))
            (rule "applyEq" (formula "9") (term "1,1,1,1,0,0,0") (ifseqformula "16"))
            (rule "add_zero_right" (formula "9") (term "1,1,1,0,0,0"))
            (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "16"))
            (rule "applyEq" (formula "17") (term "1") (ifseqformula "16"))
            (rule "inEqSimp_sepPosMonomial0" (formula "14"))
            (rule "mul_literals" (formula "14") (term "1"))
            (rule "inEqSimp_subsumption0" (formula "13") (ifseqformula "14"))
            (rule "leq_literals" (formula "13") (term "0"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "true_left" (formula "13"))
            (rule "inEqSimp_contradInEq1" (formula "13") (ifseqformula "7"))
            (rule "qeq_literals" (formula "13") (term "0"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "closeFalse" (formula "13"))
         )
         (branch "CUT: self_25.list.tail = null FALSE"
             (builtin "One Step Simplification" (formula "31"))
            (rule "true_left" (formula "31"))
            (rule "replace_known_right" (formula "40") (term "0") (ifseqformula "46"))
             (builtin "One Step Simplification" (formula "40"))
            (rule "replace_known_right" (formula "30") (term "0,1") (ifseqformula "46"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "true_left" (formula "30"))
            (rule "replace_known_right" (formula "33") (term "0") (ifseqformula "45"))
             (builtin "One Step Simplification" (formula "33"))
            (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "45"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "notLeft" (formula "31"))
            (rule "replace_known_right" (formula "28") (term "1") (ifseqformula "45"))
             (builtin "One Step Simplification" (formula "28"))
            (rule "notLeft" (formula "28"))
            (rule "replace_known_right" (formula "34") (term "0") (ifseqformula "45"))
             (builtin "One Step Simplification" (formula "34"))
            (rule "replace_known_left" (formula "38") (term "1") (ifseqformula "37"))
             (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "44")))
            (rule "true_left" (formula "38"))
            (rule "replace_known_left" (formula "36") (term "1") (ifseqformula "37"))
             (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "42")))
            (rule "true_left" (formula "36"))
            (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "31"))
             (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "41")))
            (rule "true_left" (formula "30"))
            (rule "replace_known_right" (formula "28") (term "0,0") (ifseqformula "40"))
             (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "41")))
            (rule "true_left" (formula "28"))
            (rule "replace_known_right" (formula "33") (term "0") (ifseqformula "40"))
             (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "32")))
            (rule "true_left" (formula "33"))
            (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "38"))
             (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "32")))
            (rule "true_left" (formula "31"))
            (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "37"))
             (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "38")))
            (rule "true_left" (formula "28"))
            (rule "replace_known_right" (formula "29") (term "1") (ifseqformula "37"))
             (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "28")))
            (rule "true_left" (formula "29"))
            (rule "equalityToSeqGetAndSeqLenRight" (formula "36") (inst "iv=iv"))
             (builtin "One Step Simplification" (formula "36"))
            (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0,1"))
            (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0,1"))
            (rule "applyEq" (formula "36") (term "0,0") (ifseqformula "17"))
            (rule "applyEq" (formula "36") (term "0,1,0,0,1,0,0,1") (ifseqformula "17"))
            (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0,1"))
            (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1"))
            (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1"))
            (rule "mul_literals" (formula "36") (term "0,1,1,0,0,1"))
            (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1"))
            (rule "nnf_imp2or" (formula "36") (term "0,1"))
            (rule "nnf_notAnd" (formula "36") (term "0,0,1"))
            (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,1"))
            (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1"))
            (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1"))
            (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1"))
            (rule "add_zero_left" (formula "36") (term "0,0,1,0,0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,1"))
            (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0,1"))
            (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,1"))
            (rule "times_zero_1" (formula "36") (term "1,0,0,0,0,0,1"))
            (rule "add_zero_right" (formula "36") (term "0,0,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,1"))
            (rule "mul_literals" (formula "36") (term "1,0,0,0,1"))
             (builtin "SMTRule")
         )
      )
      (branch "self_25.index >= 1 FALSE"
         (rule "inEqSimp_geqRight" (formula "16"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "1"))
         (rule "applyEq" (formula "10") (term "1,1,0,1,1,0,1,0,1,0") (ifseqformula "8"))
         (rule "add_zero_right" (formula "10") (term "1,0,1,1,0,1,0,1,0"))
         (rule "applyEq" (formula "1") (term "0") (ifseqformula "8"))
         (rule "leq_literals" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "applyEq" (formula "8") (term "0") (ifseqformula "7"))
         (rule "qeq_literals" (formula "8"))
         (rule "true_left" (formula "8"))
         (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "7"))
         (rule "applyEq" (formula "8") (term "1,1,0,1,1,0,1,0") (ifseqformula "7"))
         (rule "applyEq" (formula "12") (term "1,0") (ifseqformula "7"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "applyEq" (formula "8") (term "1,1,0,1,1,1,1,0,1,0") (ifseqformula "7"))
         (rule "add_literals" (formula "8") (term "1,0,1,1,1,1,0,1,0"))
         (rule "applyEq" (formula "8") (term "1,1,0,0,1,0,1,0") (ifseqformula "7"))
         (rule "applyEq" (formula "10") (term "2,0") (ifseqformula "7"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "eqSymm" (formula "10"))
         (rule "applyEq" (formula "13") (term "1,1") (ifseqformula "7"))
         (rule "add_zero_right" (formula "13") (term "1"))
         (rule "applyEq" (formula "9") (term "0,1,1,1,0,0") (ifseqformula "12"))
         (rule "applyEq" (formula "9") (term "0,1,1,1,0,0,1,0,1,0") (ifseqformula "12"))
         (rule "applyEq" (formula "9") (term "0,1,1,0,1,1,0,1,0") (ifseqformula "12"))
         (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "12"))
         (rule "applyEq" (formula "8") (term "0,0,0,0,0,0,0,1,0,1,0") (ifseqformula "12"))
         (rule "applyEq" (formula "8") (term "0,1,0,0,0,1,1,0,1,0") (ifseqformula "12"))
         (rule "applyEq" (formula "9") (term "0,1,1,1,0,0,1,1,0,1,0") (ifseqformula "12"))
         (rule "applyEq" (formula "9") (term "0,0,0,0,0,0,0,1,0,1,0") (ifseqformula "12"))
         (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "12"))
         (rule "applyEq" (formula "9") (term "0,1,1,1,1,1,1,1,0,1,0") (ifseqformula "12"))
         (rule "applyEq" (formula "9") (term "0,1,1,0,1,1,0,1,0,1,0") (ifseqformula "12"))
         (rule "applyEq" (formula "9") (term "0,1,0,1,0,1,1,0,1,0,1,0") (ifseqformula "7"))
         (rule "times_zero_2" (formula "9") (term "1,0,1,0,1,1,0,1,0,1,0"))
         (rule "add_literals" (formula "9") (term "0,1,0,1,1,0,1,0,1,0"))
         (rule "applyEq" (formula "9") (term "0,1,0,0,0,0,0,0,1,0,1,0") (ifseqformula "7"))
         (rule "add_zero_left" (formula "9") (term "1,0,0,0,0,0,0,1,0,1,0"))
         (rule "applyEq" (formula "9") (term "0,0,1,1,0,0,1,0,1,0") (ifseqformula "7"))
         (rule "times_zero_2" (formula "9") (term "0,1,1,0,0,1,0,1,0"))
         (rule "add_zero_left" (formula "9") (term "1,1,0,0,1,0,1,0"))
         (rule "applyEq" (formula "9") (term "0,0,1,1,0,0,1,1,0,1,0") (ifseqformula "7"))
         (rule "times_zero_2" (formula "9") (term "0,1,1,0,0,1,1,0,1,0"))
         (rule "add_zero_left" (formula "9") (term "1,1,0,0,1,1,0,1,0"))
         (rule "applyEq" (formula "9") (term "0,0,1,1,0,0") (ifseqformula "7"))
         (rule "times_zero_2" (formula "9") (term "0,1,1,0,0"))
         (rule "add_zero_left" (formula "9") (term "1,1,0,0"))
         (rule "applyEq" (formula "9") (term "0,1,0,1,1,1,1,1,1,0,1,0") (ifseqformula "7"))
         (rule "times_zero_2" (formula "9") (term "1,0,1,1,1,1,1,1,0,1,0"))
         (rule "add_literals" (formula "9") (term "0,1,1,1,1,1,1,0,1,0"))
         (rule "applyEq" (formula "9") (term "0,1,1,1,0,1,1,0,1,0") (ifseqformula "7"))
         (rule "add_zero_left" (formula "9") (term "1,1,1,0,1,1,0,1,0"))
         (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "13"))
         (rule "leq_literals" (formula "11") (term "0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "inEqSimp_or_tautInEq0" (formula "8") (term "0,0"))
         (rule "add_zero_right" (formula "8") (term "1,1,0,0"))
         (rule "qeq_literals" (formula "8") (term "1,0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "true_left" (formula "8"))
         (rule "commute_or" (formula "8") (term "0,1,0,1,0,1,0"))
         (rule "commute_or_2" (formula "8") (term "0,1,1,0,1,0"))
         (rule "commute_or" (formula "8") (term "0,0,1,1,0,1,0"))
         (rule "cnf_rightDist" (formula "8") (term "1,1,1,0,1,0"))
         (rule "commute_or" (formula "8") (term "1,1,1,1,0,1,0"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "1") (term "0") (ifseqformula "2"))
         (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "shift_paren_and" (formula "8") (term "0,1,0,1,0"))
         (rule "shift_paren_and" (formula "8") (term "1,1,0,1,0"))
         (rule "shift_paren_and" (formula "8") (term "1,0,1,0"))
         (rule "shift_paren_and" (formula "8") (term "0,1,0,1,0"))
         (rule "shift_paren_and" (formula "8") (term "0,1,0"))
         (rule "shift_paren_and" (formula "8") (term "0,0,1,0"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1") (ifseqformula "2"))
         (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "15"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "shift_paren_and" (formula "8") (term "0,0,0,1,0"))
         (rule "shift_paren_and" (formula "8") (term "0,0,0,0,1,0"))
         (rule "shift_paren_and" (formula "8") (term "0,0,0,0,0,1,0"))
         (rule "ex_pull_out3" (formula "8") (term "0"))
         (rule "cnf_rightDist" (formula "8") (term "0,0"))
         (rule "shift_paren_or" (formula "8") (term "1,0,0"))
         (rule "commute_or_2" (formula "8") (term "0,1,0,0"))
         (rule "inEqSimp_or_tautInEq1" (formula "8") (term "1,0,0"))
         (rule "inEqSimp_homoInEq1" (formula "8") (term "1,1,0,0"))
         (rule "polySimp_pullOutFactor1" (formula "8") (term "0,1,1,0,0"))
         (rule "add_literals" (formula "8") (term "1,0,1,1,0,0"))
         (rule "times_zero_1" (formula "8") (term "0,1,1,0,0"))
         (rule "leq_literals" (formula "8") (term "1,1,0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "cnf_rightDist" (formula "8") (term "0,0"))
         (rule "shift_paren_or" (formula "8") (term "1,0,0"))
         (rule "inEqSimp_or_tautInEq3" (formula "8") (term "0,1,0,0"))
         (rule "add_zero_right" (formula "8") (term "1,1,0,1,0,0"))
         (rule "qeq_literals" (formula "8") (term "1,0,1,0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "cnf_rightDist" (formula "8") (term "0,0"))
         (rule "shift_paren_or" (formula "8") (term "1,0,0"))
         (rule "commute_or_2" (formula "8") (term "0,1,0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
         (rule "commute_or_2" (formula "8") (term "1,0,0,0"))
         (rule "shift_paren_or" (formula "8") (term "0,1,0,0,0"))
         (rule "commute_or" (formula "8") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_or_tautInEq1" (formula "8") (term "0,1,0,0,0"))
         (rule "inEqSimp_homoInEq1" (formula "8") (term "1,0,1,0,0,0"))
         (rule "polySimp_pullOutFactor1" (formula "8") (term "0,1,0,1,0,0,0"))
         (rule "add_literals" (formula "8") (term "1,0,1,0,1,0,0,0"))
         (rule "times_zero_1" (formula "8") (term "0,1,0,1,0,0,0"))
         (rule "leq_literals" (formula "8") (term "1,0,1,0,0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
         (rule "commute_or_2" (formula "8") (term "1,0,0,0"))
         (rule "shift_paren_or" (formula "8") (term "0,1,0,0,0"))
         (rule "inEqSimp_or_tautInEq2" (formula "8") (term "0,0,1,0,0,0"))
         (rule "add_zero_right" (formula "8") (term "1,1,0,0,1,0,0,0"))
         (rule "qeq_literals" (formula "8") (term "1,0,0,1,0,0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
         (rule "shift_paren_or" (formula "8") (term "1,0,0,0"))
         (rule "commute_or_2" (formula "8") (term "0,1,0,0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "cnf_rightDist" (formula "8") (term "0,0,0,0"))
         (rule "commute_or_2" (formula "8") (term "0,0,0,0,0"))
         (rule "shift_paren_or" (formula "8") (term "1,0,0,0,0"))
         (rule "commute_or" (formula "8") (term "0,0,0,0,0,0"))
         (rule "seqGetAlphaCast" (formula "12") (term "0"))
         (rule "castedGetAny" (formula "12") (term "0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "true_left" (formula "12"))
         (rule "equalityToSeqGetAndSeqLenLeft" (formula "10") (inst "iv=iv"))
         (rule "andLeft" (formula "10"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
         (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "12"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "applyEq" (formula "10") (term "0,0,1,0") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "equalityToSeqGetAndSeqLenLeft" (formula "9") (inst "iv=iv"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
         (rule "applyEq" (formula "10") (term "0,0,1,0,0,1,0,0") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "times_zero_2" (formula "10") (term "1,0,0,1,0,0"))
         (rule "add_zero_right" (formula "10") (term "0,0,1,0,0"))
         (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "applyEq" (formula "9") (term "0,0,1,0") (ifseqformula "10"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "lenNonNegative" (formula "11") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "11"))
         (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "12"))
         (rule "leq_literals" (formula "11") (term "0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "commute_and_2" (formula "8") (term "0,0,0"))
         (rule "commute_and_2" (formula "8") (term "0,0"))
         (rule "commute_and" (formula "8") (term "0,0,0,0"))
         (rule "Partial_inv_axiom_for_JML_class_invariant_nr_2_in_LinkedList" (formula "14") (inst "n=n_1") (inst "i_3=i_3") (inst "f=f") (inst "i_2=i_2") (inst "i_1=i_1") (inst "j=j") (inst "i_0=i_0") (inst "i=i"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "translateJavaSubInt" (formula "14") (term "1,0,1,1,1,1,0,0,0"))
         (rule "translateJavaSubInt" (formula "14") (term "1,1,0,0,1,0,0"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "14"))
         (rule "eqSymm" (formula "21") (term "1,1,0,1,0"))
         (rule "eqSymm" (formula "21") (term "0,1,0,1,0"))
         (rule "eqSymm" (formula "20") (term "1,0"))
         (rule "eqSymm" (formula "19") (term "1,0,1"))
         (rule "eqSymm" (formula "19") (term "1,1"))
         (rule "eqSymm" (formula "15"))
         (rule "polySimp_elimSub" (formula "20") (term "1,1,0,0"))
         (rule "mul_literals" (formula "20") (term "1,1,1,0,0"))
         (rule "polySimp_elimSub" (formula "19") (term "1,0,0,1,1"))
         (rule "mul_literals" (formula "19") (term "1,1,0,0,1,1"))
         (rule "polySimp_addComm0" (formula "20") (term "1,0,0,1,0"))
         (rule "polySimp_addComm0" (formula "20") (term "1,1,0,0"))
         (rule "polySimp_addComm0" (formula "19") (term "1,0,0,1,1"))
         (rule "castedGetAny" (formula "22") (term "1,1,1,0"))
         (rule "castedGetAny" (formula "21") (term "1,0,1,0,1,0"))
         (rule "castedGetAny" (formula "21") (term "0,0,1,0,1,0"))
         (rule "castedGetAny" (formula "20") (term "1,1,1,0"))
         (rule "castedGetAny" (formula "19") (term "0,1,0,1"))
         (rule "castedGetAny" (formula "20") (term "0,1,0"))
         (rule "eqSymm" (formula "20") (term "1,0"))
         (rule "castedGetAny" (formula "19") (term "0,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
         (rule "applyEq" (formula "19") (term "1,1,0,1,1") (ifseqformula "14"))
         (rule "applyEq" (formula "16") (term "0") (ifseqformula "14"))
         (rule "applyEq" (formula "19") (term "0,1,0,1") (ifseqformula "12"))
         (rule "eqSymm" (formula "19") (term "1,0,1"))
         (rule "applyEq" (formula "22") (term "0,0,1,0") (ifseqformula "10"))
         (rule "applyEq" (formula "18") (term "0,0,1,0,0,1,0,0") (ifseqformula "10"))
         (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "10"))
         (rule "eqSymm" (formula "15"))
         (rule "applyEq" (formula "18") (term "0,1,0,1,0,1,0") (ifseqformula "10"))
         (rule "applyEq" (formula "22") (term "0,0,1,0,0,1,0,0") (ifseqformula "10"))
         (rule "applyEq" (formula "17") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
         (rule "applyEq" (formula "21") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
         (rule "applyEq" (formula "21") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "14"))
         (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
         (rule "applyEq" (formula "14") (term "0") (ifseqformula "15"))
         (rule "applyEq" (formula "8") (term "1,1,1,0,0") (ifseqformula "14"))
         (rule "applyEq" (formula "8") (term "1,1,1,0,0,0") (ifseqformula "14"))
         (rule "applyEq" (formula "8") (term "1,1,1,0,0,0,0") (ifseqformula "14"))
         (rule "applyEq" (formula "11") (term "0") (ifseqformula "14"))
         (rule "applyEq" (formula "8") (term "1,1,0,0,0,0,0") (ifseqformula "14"))
         (rule "applyEq" (formula "18") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
         (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
         (rule "applyEq" (formula "15") (term "1") (ifseqformula "14"))
         (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,1,0"))
         (rule "mul_literals" (formula "21") (term "0,1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
         (rule "nnf_imp2or" (formula "21") (term "1,0,1,0"))
         (rule "nnf_imp2or" (formula "17") (term "0"))
         (rule "nnf_imp2or" (formula "20") (term "0"))
         (rule "nnf_imp2or" (formula "18") (term "0"))
         (rule "nnf_imp2or" (formula "22") (term "0"))
         (rule "nnf_imp2or" (formula "21") (term "0"))
         (rule "nnf_notAnd" (formula "17") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
         (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "17") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
         (rule "mul_literals" (formula "17") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "20") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
         (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "20") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
         (rule "mul_literals" (formula "20") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
         (rule "nnf_notAnd" (formula "18") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
         (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "18") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
         (rule "mul_literals" (formula "18") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "22") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
         (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "22") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
         (rule "mul_literals" (formula "22") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "21") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
         (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
         (rule "mul_literals" (formula "21") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
         (rule "nnf_imp2or" (formula "21") (term "0,1,0"))
         (rule "nnf_notAnd" (formula "21") (term "0,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,1,0"))
         (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,1,0"))
         (rule "add_literals" (formula "21") (term "0,0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,1,0"))
         (rule "mul_literals" (formula "21") (term "1,0,0,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,1,0"))
         (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,1,0"))
         (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,1,0"))
         (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,1,0"))
         (rule "commute_and" (formula "19") (term "0,0"))
         (rule "commute_and_2" (formula "19") (term "0,1"))
         (rule "commute_or_2" (formula "20") (term "0"))
         (rule "commute_or_2" (formula "22") (term "0"))
         (rule "commute_and" (formula "17") (term "1,0,1,0"))
         (rule "commute_and" (formula "17") (term "0,0,1,0"))
         (rule "commute_and" (formula "18") (term "1,0,1,0"))
         (rule "commute_and" (formula "18") (term "0,0,1,0"))
         (rule "commute_or" (formula "20") (term "0,0"))
         (rule "commute_or" (formula "22") (term "0,0"))
         (rule "commute_and_2" (formula "19") (term "0"))
         (rule "cnf_rightDist" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "cnf_rightDist" (formula "20"))
         (rule "andLeft" (formula "20"))
         (rule "cnf_rightDist" (formula "20"))
         (rule "andLeft" (formula "20"))
         (rule "commute_or" (formula "20"))
         (rule "cnf_rightDist" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "cnf_rightDist" (formula "20"))
         (rule "andLeft" (formula "20"))
         (rule "commute_or" (formula "21"))
         (rule "cnf_rightDist" (formula "20"))
         (rule "andLeft" (formula "20"))
         (rule "commute_or" (formula "20"))
         (rule "shift_paren_or" (formula "27") (term "0,1,0"))
         (rule "commute_and_2" (formula "19") (term "1"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "21"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "true_left" (formula "24"))
         (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "19"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "true_left" (formula "22"))
         (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "20"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "true_left" (formula "22"))
         (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "21"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "true_left" (formula "24"))
         (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "20"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "true_left" (formula "23"))
         (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "19"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "true_left" (formula "22"))
         (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "21"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "eqSymm" (formula "15"))
         (rule "applyEq" (formula "24") (term "0,1,1,0,0,0") (ifseqformula "21"))
         (rule "applyEq" (formula "23") (term "0,0,0,1,0,0,1,0") (ifseqformula "21"))
         (rule "applyEq" (formula "22") (term "0,1,0,0,0") (ifseqformula "21"))
         (rule "applyEq" (formula "23") (term "0,1,0,1,0,0,1,0") (ifseqformula "21"))
         (rule "applyEq" (formula "17") (term "0,1,1,1,0,1,0") (ifseqformula "21"))
         (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "21"))
         (rule "applyEq" (formula "22") (term "0,1,0,0,0,0") (ifseqformula "21"))
         (rule "applyEq" (formula "8") (term "1,1,0,0,0,0,0") (ifseqformula "15"))
         (rule "applyEq" (formula "23") (term "1,1,0,0,0,1,0") (ifseqformula "15"))
         (rule "applyEq" (formula "18") (term "1,1,0,0") (ifseqformula "15"))
         (rule "applyEq" (formula "8") (term "1,1,1,0,0") (ifseqformula "15"))
         (rule "applyEq" (formula "16") (term "0") (ifseqformula "15"))
         (rule "leq_literals" (formula "16"))
         (rule "true_left" (formula "16"))
         (rule "applyEq" (formula "8") (term "1,1,1,0,0,0") (ifseqformula "15"))
         (rule "applyEq" (formula "11") (term "0") (ifseqformula "15"))
         (rule "qeq_literals" (formula "11"))
         (rule "closeFalse" (formula "11"))
      )
   )
   (branch "self_25.list.values.length >= 1 + self_25.index FALSE"
      (rule "true_left" (formula "14"))
      (rule "replace_known_right" (formula "7") (term "0,0") (ifseqformula "15"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "qeq_literals" (formula "7"))
      (rule "closeFalse" (formula "7"))
   )
)
)
}
