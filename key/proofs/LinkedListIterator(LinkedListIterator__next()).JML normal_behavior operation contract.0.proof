\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Jun 14 16:04:27 BST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:off , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=2000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_OFF
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "..";

\proofObligation "#Proof Obligation Settings
#Tue Jun 14 16:04:27 BST 2022
contract=LinkedListIterator[LinkedListIterator\\:\\:next()].JML normal_behavior operation contract.0
name=LinkedListIterator[LinkedListIterator\\:\\:next()].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "JOTA" ) (keyVersion "666bcb0c95"))
(keyLog "1" (keyUser "JOTA" ) (keyVersion "666bcb0c95"))
(keyLog "2" (keyUser "JOTA" ) (keyVersion "666bcb0c95"))
(keyLog "3" (keyUser "JOTA" ) (keyVersion "666bcb0c95"))
(keyLog "4" (keyUser "JOTA" ) (keyVersion "666bcb0c95"))

(autoModeTime "213116")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "heapAtPre,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "8") (term "1,0,0,1,0,1"))
(rule "eqSymm" (formula "8") (term "0,0,0,0,0,0,1"))
(rule "eqSymm" (formula "8") (term "1,0,0,0,0,0,1"))
(rule "eqSymm" (formula "8") (term "1,0,0,0,0,1"))
(rule "eqSymm" (formula "8") (term "0,1,0,0,0,1"))
(rule "castedGetAny" (formula "8") (term "0,1,0,0,0,0,1"))
(rule "assignment" (formula "8") (term "1"))
 (builtin "One Step Simplification" (formula "8"))
(rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_next,savedHeapBefore_next"))
 (builtin "One Step Simplification" (formula "8"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "value"))
(rule "eval_order_access2" (formula "8") (term "1") (inst "#v0=n"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "n"))
(rule "assignment_read_attribute_this" (formula "8"))
 (builtin "One Step Simplification" (formula "8"))
(rule "assignment_read_attribute" (formula "8"))
(branch "Normal Execution (n != null)"
    (builtin "One Step Simplification" (formula "8"))
   (rule "eval_order_access4_this" (formula "8") (term "1") (inst "#v1=n"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "n_1"))
   (rule "eval_order_access2" (formula "8") (term "1") (inst "#v0=n_2"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "n_2"))
   (rule "assignment_read_attribute_this" (formula "8"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "assignment_read_attribute" (formula "8"))
   (branch "Normal Execution (n_2 != null)"
       (builtin "One Step Simplification" (formula "8"))
      (rule "assignment_write_attribute_this" (formula "8"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "eval_order_access4" (formula "8") (term "1") (inst "#v1=x") (inst "#v0=l"))
      (rule "variableDeclarationAssign" (formula "8") (term "1"))
      (rule "variableDeclaration" (formula "8") (term "1") (newnames "l"))
      (rule "assignment" (formula "8") (term "1"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "variableDeclarationAssign" (formula "8") (term "1"))
      (rule "variableDeclaration" (formula "8") (term "1") (newnames "x"))
      (rule "compound_addition_1" (formula "8") (term "1") (inst "#v=x_1"))
      (rule "variableDeclarationAssign" (formula "8") (term "1"))
      (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_1"))
      (rule "assignment_read_attribute_this" (formula "8"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "dismissNonSelectedField" (formula "8") (term "0,1,0"))
      (rule "assignmentAdditionBigint1" (formula "8") (term "1"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "polySimp_addComm0" (formula "8") (term "0,1,0"))
      (rule "assignment_write_attribute" (formula "8"))
      (branch "Normal Execution (l != null)"
          (builtin "One Step Simplification" (formula "8"))
         (rule "eval_order_access4_this" (formula "8") (term "1") (inst "#v1=x"))
         (rule "variableDeclarationAssign" (formula "8") (term "1"))
         (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_2"))
         (rule "seqConcatUnfoldLeft" (formula "8") (term "1") (inst "#vLeftNew=x_3"))
         (rule "variableDeclarationAssign" (formula "8") (term "1"))
         (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_3"))
         (rule "assignment_read_attribute_this" (formula "8"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "dismissNonSelectedField" (formula "8") (term "0,1,0"))
         (rule "dismissNonSelectedField" (formula "8") (term "0,1,0"))
         (rule "assignment" (formula "8") (term "1"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "assignment_write_attribute_this" (formula "8"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "eval_order_access4_this" (formula "8") (term "1") (inst "#v1=x"))
         (rule "variableDeclarationAssign" (formula "8") (term "1"))
         (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_4"))
         (rule "seqSubUnfoldLeft" (formula "8") (term "1") (inst "#vLeftNew=x_5"))
         (rule "variableDeclarationAssign" (formula "8") (term "1"))
         (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_5"))
         (rule "assignment_read_attribute_this" (formula "8"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "dismissNonSelectedField" (formula "8") (term "0,1,0"))
         (rule "dismissNonSelectedField" (formula "8") (term "0,1,0"))
         (rule "dismissNonSelectedField" (formula "8") (term "0,1,0"))
         (rule "seqSubUnfoldRight" (formula "8") (term "1") (inst "#vRightNew=x_6"))
         (rule "variableDeclarationAssign" (formula "8") (term "1"))
         (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_6"))
         (rule "seqLengthUnfold" (formula "8") (term "1") (inst "#vNew=x_7"))
         (rule "variableDeclarationAssign" (formula "8") (term "1"))
         (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_7"))
         (rule "assignment_read_attribute_this" (formula "8"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "dismissNonSelectedField" (formula "8") (term "0,1,0"))
         (rule "dismissNonSelectedField" (formula "8") (term "0,1,0"))
         (rule "dismissNonSelectedField" (formula "8") (term "0,1,0"))
         (rule "assignment" (formula "8") (term "1"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "assignment" (formula "8") (term "1"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "assignment_write_attribute_this" (formula "8"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "methodCallReturn" (formula "8") (term "1"))
         (rule "assignment" (formula "8") (term "1"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "methodCallEmpty" (formula "8") (term "1"))
         (rule "tryEmpty" (formula "8") (term "1"))
         (rule "emptyModality" (formula "8") (term "1"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "dismissNonSelectedField" (formula "8") (term "1,0,0,0,0") (userinteraction))
         (rule "dismissNonSelectedField" (formula "8") (term "1,0,1,0") (userinteraction))
         (rule "dismissNonSelectedField" (formula "8") (term "1,0,1,0") (userinteraction))
         (rule "dismissNonSelectedField" (formula "8") (term "1,0,1,0") (userinteraction))
         (rule "dismissNonSelectedField" (formula "8") (term "1,0,1,0") (userinteraction))
          (builtin "One Step Simplification" (formula "8"))
         (rule "Class_invariant_axiom_for_LinkedListIterator" (formula "6") (inst "i=i") (inst "f=f") (inst "i_0=i_0") (inst "f_0=f_0") (userinteraction))
         (rule "andLeft" (formula "6"))
         (rule "notLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "ifthenelse_split_for" (formula "12") (userinteraction))
         (branch "self.index < self.list.values.length TRUE"
            (rule "andRight" (formula "17"))
            (branch "Case 1"
               (rule "andRight" (formula "17"))
               (branch "Case 1"
                  (rule "andRight" (formula "17"))
                  (branch "Case 1"
                     (rule "andRight" (formula "17"))
                     (branch "Case 1"
                        (rule "selectOfStore" (formula "17") (term "1") (userinteraction))
                         (builtin "One Step Simplification" (formula "17"))
                         (builtin "SMTRule")
                     )
                     (branch "Case 2"
                        (rule "selectOfStore" (formula "17") (term "1") (userinteraction))
                         (builtin "One Step Simplification" (formula "17"))
                         (builtin "SMTRule")
                     )
                  )
                  (branch "Case 2"
                     (rule "Class_invariant_axiom_for_LinkedList" (formula "14") (inst "i=i") (inst "i_0=i_0") (inst "j=j") (inst "i_1=i_1") (inst "i_2=i_2") (inst "f=f") (inst "i_3=i_3") (inst "n=n_3") (userinteraction))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "applyEq" (formula "25") (term "1,1") (ifseqformula "13") (userinteraction))
                     (rule "allLeft" (formula "22") (inst "t=int::select(heap, self, LinkedListIterator::$index)") (userinteraction))
                     (rule "impLeft" (formula "22") (userinteraction))
                     (branch "Case 1"
                        (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "12") (userinteraction))
                        (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "6") (userinteraction))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "closeTrue" (formula "23") (userinteraction))
                     )
                     (branch "Case 2"
                        (rule "applyEqReverse" (formula "26") (term "1") (ifseqformula "22") (userinteraction))
                        (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "11") (userinteraction))
                        (rule "getOfSeqSub" (formula "26") (term "0") (userinteraction))
                        (rule "leq_literals" (formula "26") (term "0,0,0") (userinteraction))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "add_zero_left" (formula "26") (term "1,1,0"))
                        (rule "sub" (formula "26") (term "1,0,0"))
                        (rule "ifthenelse_split" (formula "26") (term "0") (userinteraction))
                        (branch "0 < self.list.values.length + -self.index TRUE"
                           (rule "allLeft" (formula "19") (inst "t=int::select(heap, self, LinkedListIterator::$index)") (userinteraction))
                           (rule "seqGetAlphaCast" (formula "28") (term "0") (userinteraction))
                           (rule "applyEqReverse" (formula "29") (term "0") (ifseqformula "1") (userinteraction))
                           (rule "impLeft" (formula "20") (userinteraction))
                           (branch "Case 1"
                              (rule "translateJavaSubInt" (formula "21") (term "1,0,1,1,1"))
                              (rule "translateJavaSubInt" (formula "22") (term "1,1,0,0"))
                              (rule "eqSymm" (formula "22") (term "1,0"))
                              (rule "eqSymm" (formula "17"))
                              (rule "eqSymm" (formula "15"))
                              (rule "eqSymm" (formula "13"))
                              (rule "eqSymm" (formula "12"))
                              (rule "eqSymm" (formula "21") (term "1,0,1"))
                              (rule "eqSymm" (formula "23") (term "1,1,0,1,0"))
                              (rule "eqSymm" (formula "23") (term "0,1,0,1,0"))
                              (rule "eqSymm" (formula "21") (term "1,1"))
                              (rule "replace_known_left" (formula "26") (term "0") (ifseqformula "8"))
                               (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "14")))
                              (rule "closeTrue" (formula "26"))
                           )
                           (branch "Case 2"
                              (rule "exLeft" (formula "20") (inst "sk=f_0") (userinteraction))
                              (rule "andLeft" (formula "20"))
                              (rule "andLeft" (formula "20"))
                              (rule "andLeft" (formula "22"))
                              (rule "notLeft" (formula "21"))
                              (rule "castDel2" (formula "31") (term "0") (ifseqformula "21") (userinteraction))
                              (rule "close" (formula "31") (ifseqformula "21") (userinteraction))
                           )
                        )
                        (branch "0 < self.list.values.length + -self.index FALSE"
                           (rule "translateJavaSubInt" (formula "19") (term "1,0,1,1,1"))
                           (rule "translateJavaSubInt" (formula "20") (term "1,1,0,0"))
                           (rule "eqSymm" (formula "21") (term "0,1,0,1,0"))
                           (rule "eqSymm" (formula "21") (term "1,1,0,1,0"))
                           (rule "eqSymm" (formula "19") (term "1,0,1"))
                           (rule "eqSymm" (formula "13"))
                           (rule "eqSymm" (formula "20") (term "1,0"))
                           (rule "eqSymm" (formula "10"))
                           (rule "eqSymm" (formula "15"))
                           (rule "eqSymm" (formula "27"))
                           (rule "eqSymm" (formula "11"))
                           (rule "eqSymm" (formula "19") (term "1,1"))
                           (rule "polySimp_elimNeg" (formula "26") (term "1,1"))
                           (rule "polySimp_elimSub" (formula "20") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "20") (term "1,1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "19") (term "1,0,0,1,1"))
                           (rule "mul_literals" (formula "19") (term "1,1,0,0,1,1"))
                           (rule "polySimp_addComm0" (formula "20") (term "1,0,0,1,0"))
                           (rule "polySimp_addComm0" (formula "26") (term "1"))
                           (rule "polySimp_addComm0" (formula "20") (term "1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "19") (term "1,0,0,1,1"))
                           (rule "castedGetAny" (formula "22") (term "1,1"))
                           (rule "castedGetAny" (formula "23") (term "1,1,1,0"))
                           (rule "castedGetAny" (formula "21") (term "1,0,1,0,1,0"))
                           (rule "castedGetAny" (formula "21") (term "0,0,1,0,1,0"))
                           (rule "castedGetAny" (formula "19") (term "0,1,0,1"))
                           (rule "castedGetAny" (formula "13") (term "0"))
                           (rule "castedGetAny" (formula "20") (term "1,1,1,0"))
                           (rule "castedGetAny" (formula "20") (term "0,1,0"))
                           (rule "eqSymm" (formula "20") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "12"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "12") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_gtToGeq" (formula "5"))
                           (rule "mul_literals" (formula "5") (term "1,0,0"))
                           (rule "add_zero_right" (formula "5") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                           (rule "castedGetAny" (formula "19") (term "0,1,1"))
                           (rule "inEqSimp_ltRight" (formula "26"))
                           (rule "add_zero_right" (formula "1") (term "0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0"))
                           (rule "polySimp_mulAssoc" (formula "1") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                           (rule "lenOfSeqSubEQ" (formula "9") (term "0,1,0,0,1,0,0") (ifseqformula "11"))
                           (rule "polySimp_elimSub" (formula "9") (term "1,0,1,0,0,1,0,0"))
                           (rule "times_zero_2" (formula "9") (term "1,1,0,1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "9") (term "1,0,1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "8"))
                           (rule "inEqSimp_commuteLeq" (formula "7"))
                           (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                           (rule "lenOfSeqSubEQ" (formula "6") (term "1,0") (ifseqformula "12"))
                           (rule "polySimp_elimSub" (formula "6") (term "1,1,0"))
                           (rule "polySimp_addComm0" (formula "6") (term "1,1,0"))
                           (rule "lenOfSeqSubEQ" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "12"))
                           (rule "polySimp_elimSub" (formula "10") (term "1,0,1,0,0,1,0,0"))
                           (rule "polySimp_addComm0" (formula "10") (term "1,0,1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "9") (term "0,0,0,1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "6") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,0"))
                           (rule "polySimp_addComm1" (formula "6") (term "0,0,1,0"))
                           (rule "replace_known_left" (formula "6") (term "0,1,0") (ifseqformula "13"))
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "polySimp_addAssoc" (formula "6") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,0,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1,0,0,1,0,0"))
                           (rule "replace_known_left" (formula "10") (term "0,0,1,0,0,1,0,0") (ifseqformula "13"))
                            (builtin "One Step Simplification" (formula "10"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                           (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                           (rule "applyEq" (formula "13") (term "0,1,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "17") (term "0") (ifseqformula "15"))
                           (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "23") (term "1,1") (ifseqformula "14"))
                           (rule "applyEq" (formula "12") (term "2,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "8") (term "0") (ifseqformula "16"))
                           (rule "applyEq" (formula "20") (term "1,1,0,1,1") (ifseqformula "15"))
                           (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "15"))
                           (rule "applyEq" (formula "16") (term "1") (ifseqformula "15"))
                           (rule "applyEq" (formula "21") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                           (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                           (rule "applyEq" (formula "18") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                           (rule "applyEq" (formula "27") (term "0") (ifseqformula "23"))
                           (rule "eqSymm" (formula "27"))
                           (rule "applyEq" (formula "12") (term "2,0") (ifseqformula "15"))
                           (rule "applyEq" (formula "13") (term "0,1,0") (ifseqformula "15"))
                           (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "15"))
                           (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "15"))
                           (rule "applyEq" (formula "8") (term "0") (ifseqformula "15"))
                           (rule "apply_eq_monomials" (formula "19") (term "1,0,0,1,0,0") (ifseqformula "16"))
                           (rule "polySimp_rightDist" (formula "19") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,0,1,0,0,1,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "19") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "19") (term "1,1,1,0,0,1,0,0"))
                           (rule "times_zero_1" (formula "19") (term "1,1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "19") (term "1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                           (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "22") (term "0,1,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "13"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                           (rule "polySimp_elimOne" (formula "13") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1"))
                           (rule "polySimp_rightDist" (formula "6") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                           (rule "mul_literals" (formula "6") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "0,1,1,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,0,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,1,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "0,0,1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "8") (term "0,0,1,1,1,0,0"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "12"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "1"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_literals" (formula "1") (term "0"))
                           (rule "leq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                  )
               )
               (branch "Case 2"
                  (rule "andRight" (formula "17"))
                  (branch "Case 1"
                     (rule "Class_invariant_axiom_for_LinkedListIterator" (formula "17") (inst "i=i") (inst "f=f") (inst "i_0=i_0") (inst "f_0=f_0") (userinteraction))
                     (rule "dismissNonSelectedField" (formula "17") (term "1,0,0,0,0,0,0,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,1,1,0,0,0,0,0,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "2,1,1,0,0,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "1,1,1,0,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,1,0,1,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,1,1,0,0,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,1,1,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,2,1,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,1,0,0,0,0,0,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,1,0,0,0,1,0,1,0,0,0,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,2,1,1,0,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "1,0,1,1,1,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,1,0,0,0,1,0,1,0,0,0,0,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,0,1,1,1,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,1,1,0,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,0,1,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "1,0,0,0,0,0,0,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,1,1,0,0,0,0,0,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "2,1,1,0,0,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "1,1,1,0,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,1,0,1,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,1,1,0,0,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,1,1,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,2,1,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,1,0,0,0,0,0,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,1,0,0,0,1,0,1,0,0,0,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,2,1,1,0,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "1,0,1,1,1,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,1,0,0,0,1,0,1,0,0,0,0,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,0,1,1,1,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,1,1,0,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,0,1,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,1,1,0,0,0,0,0,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,1,0,1,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,1,1,0,0,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,1,1,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,2,1,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,1,0,0,0,1,0,1,0,0,0,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,2,1,1,0,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,1,0,0,0,1,0,1,0,0,0,0,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,0,1,1,1,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,1,1,0,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,1,1,0,0,0,0,0,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,1,0,1,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,1,1,0,0,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,1,0,0,0,1,0,1,0,0,0,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,2,1,1,0,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,1,0,0,0,1,0,1,0,0,0,0,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,0,1,1,1,0,1"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,1,1,0,0,1"))
                     (rule "selectOfStore" (formula "17") (term "1,0,1,1,0,0,1"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "selectOfStore" (formula "17") (term "0,1,0,0,0,1"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "selectOfStore" (formula "17") (term "1,0,1,1,0,0,1"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "selectOfStore" (formula "17") (term "0,1,0,0,0,1"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "castDel" (formula "17") (term "0,1,0,0,0,1"))
                     (rule "selectOfStore" (formula "17") (term "1,0,1,1,1,0,1"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "castDel" (formula "17") (term "1,0,1,1,1,0,1"))
                     (rule "selectOfStore" (formula "17") (term "1,0,1,1,0,0,1"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "selectOfStore" (formula "17") (term "1,0,1,1,0,0,1"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "selectOfStore" (formula "17") (term "0,2,1,0,1"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "castDel" (formula "17") (term "0,2,1,0,1"))
                     (rule "selectOfStore" (formula "17") (term "0,1,0,0,1"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "castDel" (formula "17") (term "0,1,0,0,1"))
                     (rule "andRight" (formula "17"))
                     (branch "Case 1"
                        (rule "notRight" (formula "17"))
                        (rule "dismissNonSelectedField" (formula "1") (term "0") (userinteraction))
                        (rule "dismissNonSelectedField" (formula "1") (term "0") (userinteraction))
                        (rule "dismissNonSelectedField" (formula "1") (term "0") (userinteraction))
                        (rule "dismissNonSelectedField" (formula "1") (term "0") (userinteraction))
                        (rule "close" (formula "16") (ifseqformula "1"))
                     )
                     (branch "Case 2"
                        (rule "andRight" (formula "17"))
                        (branch "Case 1"
                           (rule "andRight" (formula "17"))
                           (branch "Case 1"
                              (rule "andRight" (formula "17"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "17"))
                                 (branch "Case 1"
                                    (rule "andRight" (formula "17"))
                                    (branch "Case 1"
                                       (rule "andRight" (formula "17"))
                                       (branch "Case 1"
                                          (rule "andRight" (formula "17"))
                                          (branch "Case 1"
                                             (rule "eqSymm" (formula "13"))
                                             (rule "eqSymm" (formula "11"))
                                             (rule "eqSymm" (formula "10"))
                                             (rule "castedGetAny" (formula "13") (term "0"))
                                             (rule "lenOfSeqSubEQ" (formula "8") (term "1,1,0,0") (ifseqformula "10"))
                                             (rule "polySimp_elimSub" (formula "8") (term "1,1,1,0,0"))
                                             (rule "times_zero_2" (formula "8") (term "1,1,1,1,0,0"))
                                             (rule "add_zero_right" (formula "8") (term "1,1,1,0,0"))
                                             (rule "lenOfSeqSubEQ" (formula "5") (term "0") (ifseqformula "11"))
                                             (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "12"))
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "polySimp_elimSub" (formula "5") (term "0"))
                                             (rule "polySimp_addComm0" (formula "5") (term "0"))
                                             (rule "lenOfSeqSubEQ" (formula "9") (term "1,1,0,0") (ifseqformula "11"))
                                             (rule "replace_known_left" (formula "9") (term "0,1,1,0,0") (ifseqformula "12"))
                                              (builtin "One Step Simplification" (formula "9"))
                                             (rule "polySimp_elimSub" (formula "9") (term "1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "9") (term "1,1,0,0"))
                                             (rule "inEqSimp_leqRight" (formula "17"))
                                             (rule "add_zero_right" (formula "1") (term "0"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "13"))
                                             (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "13") (term "0"))
                                             (rule "inEqSimp_ltToLeq" (formula "9") (term "0,1,1,0,0"))
                                             (rule "add_zero_right" (formula "9") (term "0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,1,0,0"))
                                             (rule "inEqSimp_gtToGeq" (formula "6"))
                                             (rule "times_zero_1" (formula "6") (term "1,0,0"))
                                             (rule "add_literals" (formula "6") (term "0,0"))
                                             (rule "polySimp_addAssoc" (formula "6") (term "0"))
                                             (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,0,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "10") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "7"))
                                             (rule "inEqSimp_commuteLeq" (formula "8"))
                                             (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                             (rule "polySimp_elimOne" (formula "1") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "13"))
                                             (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                                             (rule "polySimp_elimOne" (formula "13") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                                             (rule "polySimp_mulComm0" (formula "6") (term "1"))
                                             (rule "polySimp_rightDist" (formula "6") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                                             (rule "mul_literals" (formula "6") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "9") (term "0,1,1,0,0"))
                                             (rule "mul_literals" (formula "9") (term "0,0,1,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,0,1,0,0,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0,1,0,0,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0,0,0,1,0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "12"))
                                             (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
                                             (rule "add_literals" (formula "7") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "7") (term "1,0,0"))
                                             (rule "add_literals" (formula "7") (term "0,0"))
                                             (rule "qeq_literals" (formula "7") (term "0"))
                                              (builtin "One Step Simplification" (formula "7"))
                                             (rule "true_left" (formula "7"))
                                             (rule "getOfSeqSubEQ" (formula "8") (term "1,0,1,0,1,0") (ifseqformula "10"))
                                             (rule "castDel" (formula "8") (term "2,1,0,1,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "8") (term "1,1,0,1,0,1,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "8") (term "1,1,1,0,1,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "8") (term "1,1,0,1,0,1,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,1,0,1,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,1,0,1,0,1,0"))
                                             (rule "polySimp_mulAssoc" (formula "8") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "8") (term "0,0,1,0,0,1,0,1,0,1,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,1,0,1,0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,1,0,1,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,1,0,1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,1,0,1,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "8") (term "1,1,0,1,0,1,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,1,0,1,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,1,0,1,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,1,1,0,1,0,1,0,1,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,1,1,0,1,0,1,0,1,0"))
                                             (rule "getOfSeqSubEQ" (formula "7") (term "1,0,1,0,1,0") (ifseqformula "9"))
                                             (rule "castDel" (formula "7") (term "2,1,0,1,0,1,0"))
                                             (rule "add_zero_right" (formula "7") (term "1,1,1,0,1,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "7") (term "1,1,0,1,0,1,0,1,0"))
                                             (rule "mul_literals" (formula "7") (term "1,1,1,0,1,0,1,0,1,0"))
                                             (rule "add_zero_right" (formula "7") (term "1,1,0,1,0,1,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,1,0,1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,1,0,1,0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,1,0,1,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,1,0,1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,1,0,1,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "7") (term "1,1,0,1,0,1,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,1,0,1,0,1,0"))
                                             (rule "mul_literals" (formula "7") (term "0,1,1,0,1,0,1,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,1,0,1,0,1,0"))
                                             (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=LinkedListIterator_index_0"))
                                             (rule "simplifySelectOfStore" (formula "1"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "castDel" (formula "1") (term "0"))
                                             (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "inEqSimp_homoInEq0" (formula "1"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                             (rule "mul_literals" (formula "1") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                             (rule "polySimp_elimOne" (formula "1") (term "0"))
                                             (rule "inEqSimp_contradInEq0" (formula "7") (term "0,1,1,1,0,0") (ifseqformula "1"))
                                             (rule "qeq_literals" (formula "7") (term "0,0,1,1,1,0,0"))
                                              (builtin "One Step Simplification" (formula "7"))
                                             (rule "add_zero_right" (formula "7") (term "1,1,0,0"))
                                             (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "6"))
                                             (rule "qeq_literals" (formula "1") (term "0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                          (branch "Case 2"
                                             (rule "eqSymm" (formula "13"))
                                             (rule "eqSymm" (formula "10"))
                                             (rule "eqSymm" (formula "11"))
                                             (rule "dismissNonSelectedField" (formula "17") (term "1,0,1"))
                                             (rule "castedGetAny" (formula "13") (term "0"))
                                             (rule "lenOfSeqSubEQ" (formula "9") (term "1,1,0,0") (ifseqformula "11"))
                                             (rule "replace_known_left" (formula "9") (term "0,1,1,0,0") (ifseqformula "12"))
                                              (builtin "One Step Simplification" (formula "9"))
                                             (rule "polySimp_elimSub" (formula "9") (term "1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "9") (term "1,1,0,0"))
                                             (rule "lenOfSeqSubEQ" (formula "5") (term "0") (ifseqformula "11"))
                                             (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "12"))
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "polySimp_elimSub" (formula "5") (term "0"))
                                             (rule "polySimp_addComm0" (formula "5") (term "0"))
                                             (rule "lenOfSeqSubEQ" (formula "8") (term "1,1,0,0") (ifseqformula "10"))
                                             (rule "polySimp_elimSub" (formula "8") (term "1,1,1,0,0"))
                                             (rule "times_zero_2" (formula "8") (term "1,1,1,1,0,0"))
                                             (rule "add_zero_right" (formula "8") (term "1,1,1,0,0"))
                                             (rule "dismissNonSelectedField" (formula "17") (term "1,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "12"))
                                             (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "12") (term "0"))
                                             (rule "dismissNonSelectedField" (formula "17") (term "1,0,1"))
                                             (rule "dismissNonSelectedField" (formula "17") (term "1,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_mulAssoc" (formula "9") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0,0,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_leqRight" (formula "17"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "inEqSimp_gtToGeq" (formula "6"))
                                             (rule "mul_literals" (formula "6") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "6") (term "0,0"))
                                             (rule "polySimp_addAssoc" (formula "6") (term "0"))
                                             (rule "inEqSimp_ltToLeq" (formula "9") (term "0,1,1,0,0"))
                                             (rule "add_zero_right" (formula "9") (term "0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "8"))
                                             (rule "inEqSimp_commuteLeq" (formula "7"))
                                             (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "13"))
                                             (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                                             (rule "polySimp_elimOne" (formula "13") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "10") (term "0,1,1,0,0"))
                                             (rule "mul_literals" (formula "10") (term "0,0,1,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1"))
                                             (rule "mul_literals" (formula "1") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                                             (rule "polySimp_mulComm0" (formula "6") (term "1"))
                                             (rule "polySimp_rightDist" (formula "6") (term "1"))
                                             (rule "mul_literals" (formula "6") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,1,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0,0,1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0,0,1,1,1,0,0"))
                                             (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "12"))
                                             (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
                                             (rule "add_literals" (formula "7") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "7") (term "1,0,0"))
                                             (rule "add_literals" (formula "7") (term "0,0"))
                                             (rule "qeq_literals" (formula "7") (term "0"))
                                              (builtin "One Step Simplification" (formula "7"))
                                             (rule "true_left" (formula "7"))
                                             (rule "getOfSeqSubEQ" (formula "8") (term "1,0,1,0,1,0") (ifseqformula "10"))
                                             (rule "castDel" (formula "8") (term "2,1,0,1,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "8") (term "1,1,0,1,0,1,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "8") (term "1,1,1,0,1,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "8") (term "1,1,0,1,0,1,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,1,0,1,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,1,0,1,0,1,0"))
                                             (rule "polySimp_mulAssoc" (formula "8") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "8") (term "0,0,1,0,0,1,0,1,0,1,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,1,0,1,0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,1,0,1,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,1,0,1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,1,0,1,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "8") (term "1,1,0,1,0,1,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,1,0,1,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,1,0,1,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,1,1,0,1,0,1,0,1,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,1,1,0,1,0,1,0,1,0"))
                                             (rule "getOfSeqSubEQ" (formula "7") (term "1,0,1,0,1,0") (ifseqformula "9"))
                                             (rule "castDel" (formula "7") (term "2,1,0,1,0,1,0"))
                                             (rule "add_zero_right" (formula "7") (term "1,1,1,0,1,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "7") (term "1,1,0,1,0,1,0,1,0"))
                                             (rule "times_zero_2" (formula "7") (term "1,1,1,0,1,0,1,0,1,0"))
                                             (rule "add_zero_right" (formula "7") (term "1,1,0,1,0,1,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,1,0,1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,1,0,1,0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,1,0,1,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,1,0,1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,1,0,1,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "7") (term "1,1,0,1,0,1,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,1,0,1,0,1,0"))
                                             (rule "mul_literals" (formula "7") (term "0,1,1,0,1,0,1,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,1,0,1,0,1,0"))
                                             (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=LinkedListIterator_index_0"))
                                             (rule "simplifySelectOfStore" (formula "1"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "castDel" (formula "1") (term "0"))
                                             (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "1"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                             (rule "mul_literals" (formula "1") (term "0,1,0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "11"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                             (rule "add_literals" (formula "1") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "1") (term "1,0"))
                                             (rule "add_literals" (formula "1") (term "0"))
                                             (rule "leq_literals" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                       (branch "Case 2"
                                          (rule "allRight" (formula "17") (inst "sk=i_0_0"))
                                          (rule "impRight" (formula "17"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "dismissNonSelectedField" (formula "19") (term "0,1,0,1,0"))
                                          (rule "dismissNonSelectedField" (formula "2") (term "0,1"))
                                          (rule "selectOfStore" (formula "2") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "castDel" (formula "2") (term "0,1"))
                                          (rule "selectOfStore" (formula "19") (term "0,1,0,1,0"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "castDel" (formula "19") (term "0,1,0,1,0"))
                                          (rule "eqTermCut" (formula "19") (term "1,1,0,1,0") (inst "s=seqLen(Seq::select(heap,
                   self,
                   LinkedListIterator::$seen))") (userinteraction))
                                          (branch "Assume i_0_0 = self.seen.length"
                                             (rule "getOfSeqConcat" (formula "20") (term "1,0,1,0") (userinteraction))
                                             (rule "cut_direct" (formula "20") (term "0,1,0,1,0") (userinteraction))
                                             (branch "CUT: i_0_0 < self.seen.length TRUE"
                                                 (builtin "One Step Simplification" (formula "21"))
                                                (rule "eqSymm" (formula "2"))
                                                (rule "eqSymm" (formula "17"))
                                                (rule "eqSymm" (formula "15"))
                                                (rule "eqSymm" (formula "14"))
                                                (rule "lenOfSeqConcat" (formula "4") (term "1"))
                                                 (builtin "One Step Simplification" (formula "4"))
                                                (rule "polySimp_addComm0" (formula "4") (term "1"))
                                                (rule "castedGetAny" (formula "17") (term "0"))
                                                (rule "lenOfSeqSubEQ" (formula "1") (term "1") (ifseqformula "14"))
                                                (rule "polySimp_elimSub" (formula "1") (term "1,1"))
                                                (rule "mul_literals" (formula "1") (term "1,1,1"))
                                                (rule "add_zero_right" (formula "1") (term "1,1"))
                                                (rule "lenOfSeqSubEQ" (formula "12") (term "1,1,0,0") (ifseqformula "14"))
                                                (rule "polySimp_elimSub" (formula "12") (term "1,1,1,0,0"))
                                                (rule "times_zero_2" (formula "12") (term "1,1,1,1,0,0"))
                                                (rule "add_zero_right" (formula "12") (term "1,1,1,0,0"))
                                                (rule "lenOfSeqSubEQ" (formula "13") (term "1,1,0,0") (ifseqformula "15"))
                                                (rule "replace_known_left" (formula "13") (term "0,1,1,0,0") (ifseqformula "16"))
                                                 (builtin "One Step Simplification" (formula "13"))
                                                (rule "polySimp_elimSub" (formula "13") (term "1,1,0,0"))
                                                (rule "polySimp_addComm0" (formula "13") (term "1,1,0,0"))
                                                (rule "lenOfSeqSubEQ" (formula "9") (term "0") (ifseqformula "15"))
                                                (rule "replace_known_left" (formula "9") (term "0,0") (ifseqformula "16"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "polySimp_elimSub" (formula "9") (term "0"))
                                                (rule "polySimp_addComm0" (formula "9") (term "0"))
                                                (rule "lenOfSeqSubEQ" (formula "2") (term "0") (ifseqformula "14"))
                                                (rule "polySimp_elimSub" (formula "2") (term "1,0"))
                                                (rule "times_zero_2" (formula "2") (term "1,1,0"))
                                                (rule "add_zero_right" (formula "2") (term "1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "16"))
                                                (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "16") (term "0"))
                                                (rule "lenOfSeqSubEQ" (formula "4") (term "1,1") (ifseqformula "14"))
                                                (rule "polySimp_elimSub" (formula "4") (term "1,1,1"))
                                                (rule "mul_literals" (formula "4") (term "1,1,1,1"))
                                                (rule "add_zero_right" (formula "4") (term "1,1,1"))
                                                (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1"))
                                                (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1"))
                                                (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1,1,0,0"))
                                                (rule "add_zero_right" (formula "12") (term "0,0,1,1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                                                (rule "polySimp_mulAssoc" (formula "13") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "13") (term "0,0,1,0,0,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "13") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_gtToGeq" (formula "9"))
                                                (rule "times_zero_1" (formula "9") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "9") (term "0,0"))
                                                (rule "polySimp_addAssoc" (formula "9") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0"))
                                                (rule "add_zero_right" (formula "2") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "4") (term "0,1,1"))
                                                (rule "add_zero_right" (formula "4") (term "0,0,1,1"))
                                                (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,1"))
                                                (rule "inEqSimp_commuteLeq" (formula "11"))
                                                (rule "inEqSimp_commuteLeq" (formula "10"))
                                                (rule "inEqSimp_commuteLeq" (formula "3"))
                                                (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "1"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "4"))
                                                (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
                                                (rule "mul_literals" (formula "4") (term "0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                                                (rule "add_literals" (formula "4") (term "0,0,0"))
                                                (rule "add_zero_left" (formula "4") (term "0,0"))
                                                (rule "polySimp_addComm0" (formula "4") (term "0"))
                                                (rule "applyEq" (formula "4") (term "0,1,0") (ifseqformula "2"))
                                                (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
                                                (rule "add_literals" (formula "4") (term "1,0"))
                                                (rule "times_zero_1" (formula "4") (term "0"))
                                                (rule "leq_literals" (formula "4"))
                                                (rule "true_left" (formula "4"))
                                                (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "2"))
                                                (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                                (rule "add_literals" (formula "1") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "1") (term "1,0"))
                                                (rule "add_zero_right" (formula "1") (term "0"))
                                                (rule "leq_literals" (formula "1"))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                             (branch "CUT: i_0_0 < self.seen.length FALSE"
                                                 (builtin "One Step Simplification" (formula "21"))
                                                (rule "applyEq" (formula "21") (term "0,1,1,0,1,0") (ifseqformula "1") (userinteraction))
                                                (rule "i_minus_i_is_zero" (formula "21") (term "1,1,0,1,0") (userinteraction))
                                                (rule "getOfSeqSingleton" (formula "21") (term "1,0,1,0") (userinteraction))
                                                 (builtin "One Step Simplification" (formula "21"))
                                                (rule "castDel" (formula "21") (term "1,0,1,0") (userinteraction))
                                                (rule "exRight" (formula "21") (inst "t=FileReader::select(heap,
                   Node::select(heap,
                                self,
                                LinkedListIterator::$curr),
                   Node::$value)") (userinteraction))
                                                (rule "hide_right" (formula "22") (userinteraction))
                                                (rule "Class_invariant_axiom_for_LinkedList" (formula "17") (inst "i=i") (inst "i_0=i_0") (inst "j=j") (inst "i_1=i_1") (inst "i_2=i_2") (inst "f=f") (inst "i_3=i_3") (inst "n=n_3") (userinteraction))
                                                 (builtin "One Step Simplification" (formula "17"))
                                                (rule "andLeft" (formula "17"))
                                                (rule "andLeft" (formula "17"))
                                                (rule "andLeft" (formula "17"))
                                                (rule "andLeft" (formula "17"))
                                                (rule "andLeft" (formula "17"))
                                                (rule "andLeft" (formula "17"))
                                                (rule "andLeft" (formula "17"))
                                                (rule "andLeft" (formula "17"))
                                                 (builtin "One Step Simplification" (formula "29"))
                                                (rule "translateJavaSubInt" (formula "22") (term "1,0,1,1,1"))
                                                (rule "translateJavaSubInt" (formula "23") (term "1,1,0,0"))
                                                (rule "eqSymm" (formula "18"))
                                                (rule "eqSymm" (formula "24") (term "1,1,0,1,0"))
                                                (rule "eqSymm" (formula "13"))
                                                (rule "eqSymm" (formula "1"))
                                                (rule "eqSymm" (formula "14"))
                                                (rule "eqSymm" (formula "24") (term "0,1,0,1,0"))
                                                (rule "eqSymm" (formula "23") (term "1,0"))
                                                (rule "eqSymm" (formula "22") (term "1,0,1"))
                                                (rule "eqSymm" (formula "16"))
                                                (rule "eqSymm" (formula "22") (term "1,1"))
                                                (rule "polySimp_elimSub" (formula "23") (term "1,1,0,0"))
                                                (rule "mul_literals" (formula "23") (term "1,1,1,0,0"))
                                                (rule "polySimp_elimSub" (formula "22") (term "1,0,0,1,1"))
                                                (rule "mul_literals" (formula "22") (term "1,1,0,0,1,1"))
                                                (rule "polySimp_addComm0" (formula "23") (term "1,0,0,1,0"))
                                                (rule "polySimp_addComm0" (formula "23") (term "1,1,0,0"))
                                                (rule "polySimp_addComm0" (formula "22") (term "1,0,0,1,1"))
                                                (rule "lenOfSeqConcat" (formula "3") (term "1"))
                                                 (builtin "One Step Simplification" (formula "3"))
                                                (rule "polySimp_addComm0" (formula "3") (term "1"))
                                                (rule "castedGetAny" (formula "25") (term "1,1,1,0"))
                                                (rule "castedGetAny" (formula "24") (term "0,0,1,0,1,0"))
                                                (rule "castedGetAny" (formula "24") (term "1,0,1,0,1,0"))
                                                (rule "inEqSimp_ltRight" (formula "28"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                                (rule "polySimp_addComm0" (formula "1") (term "0"))
                                                (rule "castedGetAny" (formula "24") (term "1,1,1,0"))
                                                (rule "castedGetAny" (formula "23") (term "0,1,0,1"))
                                                (rule "castedGetAny" (formula "17") (term "0"))
                                                (rule "castedGetAny" (formula "24") (term "0,1,0"))
                                                (rule "eqSymm" (formula "24") (term "1,0"))
                                                (rule "inEqSimp_gtToGeq" (formula "9"))
                                                (rule "times_zero_1" (formula "9") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "9") (term "0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "16"))
                                                (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "16") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                                                (rule "castedGetAny" (formula "23") (term "0,1,1"))
                                                (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                                                (rule "lenOfSeqSubEQ" (formula "2") (term "0") (ifseqformula "14"))
                                                (rule "polySimp_elimSub" (formula "2") (term "1,0"))
                                                (rule "mul_literals" (formula "2") (term "1,1,0"))
                                                (rule "add_zero_right" (formula "2") (term "1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "4"))
                                                (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
                                                (rule "mul_literals" (formula "4") (term "0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                                                (rule "add_literals" (formula "4") (term "0,0,0"))
                                                (rule "add_zero_left" (formula "4") (term "0,0"))
                                                (rule "polySimp_addComm0" (formula "4") (term "0"))
                                                (rule "lenOfSeqSubEQ" (formula "9") (term "1,0") (ifseqformula "15"))
                                                (rule "polySimp_elimSub" (formula "9") (term "1,1,0"))
                                                (rule "polySimp_addComm0" (formula "9") (term "1,1,0"))
                                                (rule "lenOfSeqSubEQ" (formula "1") (term "0,1,0") (ifseqformula "14"))
                                                (rule "polySimp_elimSub" (formula "1") (term "1,0,1,0"))
                                                (rule "times_zero_2" (formula "1") (term "1,1,0,1,0"))
                                                (rule "add_zero_right" (formula "1") (term "1,0,1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "10"))
                                                (rule "inEqSimp_commuteLeq" (formula "11"))
                                                (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "3"))
                                                (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                                                (rule "lenOfSeqSubEQ" (formula "13") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                                                (rule "polySimp_elimSub" (formula "13") (term "1,0,1,0,0,1,0,0"))
                                                (rule "polySimp_addComm0" (formula "13") (term "1,0,1,0,0,1,0,0"))
                                                (rule "lenOfSeqSubEQ" (formula "12") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                                                (rule "polySimp_elimSub" (formula "12") (term "1,0,1,0,0,1,0,0"))
                                                (rule "times_zero_2" (formula "12") (term "1,1,0,1,0,0,1,0,0"))
                                                (rule "add_zero_right" (formula "12") (term "1,0,1,0,0,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0"))
                                                (rule "add_zero_right" (formula "2") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "9") (term "0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_addComm1" (formula "9") (term "0,0,1,0"))
                                                (rule "replace_known_left" (formula "9") (term "0,1,0") (ifseqformula "16"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "polySimp_addAssoc" (formula "9") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,0"))
                                                (rule "add_zero_right" (formula "1") (term "0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,0"))
                                                (rule "lenOfSeqSubEQ" (formula "4") (term "0,1,0") (ifseqformula "14"))
                                                (rule "polySimp_elimSub" (formula "4") (term "1,0,1,0"))
                                                (rule "times_zero_2" (formula "4") (term "1,1,0,1,0"))
                                                (rule "add_zero_right" (formula "4") (term "1,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,0,0,1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,1,0,0,1,0,0"))
                                                (rule "polySimp_addComm1" (formula "13") (term "0,0,0,1,0,0,1,0,0"))
                                                (rule "replace_known_left" (formula "13") (term "0,0,1,0,0,1,0,0") (ifseqformula "16"))
                                                 (builtin "One Step Simplification" (formula "13"))
                                                (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                                                (rule "polySimp_mulAssoc" (formula "13") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "13") (term "0,0,1,0,0,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "13") (term "0,1,0,0,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,1,0,0,1,0,0"))
                                                (rule "add_zero_right" (formula "12") (term "0,0,0,1,0,0,1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,0"))
                                                (rule "add_zero_right" (formula "4") (term "0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,0"))
                                                (rule "applyEq" (formula "4") (term "0,1,0") (ifseqformula "2"))
                                                (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
                                                (rule "add_literals" (formula "4") (term "1,0"))
                                                (rule "times_zero_1" (formula "4") (term "0"))
                                                (rule "leq_literals" (formula "4"))
                                                (rule "true_left" (formula "4"))
                                                (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "2"))
                                                (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                                                (rule "add_literals" (formula "1") (term "1,0"))
                                                (rule "times_zero_1" (formula "1") (term "0"))
                                                (rule "qeq_literals" (formula "1"))
                                                (rule "true_left" (formula "1"))
                                                (rule "applyEq" (formula "13") (term "2,0") (ifseqformula "17"))
                                                (rule "applyEq" (formula "7") (term "1,0") (ifseqformula "17"))
                                                (rule "applyEq" (formula "18") (term "0") (ifseqformula "16"))
                                                (rule "applyEq" (formula "9") (term "0") (ifseqformula "17"))
                                                (rule "applyEq" (formula "14") (term "0,1,0") (ifseqformula "17"))
                                                (rule "applyEq" (formula "21") (term "1,1,0,1,1") (ifseqformula "16"))
                                                (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                                                (rule "applyEq" (formula "17") (term "1") (ifseqformula "16"))
                                                (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                                                (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                                                (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                                                (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "16"))
                                                (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "9") (term "0") (ifseqformula "16"))
                                                (rule "applyEq" (formula "7") (term "1,0") (ifseqformula "16"))
                                                (rule "applyEq" (formula "13") (term "2,0") (ifseqformula "16"))
                                                (rule "applyEq" (formula "14") (term "0,1,0") (ifseqformula "16"))
                                                (rule "apply_eq_monomials" (formula "24") (term "1,0,0,1,0,0") (ifseqformula "17"))
                                                (rule "polySimp_rightDist" (formula "24") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,0,0,1,0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "24") (term "1,0,0,1,0,0"))
                                                (rule "add_literals" (formula "24") (term "1,1,1,0,0,1,0,0"))
                                                (rule "times_zero_1" (formula "24") (term "1,1,0,0,1,0,0"))
                                                (rule "add_zero_right" (formula "24") (term "1,0,0,1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                                                (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                                                (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                                                (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                                                (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                                                (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                                                (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0"))
                                                (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                                                (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                                                (rule "polySimp_mulComm0" (formula "7") (term "1"))
                                                (rule "polySimp_rightDist" (formula "7") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                                                (rule "mul_literals" (formula "7") (term "0,1"))
                                                (rule "polySimp_elimOne" (formula "7") (term "1,1"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "14"))
                                                (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                                                (rule "polySimp_elimOne" (formula "14") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                                                (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "11") (term "0,1,1,0,0"))
                                                (rule "mul_literals" (formula "11") (term "0,0,1,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                                                (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                                                (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                (rule "inEqSimp_homoInEq0" (formula "9") (term "0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0"))
                                                (rule "add_literals" (formula "9") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "9") (term "1,0,0"))
                                                (rule "add_literals" (formula "9") (term "0,0"))
                                                (rule "qeq_literals" (formula "9") (term "0"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "getOfSeqSubEQ" (formula "9") (term "1,0,1,0,1,0") (ifseqformula "11"))
                                                (rule "castDel" (formula "9") (term "2,1,0,1,0,1,0"))
                                                (rule "add_zero_right" (formula "9") (term "1,1,1,0,1,0,1,0"))
                                                (rule "polySimp_elimSub" (formula "9") (term "1,1,0,1,0,1,0,1,0"))
                                                (rule "times_zero_2" (formula "9") (term "1,1,1,0,1,0,1,0,1,0"))
                                                (rule "add_zero_right" (formula "9") (term "1,1,0,1,0,1,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,1,0,1,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,1,0,1,0,1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,1,0,1,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,1,0,1,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,1,0,1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "9") (term "1,1,0,1,0,1,0,1,0"))
                                                (rule "mul_literals" (formula "9") (term "0,1,1,0,1,0,1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,1,0,1,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,1,0,1,0,1,0"))
                                                (rule "getOfSeqSubEQ" (formula "10") (term "1,0,1,0,1,0") (ifseqformula "12"))
                                                (rule "castDel" (formula "10") (term "2,1,0,1,0,1,0"))
                                                (rule "polySimp_elimSub" (formula "10") (term "1,1,0,1,0,1,0,1,0"))
                                                (rule "polySimp_addComm0" (formula "10") (term "1,1,1,0,1,0,1,0"))
                                                (rule "polySimp_addComm0" (formula "10") (term "1,1,0,1,0,1,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,1,0,1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,1,0,1,0,1,0"))
                                                (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,0,1,0,1,0,1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "10") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,1,0,1,0,1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,1,0,1,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,1,0,1,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,1,0,1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "10") (term "1,1,0,1,0,1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,1,0,1,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,1,0,1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "10") (term "0,1,1,0,1,0,1,0,1,0"))
                                                (rule "mul_literals" (formula "10") (term "0,0,1,1,0,1,0,1,0,1,0"))
                                                (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "16"))
                                                (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                                                (rule "mul_literals" (formula "7") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "7") (term "0"))
                                                (rule "add_literals" (formula "7") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                                                (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                                (rule "polySimp_elimOne" (formula "7") (term "0"))
                                                (rule "nnf_imp2or" (formula "22") (term "1,0,1,0"))
                                                (rule "nnf_imp2or" (formula "18") (term "0"))
                                                (rule "nnf_imp2or" (formula "21") (term "0"))
                                                (rule "nnf_imp2or" (formula "23") (term "0"))
                                                (rule "nnf_imp2or" (formula "19") (term "0"))
                                                (rule "nnf_imp2or" (formula "10") (term "0"))
                                                (rule "nnf_imp2or" (formula "11") (term "0"))
                                                (rule "commute_and" (formula "26"))
                                                (rule "nnf_imp2or" (formula "22") (term "0"))
                                                (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                                                (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "21") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                                                (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                                                (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                                                (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "19") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                                                (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "10") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                                                (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                                (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "11") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "11") (term "0,0,1,0,0,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "11") (term "1,0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,0,0"))
                                                (rule "add_literals" (formula "11") (term "0,0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "11") (term "0,0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "11") (term "0,1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                                                (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                                                (rule "nnf_imp2or" (formula "22") (term "0,1,0"))
                                                (rule "commute_and" (formula "20") (term "0,0"))
                                                (rule "commute_and" (formula "20") (term "0,0,0,0,1"))
                                                (rule "nnf_notAnd" (formula "22") (term "0,0,1,0"))
                                                (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,1,0"))
                                                (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,1,0"))
                                                (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,1,0"))
                                                (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,1,0"))
                                                (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,1,0"))
                                                (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0,1,0"))
                                                (rule "add_zero_right" (formula "22") (term "0,0,0,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,1,0"))
                                                (rule "mul_literals" (formula "22") (term "1,0,0,0,1,0"))
                                                (rule "commute_or_2" (formula "21") (term "0"))
                                                (rule "lenNonNegative" (formula "15") (term "0"))
                                                (rule "inEqSimp_commuteLeq" (formula "15"))
                                                (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                                                (rule "lenNonNegative" (formula "17") (term "0"))
                                                (rule "inEqSimp_commuteLeq" (formula "17"))
                                                (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                                                (rule "equalityToSeqGetAndSeqLenLeft" (formula "12") (inst "iv=iv"))
                                                (rule "andLeft" (formula "12"))
                                                (rule "lenOfSeqSub" (formula "12") (term "0"))
                                                (rule "polySimp_elimSub" (formula "12") (term "1,0"))
                                                (rule "mul_literals" (formula "12") (term "1,1,0"))
                                                (rule "add_zero_right" (formula "12") (term "1,0"))
                                                (rule "lenOfSeqSub" (formula "13") (term "1,1,0,0"))
                                                (rule "polySimp_elimSub" (formula "13") (term "1,1,1,0,0"))
                                                (rule "times_zero_2" (formula "13") (term "1,1,1,1,0,0"))
                                                (rule "add_zero_right" (formula "13") (term "1,1,1,0,0"))
                                                (rule "lenOfSeqSubEQ" (formula "12") (term "1") (ifseqformula "14"))
                                                (rule "eqSymm" (formula "12"))
                                                (rule "polySimp_elimSub" (formula "12") (term "1,0"))
                                                (rule "times_zero_2" (formula "12") (term "1,1,0"))
                                                (rule "add_zero_right" (formula "12") (term "1,0"))
                                                 (builtin "One Step Simplification" (formula "12"))
                                                (rule "true_left" (formula "12"))
                                                (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1,1,0,0"))
                                                (rule "add_zero_right" (formula "12") (term "0,0,1,1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                                                (rule "applyEq" (formula "12") (term "0,0,1,0") (ifseqformula "13"))
                                                 (builtin "One Step Simplification" (formula "12"))
                                                (rule "true_left" (formula "12"))
                                                (rule "commute_or_2" (formula "24") (term "0"))
                                                (rule "seqGetAlphaCast" (formula "21") (term "0,1,0,1"))
                                                (rule "castedGetAny" (formula "21") (term "0"))
                                                 (builtin "One Step Simplification" (formula "21"))
                                                (rule "true_left" (formula "21"))
                                                (rule "seqGetAlphaCast" (formula "14") (term "0"))
                                                (rule "castedGetAny" (formula "14") (term "0"))
                                                 (builtin "One Step Simplification" (formula "14"))
                                                (rule "true_left" (formula "14"))
                                                (rule "commute_and" (formula "19") (term "0,0,1,0"))
                                                (rule "commute_and" (formula "19") (term "1,0,1,0"))
                                                (rule "commute_and" (formula "20") (term "1,0,1,0"))
                                                (rule "commute_and" (formula "20") (term "0,0,1,0"))
                                                (rule "commute_and" (formula "10") (term "0,0,1,0"))
                                                (rule "commute_and" (formula "10") (term "1,0,1,0"))
                                                (rule "commute_and" (formula "11") (term "1,0,1,0"))
                                                (rule "commute_and" (formula "11") (term "0,0,1,0"))
                                                (rule "ifthenelse_split" (formula "1") (term "0"))
                                                (branch "self.index >= 1 TRUE"
                                                   (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "2"))
                                                   (rule "applyEq" (formula "9") (term "1,1") (ifseqformula "2"))
                                                   (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                                                   (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "2"))
                                                   (rule "applyEq" (formula "13") (term "2,0") (ifseqformula "2"))
                                                   (rule "applyEq" (formula "8") (term "0") (ifseqformula "2"))
                                                   (rule "applyEq" (formula "10") (term "0") (ifseqformula "2"))
                                                   (rule "applyEq" (formula "10") (term "1,1,1,0,1,1,1,0,1,0") (ifseqformula "2"))
                                                   (rule "applyEq" (formula "11") (term "0,0,1,1,0,0") (ifseqformula "2"))
                                                   (rule "applyEq" (formula "11") (term "0,1,0,1,1,0,1,1,1,0,1,0") (ifseqformula "2"))
                                                   (rule "applyEq" (formula "11") (term "0,1,1,1,1,1,0,1,0") (ifseqformula "2"))
                                                   (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "1"))
                                                   (rule "leq_literals" (formula "3") (term "0"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "true_left" (formula "3"))
                                                   (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "17"))
                                                   (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                                   (rule "mul_literals" (formula "8") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "8") (term "0"))
                                                   (rule "add_literals" (formula "8") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                                   (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "8") (term "0"))
                                                   (rule "commute_or" (formula "21") (term "0,0"))
                                                   (rule "commute_and_2" (formula "20") (term "0"))
                                                   (rule "commute_or" (formula "23") (term "0,0"))
                                                   (rule "seqGetAlphaCast" (formula "20") (term "0,1,1"))
                                                   (rule "castedGetAny" (formula "20") (term "0"))
                                                    (builtin "One Step Simplification" (formula "20"))
                                                   (rule "true_left" (formula "20"))
                                                   (rule "shift_paren_or" (formula "22") (term "0,1,0"))
                                                   (rule "commute_and_2" (formula "20") (term "0,0,0,1"))
                                                   (rule "applyEq_and_gen2" (formula "19") (term "1,0,1,0"))
                                                   (rule "cnf_rightDist" (formula "20"))
                                                   (rule "andLeft" (formula "20"))
                                                   (rule "cnf_rightDist" (formula "21"))
                                                   (rule "andLeft" (formula "21"))
                                                   (rule "cnf_rightDist" (formula "21"))
                                                   (rule "andLeft" (formula "21"))
                                                   (rule "commute_or" (formula "21"))
                                                   (rule "cnf_rightDist" (formula "20"))
                                                   (rule "andLeft" (formula "20"))
                                                   (rule "cnf_rightDist" (formula "21"))
                                                   (rule "andLeft" (formula "21"))
                                                   (rule "cnf_rightDist" (formula "21"))
                                                   (rule "andLeft" (formula "21"))
                                                   (rule "commute_or" (formula "21"))
                                                   (rule "commute_and_2" (formula "20") (term "1"))
                                                   (rule "applyEq_and_gen2" (formula "9") (term "1,0,1,0"))
                                                   (rule "ifEqualsNull" (formula "9") (term "0,0,1,0,1,0"))
                                                   (rule "nnf_notOr" (formula "9") (term "0,1,0,1,0"))
                                                   (rule "nnf_notAnd" (formula "9") (term "0,0,1,0,1,0"))
                                                   (rule "nnf_notAnd" (formula "9") (term "1,0,1,0,1,0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "nnf_notAnd" (formula "9") (term "0,0,0,1,0,1,0"))
                                                   (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,0,1,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0,1,0,1,0"))
                                                   (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0,1,0,1,0"))
                                                   (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,0,1,0,1,0"))
                                                   (rule "add_zero_left" (formula "9") (term "0,0,1,0,0,0,1,0,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,0,1,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,1,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,1,0,1,0"))
                                                   (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,0,1,0,1,0"))
                                                   (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0,0,1,0,1,0"))
                                                   (rule "add_zero_right" (formula "9") (term "0,0,0,0,0,0,1,0,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,1,0,1,0"))
                                                   (rule "mul_literals" (formula "9") (term "1,0,0,0,0,1,0,1,0"))
                                                   (rule "commute_or_2" (formula "28") (term "0,0,1,0"))
                                                   (rule "applyEq_and_gen2" (formula "10") (term "1,0,1,0"))
                                                   (rule "ifEqualsNull" (formula "10") (term "0,0,1,0,1,0"))
                                                   (rule "nnf_notOr" (formula "10") (term "0,1,0,1,0"))
                                                   (rule "nnf_notAnd" (formula "10") (term "1,0,1,0,1,0"))
                                                    (builtin "One Step Simplification" (formula "10"))
                                                   (rule "nnf_notAnd" (formula "10") (term "0,0,1,0,1,0"))
                                                   (rule "nnf_notAnd" (formula "10") (term "0,0,0,1,0,1,0"))
                                                   (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0,1,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0,1,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
                                                   (rule "mul_literals" (formula "10") (term "0,0,1,0,0,1,0,0,0,1,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0,0,1,0,0,0,1,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "10") (term "1,0,1,0,0,1,0,0,0,1,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0,1,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,1,0,0,0,1,0,1,0"))
                                                   (rule "add_literals" (formula "10") (term "0,0,0,0,1,0,0,0,1,0,1,0"))
                                                   (rule "add_zero_left" (formula "10") (term "0,0,0,1,0,0,0,1,0,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0,1,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,0,1,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,0,1,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,0,1,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,0,1,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "10") (term "0,1,1,0,0,0,1,0,1,0"))
                                                   (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,0,1,0,1,0"))
                                                   (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,0,1,0,1,0"))
                                                   (rule "add_zero_right" (formula "10") (term "0,0,0,0,0,0,1,0,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,1,0,1,0"))
                                                   (rule "mul_literals" (formula "10") (term "1,0,0,0,0,1,0,1,0"))
                                                   (rule "cnf_rightDist" (formula "20"))
                                                   (rule "andLeft" (formula "20"))
                                                   (rule "shift_paren_and" (formula "18") (term "0,1,0"))
                                                    (builtin "One Step Simplification" (formula "18"))
                                                   (rule "castedGetAny" (formula "18") (term "1,0,0,1,0,1,0"))
                                                   (rule "castedGetAny" (formula "18") (term "0,0,0,0,0,1,0"))
                                                   (rule "castedGetAny" (formula "18") (term "1,0,1,1,0,0,1,0"))
                                                   (rule "castedGetAny" (formula "18") (term "0,0,1,0,0,1,0"))
                                                   (rule "cnf_rightDist" (formula "21"))
                                                    (builtin "One Step Simplification" (formula "21"))
                                                   (rule "cut_direct" (formula "33") (term "0,0"))
                                                   (branch "CUT: self.curr.value = null TRUE"
                                                       (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "1")))
                                                      (rule "false_right" (formula "34"))
                                                      (rule "cnf_rightDist" (formula "22"))
                                                      (rule "andLeft" (formula "22"))
                                                      (rule "commute_or" (formula "22"))
                                                      (rule "cnf_rightDist" (formula "21"))
                                                      (rule "andLeft" (formula "21"))
                                                      (rule "cnf_rightDist" (formula "22"))
                                                      (rule "andLeft" (formula "22"))
                                                      (rule "commute_or" (formula "23"))
                                                      (rule "cnf_rightDist" (formula "22"))
                                                      (rule "andLeft" (formula "22"))
                                                      (rule "commute_or" (formula "22"))
                                                      (rule "commute_or" (formula "34") (term "0,0,0,1,0"))
                                                      (rule "commute_or" (formula "10") (term "1,0,1,0,1,0"))
                                                      (rule "cnf_rightDist" (formula "19") (term "0"))
                                                      (rule "distr_forallAnd" (formula "19"))
                                                      (rule "andLeft" (formula "19"))
                                                      (rule "shift_paren_or" (formula "20") (term "0"))
                                                      (rule "cnf_rightDist" (formula "22"))
                                                      (rule "andLeft" (formula "22"))
                                                      (rule "commute_or" (formula "22"))
                                                      (rule "cnf_rightDist" (formula "23"))
                                                      (rule "andLeft" (formula "23"))
                                                      (rule "commute_or" (formula "24"))
                                                      (rule "cnf_rightDist" (formula "22"))
                                                      (rule "andLeft" (formula "22"))
                                                      (rule "commute_or" (formula "23"))
                                                      (rule "cnf_rightDist" (formula "24"))
                                                       (builtin "One Step Simplification" (formula "24"))
                                                      (rule "commute_or" (formula "24"))
                                                      (rule "shift_paren_and" (formula "21") (term "0,1,0"))
                                                       (builtin "One Step Simplification" (formula "21"))
                                                      (rule "castedGetAny" (formula "21") (term "1,0,1,1,0,0,1,0"))
                                                      (rule "castedGetAny" (formula "21") (term "0,0,0,0,0,1,0"))
                                                      (rule "castedGetAny" (formula "21") (term "0,0,1,0,0,1,0"))
                                                      (rule "cnf_rightDist" (formula "22"))
                                                       (builtin "One Step Simplification" (formula "22"))
                                                      (rule "commute_or" (formula "22"))
                                                      (rule "commute_or_2" (formula "10") (term "0,0,1,0,1,0"))
                                                      (rule "commute_or" (formula "11") (term "1,0,1,0,1,0"))
                                                      (rule "cnf_rightDist" (formula "19") (term "0"))
                                                      (rule "distr_forallAnd" (formula "19"))
                                                      (rule "andLeft" (formula "19"))
                                                      (rule "shift_paren_or" (formula "20") (term "0"))
                                                      (rule "cnf_rightDist" (formula "22") (term "0"))
                                                      (rule "distr_forallAnd" (formula "22"))
                                                      (rule "andLeft" (formula "22"))
                                                      (rule "shift_paren_or" (formula "23") (term "0"))
                                                      (rule "commute_or_2" (formula "11") (term "0,0,1,0,1,0"))
                                                      (rule "cnf_rightDist" (formula "19") (term "0"))
                                                      (rule "distr_forallAnd" (formula "19"))
                                                      (rule "andLeft" (formula "19"))
                                                      (rule "commute_or_2" (formula "19") (term "0"))
                                                      (rule "shift_paren_or" (formula "20") (term "0"))
                                                      (rule "commute_or" (formula "19") (term "0,0"))
                                                      (rule "cnf_rightDist" (formula "23") (term "0"))
                                                      (rule "distr_forallAnd" (formula "23"))
                                                      (rule "andLeft" (formula "23"))
                                                      (rule "shift_paren_or" (formula "24") (term "0"))
                                                      (rule "cnf_rightDist" (formula "23") (term "0"))
                                                      (rule "distr_forallAnd" (formula "23"))
                                                      (rule "andLeft" (formula "23"))
                                                      (rule "commute_or_2" (formula "23") (term "0"))
                                                      (rule "shift_paren_or" (formula "24") (term "0"))
                                                      (rule "commute_or" (formula "23") (term "0,0"))
                                                      (rule "ifthenelse_to_or_right" (formula "10") (term "1,1,0,1,0"))
                                                      (rule "nnf_notAnd" (formula "10") (term "0,0,1,1,0,1,0"))
                                                      (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,1,1,0,1,0"))
                                                      (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,1,1,0,1,0"))
                                                      (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,1,1,0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,1,1,0,1,0"))
                                                      (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,1,1,0,1,0"))
                                                      (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,1,1,0,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,1,1,0,1,0"))
                                                      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1,1,0,1,0"))
                                                      (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,1,1,0,1,0"))
                                                      (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,1,1,0,1,0"))
                                                      (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,1,1,0,1,0"))
                                                      (rule "add_zero_right" (formula "10") (term "0,0,0,0,0,1,1,0,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1,1,0,1,0"))
                                                      (rule "mul_literals" (formula "10") (term "1,0,0,0,1,1,0,1,0"))
                                                      (rule "ifthenelse_to_or_right" (formula "11") (term "1,1,0,1,0"))
                                                      (rule "nnf_notAnd" (formula "11") (term "0,0,1,1,0,1,0"))
                                                      (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,1,1,0,1,0"))
                                                      (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,1,0,1,0"))
                                                      (rule "polySimp_rightDist" (formula "11") (term "0,1,0,0,1,0,0,1,1,0,1,0"))
                                                      (rule "mul_literals" (formula "11") (term "0,0,1,0,0,1,0,0,1,1,0,1,0"))
                                                      (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,1,0,0,1,1,0,1,0"))
                                                      (rule "polySimp_elimOne" (formula "11") (term "1,0,1,0,0,1,0,0,1,1,0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,1,0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,0,0,1,1,0,1,0"))
                                                      (rule "add_literals" (formula "11") (term "0,0,0,0,1,0,0,1,1,0,1,0"))
                                                      (rule "add_zero_left" (formula "11") (term "0,0,0,1,0,0,1,1,0,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,1,1,0,1,0"))
                                                      (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,1,0,1,0"))
                                                      (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,1,0,1,0"))
                                                      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,1,0,1,0"))
                                                      (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,1,0,1,0"))
                                                      (rule "polySimp_mulComm0" (formula "11") (term "0,1,1,0,0,1,1,0,1,0"))
                                                      (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,1,1,0,1,0"))
                                                      (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,1,1,0,1,0"))
                                                      (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,1,1,0,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,1,0,1,0"))
                                                      (rule "mul_literals" (formula "11") (term "1,0,0,0,1,1,0,1,0"))
                                                      (rule "commute_or" (formula "10") (term "0,0,0,1,0,1,0"))
                                                      (rule "cnf_rightDist" (formula "10") (term "1,0,1,0,1,0"))
                                                      (rule "commute_or" (formula "10") (term "1,1,1,0,1,0"))
                                                      (rule "commute_or" (formula "11") (term "0,0,0,1,0,1,0"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "45") (term "0") (ifseqformula "4"))
                                                      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "46"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "commute_or_2" (formula "11") (term "0,1,1,0,1,0"))
                                                      (rule "commute_or" (formula "12") (term "1,1,1,0,1,0"))
                                                      (rule "cnf_rightDist" (formula "12") (term "1,0,1,0,1,0"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "15") (term "1") (ifseqformula "5"))
                                                      (rule "commute_or_2" (formula "12") (term "0,1,1,0,1,0"))
                                                      (rule "equalityToSeqGetAndSeqLenLeft" (formula "14") (inst "iv=iv"))
                                                      (rule "andLeft" (formula "14"))
                                                      (rule "lenOfSeqSub" (formula "14") (term "0"))
                                                      (rule "polySimp_elimSub" (formula "14") (term "1,0"))
                                                      (rule "polySimp_addComm0" (formula "14") (term "1,0"))
                                                      (rule "lenOfSeqSubEQ" (formula "14") (term "1") (ifseqformula "16"))
                                                      (rule "eqSymm" (formula "14"))
                                                      (rule "polySimp_elimSub" (formula "14") (term "1,0"))
                                                      (rule "polySimp_addComm0" (formula "14") (term "1,0"))
                                                       (builtin "One Step Simplification" (formula "14"))
                                                      (rule "true_left" (formula "14"))
                                                      (rule "lenOfSeqSub" (formula "14") (term "1,1,0,0"))
                                                      (rule "polySimp_elimSub" (formula "14") (term "1,1,1,0,0"))
                                                      (rule "polySimp_addComm0" (formula "14") (term "1,1,1,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1,1,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,1,0,0"))
                                                      (rule "polySimp_addComm1" (formula "14") (term "0,0,1,1,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                                                      (rule "applyEq" (formula "14") (term "0,0,1,0") (ifseqformula "15"))
                                                       (builtin "One Step Simplification" (formula "14"))
                                                      (rule "true_left" (formula "14"))
                                                      (rule "all_pull_out3" (formula "45") (term "0"))
                                                      (rule "shift_paren_or" (formula "45") (term "0,0"))
                                                      (rule "shift_paren_or" (formula "45") (term "0,0,0"))
                                                      (rule "shift_paren_or" (formula "45") (term "0,0,0,0"))
                                                      (rule "commute_or_2" (formula "45") (term "0,0,0,0,0"))
                                                      (rule "seqGetAlphaCast" (formula "16") (term "0"))
                                                      (rule "castedGetAny" (formula "16") (term "0"))
                                                       (builtin "One Step Simplification" (formula "16"))
                                                      (rule "true_left" (formula "16"))
                                                      (rule "equalityToSeqGetAndSeqLenLeft" (formula "13") (inst "iv=iv"))
                                                      (rule "andLeft" (formula "13"))
                                                      (rule "lenOfSeqSub" (formula "14") (term "1,1,0,0"))
                                                      (rule "polySimp_elimSub" (formula "14") (term "1,1,1,0,0"))
                                                      (rule "times_zero_2" (formula "14") (term "1,1,1,1,0,0"))
                                                      (rule "add_zero_right" (formula "14") (term "1,1,1,0,0"))
                                                      (rule "lenOfSeqSub" (formula "13") (term "0"))
                                                      (rule "polySimp_elimSub" (formula "13") (term "1,0"))
                                                      (rule "times_zero_2" (formula "13") (term "1,1,0"))
                                                      (rule "add_zero_right" (formula "13") (term "1,0"))
                                                      (rule "lenOfSeqSubEQ" (formula "13") (term "1") (ifseqformula "15"))
                                                      (rule "eqSymm" (formula "13"))
                                                      (rule "polySimp_elimSub" (formula "13") (term "1,0"))
                                                      (rule "mul_literals" (formula "13") (term "1,1,0"))
                                                      (rule "add_zero_right" (formula "13") (term "1,0"))
                                                       (builtin "One Step Simplification" (formula "13"))
                                                      (rule "true_left" (formula "13"))
                                                      (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,1,0,0"))
                                                      (rule "add_zero_right" (formula "13") (term "0,0,1,1,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,1,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                                                      (rule "applyEq" (formula "13") (term "0,0,1,0") (ifseqformula "14"))
                                                       (builtin "One Step Simplification" (formula "13"))
                                                      (rule "true_left" (formula "13"))
                                                      (rule "commute_or" (formula "11") (term "0,1,0,1,0,1,0"))
                                                      (rule "cut_direct" (formula "39") (term "0"))
                                                      (branch "CUT: self.list.tail = null TRUE"
                                                          (builtin "One Step Simplification" (formula "40"))
                                                         (rule "true_left" (formula "40"))
                                                         (rule "replace_known_left" (formula "37") (term "0") (ifseqformula "39"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "replace_known_left" (formula "31") (term "0,1") (ifseqformula "38"))
                                                          (builtin "One Step Simplification" (formula "31"))
                                                         (rule "replace_known_left" (formula "32") (term "0,0") (ifseqformula "38"))
                                                          (builtin "One Step Simplification" (formula "32"))
                                                         (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "38"))
                                                          (builtin "One Step Simplification" (formula "34"))
                                                         (rule "true_left" (formula "34"))
                                                         (rule "replace_known_left" (formula "29") (term "1") (ifseqformula "37"))
                                                          (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "31")))
                                                         (rule "true_left" (formula "29"))
                                                         (rule "replace_known_left" (formula "39") (term "0") (ifseqformula "36"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "30"))
                                                          (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "31")))
                                                         (rule "true_left" (formula "34"))
                                                         (rule "replace_known_left" (formula "29") (term "0,0") (ifseqformula "30"))
                                                          (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "31")))
                                                         (rule "true_left" (formula "29"))
                                                         (rule "replace_known_left" (formula "36") (term "0") (ifseqformula "29"))
                                                          (builtin "One Step Simplification" (formula "36"))
                                                         (rule "true_left" (formula "36"))
                                                         (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "30"))
                                                          (builtin "One Step Simplification" (formula "35"))
                                                         (rule "true_left" (formula "35"))
                                                         (rule "replace_known_left" (formula "33") (term "0") (ifseqformula "29"))
                                                          (builtin "One Step Simplification" (formula "33"))
                                                         (rule "true_left" (formula "33"))
                                                         (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "29"))
                                                          (builtin "One Step Simplification" (formula "31"))
                                                         (rule "true_left" (formula "31"))
                                                         (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "30"))
                                                          (builtin "One Step Simplification" (formula "31"))
                                                         (rule "true_left" (formula "31"))
                                                         (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "30"))
                                                          (builtin "One Step Simplification" (formula "32"))
                                                         (rule "true_left" (formula "32"))
                                                         (rule "applyEq" (formula "32") (term "0,1,0,0,0") (ifseqformula "30"))
                                                         (rule "applyEq" (formula "33") (term "0,0,0,1,0,0,0,0,0,0") (ifseqformula "30"))
                                                         (rule "applyEq" (formula "24") (term "0,0,0,0,0,0") (ifseqformula "30"))
                                                         (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "30"))
                                                         (rule "eqSymm" (formula "16"))
                                                         (rule "applyEq" (formula "21") (term "0,0,0,0,0,0") (ifseqformula "30"))
                                                         (rule "applyEq" (formula "33") (term "0,1,0,1,0,0,0,0,0,0") (ifseqformula "30"))
                                                         (rule "applyEq" (formula "23") (term "0,1,0,0,0,0,0") (ifseqformula "30"))
                                                         (rule "applyEq" (formula "34") (term "0,1,1,0,0,0") (ifseqformula "30"))
                                                         (rule "applyEq" (formula "22") (term "0,0,0,0,0,0") (ifseqformula "30"))
                                                         (rule "applyEq" (formula "22") (term "0,1,0,1,0,0,0") (ifseqformula "30"))
                                                         (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "30"))
                                                          (builtin "One Step Simplification" (formula "18"))
                                                         (rule "eqSymm" (formula "18"))
                                                         (rule "applyEq" (formula "32") (term "0,1,0,0,0,0") (ifseqformula "30"))
                                                         (rule "applyEq" (formula "15") (term "1,0,1") (ifseqformula "16"))
                                                         (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "18"))
                                                         (rule "applyEq" (formula "12") (term "1,1,0,1,1,0,1,0,1,0") (ifseqformula "18"))
                                                         (rule "add_zero_right" (formula "12") (term "1,0,1,1,0,1,0,1,0"))
                                                         (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "18"))
                                                         (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                                                         (rule "qeq_literals" (formula "17"))
                                                         (rule "true_left" (formula "17"))
                                                         (rule "applyEq" (formula "12") (term "1,1,1,0,0") (ifseqformula "17"))
                                                         (rule "add_zero_right" (formula "12") (term "1,1,0,0"))
                                                         (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "16"))
                                                         (rule "applyEq" (formula "33") (term "1,1,0") (ifseqformula "17"))
                                                         (rule "applyEq" (formula "19") (term "0") (ifseqformula "17"))
                                                         (rule "leq_literals" (formula "19"))
                                                         (rule "true_left" (formula "19"))
                                                         (rule "applyEq" (formula "31") (term "1,1,0,0,0,0,0") (ifseqformula "17"))
                                                         (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "17"))
                                                         (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "17"))
                                                         (rule "applyEq" (formula "12") (term "1,1,1,0,1,1,0,1,0") (ifseqformula "17"))
                                                         (rule "add_zero_right" (formula "12") (term "1,1,0,1,1,0,1,0"))
                                                         (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "16"))
                                                         (rule "applyEq" (formula "30") (term "1,1,1,0") (ifseqformula "17"))
                                                         (rule "add_zero_right" (formula "30") (term "1,1,0"))
                                                         (rule "applyEq" (formula "14") (term "2,0") (ifseqformula "17"))
                                                         (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "17"))
                                                         (rule "applyEq" (formula "23") (term "1,1,0") (ifseqformula "17"))
                                                         (rule "applyEq" (formula "12") (term "1,1,1,1,1,1,1,0,1,0") (ifseqformula "17"))
                                                         (rule "add_zero_right" (formula "12") (term "1,1,1,1,1,1,0,1,0"))
                                                         (rule "applyEq" (formula "12") (term "1,1,1,0,0,1,0,1,0") (ifseqformula "17"))
                                                         (rule "add_zero_right" (formula "12") (term "1,1,0,0,1,0,1,0"))
                                                         (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "17"))
                                                         (rule "applyEq" (formula "10") (term "0") (ifseqformula "17"))
                                                         (rule "inEqSimp_homoInEq1" (formula "10"))
                                                         (rule "times_zero_2" (formula "10") (term "1,0"))
                                                         (rule "add_zero_right" (formula "10") (term "0"))
                                                         (rule "applyEq" (formula "31") (term "1,1,0,0,0") (ifseqformula "17"))
                                                         (rule "applyEq" (formula "19") (term "1,1,0") (ifseqformula "17"))
                                                         (rule "applyEq" (formula "18") (term "1") (ifseqformula "17"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "10"))
                                                         (rule "mul_literals" (formula "10") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "3"))
                                                         (rule "qeq_literals" (formula "10") (term "0"))
                                                          (builtin "One Step Simplification" (formula "10"))
                                                         (rule "closeFalse" (formula "10"))
                                                      )
                                                      (branch "CUT: self.list.tail = null FALSE"
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "replace_known_right" (formula "32") (term "0,0") (ifseqformula "47"))
                                                          (builtin "One Step Simplification" (formula "32"))
                                                         (rule "true_left" (formula "32"))
                                                         (rule "replace_known_left" (formula "39") (term "1") (ifseqformula "38"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "replace_known_right" (formula "31") (term "0,1") (ifseqformula "45"))
                                                          (builtin "One Step Simplification" (formula "31"))
                                                         (rule "true_left" (formula "31"))
                                                         (rule "replace_known_right" (formula "32") (term "0") (ifseqformula "44"))
                                                          (builtin "One Step Simplification" (formula "32"))
                                                         (rule "replace_known_right" (formula "29") (term "1") (ifseqformula "44"))
                                                          (builtin "One Step Simplification" (formula "29"))
                                                         (rule "notLeft" (formula "29"))
                                                         (rule "replace_known_right" (formula "34") (term "0") (ifseqformula "44"))
                                                          (builtin "One Step Simplification" (formula "34"))
                                                         (rule "notLeft" (formula "34"))
                                                         (rule "replace_known_left" (formula "34") (term "1") (ifseqformula "35"))
                                                          (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "43")))
                                                         (rule "true_left" (formula "34"))
                                                         (rule "replace_known_right" (formula "36") (term "0") (ifseqformula "43"))
                                                          (builtin "One Step Simplification" (formula "36"))
                                                         (rule "replace_known_right" (formula "32") (term "1") (ifseqformula "41"))
                                                          (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "31")))
                                                         (rule "true_left" (formula "32"))
                                                         (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "41"))
                                                          (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "31")))
                                                         (rule "true_left" (formula "30"))
                                                         (rule "replace_known_left" (formula "33") (term "1") (ifseqformula "34"))
                                                          (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "40")))
                                                         (rule "true_left" (formula "33"))
                                                         (rule "replace_known_left" (formula "34") (term "1") (ifseqformula "33"))
                                                          (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "38")))
                                                         (rule "true_left" (formula "34"))
                                                         (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "38"))
                                                          (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "37")))
                                                         (rule "true_left" (formula "31"))
                                                         (rule "replace_known_right" (formula "29") (term "0,0") (ifseqformula "37"))
                                                          (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "36")))
                                                         (rule "true_left" (formula "29"))
                                                         (rule "equalityToSeqGetAndSeqLenRight" (formula "35") (inst "iv=iv"))
                                                          (builtin "One Step Simplification" (formula "35"))
                                                         (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1"))
                                                         (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0,1"))
                                                         (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1"))
                                                         (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "18"))
                                                         (rule "applyEq" (formula "35") (term "0,1,0,0,1,0,0,1") (ifseqformula "18"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1"))
                                                         (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1"))
                                                         (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1"))
                                                         (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1"))
                                                         (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1"))
                                                         (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1"))
                                                         (rule "nnf_imp2or" (formula "35") (term "0,1"))
                                                         (rule "nnf_notAnd" (formula "35") (term "0,0,1"))
                                                         (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,1"))
                                                         (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1"))
                                                         (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1"))
                                                         (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1"))
                                                         (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1"))
                                                         (rule "add_zero_left" (formula "35") (term "0,0,1,0,0,1"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,1"))
                                                         (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,1"))
                                                         (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,1"))
                                                         (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,1"))
                                                         (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0,1"))
                                                         (rule "add_literals" (formula "35") (term "0,0,0,0,0,1"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,1"))
                                                         (rule "mul_literals" (formula "35") (term "1,0,0,0,1"))
                                                         (rule "commute_or" (formula "11") (term "0,0,1,1,0,1,0"))
                                                         (rule "commute_or" (formula "12") (term "0,1,0,1,0,1,0"))
                                                         (rule "commute_or" (formula "12") (term "0,0,1,1,0,1,0"))
                                                         (rule "commute_or" (formula "33") (term "0,0,0,0,0,0"))
                                                         (rule "cnf_rightDist" (formula "11") (term "1,1,1,0,1,0"))
                                                         (rule "cnf_rightDist" (formula "12") (term "1,1,1,0,1,0"))
                                                         (rule "allLeft" (formula "34") (inst "t=i_0_0"))
                                                         (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                                         (rule "applyEq" (formula "34") (term "1,1,0,0") (ifseqformula "16"))
                                                         (rule "applyEq" (formula "34") (term "1,0,0") (ifseqformula "2"))
                                                         (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "10"))
                                                         (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                                                         (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                                                         (rule "add_zero_right" (formula "34") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "34") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "34"))
                                                         (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "3"))
                                                         (rule "qeq_literals" (formula "34") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "34"))
                                                         (rule "shift_paren_and" (formula "11") (term "0,1,0,1,0"))
                                                         (rule "commute_or" (formula "11") (term "1,1,1,1,0,1,0"))
                                                         (rule "commute_or" (formula "12") (term "1,1,1,1,0,1,0"))
                                                         (rule "shift_paren_and" (formula "12") (term "0,1,0,1,0"))
                                                         (rule "shift_paren_and" (formula "11") (term "1,1,0,1,0"))
                                                         (rule "shift_paren_and" (formula "11") (term "1,0,1,0"))
                                                         (rule "cut_direct" (formula "15") (term "0"))
                                                         (branch "CUT: self.curr = null TRUE"
                                                             (builtin "One Step Simplification" (formula "16"))
                                                            (rule "true_left" (formula "16"))
                                                            (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "15"))
                                                            (rule "applyEq" (formula "16") (term "1") (ifseqformula "15"))
                                                            (rule "shift_paren_and" (formula "12") (term "1,1,0,1,0"))
                                                            (rule "shift_paren_and" (formula "12") (term "1,0,1,0"))
                                                            (rule "shift_paren_and" (formula "11") (term "0,1,0,1,0"))
                                                            (rule "shift_paren_and" (formula "11") (term "0,1,0"))
                                                            (rule "shift_paren_and" (formula "11") (term "0,0,1,0"))
                                                            (rule "shift_paren_and" (formula "12") (term "0,1,0,1,0"))
                                                            (rule "shift_paren_and" (formula "12") (term "0,1,0"))
                                                            (rule "shift_paren_and" (formula "12") (term "0,0,1,0"))
                                                            (rule "shift_paren_and" (formula "11") (term "0,0,0,1,0"))
                                                            (rule "shift_paren_and" (formula "12") (term "0,0,0,1,0"))
                                                            (rule "shift_paren_and" (formula "11") (term "0,0,0,0,1,0"))
                                                            (rule "shift_paren_and" (formula "12") (term "0,0,0,0,1,0"))
                                                            (rule "allLeft" (formula "27") (inst "t=i_0_0"))
                                                            (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "35"))
                                                             (builtin "One Step Simplification" (formula "27"))
                                                            (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "10"))
                                                            (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
                                                            (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
                                                            (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
                                                            (rule "add_zero_right" (formula "27") (term "0,0,1"))
                                                            (rule "leq_literals" (formula "27") (term "0,1"))
                                                             (builtin "One Step Simplification" (formula "27"))
                                                            (rule "inEqSimp_contradInEq1" (formula "27") (ifseqformula "3"))
                                                            (rule "qeq_literals" (formula "27") (term "0"))
                                                             (builtin "One Step Simplification" (formula "27"))
                                                            (rule "closeFalse" (formula "27"))
                                                         )
                                                         (branch "CUT: self.curr = null FALSE"
                                                             (builtin "One Step Simplification" (formula "15"))
                                                            (rule "shift_paren_and" (formula "12") (term "1,1,0,1,0"))
                                                            (rule "shift_paren_and" (formula "12") (term "1,0,1,0"))
                                                            (rule "shift_paren_and" (formula "11") (term "0,1,0,1,0"))
                                                            (rule "shift_paren_and" (formula "11") (term "0,1,0"))
                                                            (rule "shift_paren_and" (formula "11") (term "0,0,1,0"))
                                                            (rule "shift_paren_and" (formula "12") (term "0,1,0,1,0"))
                                                            (rule "shift_paren_and" (formula "12") (term "0,1,0"))
                                                            (rule "shift_paren_and" (formula "12") (term "0,0,1,0"))
                                                            (rule "shift_paren_and" (formula "11") (term "0,0,0,1,0"))
                                                            (rule "shift_paren_and" (formula "12") (term "0,0,0,1,0"))
                                                            (rule "shift_paren_and" (formula "11") (term "0,0,0,0,1,0"))
                                                            (rule "shift_paren_and" (formula "12") (term "0,0,0,0,1,0"))
                                                            (rule "allLeft" (formula "27") (inst "t=i_0_0"))
                                                            (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "35"))
                                                             (builtin "One Step Simplification" (formula "27"))
                                                            (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "27") (term "0") (ifseqformula "3"))
                                                            (rule "qeq_literals" (formula "27") (term "0,0"))
                                                             (builtin "One Step Simplification" (formula "27"))
                                                            (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "27"))
                                                            (rule "andLeft" (formula "10"))
                                                            (rule "inEqSimp_homoInEq1" (formula "10"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                                                            (rule "add_literals" (formula "10") (term "1,1,0"))
                                                            (rule "times_zero_1" (formula "10") (term "1,0"))
                                                            (rule "add_zero_right" (formula "10") (term "0"))
                                                            (rule "leq_literals" (formula "10"))
                                                            (rule "closeFalse" (formula "10"))
                                                         )
                                                      )
                                                   )
                                                   (branch "CUT: self.curr.value = null FALSE"
                                                       (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "33")))
                                                      (rule "referencedObjectIsCreatedRight" (formula "34") (ifseqformula "33"))
                                                      (rule "close" (formula "34") (ifseqformula "3"))
                                                   )
                                                )
                                                (branch "self.index >= 1 FALSE"
                                                   (rule "eqSymm" (formula "1"))
                                                   (rule "inEqSimp_geqRight" (formula "25"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "applyEq" (formula "11") (term "1,1,0,0") (ifseqformula "2"))
                                                   (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "2"))
                                                   (rule "qeq_literals" (formula "3"))
                                                   (rule "true_left" (formula "3"))
                                                   (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "1"))
                                                   (rule "leq_literals" (formula "7") (term "0"))
                                                    (builtin "One Step Simplification" (formula "7"))
                                                   (rule "true_left" (formula "7"))
                                                   (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "12") (term "2,0") (ifseqformula "8"))
                                                    (builtin "One Step Simplification" (formula "12"))
                                                   (rule "eqSymm" (formula "12"))
                                                   (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "8"))
                                                   (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "8"))
                                                   (rule "add_zero_right" (formula "7") (term "1"))
                                                   (rule "applyEq" (formula "1") (term "0") (ifseqformula "8"))
                                                   (rule "leq_literals" (formula "1"))
                                                   (rule "true_left" (formula "1"))
                                                   (rule "applyEq" (formula "8") (term "0") (ifseqformula "7"))
                                                   (rule "qeq_literals" (formula "8"))
                                                   (rule "true_left" (formula "8"))
                                                   (rule "applyEq" (formula "12") (term "1,0") (ifseqformula "7"))
                                                   (rule "applyEq" (formula "19") (term "0,1,0,1") (ifseqformula "12"))
                                                   (rule "eqSymm" (formula "19") (term "1,0,1"))
                                                   (rule "applyEq" (formula "8") (term "1,1,1,0,1,1,1,0,1,0") (ifseqformula "7"))
                                                   (rule "add_zero_right" (formula "8") (term "1,1,0,1,1,1,0,1,0"))
                                                   (rule "applyEq" (formula "9") (term "0,0,1,1,0,0") (ifseqformula "7"))
                                                   (rule "times_zero_2" (formula "9") (term "0,1,1,0,0"))
                                                   (rule "add_zero_left" (formula "9") (term "1,1,0,0"))
                                                   (rule "applyEq" (formula "9") (term "0,1,1,1,1,1,0,1,0") (ifseqformula "7"))
                                                   (rule "add_zero_left" (formula "9") (term "1,1,1,1,1,0,1,0"))
                                                   (rule "applyEq" (formula "9") (term "0,1,0,1,1,0,1,1,1,0,1,0") (ifseqformula "7"))
                                                   (rule "times_zero_2" (formula "9") (term "1,0,1,1,0,1,1,1,0,1,0"))
                                                   (rule "add_zero_right" (formula "9") (term "0,1,1,0,1,1,1,0,1,0"))
                                                   (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "6"))
                                                   (rule "leq_literals" (formula "13") (term "0"))
                                                    (builtin "One Step Simplification" (formula "13"))
                                                   (rule "true_left" (formula "13"))
                                                   (rule "inEqSimp_or_tautInEq0" (formula "8") (term "0,0"))
                                                   (rule "add_zero_right" (formula "8") (term "1,1,0,0"))
                                                   (rule "qeq_literals" (formula "8") (term "1,0,0"))
                                                    (builtin "One Step Simplification" (formula "8"))
                                                   (rule "true_left" (formula "8"))
                                                   (rule "commute_or" (formula "18") (term "0,0"))
                                                   (rule "commute_and_2" (formula "17") (term "0"))
                                                   (rule "commute_or" (formula "20") (term "0,0"))
                                                   (rule "seqGetAlphaCast" (formula "17") (term "0,1,1"))
                                                   (rule "castedGetAny" (formula "17") (term "0"))
                                                    (builtin "One Step Simplification" (formula "17"))
                                                   (rule "true_left" (formula "17"))
                                                   (rule "shift_paren_or" (formula "19") (term "0,1,0"))
                                                   (rule "commute_and_2" (formula "17") (term "0,0,0,1"))
                                                   (rule "applyEq_and_gen2" (formula "16") (term "1,0,1,0"))
                                                   (rule "cnf_rightDist" (formula "17"))
                                                   (rule "andLeft" (formula "17"))
                                                   (rule "cnf_rightDist" (formula "18"))
                                                   (rule "andLeft" (formula "18"))
                                                   (rule "cnf_rightDist" (formula "18"))
                                                   (rule "andLeft" (formula "18"))
                                                   (rule "commute_or" (formula "18"))
                                                   (rule "commute_and_2" (formula "17") (term "1"))
                                                   (rule "cnf_rightDist" (formula "17"))
                                                   (rule "andLeft" (formula "17"))
                                                   (rule "cnf_rightDist" (formula "18"))
                                                   (rule "andLeft" (formula "18"))
                                                   (rule "commute_or" (formula "19"))
                                                   (rule "cnf_rightDist" (formula "18"))
                                                   (rule "andLeft" (formula "18"))
                                                   (rule "commute_or" (formula "18"))
                                                   (rule "commute_and_2" (formula "17") (term "1"))
                                                   (rule "commute_or_2" (formula "25") (term "0,0,1,0"))
                                                   (rule "applyEq_and_gen2" (formula "8") (term "1,0,1,0"))
                                                   (rule "ifEqualsNull" (formula "8") (term "0,0,1,0,1,0"))
                                                   (rule "nnf_notOr" (formula "8") (term "0,1,0,1,0"))
                                                   (rule "nnf_notAnd" (formula "8") (term "1,0,1,0,1,0"))
                                                    (builtin "One Step Simplification" (formula "8"))
                                                   (rule "nnf_notAnd" (formula "8") (term "0,0,1,0,1,0"))
                                                   (rule "nnf_notAnd" (formula "8") (term "0,0,0,1,0,1,0"))
                                                   (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0,0,1,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,0,1,0,1,0"))
                                                   (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,0,1,0,1,0"))
                                                   (rule "add_literals" (formula "8") (term "0,0,0,1,0,0,0,1,0,1,0"))
                                                   (rule "add_zero_left" (formula "8") (term "0,0,1,0,0,0,1,0,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0,0,1,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,1,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0,1,0,1,0"))
                                                   (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,0,1,0,1,0"))
                                                   (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0,0,1,0,1,0"))
                                                   (rule "add_zero_right" (formula "8") (term "0,0,0,0,0,0,1,0,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,0,1,0,1,0"))
                                                   (rule "mul_literals" (formula "8") (term "1,0,0,0,0,1,0,1,0"))
                                                   (rule "cnf_rightDist" (formula "17"))
                                                   (rule "andLeft" (formula "17"))
                                                   (rule "shift_paren_and" (formula "15") (term "0,1,0"))
                                                    (builtin "One Step Simplification" (formula "15"))
                                                   (rule "castedGetAny" (formula "15") (term "0,0,0,0,0,1,0"))
                                                   (rule "castedGetAny" (formula "15") (term "0,0,1,0,0,1,0"))
                                                   (rule "castedGetAny" (formula "15") (term "1,0,1,1,0,0,1,0"))
                                                   (rule "castedGetAny" (formula "15") (term "1,0,0,1,0,1,0"))
                                                   (rule "cnf_rightDist" (formula "18"))
                                                    (builtin "One Step Simplification" (formula "18"))
                                                   (rule "cut_direct" (formula "30") (term "0,0"))
                                                   (branch "CUT: self.curr.value = null TRUE"
                                                       (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "1")))
                                                      (rule "false_right" (formula "31"))
                                                      (rule "cnf_rightDist" (formula "19"))
                                                      (rule "andLeft" (formula "19"))
                                                      (rule "commute_or" (formula "19"))
                                                      (rule "commute_and_2" (formula "18") (term "1"))
                                                      (rule "cnf_rightDist" (formula "16") (term "0"))
                                                      (rule "distr_forallAnd" (formula "16"))
                                                      (rule "andLeft" (formula "16"))
                                                      (rule "shift_paren_or" (formula "17") (term "0"))
                                                      (rule "commute_or" (formula "29") (term "0,0,0,1,0"))
                                                      (rule "cnf_rightDist" (formula "19"))
                                                      (rule "andLeft" (formula "19"))
                                                      (rule "cnf_rightDist" (formula "20"))
                                                      (rule "andLeft" (formula "20"))
                                                      (rule "commute_or" (formula "21"))
                                                      (rule "cnf_rightDist" (formula "20"))
                                                       (builtin "One Step Simplification" (formula "20"))
                                                      (rule "commute_or" (formula "20"))
                                                      (rule "cnf_rightDist" (formula "19"))
                                                      (rule "andLeft" (formula "19"))
                                                      (rule "commute_or" (formula "19"))
                                                      (rule "cnf_rightDist" (formula "20"))
                                                      (rule "andLeft" (formula "20"))
                                                      (rule "commute_or" (formula "21"))
                                                      (rule "cnf_rightDist" (formula "19"))
                                                      (rule "andLeft" (formula "19"))
                                                      (rule "commute_or" (formula "20"))
                                                      (rule "cnf_rightDist" (formula "21"))
                                                      (rule "andLeft" (formula "21"))
                                                      (rule "commute_or" (formula "22"))
                                                      (rule "commute_or" (formula "21"))
                                                      (rule "cnf_rightDist" (formula "19"))
                                                       (builtin "One Step Simplification" (formula "19"))
                                                      (rule "commute_or" (formula "19"))
                                                      (rule "cnf_rightDist" (formula "16") (term "0"))
                                                      (rule "distr_forallAnd" (formula "16"))
                                                      (rule "andLeft" (formula "16"))
                                                      (rule "shift_paren_or" (formula "17") (term "0"))
                                                      (rule "commute_or" (formula "9") (term "1,0,1,0,1,0"))
                                                      (rule "shift_paren_and" (formula "19") (term "0,1,0"))
                                                       (builtin "One Step Simplification" (formula "19"))
                                                      (rule "castedGetAny" (formula "19") (term "1,0,1,1,0,0,1,0"))
                                                      (rule "castedGetAny" (formula "19") (term "0,0,0,0,0,1,0"))
                                                      (rule "castedGetAny" (formula "19") (term "0,0,1,0,0,1,0"))
                                                      (rule "cnf_rightDist" (formula "16") (term "0"))
                                                      (rule "distr_forallAnd" (formula "16"))
                                                      (rule "andLeft" (formula "16"))
                                                      (rule "commute_or_2" (formula "16") (term "0"))
                                                      (rule "shift_paren_or" (formula "17") (term "0"))
                                                      (rule "commute_or" (formula "16") (term "0,0"))
                                                      (rule "commute_or_2" (formula "9") (term "0,0,1,0,1,0"))
                                                      (rule "cnf_rightDist" (formula "20") (term "0"))
                                                      (rule "distr_forallAnd" (formula "20"))
                                                      (rule "andLeft" (formula "20"))
                                                      (rule "shift_paren_or" (formula "21") (term "0"))
                                                      (rule "cnf_rightDist" (formula "20") (term "0"))
                                                      (rule "distr_forallAnd" (formula "20"))
                                                      (rule "andLeft" (formula "20"))
                                                      (rule "shift_paren_or" (formula "21") (term "0"))
                                                      (rule "cnf_rightDist" (formula "20") (term "0"))
                                                      (rule "distr_forallAnd" (formula "20"))
                                                      (rule "andLeft" (formula "20"))
                                                      (rule "commute_or_2" (formula "20") (term "0"))
                                                      (rule "shift_paren_or" (formula "21") (term "0"))
                                                      (rule "commute_or" (formula "20") (term "0,0"))
                                                      (rule "ifthenelse_to_or_right" (formula "9") (term "1,1,0,1,0"))
                                                      (rule "nnf_notAnd" (formula "9") (term "0,0,1,1,0,1,0"))
                                                      (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,1,1,0,1,0"))
                                                      (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,1,1,0,1,0"))
                                                      (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,1,1,0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,1,1,0,1,0"))
                                                      (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,1,1,0,1,0"))
                                                      (rule "add_zero_left" (formula "9") (term "0,0,1,0,0,1,1,0,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,1,1,0,1,0"))
                                                      (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,1,1,0,1,0"))
                                                      (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,1,1,0,1,0"))
                                                      (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,1,1,0,1,0"))
                                                      (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0,1,1,0,1,0"))
                                                      (rule "add_zero_right" (formula "9") (term "0,0,0,0,0,1,1,0,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,1,1,0,1,0"))
                                                      (rule "mul_literals" (formula "9") (term "1,0,0,0,1,1,0,1,0"))
                                                      (rule "commute_or" (formula "9") (term "1,1,1,0,1,0"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,1") (ifseqformula "3"))
                                                      (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "43"))
                                                       (builtin "One Step Simplification" (formula "13"))
                                                      (rule "commute_or" (formula "9") (term "0,0,0,1,0,1,0"))
                                                      (rule "commute_or_2" (formula "9") (term "0,1,1,0,1,0"))
                                                      (rule "cnf_rightDist" (formula "9") (term "1,0,1,0,1,0"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1") (ifseqformula "3"))
                                                      (rule "commute_or" (formula "9") (term "0,0,1,1,0,1,0"))
                                                      (rule "commute_or" (formula "9") (term "0,1,0,1,0,1,0"))
                                                      (rule "all_pull_out3" (formula "42") (term "0"))
                                                      (rule "shift_paren_or" (formula "42") (term "0,0"))
                                                      (rule "shift_paren_or" (formula "42") (term "0,0,0"))
                                                      (rule "shift_paren_or" (formula "42") (term "0,0,0,0"))
                                                      (rule "commute_or_2" (formula "42") (term "0,0,0,0,0"))
                                                      (rule "commute_or" (formula "42") (term "0,0,0,0,0,0"))
                                                      (rule "cnf_rightDist" (formula "9") (term "1,1,1,0,1,0"))
                                                      (rule "commute_or" (formula "9") (term "1,1,1,1,0,1,0"))
                                                      (rule "equalityToSeqGetAndSeqLenLeft" (formula "10") (inst "iv=iv"))
                                                       (builtin "One Step Simplification" (formula "10"))
                                                      (rule "andLeft" (formula "10"))
                                                      (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                                                      (rule "applyEq" (formula "11") (term "0,0,1,0,0,1,0,0") (ifseqformula "12"))
                                                       (builtin "One Step Simplification" (formula "11"))
                                                      (rule "times_zero_2" (formula "11") (term "1,0,0,1,0,0"))
                                                      (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
                                                      (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "12"))
                                                       (builtin "One Step Simplification" (formula "10"))
                                                      (rule "true_left" (formula "10"))
                                                      (rule "applyEq" (formula "10") (term "0,0,1,0") (ifseqformula "11"))
                                                       (builtin "One Step Simplification" (formula "10"))
                                                      (rule "true_left" (formula "10"))
                                                      (rule "equalityToSeqGetAndSeqLenLeft" (formula "11") (inst "iv=iv"))
                                                      (rule "andLeft" (formula "11"))
                                                      (rule "lenOfSeqSub" (formula "11") (term "0"))
                                                      (rule "polySimp_elimSub" (formula "11") (term "1,0"))
                                                      (rule "times_zero_2" (formula "11") (term "1,1,0"))
                                                      (rule "add_zero_right" (formula "11") (term "1,0"))
                                                      (rule "lenOfSeqSub" (formula "12") (term "1,1,0,0"))
                                                      (rule "polySimp_elimSub" (formula "12") (term "1,1,1,0,0"))
                                                      (rule "times_zero_2" (formula "12") (term "1,1,1,1,0,0"))
                                                      (rule "add_zero_right" (formula "12") (term "1,1,1,0,0"))
                                                      (rule "lenOfSeqSubEQ" (formula "11") (term "1") (ifseqformula "13"))
                                                      (rule "eqSymm" (formula "11"))
                                                      (rule "polySimp_elimSub" (formula "11") (term "1,0"))
                                                      (rule "times_zero_2" (formula "11") (term "1,1,0"))
                                                      (rule "add_zero_right" (formula "11") (term "1,0"))
                                                       (builtin "One Step Simplification" (formula "11"))
                                                      (rule "true_left" (formula "11"))
                                                      (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,1,0,0"))
                                                      (rule "add_zero_right" (formula "11") (term "0,0,1,1,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,1,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                                                      (rule "applyEq" (formula "11") (term "0,0,1,0") (ifseqformula "12"))
                                                       (builtin "One Step Simplification" (formula "11"))
                                                      (rule "true_left" (formula "11"))
                                                      (rule "cut_direct" (formula "36") (term "0"))
                                                      (branch "CUT: self.list.tail = null TRUE"
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "replace_known_left" (formula "39") (term "0") (ifseqformula "36"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "replace_known_left" (formula "31") (term "0,1") (ifseqformula "36"))
                                                          (builtin "One Step Simplification" (formula "31"))
                                                         (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "36"))
                                                          (builtin "One Step Simplification" (formula "34"))
                                                         (rule "true_left" (formula "34"))
                                                         (rule "replace_known_left" (formula "29") (term "1") (ifseqformula "35"))
                                                          (builtin "One Step Simplification" (formula "29"))
                                                         (rule "true_left" (formula "29"))
                                                         (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "34"))
                                                          (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "30")))
                                                         (rule "true_left" (formula "26"))
                                                         (rule "replace_known_left" (formula "30") (term "0,0") (ifseqformula "33"))
                                                          (builtin "One Step Simplification" (formula "30"))
                                                         (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "29"))
                                                          (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "30")))
                                                         (rule "true_left" (formula "31"))
                                                         (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "29"))
                                                          (builtin "One Step Simplification" (formula "27"))
                                                         (rule "true_left" (formula "27"))
                                                         (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "28"))
                                                          (builtin "One Step Simplification" (formula "30"))
                                                         (rule "true_left" (formula "30"))
                                                         (rule "replace_known_left" (formula "27") (term "1") (ifseqformula "29"))
                                                          (builtin "One Step Simplification" (formula "27"))
                                                         (rule "true_left" (formula "27"))
                                                         (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "28"))
                                                          (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "27")))
                                                         (rule "true_left" (formula "26"))
                                                         (rule "replace_known_left" (formula "29") (term "1") (ifseqformula "27"))
                                                          (builtin "One Step Simplification" (formula "29"))
                                                         (rule "true_left" (formula "29"))
                                                         (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "27"))
                                                          (builtin "One Step Simplification" (formula "30"))
                                                         (rule "true_left" (formula "30"))
                                                         (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "26"))
                                                          (builtin "One Step Simplification" (formula "29"))
                                                         (rule "true_left" (formula "29"))
                                                         (rule "applyEq" (formula "18") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "applyEq" (formula "19") (term "0,1,0,1,0,0,0") (ifseqformula "27"))
                                                         (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "27"))
                                                         (rule "eqSymm" (formula "13"))
                                                         (rule "applyEq" (formula "31") (term "0,1,1,0,0,0") (ifseqformula "27"))
                                                         (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "27"))
                                                          (builtin "One Step Simplification" (formula "15"))
                                                         (rule "eqSymm" (formula "15"))
                                                         (rule "applyEq" (formula "29") (term "0,1,0,0,0") (ifseqformula "27"))
                                                         (rule "applyEq" (formula "30") (term "0,0,0,0,0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "applyEq" (formula "30") (term "0,1,0,0,0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "applyEq" (formula "29") (term "0,1,0,0,0,0") (ifseqformula "27"))
                                                         (rule "applyEq" (formula "21") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "applyEq" (formula "20") (term "0,1,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "applyEq" (formula "19") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "applyEq" (formula "29") (term "1,1,1,0") (ifseqformula "15"))
                                                         (rule "add_zero_right" (formula "29") (term "1,1,0"))
                                                         (rule "applyEq" (formula "17") (term "0") (ifseqformula "15"))
                                                         (rule "leq_literals" (formula "17"))
                                                         (rule "true_left" (formula "17"))
                                                         (rule "applyEq" (formula "9") (term "1,1,0,0,1,0,1,0") (ifseqformula "15"))
                                                         (rule "applyEq" (formula "9") (term "1,1,0,1,1,0,1,0,1,0") (ifseqformula "15"))
                                                         (rule "add_zero_right" (formula "9") (term "1,0,1,1,0,1,0,1,0"))
                                                         (rule "applyEq" (formula "20") (term "1,1,0") (ifseqformula "15"))
                                                         (rule "applyEq" (formula "19") (term "1,1,0") (ifseqformula "15"))
                                                         (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "15"))
                                                         (rule "applyEq" (formula "18") (term "1,1,0") (ifseqformula "15"))
                                                         (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "15"))
                                                         (rule "applyEq" (formula "17") (term "1,1,0") (ifseqformula "15"))
                                                         (rule "applyEq" (formula "12") (term "1,0,1") (ifseqformula "13"))
                                                         (rule "applyEq" (formula "9") (term "1,1,0,0") (ifseqformula "15"))
                                                         (rule "applyEq" (formula "29") (term "1,1,0,0,0") (ifseqformula "15"))
                                                         (rule "applyEq" (formula "9") (term "1,1,0,1,1,0,1,0") (ifseqformula "15"))
                                                         (rule "applyEq" (formula "11") (term "2,0") (ifseqformula "15"))
                                                          (builtin "One Step Simplification" (formula "11"))
                                                         (rule "eqSymm" (formula "11"))
                                                         (rule "applyEq" (formula "29") (term "1,1,0,0,0,0,0") (ifseqformula "15"))
                                                         (rule "applyEq" (formula "23") (term "1,1,0") (ifseqformula "15"))
                                                         (rule "applyEq" (formula "9") (term "1,1,1,1,1,1,1,0,1,0") (ifseqformula "15"))
                                                         (rule "add_zero_right" (formula "9") (term "1,1,1,1,1,1,0,1,0"))
                                                         (rule "applyEq" (formula "7") (term "0") (ifseqformula "15"))
                                                         (rule "qeq_literals" (formula "7"))
                                                         (rule "closeFalse" (formula "7"))
                                                      )
                                                      (branch "CUT: self.list.tail = null FALSE"
                                                          (builtin "One Step Simplification" (formula "36"))
                                                         (rule "replace_known_right" (formula "31") (term "0,1") (ifseqformula "44"))
                                                          (builtin "One Step Simplification" (formula "31"))
                                                         (rule "true_left" (formula "31"))
                                                         (rule "replace_known_right" (formula "26") (term "1") (ifseqformula "43"))
                                                          (builtin "One Step Simplification" (formula "26"))
                                                         (rule "notLeft" (formula "26"))
                                                         (rule "replace_known_right" (formula "37") (term "0") (ifseqformula "43"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "replace_known_left" (formula "33") (term "1") (ifseqformula "34"))
                                                          (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "42")))
                                                         (rule "true_left" (formula "33"))
                                                         (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "33"))
                                                          (builtin "One Step Simplification" (formula "34"))
                                                         (rule "true_left" (formula "34"))
                                                         (rule "replace_known_right" (formula "30") (term "0,0") (ifseqformula "41"))
                                                          (builtin "One Step Simplification" (formula "30"))
                                                         (rule "true_left" (formula "30"))
                                                         (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "40"))
                                                          (builtin "One Step Simplification" (formula "31"))
                                                         (rule "notLeft" (formula "31"))
                                                         (rule "replace_known_right" (formula "28") (term "1") (ifseqformula "40"))
                                                          (builtin "One Step Simplification" (formula "28"))
                                                         (rule "replace_known_right" (formula "32") (term "0") (ifseqformula "39"))
                                                          (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "33")))
                                                         (rule "true_left" (formula "32"))
                                                         (rule "replace_known_left" (formula "27") (term "1") (ifseqformula "28"))
                                                          (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "38")))
                                                         (rule "true_left" (formula "27"))
                                                         (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "27"))
                                                          (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "36")))
                                                         (rule "true_left" (formula "28"))
                                                         (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "30"))
                                                          (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "35")))
                                                         (rule "true_left" (formula "31"))
                                                         (rule "replace_known_right" (formula "26") (term "1") (ifseqformula "34"))
                                                          (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "35")))
                                                         (rule "true_left" (formula "26"))
                                                         (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "34"))
                                                          (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "33")))
                                                         (rule "true_left" (formula "27"))
                                                         (rule "applyEq" (formula "33") (term "0") (ifseqformula "26"))
                                                         (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "33"))
                                                          (builtin "One Step Simplification" (formula "12"))
                                                         (rule "equalityToSeqGetAndSeqLenRight" (formula "32") (inst "iv=iv"))
                                                          (builtin "One Step Simplification" (formula "32"))
                                                         (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0,1"))
                                                         (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,1"))
                                                         (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,1"))
                                                         (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "15"))
                                                         (rule "applyEq" (formula "32") (term "0,1,0,0,1,0,0,1") (ifseqformula "15"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,1"))
                                                         (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,1"))
                                                         (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,1"))
                                                         (rule "mul_literals" (formula "32") (term "0,1,1,0,0,1"))
                                                         (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,1"))
                                                         (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,1"))
                                                         (rule "inEqSimp_contradEq7" (formula "32") (term "0") (ifseqformula "7"))
                                                         (rule "times_zero_1" (formula "32") (term "1,0,0,0"))
                                                         (rule "add_zero_right" (formula "32") (term "0,0,0"))
                                                         (rule "leq_literals" (formula "32") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "32"))
                                                         (rule "false_right" (formula "32"))
                                                         (rule "shift_paren_and" (formula "9") (term "0,1,0,1,0"))
                                                         (rule "shift_paren_and" (formula "9") (term "1,1,0,1,0"))
                                                         (rule "allLeft" (formula "31") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                                                         (rule "inEqSimp_homoInEq1" (formula "31") (term "1"))
                                                         (rule "polySimp_mulComm0" (formula "31") (term "1,0,1"))
                                                         (rule "polySimp_rightDist" (formula "31") (term "1,0,1"))
                                                         (rule "mul_literals" (formula "31") (term "0,1,0,1"))
                                                         (rule "polySimp_addAssoc" (formula "31") (term "0,1"))
                                                         (rule "polySimp_addComm0" (formula "31") (term "0,0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,1"))
                                                         (rule "add_literals" (formula "31") (term "1,1,0,1"))
                                                         (rule "times_zero_1" (formula "31") (term "1,0,1"))
                                                         (rule "add_zero_right" (formula "31") (term "0,1"))
                                                         (rule "leq_literals" (formula "31") (term "1"))
                                                          (builtin "One Step Simplification" (formula "31"))
                                                         (rule "inEqSimp_homoInEq0" (formula "31") (term "1"))
                                                         (rule "polySimp_mulComm0" (formula "31") (term "1,0,1"))
                                                         (rule "polySimp_rightDist" (formula "31") (term "1,0,1"))
                                                         (rule "mul_literals" (formula "31") (term "0,1,0,1"))
                                                         (rule "polySimp_addAssoc" (formula "31") (term "0,1"))
                                                         (rule "add_literals" (formula "31") (term "0,0,1"))
                                                         (rule "add_zero_left" (formula "31") (term "0,1"))
                                                         (rule "applyEq" (formula "31") (term "1,1,0") (ifseqformula "28"))
                                                         (rule "inEqSimp_invertInEq1" (formula "31") (term "1"))
                                                         (rule "polySimp_mulLiterals" (formula "31") (term "0,1"))
                                                         (rule "mul_literals" (formula "31") (term "1,1"))
                                                         (rule "polySimp_elimOne" (formula "31") (term "0,1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "7"))
                                                         (rule "qeq_literals" (formula "31") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "31"))
                                                         (rule "allLeft" (formula "32") (inst "t=Z(0(#))"))
                                                         (rule "leq_literals" (formula "32") (term "1,0"))
                                                          (builtin "One Step Simplification" (formula "32"))
                                                         (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                                                         (rule "applyEq" (formula "32") (term "1,1,0") (ifseqformula "13"))
                                                         (rule "applyEq" (formula "32") (term "1,0") (ifseqformula "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "32") (term "1") (ifseqformula "7"))
                                                         (rule "qeq_literals" (formula "32") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "32"))
                                                         (rule "shift_paren_and" (formula "9") (term "1,0,1,0"))
                                                         (rule "shift_paren_and" (formula "9") (term "0,1,0,1,0"))
                                                         (rule "shift_paren_and" (formula "9") (term "0,1,0"))
                                                         (rule "shift_paren_and" (formula "9") (term "0,0,1,0"))
                                                         (rule "shift_paren_and" (formula "9") (term "0,0,0,1,0"))
                                                         (rule "allLeft" (formula "24") (inst "t=Z(0(#))"))
                                                         (rule "leq_literals" (formula "24") (term "1,0"))
                                                          (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "33")))
                                                         (rule "inEqSimp_commuteGeq" (formula "24"))
                                                         (rule "inEqSimp_subsumption0" (formula "17") (ifseqformula "24"))
                                                         (rule "leq_literals" (formula "17") (term "0"))
                                                          (builtin "One Step Simplification" (formula "17"))
                                                         (rule "true_left" (formula "17"))
                                                         (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "23"))
                                                         (rule "qeq_literals" (formula "7") (term "0"))
                                                          (builtin "One Step Simplification" (formula "7"))
                                                         (rule "closeFalse" (formula "7"))
                                                      )
                                                   )
                                                   (branch "CUT: self.curr.value = null FALSE"
                                                       (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "30")))
                                                      (rule "referencedObjectIsCreatedRight" (formula "31") (ifseqformula "30"))
                                                      (rule "close" (formula "31") (ifseqformula "2"))
                                                   )
                                                )
                                             )
                                          )
                                          (branch "Assume i_0_0 != self.seen.length"
                                             (rule "getOfSeqConcat" (formula "20") (term "1,0,1,0") (userinteraction))
                                             (rule "cut_direct" (formula "20") (term "0,1,0,1,0") (userinteraction))
                                             (branch "CUT: i_0_0 < self.seen.length TRUE"
                                                 (builtin "One Step Simplification" (formula "21"))
                                                (rule "allLeft" (formula "12") (inst "t=i_0_0") (userinteraction))
                                                (rule "impLeft" (formula "12") (userinteraction))
                                                (branch "Case 1"
                                                   (rule "notLeft" (formula "2"))
                                                   (rule "eqSymm" (formula "16"))
                                                   (rule "eqSymm" (formula "13"))
                                                   (rule "eqSymm" (formula "14"))
                                                   (rule "eqSymm" (formula "18"))
                                                   (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "2")))
                                                   (rule "closeTrue" (formula "19"))
                                                )
                                                (branch "Case 2"
                                                   (rule "close" (formula "22") (ifseqformula "12") (userinteraction))
                                                )
                                             )
                                             (branch "CUT: i_0_0 < self.seen.length FALSE"
                                                 (builtin "One Step Simplification" (formula "21"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "eqSymm" (formula "12"))
                                                (rule "eqSymm" (formula "13"))
                                                (rule "eqSymm" (formula "15"))
                                                (rule "eqSymm" (formula "17"))
                                                (rule "polySimp_elimSub" (formula "21") (term "1,1,0,1,0"))
                                                (rule "lenOfSeqConcat" (formula "2") (term "1"))
                                                 (builtin "One Step Simplification" (formula "2"))
                                                (rule "polySimp_addComm0" (formula "2") (term "1"))
                                                (rule "castedGetAny" (formula "15") (term "0"))
                                                (rule "getOfSeqSingleton" (formula "21") (term "1,0,1,0"))
                                                (rule "castDel" (formula "21") (term "1,1,0,1,0"))
                                                (rule "castDel" (formula "21") (term "2,1,0,1,0"))
                                                (rule "lenOfSeqSubEQ" (formula "20") (term "1") (ifseqformula "12"))
                                                (rule "polySimp_elimSub" (formula "20") (term "1,1"))
                                                (rule "mul_literals" (formula "20") (term "1,1,1"))
                                                (rule "add_zero_right" (formula "20") (term "1,1"))
                                                (rule "lenOfSeqSubEQ" (formula "11") (term "1,1,0,0") (ifseqformula "13"))
                                                (rule "replace_known_left" (formula "11") (term "0,1,1,0,0") (ifseqformula "14"))
                                                 (builtin "One Step Simplification" (formula "11"))
                                                (rule "polySimp_elimSub" (formula "11") (term "1,1,0,0"))
                                                (rule "polySimp_addComm0" (formula "11") (term "1,1,0,0"))
                                                (rule "lenOfSeqSubEQ" (formula "10") (term "1,1,0,0") (ifseqformula "12"))
                                                (rule "polySimp_elimSub" (formula "10") (term "1,1,1,0,0"))
                                                (rule "times_zero_2" (formula "10") (term "1,1,1,1,0,0"))
                                                (rule "add_zero_right" (formula "10") (term "1,1,1,0,0"))
                                                (rule "lenOfSeqSubEQ" (formula "7") (term "0") (ifseqformula "13"))
                                                (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "14"))
                                                 (builtin "One Step Simplification" (formula "7"))
                                                (rule "polySimp_elimSub" (formula "7") (term "0"))
                                                (rule "polySimp_addComm0" (formula "7") (term "0"))
                                                (rule "lenOfSeqSubEQ" (formula "17") (term "0") (ifseqformula "12"))
                                                (rule "polySimp_elimSub" (formula "17") (term "1,0"))
                                                (rule "times_zero_2" (formula "17") (term "1,1,0"))
                                                (rule "add_zero_right" (formula "17") (term "1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "14"))
                                                (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "14") (term "0"))
                                                (rule "inEqSimp_ltRight" (formula "20"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                                (rule "polySimp_addComm0" (formula "1") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "3"))
                                                (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                                                (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                                (rule "add_literals" (formula "3") (term "0,0,0"))
                                                (rule "add_zero_left" (formula "3") (term "0,0"))
                                                (rule "polySimp_addComm0" (formula "3") (term "0"))
                                                (rule "lenOfSeqSubEQ" (formula "21") (term "0,1,0,0,1,0,1,0") (ifseqformula "13"))
                                                (rule "polySimp_elimSub" (formula "21") (term "1,0,1,0,0,1,0,1,0"))
                                                (rule "times_zero_2" (formula "21") (term "1,1,0,1,0,0,1,0,1,0"))
                                                (rule "add_zero_right" (formula "21") (term "1,0,1,0,0,1,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                                                (rule "polySimp_mulAssoc" (formula "12") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,0,0,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,1,0,0"))
                                                (rule "add_zero_right" (formula "11") (term "0,0,1,1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_gtToGeq" (formula "8"))
                                                (rule "times_zero_1" (formula "8") (term "1,0,0"))
                                                (rule "add_literals" (formula "8") (term "0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0"))
                                                (rule "add_zero_right" (formula "18") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "8") (term "0"))
                                                (rule "inEqSimp_commuteLeq" (formula "9"))
                                                (rule "inEqSimp_commuteLeq" (formula "10"))
                                                (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "2"))
                                                (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,0"))
                                                (rule "add_zero_right" (formula "1") (term "0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,0"))
                                                (rule "lenOfSeqSubEQ" (formula "3") (term "0,1,0") (ifseqformula "13"))
                                                (rule "polySimp_elimSub" (formula "3") (term "1,0,1,0"))
                                                (rule "times_zero_2" (formula "3") (term "1,1,0,1,0"))
                                                (rule "add_zero_right" (formula "3") (term "1,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,1,0,0,1,0,1,0"))
                                                (rule "add_zero_right" (formula "21") (term "0,0,0,1,0,0,1,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,0,0,1,0,1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,1,0"))
                                                (rule "add_zero_right" (formula "3") (term "0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_sepNegMonomial" (formula "21") (term "0,1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "21") (term "0,0,1,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "21") (term "0,0,1,0,1,0"))
                                                (rule "replace_known_right" (formula "21") (term "0,1,0,1,0") (ifseqformula "18"))
                                                 (builtin "One Step Simplification" (formula "21"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "15"))
                                                (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                                                (rule "polySimp_elimOne" (formula "15") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "12") (term "0,1,1,0,0"))
                                                (rule "mul_literals" (formula "12") (term "0,0,1,1,0,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0"))
                                                (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0"))
                                                (rule "polySimp_elimOne" (formula "18") (term "0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                                                (rule "polySimp_mulComm0" (formula "8") (term "1"))
                                                (rule "polySimp_rightDist" (formula "8") (term "1"))
                                                (rule "mul_literals" (formula "8") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                                                (rule "polySimp_elimOne" (formula "8") (term "1,1"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                                                (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                                (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                                                (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,1,1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "10") (term "0,0,1,1,1,0,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0"))
                                                (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0"))
                                                (rule "polySimp_elimOne" (formula "3") (term "0,0,0"))
                                                (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "17"))
                                                (rule "inEqSimp_contradEq3" (formula "17") (ifseqformula "1"))
                                                (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0"))
                                                (rule "add_literals" (formula "17") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "17") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "17") (term "0,0"))
                                                (rule "qeq_literals" (formula "17") (term "0"))
                                                 (builtin "One Step Simplification" (formula "17"))
                                                (rule "false_right" (formula "17"))
                                                (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "14"))
                                                (rule "inEqSimp_homoInEq0" (formula "9") (term "0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0"))
                                                (rule "add_literals" (formula "9") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "9") (term "1,0,0"))
                                                (rule "add_literals" (formula "9") (term "0,0"))
                                                (rule "qeq_literals" (formula "9") (term "0"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "1"))
                                                (rule "andLeft" (formula "3"))
                                                (rule "inEqSimp_homoInEq1" (formula "3"))
                                                (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                (rule "add_literals" (formula "3") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "3") (term "1,0"))
                                                (rule "add_literals" (formula "3") (term "0"))
                                                (rule "leq_literals" (formula "3"))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                          )
                                       )
                                    )
                                    (branch "Case 2"
                                       (rule "allRight" (formula "17") (inst "sk=i_0"))
                                       (rule "impRight" (formula "17"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "selectOfStore" (formula "19") (term "0,1,0,1,0"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "castDel" (formula "19") (term "0,1,0,1,0"))
                                       (rule "selectOfStore" (formula "2") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "castDel" (formula "2") (term "0,1"))
                                        (builtin "SMTRule")
                                    )
                                 )
                                 (branch "Case 2"
                                    (rule "dismissNonSelectedField" (formula "17") (term "1,0,1"))
                                    (rule "dismissNonSelectedField" (formula "17") (term "1,0,1"))
                                    (rule "dismissNonSelectedField" (formula "17") (term "1,0,1"))
                                    (rule "dismissNonSelectedField" (formula "17") (term "1,0,1"))
                                    (rule "selectOfStore" (formula "17") (term "2,1"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "castDel" (formula "17") (term "2,1"))
                                    (rule "equalityToSeqGetAndSeqLen" (formula "17") (inst "iv=iv") (userinteraction))
                                    (rule "andRight" (formula "17") (userinteraction))
                                    (branch "Case 1"
                                       (rule "eqSymm" (formula "10"))
                                       (rule "eqSymm" (formula "13"))
                                       (rule "eqSymm" (formula "11"))
                                       (rule "eqSymm" (formula "17"))
                                       (rule "castedGetAny" (formula "13") (term "0"))
                                       (rule "lenOfSeqSubEQ" (formula "5") (term "0") (ifseqformula "11"))
                                       (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "12"))
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "polySimp_elimSub" (formula "5") (term "0"))
                                       (rule "polySimp_addComm0" (formula "5") (term "0"))
                                       (rule "lenOfSeqSubEQ" (formula "8") (term "1,1,0,0") (ifseqformula "10"))
                                       (rule "polySimp_elimSub" (formula "8") (term "1,1,1,0,0"))
                                       (rule "times_zero_2" (formula "8") (term "1,1,1,1,0,0"))
                                       (rule "add_zero_right" (formula "8") (term "1,1,1,0,0"))
                                       (rule "lenOfSeqSubEQ" (formula "9") (term "1,1,0,0") (ifseqformula "11"))
                                       (rule "replace_known_left" (formula "9") (term "0,1,1,0,0") (ifseqformula "12"))
                                        (builtin "One Step Simplification" (formula "9"))
                                       (rule "polySimp_elimSub" (formula "9") (term "1,1,0,0"))
                                       (rule "polySimp_addComm0" (formula "9") (term "1,1,0,0"))
                                       (rule "lenOfSeqSub" (formula "17") (term "0"))
                                       (rule "polySimp_elimSub" (formula "17") (term "1,0"))
                                       (rule "times_zero_2" (formula "17") (term "1,1,0"))
                                       (rule "add_zero_right" (formula "17") (term "1,0"))
                                       (rule "lenOfSeqConcat" (formula "17") (term "1"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "polySimp_addComm0" (formula "17") (term "1"))
                                       (rule "inEqSimp_ltToLeq" (formula "12"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "12") (term "0"))
                                       (rule "lenOfSeqSubEQ" (formula "17") (term "1,1") (ifseqformula "10"))
                                       (rule "polySimp_elimSub" (formula "17") (term "1,1,1"))
                                       (rule "mul_literals" (formula "17") (term "1,1,1,1"))
                                       (rule "add_zero_right" (formula "17") (term "1,1,1"))
                                       (rule "inEqSimp_gtToGeq" (formula "5"))
                                       (rule "times_zero_1" (formula "5") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "5") (term "0,0"))
                                       (rule "polySimp_addAssoc" (formula "5") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "8") (term "0,1,1,0,0"))
                                       (rule "add_zero_right" (formula "8") (term "0,0,1,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "9") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0,0,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0"))
                                       (rule "add_zero_right" (formula "17") (term "0,0,0"))
                                       (rule "polySimp_homoEq" (formula "17"))
                                       (rule "polySimp_addComm1" (formula "17") (term "0"))
                                       (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "17") (term "0,1,0,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,1,0,0"))
                                       (rule "add_literals" (formula "17") (term "0,0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "17") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "7"))
                                       (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "6"))
                                       (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "17") (term "0,1,0"))
                                       (rule "add_zero_right" (formula "17") (term "0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                                       (rule "polySimp_sepPosMonomial" (formula "17"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1"))
                                       (rule "polySimp_rightDist" (formula "17") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
                                       (rule "mul_literals" (formula "17") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "17") (term "1,1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                       (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                       (rule "polySimp_rightDist" (formula "5") (term "1"))
                                       (rule "mul_literals" (formula "5") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "8") (term "0,1,1,0,0"))
                                       (rule "mul_literals" (formula "8") (term "0,0,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0"))
                                       (rule "polySimp_homoEq" (formula "16"))
                                       (rule "polySimp_elimOne" (formula "16") (term "0,0,0,1,0"))
                                       (rule "polySimp_addComm1" (formula "16") (term "0"))
                                       (rule "polySimp_sepPosMonomial" (formula "16"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
                                       (rule "mul_literals" (formula "16") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "16") (term "1,1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,1,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "7") (term "0,0,1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "7") (term "0,0,1,1,1,0,0"))
                                       (rule "inEqSimp_invertInEq0" (formula "16") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0"))
                                       (rule "times_zero_2" (formula "16") (term "1,0,0"))
                                       (rule "polySimp_elimOne" (formula "16") (term "0,0,0"))
                                       (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "5"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "polySimp_homoEq" (formula "16"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                                       (rule "mul_literals" (formula "16") (term "0,1,0"))
                                       (rule "polySimp_addComm1" (formula "16") (term "0"))
                                       (rule "polySimp_addAssoc" (formula "16") (term "0,0"))
                                       (rule "add_literals" (formula "16") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "16") (term "0,0"))
                                       (rule "polySimp_sepPosMonomial" (formula "16"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "1"))
                                       (rule "polySimp_elimOne" (formula "16") (term "1"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "orRight" (formula "16"))
                                       (rule "eqSymm" (formula "17"))
                                       (rule "replace_known_right" (formula "7") (term "0,1,1,1,0,0") (ifseqformula "16"))
                                        (builtin "One Step Simplification" (formula "7"))
                                       (rule "add_literals" (formula "7") (term "1,1,0,0"))
                                       (rule "inEqSimp_geqRight" (formula "16"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_strengthen1" (formula "6") (ifseqformula "17"))
                                       (rule "add_zero_right" (formula "6") (term "1"))
                                       (rule "inEqSimp_contradEq7" (formula "17") (ifseqformula "6"))
                                       (rule "times_zero_1" (formula "17") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "17") (term "0,0"))
                                       (rule "leq_literals" (formula "17") (term "0"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "false_right" (formula "17"))
                                       (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "12"))
                                       (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
                                       (rule "add_literals" (formula "7") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "7") (term "1,0,0"))
                                       (rule "add_literals" (formula "7") (term "0,0"))
                                       (rule "qeq_literals" (formula "7") (term "0"))
                                        (builtin "One Step Simplification" (formula "7"))
                                       (rule "true_left" (formula "7"))
                                       (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "6"))
                                       (rule "qeq_literals" (formula "1") (term "0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "Case 2"
                                       (rule "Class_invariant_axiom_for_LinkedList" (formula "14") (inst "i=i") (inst "i_0=i_0") (inst "j=j") (inst "i_1=i_1") (inst "i_2=i_2") (inst "f=f") (inst "i_3=i_3") (inst "n=n_3") (userinteraction))
                                       (rule "andLeft" (formula "14"))
                                       (rule "andLeft" (formula "14"))
                                       (rule "andLeft" (formula "14"))
                                       (rule "andLeft" (formula "14"))
                                       (rule "andLeft" (formula "14"))
                                       (rule "andLeft" (formula "14"))
                                       (rule "andLeft" (formula "14"))
                                       (rule "andLeft" (formula "14"))
                                        (builtin "SMTRule")
                                    )
                                 )
                              )
                              (branch "Case 2"
                                 (rule "dismissNonSelectedField" (formula "17") (term "1,0,2,1"))
                                 (rule "dismissNonSelectedField" (formula "17") (term "1,0,2,1"))
                                 (rule "dismissNonSelectedField" (formula "17") (term "1,0,2,1"))
                                 (rule "dismissNonSelectedField" (formula "17") (term "1,0,2,1"))
                                 (rule "selectOfStore" (formula "17") (term "1,1"))
                                  (builtin "One Step Simplification" (formula "17"))
                                 (rule "castDel" (formula "17") (term "1,1"))
                                 (rule "equalityToSeqGetAndSeqLen" (formula "17") (inst "iv=iv") (userinteraction))
                                 (rule "andRight" (formula "17") (userinteraction))
                                 (branch "Case 1"
                                    (rule "eqSymm" (formula "10"))
                                    (rule "eqSymm" (formula "13"))
                                    (rule "eqSymm" (formula "11"))
                                    (rule "eqSymm" (formula "17"))
                                    (rule "castedGetAny" (formula "13") (term "0"))
                                    (rule "lenOfSeqSubEQ" (formula "8") (term "1,1,0,0") (ifseqformula "10"))
                                    (rule "polySimp_elimSub" (formula "8") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "8") (term "1,1,1,1,0,0"))
                                    (rule "add_zero_right" (formula "8") (term "1,1,1,0,0"))
                                    (rule "lenOfSeqSub" (formula "17") (term "1"))
                                    (rule "eqSymm" (formula "17"))
                                    (rule "polySimp_elimSub" (formula "17") (term "1,0"))
                                    (rule "mul_literals" (formula "17") (term "1,1,0"))
                                    (rule "polySimp_addComm0" (formula "17") (term "1,0"))
                                    (rule "lenOfSeqSubEQ" (formula "9") (term "1,1,0,0") (ifseqformula "11"))
                                    (rule "replace_known_left" (formula "9") (term "0,1,1,0,0") (ifseqformula "12"))
                                     (builtin "One Step Simplification" (formula "9"))
                                    (rule "polySimp_elimSub" (formula "9") (term "1,1,0,0"))
                                    (rule "polySimp_addComm0" (formula "9") (term "1,1,0,0"))
                                    (rule "lenOfSeqSubEQ" (formula "5") (term "0") (ifseqformula "11"))
                                    (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "12"))
                                     (builtin "One Step Simplification" (formula "5"))
                                    (rule "polySimp_elimSub" (formula "5") (term "0"))
                                    (rule "polySimp_addComm0" (formula "5") (term "0"))
                                    (rule "lenOfSeqSub" (formula "17") (term "1"))
                                    (rule "eqSymm" (formula "17"))
                                    (rule "polySimp_elimSub" (formula "17") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "1,1,0"))
                                    (rule "polySimp_rightDist" (formula "17") (term "1,1,0"))
                                    (rule "mul_literals" (formula "17") (term "0,1,1,0"))
                                    (rule "polySimp_addComm0" (formula "17") (term "1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "12"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "12") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "8") (term "0,1,1,0,0"))
                                    (rule "add_zero_right" (formula "8") (term "0,0,1,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,1,0,0"))
                                    (rule "lenOfSeqSubEQ" (formula "17") (term "1,1,1") (ifseqformula "11"))
                                    (rule "polySimp_elimSub" (formula "17") (term "1,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "17") (term "1,1,1,1"))
                                    (rule "lenOfSeqSubEQ" (formula "17") (term "1,0,1") (ifseqformula "11"))
                                    (rule "polySimp_elimSub" (formula "17") (term "1,1,0,1"))
                                    (rule "polySimp_addComm0" (formula "17") (term "1,1,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_mulAssoc" (formula "9") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_gtToGeq" (formula "5"))
                                    (rule "times_zero_1" (formula "5") (term "1,0,0"))
                                    (rule "add_literals" (formula "5") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "5") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0"))
                                    (rule "eqSymm" (formula "17"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1"))
                                    (rule "polySimp_addComm1" (formula "17") (term "0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,1"))
                                    (rule "add_literals" (formula "17") (term "0,0,0,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "7"))
                                    (rule "inEqSimp_commuteLeq" (formula "6"))
                                    (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "17") (term "0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "17") (term "0,0,1,0,0"))
                                    (rule "replace_known_left" (formula "17") (term "0,1,0,0") (ifseqformula "12"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0"))
                                    (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0"))
                                    (rule "polySimp_mulAssoc" (formula "17") (term "0,1,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "0,0,1,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "17") (term "0,1,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0"))
                                    (rule "polySimp_addComm1" (formula "17") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "17") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "17") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "17") (term "0,1,1,0"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,1,0"))
                                    (rule "polySimp_addComm1" (formula "17") (term "0,0,1,1,0"))
                                    (rule "replace_known_left" (formula "17") (term "0,1,1,0") (ifseqformula "12"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "eqSymm" (formula "17"))
                                    (rule "polySimp_addAssoc" (formula "17") (term "1,1"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "closeTrue" (formula "17"))
                                 )
                                 (branch "Case 2"
                                    (rule "Class_invariant_axiom_for_LinkedList" (formula "14") (inst "i=i") (inst "i_0=i_0") (inst "j=j") (inst "i_1=i_1") (inst "i_2=i_2") (inst "f=f") (inst "i_3=i_3") (inst "n=n_3") (userinteraction))
                                    (rule "andLeft" (formula "14"))
                                    (rule "andLeft" (formula "14"))
                                    (rule "andLeft" (formula "14"))
                                    (rule "andLeft" (formula "14"))
                                    (rule "andLeft" (formula "14"))
                                    (rule "andLeft" (formula "14"))
                                    (rule "andLeft" (formula "14"))
                                    (rule "andLeft" (formula "14"))
                                     (builtin "SMTRule")
                                 )
                              )
                           )
                           (branch "Case 2"
                              (rule "dismissNonSelectedField" (formula "17") (term "1,0,0,1,1"))
                              (rule "dismissNonSelectedField" (formula "17") (term "1,0,1,0"))
                              (rule "dismissNonSelectedField" (formula "17") (term "1,0,0,1,1"))
                              (rule "dismissNonSelectedField" (formula "17") (term "1,0,1,0"))
                              (rule "dismissNonSelectedField" (formula "17") (term "1,0,0,1,1"))
                              (rule "dismissNonSelectedField" (formula "17") (term "1,0,1,0"))
                              (rule "dismissNonSelectedField" (formula "17") (term "1,0,0,1,1"))
                              (rule "dismissNonSelectedField" (formula "17") (term "1,0,1,0"))
                              (rule "selectOfStore" (formula "17") (term "0,0"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "castDel" (formula "17") (term "0,0"))
                              (rule "selectOfStore" (formula "17") (term "0,1"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "castDel" (formula "17") (term "0,1"))
                              (rule "Class_invariant_axiom_for_LinkedList" (formula "14") (inst "i=i") (inst "i_0=i_0") (inst "j=j") (inst "i_1=i_1") (inst "i_2=i_2") (inst "f=f") (inst "i_3=i_3") (inst "n=n_3") (userinteraction))
                              (rule "andLeft" (formula "14"))
                              (rule "andLeft" (formula "14"))
                              (rule "andLeft" (formula "14"))
                              (rule "andLeft" (formula "14"))
                              (rule "andLeft" (formula "14"))
                              (rule "andLeft" (formula "14"))
                              (rule "andLeft" (formula "14"))
                              (rule "andLeft" (formula "14"))
                              (rule "orLeft" (formula "19"))
                              (branch " self.list.nodeList = seqEmpty & self.list.head = null & self.list.tail = null"
                                 (rule "andLeft" (formula "19"))
                                 (rule "andLeft" (formula "19"))
                                  (builtin "One Step Simplification" (formula "16"))
                                 (rule "translateJavaSubInt" (formula "22") (term "1,1,0,0"))
                                 (rule "eqSymm" (formula "13"))
                                 (rule "eqSymm" (formula "15"))
                                 (rule "eqSymm" (formula "11"))
                                 (rule "eqSymm" (formula "23") (term "0,1,0,1,0"))
                                 (rule "eqSymm" (formula "10"))
                                 (rule "eqSymm" (formula "22") (term "1,0"))
                                 (rule "eqSymm" (formula "27") (term "1"))
                                 (rule "eqSymm" (formula "23") (term "1,1,0,1,0"))
                                 (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "22") (term "1,1,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "22") (term "1,0,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "22") (term "1,1,0,0"))
                                 (rule "castedGetAny" (formula "24") (term "1,1,1,0"))
                                 (rule "castedGetAny" (formula "13") (term "0"))
                                 (rule "castedGetAny" (formula "23") (term "1,0,1,0,1,0"))
                                 (rule "castedGetAny" (formula "23") (term "0,0,1,0,1,0"))
                                 (rule "castedGetAny" (formula "22") (term "1,1,1,0"))
                                 (rule "castedGetAny" (formula "27") (term "0,1"))
                                 (rule "castedGetAny" (formula "22") (term "0,1,0"))
                                 (rule "eqSymm" (formula "22") (term "1,0"))
                                 (rule "lenOfSeqSubEQ" (formula "8") (term "1,1,0,0") (ifseqformula "10"))
                                 (rule "polySimp_elimSub" (formula "8") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "8") (term "1,1,1,1,0,0"))
                                 (rule "add_zero_right" (formula "8") (term "1,1,1,0,0"))
                                 (rule "lenOfSeqSubEQ" (formula "5") (term "0") (ifseqformula "11"))
                                 (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "12"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "polySimp_elimSub" (formula "5") (term "0"))
                                 (rule "polySimp_addComm0" (formula "5") (term "0"))
                                 (rule "lenOfSeqSubEQ" (formula "9") (term "1,1,0,0") (ifseqformula "11"))
                                 (rule "replace_known_left" (formula "9") (term "0,1,1,0,0") (ifseqformula "12"))
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "polySimp_elimSub" (formula "9") (term "1,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "9") (term "1,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "12"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "12") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "27") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "27") (term "0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "27") (term "0,0,0"))
                                 (rule "add_literals" (formula "27") (term "0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "8") (term "0,1,1,0,0"))
                                 (rule "add_zero_right" (formula "8") (term "0,0,1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_gtToGeq" (formula "5"))
                                 (rule "times_zero_1" (formula "5") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "5") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                                 (rule "polySimp_mulAssoc" (formula "9") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "6"))
                                 (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "7"))
                                 (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                                 (rule "applyEq" (formula "7") (term "0") (ifseqformula "15"))
                                 (rule "applyEq" (formula "23") (term "0,1,0,1,0,1,0") (ifseqformula "19"))
                                 (rule "applyEq" (formula "27") (term "0,1,0,0") (ifseqformula "15"))
                                 (rule "applyEq" (formula "12") (term "0,1,0") (ifseqformula "15"))
                                 (rule "applyEq" (formula "23") (term "0,0,0,1,0,1,0") (ifseqformula "19"))
                                 (rule "applyEq" (formula "17") (term "0,1,0,1,0,1,0") (ifseqformula "19"))
                                 (rule "applyEq" (formula "23") (term "0,0,1,0,0,1,0,0") (ifseqformula "19"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "times_zero_2" (formula "23") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "23") (term "0,0,1,0,0"))
                                 (rule "applyEq" (formula "22") (term "0,1,0,1,0") (ifseqformula "19"))
                                 (rule "applyEq" (formula "22") (term "0,1,1,0") (ifseqformula "19"))
                                 (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "19"))
                                  (builtin "One Step Simplification" (formula "16"))
                                 (rule "leq_literals" (formula "16"))
                                 (rule "true_left" (formula "16"))
                                 (rule "applyEq" (formula "16") (term "0,0,1,0,0,1,0,0") (ifseqformula "18"))
                                  (builtin "One Step Simplification" (formula "16"))
                                 (rule "times_zero_2" (formula "16") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "16") (term "0,0,1,0,0"))
                                 (rule "applyEq" (formula "26") (term "0,0,1") (ifseqformula "18"))
                                 (rule "eqSymm" (formula "26") (term "1"))
                                 (rule "applyEq" (formula "5") (term "1,0") (ifseqformula "15"))
                                 (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "18"))
                                 (rule "applyEq" (formula "23") (term "0,1,1,1,0") (ifseqformula "18"))
                                 (rule "applyEq" (formula "21") (term "0,0,1,0,0,1,0,0") (ifseqformula "18"))
                                  (builtin "One Step Simplification" (formula "21"))
                                 (rule "times_zero_2" (formula "21") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "21") (term "0,0,1,0,0"))
                                 (rule "applyEq" (formula "15") (term "0,1") (ifseqformula "18"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "18"))
                                  (builtin "One Step Simplification" (formula "14"))
                                 (rule "eqSymm" (formula "14"))
                                 (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "18"))
                                  (builtin "One Step Simplification" (formula "7"))
                                 (rule "inEqSimp_commuteGeq" (formula "7"))
                                 (rule "applyEq" (formula "11") (term "2,0") (ifseqformula "15"))
                                 (rule "applyEq" (formula "22") (term "0,0,1,0,0,1,0,0,1,0") (ifseqformula "18"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "times_zero_2" (formula "22") (term "1,0,0,1,0,0,1,0"))
                                 (rule "add_zero_right" (formula "22") (term "0,0,1,0,0,1,0"))
                                 (rule "applyEq" (formula "12") (term "0,0,1,0") (ifseqformula "18"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "times_zero_2" (formula "12") (term "1,0"))
                                 (rule "add_zero_right" (formula "12") (term "0"))
                                 (rule "applyEq" (formula "5") (term "0,1,0") (ifseqformula "18"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "add_zero_right" (formula "5") (term "0"))
                                 (rule "applyEq" (formula "26") (term "0,0,1,0,0") (ifseqformula "18"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "times_zero_2" (formula "26") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "26") (term "0,0"))
                                 (rule "applyEq" (formula "9") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                                 (rule "mul_literals" (formula "9") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "9") (term "0,0,1,0,0"))
                                 (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                                 (rule "mul_literals" (formula "23") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "23") (term "0,0,1,0,0"))
                                 (rule "applyEq" (formula "17") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                                 (rule "times_zero_2" (formula "17") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "17") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0,1,0,0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "8") (term "0,0,0,1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                                 (rule "mul_literals" (formula "16") (term "1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                                 (rule "mul_literals" (formula "21") (term "1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                                 (rule "mul_literals" (formula "22") (term "1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1,0"))
                                 (rule "mul_literals" (formula "22") (term "1,1,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "12"))
                                 (rule "mul_literals" (formula "12") (term "1"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                                 (rule "polySimp_elimOne" (formula "5") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0"))
                                 (rule "mul_literals" (formula "25") (term "1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                                 (rule "mul_literals" (formula "22") (term "1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                                 (rule "mul_literals" (formula "16") (term "1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "11"))
                                 (rule "leq_literals" (formula "6") (term "0"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "10"))
                                 (rule "qeq_literals" (formula "5") (term "0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "closeFalse" (formula "5"))
                              )
                              (branch " !self.list.nodeList = seqEmpty & !self.list.head = null & !self.list.tail = null & self.list.tail.next = null & self.list.head = (Node)(self.list.nodeList[0]) & self.list.tail = (Node)(self.list.nodeList[javaSubInt(self.list.nodeList.length, 1)])"
                                 (rule "andLeft" (formula "19"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "notLeft" (formula "21"))
                                 (rule "notLeft" (formula "19"))
                                 (rule "notLeft" (formula "19"))
                                  (builtin "One Step Simplification" (formula "16"))
                                 (rule "translateJavaSubInt" (formula "22") (term "1,1,0,0"))
                                 (rule "translateJavaSubInt" (formula "21") (term "1,0,1"))
                                 (rule "eqSymm" (formula "30") (term "1"))
                                 (rule "eqSymm" (formula "15"))
                                 (rule "eqSymm" (formula "23") (term "1,1,0,1,0"))
                                 (rule "eqSymm" (formula "20"))
                                 (rule "eqSymm" (formula "22") (term "1,0"))
                                 (rule "eqSymm" (formula "23") (term "0,1,0,1,0"))
                                 (rule "eqSymm" (formula "13"))
                                 (rule "eqSymm" (formula "11"))
                                 (rule "eqSymm" (formula "10"))
                                 (rule "eqSymm" (formula "21"))
                                 (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "22") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimSub" (formula "21") (term "1,0,0"))
                                 (rule "mul_literals" (formula "21") (term "1,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "22") (term "1,0,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "22") (term "1,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "21") (term "1,0,0"))
                                 (rule "castedGetAny" (formula "24") (term "1,1,1,0"))
                                 (rule "castedGetAny" (formula "30") (term "0,1"))
                                 (rule "castedGetAny" (formula "20") (term "0"))
                                 (rule "castedGetAny" (formula "22") (term "1,1,1,0"))
                                 (rule "castedGetAny" (formula "23") (term "1,0,1,0,1,0"))
                                 (rule "castedGetAny" (formula "23") (term "0,0,1,0,1,0"))
                                 (rule "castedGetAny" (formula "13") (term "0"))
                                 (rule "castedGetAny" (formula "22") (term "0,1,0"))
                                 (rule "eqSymm" (formula "22") (term "1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                 (rule "lenOfSeqSubEQ" (formula "9") (term "1,1,0,0") (ifseqformula "11"))
                                 (rule "replace_known_left" (formula "9") (term "0,1,1,0,0") (ifseqformula "12"))
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "polySimp_elimSub" (formula "9") (term "1,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "9") (term "1,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "12"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "12") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_gtToGeq" (formula "5"))
                                 (rule "times_zero_1" (formula "5") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "5") (term "0,0"))
                                 (rule "castedGetAny" (formula "21") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "30") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "30") (term "0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "30") (term "0,0,0"))
                                 (rule "add_literals" (formula "30") (term "0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                                 (rule "polySimp_mulAssoc" (formula "9") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                                 (rule "lenOfSeqSubEQ" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "10"))
                                 (rule "polySimp_elimSub" (formula "8") (term "1,0,1,0,0,1,0,0"))
                                 (rule "times_zero_2" (formula "8") (term "1,1,0,1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "8") (term "1,0,1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "6"))
                                 (rule "inEqSimp_commuteLeq" (formula "7"))
                                 (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                                 (rule "lenOfSeqSubEQ" (formula "5") (term "1,0") (ifseqformula "11"))
                                 (rule "polySimp_elimSub" (formula "5") (term "1,1,0"))
                                 (rule "polySimp_addComm0" (formula "5") (term "1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "8") (term "0,0,0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "5") (term "0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_addComm1" (formula "5") (term "0,0,1,0"))
                                 (rule "replace_known_left" (formula "5") (term "0,1,0") (ifseqformula "12"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0"))
                                 (rule "applyEq" (formula "30") (term "0,1,0,0") (ifseqformula "15"))
                                 (rule "applyEq" (formula "11") (term "2,0") (ifseqformula "15"))
                                 (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "14"))
                                 (rule "applyEq" (formula "5") (term "1,0") (ifseqformula "15"))
                                 (rule "applyEq" (formula "16") (term "0") (ifseqformula "14"))
                                 (rule "applyEq" (formula "12") (term "0,1,0") (ifseqformula "15"))
                                 (rule "applyEq" (formula "7") (term "0") (ifseqformula "15"))
                                 (rule "applyEq" (formula "30") (term "0,1,0,0") (ifseqformula "14"))
                                 (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                                 (rule "applyEq" (formula "18") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                                 (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                                 (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "14"))
                                 (rule "applyEq" (formula "9") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                                 (rule "applyEq" (formula "17") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                                 (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                                 (rule "applyEq" (formula "15") (term "1") (ifseqformula "14"))
                                 (rule "applyEq" (formula "11") (term "2,0") (ifseqformula "14"))
                                 (rule "applyEq" (formula "5") (term "1,0") (ifseqformula "14"))
                                 (rule "applyEq" (formula "12") (term "0,1,0") (ifseqformula "14"))
                                 (rule "applyEq" (formula "7") (term "0") (ifseqformula "14"))
                                 (rule "applyEq" (formula "18") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                                 (rule "applyEq" (formula "9") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                                 (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "30") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "30") (term "0,0"))
                                 (rule "polySimp_elimOne" (formula "30") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1"))
                                 (rule "mul_literals" (formula "5") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "9") (term "0,1,1,0,0"))
                                 (rule "mul_literals" (formula "9") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,1,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "8") (term "0,0,1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "8") (term "0,0,1,1,1,0,0"))
                                 (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "5"))
                                 (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
                                 (rule "add_literals" (formula "7") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "7") (term "1,0,0"))
                                 (rule "add_literals" (formula "7") (term "0,0"))
                                 (rule "qeq_literals" (formula "7") (term "0"))
                                  (builtin "One Step Simplification" (formula "7"))
                                 (rule "true_left" (formula "7"))
                                 (rule "equalityToSeqGetAndSeqLenRight" (formula "24") (inst "iv=iv"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1"))
                                 (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "12"))
                                 (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0,1") (ifseqformula "12"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1"))
                                 (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1"))
                                 (rule "getOfSeqSubEQ" (formula "7") (term "1,0,1,0,1,0") (ifseqformula "9"))
                                 (rule "castDel" (formula "7") (term "2,1,0,1,0,1,0"))
                                 (rule "add_zero_right" (formula "7") (term "1,1,1,0,1,0,1,0"))
                                 (rule "polySimp_elimSub" (formula "7") (term "1,1,0,1,0,1,0,1,0"))
                                 (rule "times_zero_2" (formula "7") (term "1,1,1,0,1,0,1,0,1,0"))
                                 (rule "add_zero_right" (formula "7") (term "1,1,0,1,0,1,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,1,0,1,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,1,0,1,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,1,0,1,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,1,0,1,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,1,0,1,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "7") (term "1,1,0,1,0,1,0,1,0"))
                                 (rule "mul_literals" (formula "7") (term "0,1,1,0,1,0,1,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,1,0,1,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,1,0,1,0,1,0"))
                                 (rule "getOfSeqSubEQ" (formula "8") (term "1,0,1,0,1,0") (ifseqformula "10"))
                                 (rule "castDel" (formula "8") (term "2,1,0,1,0,1,0"))
                                 (rule "polySimp_elimSub" (formula "8") (term "1,1,0,1,0,1,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "8") (term "1,1,1,0,1,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "8") (term "1,1,0,1,0,1,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,1,0,1,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,1,0,1,0,1,0"))
                                 (rule "polySimp_mulAssoc" (formula "8") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "8") (term "0,0,1,0,0,1,0,1,0,1,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "8") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "8") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,1,0,1,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,1,0,1,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,1,0,1,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,1,0,1,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "8") (term "1,1,0,1,0,1,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,1,0,1,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,1,0,1,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "8") (term "0,1,1,0,1,0,1,0,1,0"))
                                 (rule "mul_literals" (formula "8") (term "0,0,1,1,0,1,0,1,0,1,0"))
                                 (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "14"))
                                 (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                                 (rule "mul_literals" (formula "5") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "5") (term "0"))
                                 (rule "add_literals" (formula "5") (term "0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                                 (rule "polySimp_elimOne" (formula "5") (term "0"))
                                 (rule "nnf_imp2or" (formula "22") (term "1,0,1,0"))
                                 (rule "nnf_imp2or" (formula "21") (term "0"))
                                 (rule "nnf_imp2or" (formula "16") (term "0"))
                                 (rule "nnf_imp2or" (formula "17") (term "0"))
                                 (rule "nnf_imp2or" (formula "23") (term "0"))
                                 (rule "nnf_imp2or" (formula "25") (term "0,1"))
                                 (rule "nnf_imp2or" (formula "8") (term "0"))
                                 (rule "nnf_imp2or" (formula "9") (term "0"))
                                 (rule "nnf_imp2or" (formula "22") (term "0"))
                                 (rule "nnf_notAnd" (formula "21") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                                 (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "16") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                                 (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "17") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                                 (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "17") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                                 (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                                 (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "8") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                                 (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "8") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                                 (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "9") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "9") (term "0,1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "9") (term "0,0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,0,0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "9") (term "1,0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "9") (term "0,0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "9") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "0,1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "9") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                                 (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "22") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                                 (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "25") (term "0,0,1"))
                                 (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0,1"))
                                 (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0,1"))
                                 (rule "add_zero_right" (formula "25") (term "0,0,0,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,1"))
                                 (rule "mul_literals" (formula "25") (term "1,0,0,0,1"))
                                 (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,1"))
                                 (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,1"))
                                 (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,1"))
                                 (rule "add_zero_left" (formula "25") (term "0,0,1,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,1"))
                                 (rule "nnf_imp2or" (formula "22") (term "0,1,0"))
                                 (rule "nnf_notAnd" (formula "22") (term "0,0,1,0"))
                                 (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,1,0"))
                                 (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,1,0"))
                                 (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,1,0"))
                                 (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0,1,0"))
                                 (rule "add_zero_right" (formula "22") (term "0,0,0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,1,0"))
                                 (rule "mul_literals" (formula "22") (term "1,0,0,0,1,0"))
                                 (rule "commute_or_2" (formula "21") (term "0"))
                                 (rule "commute_or_2" (formula "23") (term "0"))
                                 (rule "lenNonNegative" (formula "13") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "13"))
                                 (rule "applyEq" (formula "13") (term "0") (ifseqformula "14"))
                                 (rule "lenNonNegative" (formula "15") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "15"))
                                 (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                                 (rule "equalityToSeqGetAndSeqLenLeft" (formula "10") (inst "iv=iv"))
                                 (rule "andLeft" (formula "10"))
                                 (rule "lenOfSeqSub" (formula "11") (term "1,1,0,0"))
                                 (rule "polySimp_elimSub" (formula "11") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,1,1,1,0,0"))
                                 (rule "add_zero_right" (formula "11") (term "1,1,1,0,0"))
                                 (rule "lenOfSeqSub" (formula "10") (term "0"))
                                 (rule "polySimp_elimSub" (formula "10") (term "1,0"))
                                 (rule "times_zero_2" (formula "10") (term "1,1,0"))
                                 (rule "add_zero_right" (formula "10") (term "1,0"))
                                 (rule "lenOfSeqSubEQ" (formula "10") (term "1") (ifseqformula "12"))
                                 (rule "eqSymm" (formula "10"))
                                 (rule "polySimp_elimSub" (formula "10") (term "1,0"))
                                 (rule "mul_literals" (formula "10") (term "1,1,0"))
                                 (rule "add_zero_right" (formula "10") (term "1,0"))
                                  (builtin "One Step Simplification" (formula "10"))
                                 (rule "true_left" (formula "10"))
                                 (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,1,0,0"))
                                 (rule "add_zero_right" (formula "10") (term "0,0,1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                                 (rule "applyEq" (formula "10") (term "0,0,1,0") (ifseqformula "11"))
                                  (builtin "One Step Simplification" (formula "10"))
                                 (rule "true_left" (formula "10"))
                                 (rule "commute_and" (formula "17") (term "0,0,1,0"))
                                 (rule "commute_and" (formula "17") (term "1,0,1,0"))
                                 (rule "seqGetAlphaCast" (formula "30") (term "0,1"))
                                 (rule "castedGetAny" (formula "1") (term "0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "commute_and" (formula "18") (term "0,0,1,0"))
                                 (rule "commute_and" (formula "18") (term "1,0,1,0"))
                                 (rule "seqGetAlphaCast" (formula "20") (term "0"))
                                 (rule "castedGetAny" (formula "20") (term "0"))
                                  (builtin "One Step Simplification" (formula "20"))
                                 (rule "true_left" (formula "20"))
                                 (rule "commute_and" (formula "8") (term "1,0,1,0"))
                                 (rule "commute_and" (formula "8") (term "0,0,1,0"))
                                 (rule "commute_and" (formula "9") (term "1,0,1,0"))
                                 (rule "commute_and" (formula "9") (term "0,0,1,0"))
                                 (rule "seqGetAlphaCast" (formula "12") (term "0"))
                                 (rule "castedGetAny" (formula "12") (term "0"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "true_left" (formula "12"))
                                 (rule "ifthenelse_split_for" (formula "30"))
                                 (branch "self.list.size >= 2 + self.index TRUE"
                                    (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "7") (term "1,0,0"))
                                    (rule "mul_literals" (formula "7") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
                                    (rule "add_literals" (formula "7") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
                                    (rule "add_literals" (formula "7") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "7") (term "1,0,0"))
                                    (rule "add_literals" (formula "7") (term "0,0"))
                                    (rule "qeq_literals" (formula "7") (term "0"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "16"))
                                    (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0"))
                                    (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "1"))
                                    (rule "leq_literals" (formula "7") (term "0"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (rule "commute_or" (formula "22") (term "0,0"))
                                    (rule "commute_or" (formula "24") (term "0,0"))
                                    (rule "seqGetAlphaCast" (formula "21") (term "0"))
                                    (rule "castedGetAny" (formula "21") (term "0"))
                                     (builtin "One Step Simplification" (formula "21"))
                                    (rule "true_left" (formula "21"))
                                    (rule "equalityToSeqGetAndSeqLenLeft" (formula "11") (inst "iv=iv"))
                                    (rule "andLeft" (formula "11"))
                                    (rule "lenOfSeqSub" (formula "12") (term "1,1,0,0"))
                                    (rule "polySimp_elimSub" (formula "12") (term "1,1,1,0,0"))
                                    (rule "polySimp_addComm0" (formula "12") (term "1,1,1,0,0"))
                                    (rule "lenOfSeqSub" (formula "11") (term "0"))
                                    (rule "polySimp_elimSub" (formula "11") (term "1,0"))
                                    (rule "polySimp_addComm0" (formula "11") (term "1,0"))
                                    (rule "lenOfSeqSubEQ" (formula "11") (term "1") (ifseqformula "13"))
                                    (rule "eqSymm" (formula "11"))
                                    (rule "polySimp_elimSub" (formula "11") (term "1,0"))
                                    (rule "polySimp_addComm0" (formula "11") (term "1,0"))
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "true_left" (formula "11"))
                                    (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "11") (term "0,0,1,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                                    (rule "applyEq" (formula "11") (term "0,0,1,0") (ifseqformula "12"))
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "true_left" (formula "11"))
                                    (rule "shift_paren_or" (formula "23") (term "0,1,0"))
                                    (rule "applyEq_and_gen2" (formula "18") (term "1,0,1,0"))
                                    (rule "cut_direct" (formula "26") (term "0"))
                                    (branch "CUT: self.list.size = 0 TRUE"
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "allRight" (formula "27") (inst "sk=iv_0"))
                                       (rule "orRight" (formula "27"))
                                       (rule "orRight" (formula "27"))
                                       (rule "inEqSimp_leqRight" (formula "27"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_geqRight" (formula "28"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                                       (rule "mul_literals" (formula "1") (term "1,0"))
                                       (rule "add_zero_right" (formula "1") (term "0"))
                                       (rule "applyEq" (formula "14") (term "2,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "5") (term "0") (ifseqformula "3"))
                                       (rule "inEqSimp_homoInEq1" (formula "5"))
                                       (rule "times_zero_2" (formula "5") (term "1,0"))
                                       (rule "add_zero_right" (formula "5") (term "0"))
                                       (rule "applyEq" (formula "20") (term "1,1,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "21") (term "1,1,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "12") (term "1,1,1,0,0") (ifseqformula "3"))
                                       (rule "add_zero_right" (formula "12") (term "1,1,0,0"))
                                       (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "3"))
                                       (rule "add_zero_right" (formula "24") (term "1,0"))
                                       (rule "applyEq" (formula "16") (term "0") (ifseqformula "3"))
                                       (rule "qeq_literals" (formula "16"))
                                       (rule "true_left" (formula "16"))
                                       (rule "applyEq" (formula "18") (term "0") (ifseqformula "3"))
                                       (rule "leq_literals" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "applyEq" (formula "24") (term "1,1,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "24") (term "1,1,0,0,0,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "23") (term "1,1,1,0") (ifseqformula "3"))
                                       (rule "add_zero_right" (formula "23") (term "1,1,0"))
                                       (rule "applyEq" (formula "16") (term "1") (ifseqformula "3"))
                                       (rule "applyEq" (formula "12") (term "1,1,1,0,1,1,1,0,1,0") (ifseqformula "3"))
                                       (rule "add_zero_right" (formula "12") (term "1,1,0,1,1,1,0,1,0"))
                                       (rule "applyEq" (formula "17") (term "1") (ifseqformula "3"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "mul_literals" (formula "1") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                       (rule "mul_literals" (formula "5") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
                                       (rule "qeq_literals" (formula "1") (term "0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "CUT: self.list.size = 0 FALSE"
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "false_right" (formula "27"))
                                       (rule "inEqSimp_strengthen1" (formula "13") (ifseqformula "26"))
                                       (rule "add_zero_right" (formula "13") (term "1"))
                                       (rule "inEqSimp_contradEq7" (formula "26") (ifseqformula "13"))
                                       (rule "times_zero_1" (formula "26") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "26") (term "0,0"))
                                       (rule "leq_literals" (formula "26") (term "0"))
                                        (builtin "One Step Simplification" (formula "26"))
                                       (rule "false_right" (formula "26"))
                                       (rule "applyEq_and_gen2" (formula "8") (term "1,0,1,0"))
                                       (rule "ifEqualsNull" (formula "8") (term "0,0,1,0,1,0"))
                                       (rule "nnf_notOr" (formula "8") (term "0,1,0,1,0"))
                                       (rule "nnf_notAnd" (formula "8") (term "1,0,1,0,1,0"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "nnf_notAnd" (formula "8") (term "0,0,1,0,1,0"))
                                       (rule "nnf_notAnd" (formula "8") (term "0,0,0,1,0,1,0"))
                                       (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0,0,1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,0,1,0,1,0"))
                                       (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,0,1,0,1,0"))
                                       (rule "add_literals" (formula "8") (term "0,0,0,1,0,0,0,1,0,1,0"))
                                       (rule "add_zero_left" (formula "8") (term "0,0,1,0,0,0,1,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0,0,1,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,1,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0,1,0,1,0"))
                                       (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,0,1,0,1,0"))
                                       (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0,0,1,0,1,0"))
                                       (rule "add_zero_right" (formula "8") (term "0,0,0,0,0,0,1,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,0,1,0,1,0"))
                                       (rule "mul_literals" (formula "8") (term "1,0,0,0,0,1,0,1,0"))
                                       (rule "applyEq_and_gen2" (formula "9") (term "1,0,1,0"))
                                       (rule "ifEqualsNull" (formula "9") (term "0,0,1,0,1,0"))
                                       (rule "nnf_notOr" (formula "9") (term "0,1,0,1,0"))
                                       (rule "nnf_notAnd" (formula "9") (term "0,0,1,0,1,0"))
                                       (rule "nnf_notAnd" (formula "9") (term "1,0,1,0,1,0"))
                                        (builtin "One Step Simplification" (formula "9"))
                                       (rule "nnf_notAnd" (formula "9") (term "0,0,0,1,0,1,0"))
                                       (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,0,1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0,1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "9") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
                                       (rule "mul_literals" (formula "9") (term "0,0,1,0,0,1,0,0,0,1,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,0,0,1,0,0,0,1,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "9") (term "1,0,1,0,0,1,0,0,0,1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0,1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,1,0,0,0,1,0,1,0"))
                                       (rule "add_literals" (formula "9") (term "0,0,0,0,1,0,0,0,1,0,1,0"))
                                       (rule "add_zero_left" (formula "9") (term "0,0,0,1,0,0,0,1,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,0,1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,0,1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,0,1,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,0,1,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,0,1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "9") (term "0,1,1,0,0,0,1,0,1,0"))
                                       (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,0,1,0,1,0"))
                                       (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0,0,1,0,1,0"))
                                       (rule "add_zero_right" (formula "9") (term "0,0,0,0,0,0,1,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,1,0,1,0"))
                                       (rule "mul_literals" (formula "9") (term "1,0,0,0,0,1,0,1,0"))
                                       (rule "shift_paren_and" (formula "17") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "castedGetAny" (formula "17") (term "0,0,1,0,0,1,0"))
                                       (rule "castedGetAny" (formula "17") (term "1,0,0,1,0,1,0"))
                                       (rule "castedGetAny" (formula "17") (term "0,0,0,0,0,1,0"))
                                       (rule "castedGetAny" (formula "17") (term "1,0,1,1,0,0,1,0"))
                                       (rule "commute_or_2" (formula "23") (term "0,0,1,0"))
                                       (rule "cnf_rightDist" (formula "17") (term "0"))
                                       (rule "distr_forallAnd" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "shift_paren_or" (formula "18") (term "0"))
                                       (rule "commute_or" (formula "8") (term "1,0,1,0,1,0"))
                                       (rule "cnf_rightDist" (formula "17") (term "0"))
                                       (rule "distr_forallAnd" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "shift_paren_or" (formula "18") (term "0"))
                                       (rule "cnf_rightDist" (formula "17") (term "0"))
                                       (rule "distr_forallAnd" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "commute_or_2" (formula "17") (term "0"))
                                       (rule "shift_paren_or" (formula "18") (term "0"))
                                       (rule "commute_or" (formula "17") (term "0,0"))
                                       (rule "shift_paren_and" (formula "21") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "21"))
                                       (rule "castedGetAny" (formula "21") (term "0,0,1,0,0,1,0"))
                                       (rule "castedGetAny" (formula "21") (term "0,0,0,0,0,1,0"))
                                       (rule "castedGetAny" (formula "21") (term "1,0,1,1,0,0,1,0"))
                                       (rule "commute_or_2" (formula "8") (term "0,0,1,0,1,0"))
                                       (rule "cnf_rightDist" (formula "21") (term "0"))
                                       (rule "distr_forallAnd" (formula "21"))
                                       (rule "andLeft" (formula "21"))
                                       (rule "shift_paren_or" (formula "22") (term "0"))
                                       (rule "commute_or" (formula "9") (term "1,0,1,0,1,0"))
                                       (rule "cnf_rightDist" (formula "21") (term "0"))
                                       (rule "distr_forallAnd" (formula "21"))
                                       (rule "andLeft" (formula "21"))
                                       (rule "shift_paren_or" (formula "22") (term "0"))
                                       (rule "cnf_rightDist" (formula "21") (term "0"))
                                       (rule "distr_forallAnd" (formula "21"))
                                       (rule "andLeft" (formula "21"))
                                       (rule "commute_or_2" (formula "21") (term "0"))
                                       (rule "shift_paren_or" (formula "22") (term "0"))
                                       (rule "commute_or" (formula "21") (term "0,0"))
                                       (rule "commute_or" (formula "29") (term "0,0,0,1,0"))
                                       (rule "commute_or_2" (formula "9") (term "0,0,1,0,1,0"))
                                       (rule "ifthenelse_to_or_right" (formula "8") (term "1,1,0,1,0"))
                                       (rule "nnf_notAnd" (formula "8") (term "0,0,1,1,0,1,0"))
                                       (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0,1,1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,1,1,0,1,0"))
                                       (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,1,1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,1,1,0,1,0"))
                                       (rule "add_literals" (formula "8") (term "0,0,0,1,0,0,1,1,0,1,0"))
                                       (rule "add_zero_left" (formula "8") (term "0,0,1,0,0,1,1,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0,1,1,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,1,1,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,1,1,0,1,0"))
                                       (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,1,1,0,1,0"))
                                       (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0,1,1,0,1,0"))
                                       (rule "add_zero_right" (formula "8") (term "0,0,0,0,0,1,1,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,1,1,0,1,0"))
                                       (rule "mul_literals" (formula "8") (term "1,0,0,0,1,1,0,1,0"))
                                       (rule "commute_or" (formula "8") (term "1,1,1,0,1,0"))
                                       (rule "commute_or" (formula "8") (term "0,0,0,1,0,1,0"))
                                       (rule "ifthenelse_to_or_right" (formula "9") (term "1,1,0,1,0"))
                                       (rule "nnf_notAnd" (formula "9") (term "0,0,1,1,0,1,0"))
                                       (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,1,1,0,1,0"))
                                       (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0,1,1,0,1,0"))
                                       (rule "add_zero_right" (formula "9") (term "0,0,0,0,0,1,1,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,1,1,0,1,0"))
                                       (rule "mul_literals" (formula "9") (term "1,0,0,0,1,1,0,1,0"))
                                       (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,1,1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,1,1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "9") (term "0,1,0,0,1,0,0,1,1,0,1,0"))
                                       (rule "mul_literals" (formula "9") (term "0,0,1,0,0,1,0,0,1,1,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,0,0,1,0,0,1,1,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "9") (term "1,0,1,0,0,1,0,0,1,1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,1,1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,1,0,0,1,1,0,1,0"))
                                       (rule "add_literals" (formula "9") (term "0,0,0,0,1,0,0,1,1,0,1,0"))
                                       (rule "add_zero_left" (formula "9") (term "0,0,0,1,0,0,1,1,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,1,1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1,1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1,1,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1,1,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1,1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "9") (term "0,1,1,0,0,1,1,0,1,0"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "32") (term "1,0") (ifseqformula "3"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "34"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "32") (term "0") (ifseqformula "4"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "33"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "34") (term "0") (ifseqformula "5"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "35"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "28") (term "0") (ifseqformula "6"))
                                       (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "29"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "true_left" (formula "28"))
                                       (rule "commute_or_2" (formula "11") (term "0,1,1,0,1,0"))
                                       (rule "cnf_rightDist" (formula "11") (term "1,0,1,0,1,0"))
                                       (rule "commute_or" (formula "12") (term "1,1,1,0,1,0"))
                                       (rule "commute_or" (formula "12") (term "0,0,0,1,0,1,0"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "15") (term "1") (ifseqformula "6"))
                                       (rule "cnf_rightDist" (formula "12") (term "1,0,1,0,1,0"))
                                       (rule "commute_or_2" (formula "12") (term "0,1,1,0,1,0"))
                                       (rule "cnf_rightDist" (formula "11") (term "1,1,1,0,1,0"))
                                       (rule "ifthenelse_split" (formula "11") (term "1,1,0,0"))
                                       (branch "self.index >= 1 TRUE"
                                          (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "11"))
                                          (rule "leq_literals" (formula "10") (term "0"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "true_left" (formula "10"))
                                          (rule "commute_or" (formula "11") (term "0,0,1,1,0,1,0"))
                                          (rule "commute_or" (formula "11") (term "0,1,0,1,0,1,0"))
                                          (rule "commute_or" (formula "12") (term "0,1,0,1,0,1,0"))
                                          (rule "commute_or" (formula "12") (term "0,0,1,1,0,1,0"))
                                          (rule "commute_or" (formula "11") (term "1,1,1,1,0,1,0"))
                                          (rule "cnf_rightDist" (formula "12") (term "1,1,1,0,1,0"))
                                          (rule "commute_or" (formula "12") (term "1,1,1,1,0,1,0"))
                                          (rule "all_pull_out3" (formula "33") (term "0"))
                                          (rule "shift_paren_or" (formula "33") (term "0,0"))
                                          (rule "shift_paren_or" (formula "33") (term "0,0,0"))
                                          (rule "shift_paren_or" (formula "33") (term "0,0,0,0"))
                                          (rule "commute_or_2" (formula "33") (term "0,0,0,0,0"))
                                          (rule "commute_or" (formula "33") (term "0,0,0,0,0,0"))
                                          (rule "shift_paren_and" (formula "11") (term "0,1,0,1,0"))
                                          (rule "shift_paren_and" (formula "12") (term "0,1,0,1,0"))
                                          (rule "shift_paren_and" (formula "11") (term "1,1,0,1,0"))
                                          (rule "shift_paren_and" (formula "11") (term "1,0,1,0"))
                                          (rule "shift_paren_and" (formula "12") (term "1,1,0,1,0"))
                                          (rule "shift_paren_and" (formula "12") (term "1,0,1,0"))
                                          (rule "shift_paren_and" (formula "11") (term "0,1,0,1,0"))
                                          (rule "shift_paren_and" (formula "11") (term "0,1,0"))
                                          (rule "shift_paren_and" (formula "11") (term "0,0,1,0"))
                                          (rule "shift_paren_and" (formula "12") (term "0,1,0,1,0"))
                                          (rule "shift_paren_and" (formula "12") (term "0,1,0"))
                                          (rule "shift_paren_and" (formula "12") (term "0,0,1,0"))
                                          (rule "allLeft" (formula "32") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                                          (rule "inEqSimp_homoInEq1" (formula "32") (term "1"))
                                          (rule "polySimp_addComm1" (formula "32") (term "0,1"))
                                          (rule "applyEq" (formula "32") (term "1,0,0,0") (ifseqformula "16"))
                                          (rule "eqSymm" (formula "32") (term "0,0"))
                                          (rule "replace_known_right" (formula "32") (term "0,0") (ifseqformula "40"))
                                           (builtin "One Step Simplification" (formula "32"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1"))
                                          (rule "polySimp_mulComm0" (formula "32") (term "1,1"))
                                          (rule "polySimp_rightDist" (formula "32") (term "1,1"))
                                          (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1"))
                                          (rule "mul_literals" (formula "32") (term "0,1,1"))
                                          (rule "polySimp_elimOne" (formula "32") (term "1,1,1"))
                                          (rule "inEqSimp_contradInEq1" (formula "32") (term "0") (ifseqformula "10"))
                                          (rule "qeq_literals" (formula "32") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "32"))
                                          (rule "inEqSimp_contradInEq1" (formula "32") (ifseqformula "5"))
                                          (rule "andLeft" (formula "32"))
                                          (rule "inEqSimp_homoInEq1" (formula "32"))
                                          (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "32") (term "1,0"))
                                          (rule "mul_literals" (formula "32") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "32") (term "0"))
                                          (rule "polySimp_addComm1" (formula "32") (term "0,0"))
                                          (rule "add_literals" (formula "32") (term "0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "32") (term "0"))
                                          (rule "add_literals" (formula "32") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "32") (term "1,0"))
                                          (rule "add_zero_right" (formula "32") (term "0"))
                                          (rule "leq_literals" (formula "32"))
                                          (rule "closeFalse" (formula "32"))
                                       )
                                       (branch "self.index >= 1 FALSE"
                                          (rule "inEqSimp_geqRight" (formula "35"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_subsumption0" (formula "5") (ifseqformula "1"))
                                          (rule "leq_literals" (formula "5") (term "0"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "inEqSimp_antiSymm" (formula "10") (ifseqformula "1"))
                                          (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "10"))
                                          (rule "applyEq" (formula "12") (term "1,1,0,1,1,0,1,0,1,0") (ifseqformula "10"))
                                          (rule "add_zero_right" (formula "12") (term "1,0,1,1,0,1,0,1,0"))
                                          (rule "applyEq" (formula "1") (term "0") (ifseqformula "10"))
                                          (rule "leq_literals" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "applyEq" (formula "13") (term "2,0") (ifseqformula "9"))
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "eqSymm" (formula "13"))
                                          (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "9"))
                                          (rule "applyEq" (formula "11") (term "1,1,0,0,1,0,1,0") (ifseqformula "9"))
                                          (rule "applyEq" (formula "4") (term "1,1") (ifseqformula "9"))
                                          (rule "add_zero_right" (formula "4") (term "1"))
                                          (rule "applyEq" (formula "11") (term "1,1,0,1,1,0,1,0") (ifseqformula "9"))
                                          (rule "applyEq" (formula "11") (term "1,1,0,1,1,1,1,0,1,0") (ifseqformula "9"))
                                          (rule "add_zero_right" (formula "11") (term "1,0,1,1,1,1,0,1,0"))
                                          (rule "applyEq" (formula "39") (term "1,1,0") (ifseqformula "9"))
                                          (rule "add_zero_right" (formula "39") (term "1,0"))
                                          (rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
                                          (rule "qeq_literals" (formula "10"))
                                          (rule "true_left" (formula "10"))
                                          (rule "applyEq" (formula "15") (term "0") (ifseqformula "29"))
                                          (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "15"))
                                          (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "2"))
                                           (builtin "One Step Simplification" (formula "14"))
                                          (rule "true_left" (formula "14"))
                                          (rule "applyEq" (formula "28") (term "1") (ifseqformula "14"))
                                          (rule "applyEq" (formula "33") (term "0") (ifseqformula "14"))
                                          (rule "applyEq" (formula "11") (term "0,0,1,1,0,0") (ifseqformula "9"))
                                          (rule "times_zero_2" (formula "11") (term "0,1,1,0,0"))
                                          (rule "add_zero_left" (formula "11") (term "1,1,0,0"))
                                          (rule "applyEq" (formula "11") (term "0,1,0,1,0,1,1,0,1,0,1,0") (ifseqformula "9"))
                                          (rule "times_zero_2" (formula "11") (term "1,0,1,0,1,1,0,1,0,1,0"))
                                          (rule "add_zero_right" (formula "11") (term "0,1,0,1,1,0,1,0,1,0"))
                                          (rule "applyEq" (formula "11") (term "0,0,1,1,0,0,1,0,1,0") (ifseqformula "9"))
                                          (rule "times_zero_2" (formula "11") (term "0,1,1,0,0,1,0,1,0"))
                                          (rule "add_zero_left" (formula "11") (term "1,1,0,0,1,0,1,0"))
                                          (rule "applyEq" (formula "11") (term "0,1,0,1,1,1,1,1,1,0,1,0") (ifseqformula "9"))
                                          (rule "mul_literals" (formula "11") (term "1,0,1,1,1,1,1,1,0,1,0"))
                                          (rule "add_zero_right" (formula "11") (term "0,1,1,1,1,1,1,0,1,0"))
                                          (rule "applyEq" (formula "11") (term "0,1,0,0,0,0,0,0,1,0,1,0") (ifseqformula "9"))
                                          (rule "add_zero_left" (formula "11") (term "1,0,0,0,0,0,0,1,0,1,0"))
                                          (rule "applyEq" (formula "11") (term "0,0,1,1,0,1,1,0,1,0") (ifseqformula "9"))
                                          (rule "times_zero_2" (formula "11") (term "0,1,1,0,1,1,0,1,0"))
                                          (rule "add_zero_left" (formula "11") (term "1,1,0,1,1,0,1,0"))
                                          (rule "applyEq" (formula "11") (term "0,1,1,1,0,0,1,1,0,1,0") (ifseqformula "9"))
                                          (rule "add_zero_left" (formula "11") (term "1,1,1,0,0,1,1,0,1,0"))
                                          (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "4"))
                                          (rule "leq_literals" (formula "15") (term "0"))
                                           (builtin "One Step Simplification" (formula "15"))
                                          (rule "true_left" (formula "15"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "10") (term "0,0"))
                                          (rule "add_zero_right" (formula "10") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "10") (term "1,0,0"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "true_left" (formula "10"))
                                          (rule "commute_or" (formula "10") (term "0,1,0,1,0,1,0"))
                                          (rule "all_pull_out3" (formula "29") (term "0"))
                                          (rule "shift_paren_or" (formula "29") (term "0,0"))
                                          (rule "shift_paren_or" (formula "29") (term "0,0,0"))
                                          (rule "shift_paren_or" (formula "29") (term "0,0,0,0"))
                                          (rule "commute_or_2" (formula "29") (term "0,0,0,0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0,0,0,0,0"))
                                          (rule "commute_or" (formula "10") (term "0,0,1,1,0,1,0"))
                                          (rule "allLeft" (formula "30") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                                          (rule "inEqSimp_homoInEq0" (formula "30") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "30") (term "1,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "30") (term "1,0,1,0"))
                                          (rule "mul_literals" (formula "30") (term "0,1,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "30") (term "0,1,0"))
                                          (rule "add_literals" (formula "30") (term "0,0,1,0"))
                                          (rule "add_zero_left" (formula "30") (term "0,1,0"))
                                          (rule "inEqSimp_homoInEq1" (formula "30") (term "1"))
                                          (rule "polySimp_mulComm0" (formula "30") (term "1,0,1"))
                                          (rule "polySimp_rightDist" (formula "30") (term "1,0,1"))
                                          (rule "mul_literals" (formula "30") (term "0,1,0,1"))
                                          (rule "polySimp_addAssoc" (formula "30") (term "0,1"))
                                          (rule "polySimp_addComm0" (formula "30") (term "0,0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,1"))
                                          (rule "add_literals" (formula "30") (term "1,1,0,1"))
                                          (rule "times_zero_1" (formula "30") (term "1,0,1"))
                                          (rule "add_zero_right" (formula "30") (term "0,1"))
                                          (rule "leq_literals" (formula "30") (term "1"))
                                           (builtin "One Step Simplification" (formula "30"))
                                          (rule "applyEq" (formula "30") (term "1,1,0") (ifseqformula "27"))
                                          (rule "inEqSimp_invertInEq1" (formula "30") (term "1"))
                                          (rule "mul_literals" (formula "30") (term "1,1"))
                                          (rule "polySimp_mulLiterals" (formula "30") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "30") (term "0,1"))
                                          (rule "inEqSimp_contradInEq1" (formula "30") (term "1") (ifseqformula "4"))
                                          (rule "qeq_literals" (formula "30") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "30"))
                                          (rule "allLeft" (formula "31") (inst "t=Z(0(#))"))
                                          (rule "leq_literals" (formula "31") (term "1,0"))
                                           (builtin "One Step Simplification" (formula "31"))
                                          (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                          (rule "applyEq" (formula "31") (term "1,1,0") (ifseqformula "26"))
                                          (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "4"))
                                          (rule "qeq_literals" (formula "31") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "31"))
                                          (rule "cnf_rightDist" (formula "10") (term "1,1,1,0,1,0"))
                                          (rule "commute_or" (formula "10") (term "1,1,1,1,0,1,0"))
                                          (rule "shift_paren_and" (formula "10") (term "0,1,0,1,0"))
                                          (rule "shift_paren_and" (formula "10") (term "1,1,0,1,0"))
                                          (rule "shift_paren_and" (formula "10") (term "1,0,1,0"))
                                          (rule "shift_paren_and" (formula "10") (term "0,1,0,1,0"))
                                          (rule "shift_paren_and" (formula "10") (term "0,1,0"))
                                          (rule "shift_paren_and" (formula "10") (term "0,0,1,0"))
                                          (rule "shift_paren_and" (formula "10") (term "0,0,0,1,0"))
                                          (rule "allLeft" (formula "19") (inst "t=Z(1(#))"))
                                          (rule "leq_literals" (formula "19") (term "1,0"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "4"))
                                          (rule "qeq_literals" (formula "19") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "notLeft" (formula "19"))
                                          (rule "allLeft" (formula "17") (inst "t=Z(1(#))"))
                                          (rule "leq_literals" (formula "17") (term "1,0"))
                                           (builtin "One Step Simplification" (formula "17"))
                                          (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "17") (term "1") (ifseqformula "4"))
                                          (rule "qeq_literals" (formula "17") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "17"))
                                          (rule "notLeft" (formula "17"))
                                          (rule "allLeft" (formula "19") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                                          (rule "inEqSimp_homoInEq0" (formula "19") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "19") (term "1,0,1,0"))
                                          (rule "mul_literals" (formula "19") (term "0,1,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "19") (term "0,1,0"))
                                          (rule "add_literals" (formula "19") (term "0,0,1,0"))
                                          (rule "add_zero_left" (formula "19") (term "0,1,0"))
                                          (rule "inEqSimp_homoInEq1" (formula "19") (term "1"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1,0,1"))
                                          (rule "polySimp_rightDist" (formula "19") (term "1,0,1"))
                                          (rule "mul_literals" (formula "19") (term "0,1,0,1"))
                                          (rule "polySimp_addAssoc" (formula "19") (term "0,1"))
                                          (rule "polySimp_addComm0" (formula "19") (term "0,0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,1"))
                                          (rule "add_literals" (formula "19") (term "1,1,0,1"))
                                          (rule "times_zero_1" (formula "19") (term "1,0,1"))
                                          (rule "add_zero_right" (formula "19") (term "0,1"))
                                          (rule "leq_literals" (formula "19") (term "1"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "applyEq" (formula "19") (term "1,0,0,0") (ifseqformula "28"))
                                          (rule "inEqSimp_invertInEq1" (formula "19") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "0,1"))
                                          (rule "times_zero_2" (formula "19") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "19") (term "0,1"))
                                          (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "4"))
                                          (rule "qeq_literals" (formula "19") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "notLeft" (formula "19"))
                                          (rule "allLeft" (formula "19") (inst "t=Z(0(#))"))
                                          (rule "leq_literals" (formula "19") (term "1,0"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                                          (rule "applyEq" (formula "19") (term "1,0,0,0") (ifseqformula "27"))
                                          (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "4"))
                                          (rule "qeq_literals" (formula "19") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "notLeft" (formula "19"))
                                          (rule "allLeft" (formula "17") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                                          (rule "inEqSimp_homoInEq1" (formula "17") (term "1"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "1,0,1"))
                                          (rule "polySimp_rightDist" (formula "17") (term "1,0,1"))
                                          (rule "mul_literals" (formula "17") (term "0,1,0,1"))
                                          (rule "polySimp_addAssoc" (formula "17") (term "0,1"))
                                          (rule "polySimp_addComm0" (formula "17") (term "0,0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,1"))
                                          (rule "add_literals" (formula "17") (term "1,1,0,1"))
                                          (rule "times_zero_1" (formula "17") (term "1,0,1"))
                                          (rule "add_literals" (formula "17") (term "0,1"))
                                          (rule "leq_literals" (formula "17") (term "1"))
                                           (builtin "One Step Simplification" (formula "17"))
                                          (rule "inEqSimp_homoInEq0" (formula "17") (term "1"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "1,0,1"))
                                          (rule "polySimp_rightDist" (formula "17") (term "1,0,1"))
                                          (rule "mul_literals" (formula "17") (term "0,1,0,1"))
                                          (rule "polySimp_addAssoc" (formula "17") (term "0,1"))
                                          (rule "add_literals" (formula "17") (term "0,0,1"))
                                          (rule "add_zero_left" (formula "17") (term "0,1"))
                                          (rule "applyEq" (formula "17") (term "0,0,0") (ifseqformula "28"))
                                          (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "39"))
                                           (builtin "One Step Simplification" (formula "17"))
                                          (rule "true_left" (formula "17"))
                                          (rule "allLeft" (formula "17") (inst "t=Z(0(#))"))
                                          (rule "leq_literals" (formula "17") (term "1,0"))
                                           (builtin "One Step Simplification" (formula "17"))
                                          (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
                                          (rule "applyEq" (formula "17") (term "0,0,0") (ifseqformula "27"))
                                          (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "38"))
                                           (builtin "One Step Simplification" (formula "17"))
                                          (rule "true_left" (formula "17"))
                                          (rule "shift_paren_and" (formula "10") (term "0,0,0,0,1,0"))
                                          (rule "allLeft" (formula "32") (inst "t=Z(1(#))"))
                                          (rule "leq_literals" (formula "32") (term "1,0"))
                                           (builtin "One Step Simplification" (formula "32"))
                                          (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "32") (term "1") (ifseqformula "4"))
                                          (rule "qeq_literals" (formula "32") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "32"))
                                          (rule "allLeft" (formula "28") (inst "t=Z(0(#))"))
                                          (rule "leq_literals" (formula "28") (term "1,0"))
                                           (builtin "One Step Simplification" (formula "28"))
                                          (rule "add_zero_right" (formula "28") (term "1,1,0"))
                                          (rule "inEqSimp_homoInEq1" (formula "28") (term "1"))
                                          (rule "times_zero_2" (formula "28") (term "1,0,1"))
                                          (rule "add_zero_right" (formula "28") (term "0,1"))
                                          (rule "applyEq" (formula "28") (term "1,0,0") (ifseqformula "26"))
                                          (rule "eqSymm" (formula "28") (term "0"))
                                          (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "43"))
                                           (builtin "One Step Simplification" (formula "28"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "28"))
                                          (rule "mul_literals" (formula "28") (term "1"))
                                          (rule "inEqSimp_subsumption0" (formula "16") (ifseqformula "28"))
                                          (rule "leq_literals" (formula "16") (term "0"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "true_left" (formula "16"))
                                          (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "27"))
                                          (rule "qeq_literals" (formula "4") (term "0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "closeFalse" (formula "4"))
                                       )
                                    )
                                 )
                                 (branch "self.list.size >= 2 + self.index FALSE"
                                    (rule "inEqSimp_geqRight" (formula "30"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (rule "inEqSimp_antiSymm" (formula "7") (ifseqformula "1"))
                                    (rule "applyEq" (formula "1") (term "0") (ifseqformula "7"))
                                    (rule "inEqSimp_homoInEq0" (formula "1"))
                                    (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "1,0"))
                                    (rule "times_zero_1" (formula "1") (term "0"))
                                    (rule "qeq_literals" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "applyEq" (formula "17") (term "0") (ifseqformula "6"))
                                    (rule "inEqSimp_homoInEq0" (formula "17"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                                    (rule "mul_literals" (formula "17") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "17") (term "0"))
                                    (rule "add_literals" (formula "17") (term "0,0"))
                                    (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "6"))
                                    (rule "applyEq" (formula "19") (term "1,1,0,0") (ifseqformula "6"))
                                    (rule "applyEq" (formula "27") (term "0,0") (ifseqformula "6"))
                                    (rule "applyEq" (formula "24") (term "1,1,0,0,1,0") (ifseqformula "6"))
                                    (rule "applyEq" (formula "24") (term "1,1,0,0") (ifseqformula "6"))
                                    (rule "applyEq" (formula "18") (term "1,1,0,0") (ifseqformula "6"))
                                    (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "6"))
                                    (rule "polySimp_addAssoc" (formula "22") (term "1,0"))
                                    (rule "add_literals" (formula "22") (term "0,1,0"))
                                    (rule "add_zero_left" (formula "22") (term "1,0"))
                                    (rule "applyEq" (formula "27") (term "1,1,0,0,1") (ifseqformula "6"))
                                    (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                                    (rule "inEqSimp_homoInEq1" (formula "7"))
                                    (rule "polySimp_pullOutFactor1" (formula "7") (term "0"))
                                    (rule "add_literals" (formula "7") (term "1,0"))
                                    (rule "times_zero_1" (formula "7") (term "0"))
                                    (rule "leq_literals" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (rule "applyEq" (formula "13") (term "0") (ifseqformula "6"))
                                    (rule "applyEq" (formula "9") (term "1,1,1,0,0") (ifseqformula "6"))
                                    (rule "polySimp_addAssoc" (formula "9") (term "1,1,0,0"))
                                    (rule "polySimp_addComm0" (formula "9") (term "0,1,1,0,0"))
                                    (rule "polySimp_pullOutFactor2b" (formula "9") (term "1,1,0,0"))
                                    (rule "add_literals" (formula "9") (term "1,1,1,1,0,0"))
                                    (rule "times_zero_1" (formula "9") (term "1,1,1,0,0"))
                                    (rule "add_literals" (formula "9") (term "1,1,0,0"))
                                    (rule "applyEq" (formula "22") (term "1,1,1,0") (ifseqformula "6"))
                                    (rule "polySimp_addAssoc" (formula "22") (term "1,1,0"))
                                    (rule "add_literals" (formula "22") (term "0,1,1,0"))
                                    (rule "add_zero_left" (formula "22") (term "1,1,0"))
                                    (rule "applyEq" (formula "11") (term "2,0") (ifseqformula "6"))
                                    (rule "applyEq" (formula "21") (term "0") (ifseqformula "12"))
                                    (rule "eqSymm" (formula "21"))
                                    (rule "applyEq" (formula "19") (term "1,0") (ifseqformula "21"))
                                    (rule "close" (formula "30") (ifseqformula "19"))
                                 )
                              )
                           )
                        )
                        (branch "Case 2"
                           (rule "dismissNonSelectedField" (formula "17") (term "1"))
                           (rule "dismissNonSelectedField" (formula "17") (term "1"))
                           (rule "dismissNonSelectedField" (formula "17") (term "1"))
                           (rule "dismissNonSelectedField" (formula "17") (term "1"))
                            (builtin "Use Dependency Contract" (formula "17") (ifInst ""  (formula "14")) (contract "LinkedList[java.lang.Object::<inv>()].JML accessible clause.0"))
                           (rule "impLeft" (formula "15") (userinteraction))
                           (branch "Case 1"
                              (rule "hide_right" (formula "18") (userinteraction))
                              (rule "andRight" (formula "15"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "15"))
                                 (branch "Case 1"
                                    (rule "andRight" (formula "15"))
                                    (branch "Case 1"
                                       (rule "andRight" (formula "15"))
                                       (branch "Case 1"
                                          (rule "notRight" (formula "15"))
                                          (rule "close" (formula "16") (ifseqformula "1"))
                                       )
                                       (branch "Case 2"
                                          (rule "referencedObjectIsCreatedRight" (formula "15") (ifseqformula "16"))
                                          (rule "close" (formula "15") (ifseqformula "1"))
                                       )
                                    )
                                    (branch "Case 2"
                                       (rule "andRight" (formula "15"))
                                       (branch
                                          (rule "close" (formula "15") (ifseqformula "1"))
                                       )
                                       (branch "Case 2"
                                          (rule "wellFormedStorePrimitive" (formula "15"))
                                          (rule "wellFormedStorePrimitive" (formula "15"))
                                          (rule "wellFormedStorePrimitive" (formula "15"))
                                          (rule "eqSymm" (formula "10"))
                                          (rule "eqSymm" (formula "11"))
                                          (rule "eqSymm" (formula "13"))
                                          (rule "castedGetAny" (formula "13") (term "0"))
                                          (rule "lenOfSeqSubEQ" (formula "9") (term "1,1,0,0") (ifseqformula "11"))
                                          (rule "replace_known_left" (formula "9") (term "0,1,1,0,0") (ifseqformula "12"))
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "polySimp_elimSub" (formula "9") (term "1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "9") (term "1,1,0,0"))
                                          (rule "lenOfSeqSubEQ" (formula "5") (term "0") (ifseqformula "11"))
                                          (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "12"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "polySimp_elimSub" (formula "5") (term "0"))
                                          (rule "polySimp_addComm0" (formula "5") (term "0"))
                                          (rule "lenOfSeqSubEQ" (formula "8") (term "1,1,0,0") (ifseqformula "10"))
                                          (rule "polySimp_elimSub" (formula "8") (term "1,1,1,0,0"))
                                          (rule "times_zero_2" (formula "8") (term "1,1,1,1,0,0"))
                                          (rule "add_zero_right" (formula "8") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "12"))
                                          (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "12") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                                          (rule "polySimp_mulAssoc" (formula "9") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0,0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_gtToGeq" (formula "5"))
                                          (rule "times_zero_1" (formula "5") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "5") (term "0,0"))
                                          (rule "polySimp_addAssoc" (formula "5") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "8") (term "0,1,1,0,0"))
                                          (rule "add_zero_right" (formula "8") (term "0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "6"))
                                          (rule "inEqSimp_commuteLeq" (formula "7"))
                                          (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                                          (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                                          (rule "polySimp_elimOne" (formula "12") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "9") (term "0,1,1,0,0"))
                                          (rule "mul_literals" (formula "9") (term "0,0,1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                          (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                          (rule "polySimp_rightDist" (formula "5") (term "1"))
                                          (rule "mul_literals" (formula "5") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,1,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "7") (term "0,0,1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "7") (term "0,0,1,1,1,0,0"))
                                          (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "11"))
                                          (rule "inEqSimp_homoInEq0" (formula "6") (term "0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0"))
                                          (rule "add_literals" (formula "6") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "6") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "6") (term "0,0"))
                                          (rule "qeq_literals" (formula "6") (term "0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "wellFormedStoreObject" (formula "13"))
                                           (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "1")))
                                          (rule "orRight" (formula "13"))
                                          (rule "referencedObjectIsCreatedRight" (formula "14") (ifseqformula "13"))
                                          (rule "close" (formula "14") (ifseqformula "1"))
                                       )
                                    )
                                 )
                                 (branch
                                    (rule "close" (formula "15") (ifseqformula "14"))
                                 )
                              )
                              (branch "Case 2"
                                 (rule "JML_represents_clause_for_LinkedList_footprint" (formula "15") (term "1") (inst "i=i") (userinteraction))
                                 (rule "eqSymm" (formula "10"))
                                 (rule "eqSymm" (formula "13"))
                                 (rule "eqSymm" (formula "11"))
                                 (rule "castedGetAny" (formula "15") (term "0,1,0,1,1"))
                                 (rule "castedGetAny" (formula "13") (term "0"))
                                 (rule "lenOfSeqSubEQ" (formula "9") (term "1,1,0,0") (ifseqformula "11"))
                                 (rule "replace_known_left" (formula "9") (term "0,1,1,0,0") (ifseqformula "12"))
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "polySimp_elimSub" (formula "9") (term "1,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "9") (term "1,1,0,0"))
                                 (rule "lenOfSeqSubEQ" (formula "5") (term "0") (ifseqformula "11"))
                                 (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "12"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "polySimp_elimSub" (formula "5") (term "0"))
                                 (rule "polySimp_addComm0" (formula "5") (term "0"))
                                 (rule "lenOfSeqSubEQ" (formula "8") (term "1,1,0,0") (ifseqformula "10"))
                                 (rule "polySimp_elimSub" (formula "8") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "8") (term "1,1,1,1,0,0"))
                                 (rule "add_zero_right" (formula "8") (term "1,1,1,0,0"))
                                 (rule "disjointDefinition" (formula "15"))
                                 (rule "inEqSimp_ltToLeq" (formula "12"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "12") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                                 (rule "polySimp_mulAssoc" (formula "9") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_gtToGeq" (formula "5"))
                                 (rule "times_zero_1" (formula "5") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "5") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "8") (term "0,1,1,0,0"))
                                 (rule "add_zero_right" (formula "8") (term "0,0,1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "6"))
                                 (rule "inEqSimp_commuteLeq" (formula "7"))
                                 (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "9") (term "0,1,1,0,0"))
                                 (rule "mul_literals" (formula "9") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1"))
                                 (rule "mul_literals" (formula "5") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0,1,0,0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "7") (term "0,0,0,1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "11"))
                                 (rule "inEqSimp_homoInEq0" (formula "6") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0"))
                                 (rule "add_literals" (formula "6") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "6") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "6") (term "0,0"))
                                 (rule "qeq_literals" (formula "6") (term "0"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "distributeIntersection_2" (formula "13") (term "0"))
                                 (rule "getOfSeqSubEQ" (formula "7") (term "1,0,1,0,1,0") (ifseqformula "9"))
                                 (rule "castDel" (formula "7") (term "2,1,0,1,0,1,0"))
                                 (rule "polySimp_elimSub" (formula "7") (term "1,1,0,1,0,1,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "7") (term "1,1,1,0,1,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "7") (term "1,1,0,1,0,1,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,1,0,1,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,1,0,1,0,1,0"))
                                 (rule "polySimp_mulAssoc" (formula "7") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "7") (term "0,0,1,0,0,1,0,1,0,1,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "7") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "7") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,1,0,1,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,1,0,1,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,1,0,1,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,1,0,1,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "7") (term "1,1,0,1,0,1,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,1,0,1,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,1,0,1,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "7") (term "0,1,1,0,1,0,1,0,1,0"))
                                 (rule "mul_literals" (formula "7") (term "0,0,1,1,0,1,0,1,0,1,0"))
                                 (rule "getOfSeqSubEQ" (formula "6") (term "1,0,1,0,1,0") (ifseqformula "8"))
                                 (rule "castDel" (formula "6") (term "2,1,0,1,0,1,0"))
                                 (rule "add_zero_right" (formula "6") (term "1,1,1,0,1,0,1,0"))
                                 (rule "polySimp_elimSub" (formula "6") (term "1,1,0,1,0,1,0,1,0"))
                                 (rule "mul_literals" (formula "6") (term "1,1,1,0,1,0,1,0,1,0"))
                                 (rule "add_zero_right" (formula "6") (term "1,1,0,1,0,1,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,1,0,1,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,1,0,1,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,1,0,1,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,1,0,1,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,1,0,1,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "6") (term "1,1,0,1,0,1,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,1,0,1,0,1,0"))
                                 (rule "mul_literals" (formula "6") (term "0,1,1,0,1,0,1,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,1,0,1,0,1,0"))
                                 (rule "distributeIntersection" (formula "13") (term "1,0"))
                                 (rule "intersectWithSingleton" (formula "13") (term "0,0"))
                                 (rule "distributeIntersection" (formula "13") (term "0,1,0"))
                                 (rule "distributeIntersection_2" (formula "13") (term "1,1,0"))
                                 (rule "elementOfUnion" (formula "13") (term "0,0,0"))
                                 (rule "elementOfInfiniteUnion" (formula "13") (term "1,0,0,0"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "eqSymm" (formula "13") (term "1,0,1,0,0,0"))
                                 (rule "sortsDisjointModuloNull" (formula "13") (term "1,0,1,0,0,0"))
                                 (rule "replace_known_right" (formula "13") (term "1,1,0,1,0,0,0") (ifseqformula "15"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "distributeIntersection_2" (formula "13") (term "0,0,1,0"))
                                 (rule "distributeIntersection_2" (formula "13") (term "1,0,1,0"))
                                 (rule "intersectWithSingleton" (formula "13") (term "0,1,1,0"))
                                 (rule "elementOfInfiniteUnion" (formula "13") (term "0,0,1,1,0"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "eqSymm" (formula "13") (term "1,0,0,0,1,1,0"))
                                 (rule "sortsDisjointModuloNull" (formula "13") (term "1,0,0,0,1,1,0"))
                                 (rule "replace_known_right" (formula "13") (term "1,1,0,0,0,1,1,0") (ifseqformula "15"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "intersectWithSingleton" (formula "13") (term "0,0,0,1,0"))
                                 (rule "distributeIntersection" (formula "13") (term "1,0,0,1,0"))
                                 (rule "elementOfUnion" (formula "13") (term "0,0,0"))
                                 (rule "elementOfSingleton" (formula "13") (term "1,0,0,0"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "unionEqualsEmpty" (formula "13"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "intersectWithSingleton" (formula "13") (term "0,1,0,0,1"))
                                 (rule "elementOfSingleton" (formula "13") (term "0,0,1,0,0,1"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "elementOfUnion" (formula "13") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "13") (term "1,0,0"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "distributeIntersection_2" (formula "13") (term "1,0,1"))
                                 (rule "distributeIntersection" (formula "13") (term "0,1,0,0,0,1"))
                                 (rule "elementOfUnion" (formula "13") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "13") (term "1,0,0"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "distributeIntersection_2" (formula "13") (term "1,0,1,0,0,0,1"))
                                 (rule "distributeIntersection" (formula "13") (term "0,0,1,0,0,0,1"))
                                 (rule "intersectWithSingleton" (formula "13") (term "1,1,0,1"))
                                 (rule "elementOfInfiniteUnion" (formula "13") (term "0,1,1,0,1"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "eqSymm" (formula "13") (term "1,0,0,1,1,0,1"))
                                 (rule "sortsDisjointModuloNull" (formula "13") (term "1,0,0,1,1,0,1"))
                                 (rule "replace_known_right" (formula "13") (term "1,1,0,0,1,1,0,1") (ifseqformula "15"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "distributeIntersection_2" (formula "13") (term "1,1,0,0,0,1"))
                                 (rule "distributeIntersection_2" (formula "13") (term "1,0,0,1,0,0,0,1"))
                                 (rule "intersectWithSingleton" (formula "13") (term "1,0,1"))
                                 (rule "elementOfInfiniteUnion" (formula "13") (term "0,1,0,1"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "eqSymm" (formula "13") (term "1,0,0,1,0,1"))
                                 (rule "sortsDisjointModuloNull" (formula "13") (term "1,0,0,1,0,1"))
                                 (rule "replace_known_right" (formula "13") (term "1,1,0,0,1,0,1") (ifseqformula "15"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "intersectWithSingleton" (formula "13") (term "0,1,0,1,0,0,1"))
                                 (rule "elementOfSingleton" (formula "13") (term "0,0,1,0,1,0,0,1"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "intersectWithSingleton" (formula "13") (term "1,1,1,0,0,1"))
                                 (rule "elementOfSingleton" (formula "13") (term "0,1,1,1,0,0,1"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "intersectWithSingleton" (formula "13") (term "1,1,0,0,1"))
                                 (rule "elementOfSingleton" (formula "13") (term "0,1,1,0,0,1"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "unionEqualsEmpty" (formula "13") (term "1"))
                                 (rule "disjointWithSingleton1" (formula "13") (term "1,1"))
                                 (rule "elementOfUnion" (formula "13") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "13") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "elementOfSingleton" (formula "13") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "elementOfUnion" (formula "13") (term "0,1"))
                                 (rule "elementOfSingleton" (formula "13") (term "1,0,1"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "elementOfSingleton" (formula "13") (term "0,1"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "intersectWithSingleton" (formula "13") (term "1,1,0"))
                                 (rule "elementOfSingleton" (formula "13") (term "0,1,1,0"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "intersectWithSingleton" (formula "13") (term "0,1,1,0"))
                                 (rule "elementOfSingleton" (formula "13") (term "0,0,1,1,0"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "distributeIntersection_2" (formula "13") (term "0,1,0"))
                                 (rule "intersectWithSingleton" (formula "13") (term "1,1,0"))
                                 (rule "elementOfSingleton" (formula "13") (term "0,1,1,0"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "elementOfUnion" (formula "13") (term "0,0,0"))
                                 (rule "elementOfSingleton" (formula "13") (term "1,0,0,0"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "unionEqualsEmpty" (formula "13"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "unionEqualsEmpty" (formula "13") (term "1"))
                                 (rule "disjointWithSingleton1" (formula "13") (term "0,1"))
                                 (rule "disjointWithSingleton1" (formula "13") (term "1,1"))
                                 (rule "elementOfSingleton" (formula "13") (term "0,0,1"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "elementOfSingleton" (formula "13") (term "0,1"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "notRight" (formula "13"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                           (branch "Case 2"
                              (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "14") (userinteraction))
                               (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "18")))
                              (rule "closeFalse" (formula "15"))
                           )
                        )
                     )
                  )
                  (branch "Case 2"
                     (rule "notRight" (formula "17"))
                     (rule "Class_invariant_axiom_for_LinkedList" (formula "15") (inst "i=i") (inst "i_0=i_0") (inst "j=j") (inst "i_1=i_1") (inst "i_2=i_2") (inst "f=f") (inst "i_3=i_3") (inst "n=n_3") (userinteraction))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "andLeft" (formula "15"))
                     (rule "andLeft" (formula "15"))
                     (rule "andLeft" (formula "15"))
                     (rule "andLeft" (formula "15"))
                     (rule "andLeft" (formula "15"))
                     (rule "andLeft" (formula "15"))
                     (rule "andLeft" (formula "15"))
                     (rule "andLeft" (formula "15"))
                     (rule "translateJavaSubInt" (formula "20") (term "1,0,1,1,1"))
                     (rule "translateJavaSubInt" (formula "21") (term "1,1,0,0"))
                     (rule "eqSymm" (formula "22") (term "0,1,0,1,0"))
                     (rule "eqSymm" (formula "21") (term "1,0"))
                     (rule "eqSymm" (formula "16"))
                     (rule "eqSymm" (formula "14"))
                     (rule "eqSymm" (formula "11"))
                     (rule "eqSymm" (formula "20") (term "1,0,1"))
                     (rule "eqSymm" (formula "22") (term "1,1,0,1,0"))
                     (rule "eqSymm" (formula "12"))
                     (rule "eqSymm" (formula "20") (term "1,1"))
                     (rule "polySimp_elimSub" (formula "21") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "21") (term "1,1,1,0,0"))
                     (rule "polySimp_elimSub" (formula "20") (term "1,0,0,1,1"))
                     (rule "mul_literals" (formula "20") (term "1,1,0,0,1,1"))
                     (rule "polySimp_addComm0" (formula "21") (term "1,0,0,1,0"))
                     (rule "polySimp_addComm0" (formula "21") (term "1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "20") (term "1,0,0,1,1"))
                     (rule "castedGetAny" (formula "23") (term "1,1,1,0"))
                     (rule "castedGetAny" (formula "22") (term "1,0,1,0,1,0"))
                     (rule "castedGetAny" (formula "22") (term "0,0,1,0,1,0"))
                     (rule "castedGetAny" (formula "21") (term "1,1,1,0"))
                     (rule "castedGetAny" (formula "14") (term "0"))
                     (rule "castedGetAny" (formula "20") (term "0,1,0,1"))
                     (rule "castedGetAny" (formula "21") (term "0,1,0"))
                     (rule "eqSymm" (formula "21") (term "1,0"))
                     (rule "castedGetAny" (formula "20") (term "0,1,1"))
                     (rule "lenOfSeqSubEQ" (formula "9") (term "1,1,0,0") (ifseqformula "11"))
                     (rule "polySimp_elimSub" (formula "9") (term "1,1,1,0,0"))
                     (rule "times_zero_2" (formula "9") (term "1,1,1,1,0,0"))
                     (rule "add_zero_right" (formula "9") (term "1,1,1,0,0"))
                     (rule "lenOfSeqSubEQ" (formula "6") (term "0") (ifseqformula "12"))
                     (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "13"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "polySimp_elimSub" (formula "6") (term "0"))
                     (rule "polySimp_addComm0" (formula "6") (term "0"))
                     (rule "lenOfSeqSubEQ" (formula "10") (term "1,1,0,0") (ifseqformula "12"))
                     (rule "replace_known_left" (formula "10") (term "0,1,1,0,0") (ifseqformula "13"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "polySimp_elimSub" (formula "10") (term "1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "10") (term "1,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "13"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "13") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "9") (term "0,1,1,0,0"))
                     (rule "add_zero_right" (formula "9") (term "0,0,1,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,1,0,0"))
                     (rule "inEqSimp_gtToGeq" (formula "6"))
                     (rule "times_zero_1" (formula "6") (term "1,0,0"))
                     (rule "add_zero_right" (formula "6") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "6") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "7"))
                     (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "8"))
                     (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                     (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "10") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                     (rule "applyEq" (formula "8") (term "0") (ifseqformula "16"))
                     (rule "applyEq" (formula "13") (term "0,1,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "20") (term "1,1,0,1,1") (ifseqformula "15"))
                     (rule "applyEq" (formula "12") (term "2,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "17") (term "0") (ifseqformula "15"))
                     (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "15"))
                     (rule "applyEq" (formula "16") (term "1") (ifseqformula "15"))
                     (rule "applyEq" (formula "21") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                     (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                     (rule "applyEq" (formula "18") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                     (rule "applyEq" (formula "12") (term "2,0") (ifseqformula "15"))
                     (rule "applyEq" (formula "8") (term "0") (ifseqformula "15"))
                     (rule "applyEq" (formula "13") (term "0,1,0") (ifseqformula "15"))
                     (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "15"))
                     (rule "apply_eq_monomials" (formula "23") (term "1,0,0,1,0,0") (ifseqformula "16"))
                     (rule "polySimp_rightDist" (formula "23") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0,0,1,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "23") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "23") (term "1,1,1,0,0,1,0,0"))
                     (rule "times_zero_1" (formula "23") (term "1,1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "23") (term "1,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                     (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                     (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,1,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,1,0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "9") (term "0,0,0,1,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,1,0"))
                     (rule "mul_literals" (formula "22") (term "0,1,1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "13"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                     (rule "polySimp_elimOne" (formula "13") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1"))
                     (rule "polySimp_rightDist" (formula "6") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                     (rule "mul_literals" (formula "6") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "9") (term "0,1,1,0,0"))
                     (rule "mul_literals" (formula "9") (term "0,0,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                     (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "12"))
                     (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
                     (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
                     (rule "add_literals" (formula "7") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "7") (term "1,0,0"))
                     (rule "add_zero_right" (formula "7") (term "0,0"))
                     (rule "qeq_literals" (formula "7") (term "0"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "true_left" (formula "7"))
                     (rule "getOfSeqSubEQ" (formula "7") (term "1,0,1,0,1,0") (ifseqformula "9"))
                     (rule "castDel" (formula "7") (term "2,1,0,1,0,1,0"))
                     (rule "add_zero_right" (formula "7") (term "1,1,1,0,1,0,1,0"))
                     (rule "polySimp_elimSub" (formula "7") (term "1,1,0,1,0,1,0,1,0"))
                     (rule "times_zero_2" (formula "7") (term "1,1,1,0,1,0,1,0,1,0"))
                     (rule "add_zero_right" (formula "7") (term "1,1,0,1,0,1,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,1,0,1,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,1,0,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "7") (term "1,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,1,0,1,0,1,0"))
                     (rule "mul_literals" (formula "7") (term "0,1,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,1,0,1,0,1,0"))
                     (rule "getOfSeqSubEQ" (formula "8") (term "1,0,1,0,1,0") (ifseqformula "10"))
                     (rule "castDel" (formula "8") (term "2,1,0,1,0,1,0"))
                     (rule "polySimp_elimSub" (formula "8") (term "1,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_addComm0" (formula "8") (term "1,1,1,0,1,0,1,0"))
                     (rule "polySimp_addComm0" (formula "8") (term "1,1,0,1,0,1,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,1,0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulAssoc" (formula "8") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "0,0,1,0,0,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "8") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,1,0,1,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,1,0,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,1,0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "0,1,1,0,1,0,1,0,1,0"))
                     (rule "mul_literals" (formula "8") (term "0,0,1,1,0,1,0,1,0,1,0"))
                     (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "15"))
                     (rule "polySimp_rightDist" (formula "11") (term "0,0"))
                     (rule "mul_literals" (formula "11") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "11") (term "0"))
                     (rule "add_literals" (formula "11") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                     (rule "polySimp_elimOne" (formula "11") (term "0"))
                     (rule "nnf_imp2or" (formula "21") (term "1,0,1,0"))
                     (rule "nnf_imp2or" (formula "20") (term "0"))
                     (rule "nnf_imp2or" (formula "17") (term "0"))
                     (rule "nnf_imp2or" (formula "22") (term "0"))
                     (rule "nnf_imp2or" (formula "18") (term "0"))
                     (rule "nnf_imp2or" (formula "7") (term "0"))
                     (rule "nnf_imp2or" (formula "8") (term "0"))
                     (rule "nnf_imp2or" (formula "21") (term "0"))
                     (rule "nnf_notAnd" (formula "20") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                     (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                     (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                     (rule "nnf_notAnd" (formula "17") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                     (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                     (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "22") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                     (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                     (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "18") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                     (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                     (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "7") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
                     (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
                     (rule "mul_literals" (formula "7") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "8") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                     (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                     (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "0,1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "8") (term "0,0,1,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "8") (term "1,0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,1,0,0"))
                     (rule "add_literals" (formula "8") (term "0,0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "8") (term "0,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "0,1,1,0,0"))
                     (rule "nnf_notAnd" (formula "21") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                     (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                     (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                     (rule "nnf_imp2or" (formula "21") (term "0,1,0"))
                     (rule "commute_and" (formula "19") (term "0,0"))
                     (rule "nnf_notAnd" (formula "21") (term "0,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,1,0"))
                     (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0,1,0"))
                     (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,1,0"))
                     (rule "mul_literals" (formula "21") (term "1,0,0,0,1,0"))
                     (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,1,0"))
                     (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,1,0"))
                     (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,1,0"))
                     (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,1,0"))
                     (rule "commute_and" (formula "19") (term "0,0,0,0,1"))
                     (rule "commute_or_2" (formula "20") (term "0"))
                     (rule "commute_or_2" (formula "22") (term "0"))
                     (rule "commute_and" (formula "17") (term "0,0,1,0"))
                     (rule "commute_and" (formula "17") (term "1,0,1,0"))
                     (rule "commute_and" (formula "18") (term "0,0,1,0"))
                     (rule "commute_and" (formula "18") (term "1,0,1,0"))
                     (rule "lenNonNegative" (formula "14") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "14"))
                     (rule "applyEq" (formula "14") (term "0") (ifseqformula "15"))
                     (rule "commute_and" (formula "7") (term "0,0,1,0"))
                     (rule "commute_and" (formula "7") (term "1,0,1,0"))
                     (rule "commute_and" (formula "8") (term "1,0,1,0"))
                     (rule "commute_and" (formula "8") (term "0,0,1,0"))
                     (rule "lenNonNegative" (formula "16") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "16"))
                     (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                     (rule "equalityToSeqGetAndSeqLenLeft" (formula "9") (inst "iv=iv"))
                     (rule "andLeft" (formula "9"))
                     (rule "lenOfSeqSub" (formula "10") (term "1,1,0,0"))
                     (rule "polySimp_elimSub" (formula "10") (term "1,1,1,0,0"))
                     (rule "times_zero_2" (formula "10") (term "1,1,1,1,0,0"))
                     (rule "add_zero_right" (formula "10") (term "1,1,1,0,0"))
                     (rule "lenOfSeqSub" (formula "9") (term "0"))
                     (rule "polySimp_elimSub" (formula "9") (term "1,0"))
                     (rule "times_zero_2" (formula "9") (term "1,1,0"))
                     (rule "add_zero_right" (formula "9") (term "1,0"))
                     (rule "lenOfSeqSubEQ" (formula "9") (term "1") (ifseqformula "11"))
                     (rule "eqSymm" (formula "9"))
                     (rule "polySimp_elimSub" (formula "9") (term "1,0"))
                     (rule "times_zero_2" (formula "9") (term "1,1,0"))
                     (rule "add_zero_right" (formula "9") (term "1,0"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "true_left" (formula "9"))
                     (rule "inEqSimp_ltToLeq" (formula "9") (term "0,1,1,0,0"))
                     (rule "add_zero_right" (formula "9") (term "0,0,1,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                     (rule "applyEq" (formula "9") (term "0,0,1,0") (ifseqformula "10"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "true_left" (formula "9"))
                     (rule "seqGetAlphaCast" (formula "13") (term "0"))
                     (rule "castedGetAny" (formula "13") (term "0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "true_left" (formula "13"))
                     (rule "seqGetAlphaCast" (formula "20") (term "0,1,0,1"))
                     (rule "castedGetAny" (formula "20") (term "0"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "true_left" (formula "20"))
                     (rule "commute_or" (formula "21") (term "0,0"))
                     (rule "commute_or" (formula "23") (term "0,0"))
                     (rule "commute_and_2" (formula "20") (term "0"))
                     (rule "seqGetAlphaCast" (formula "20") (term "0,1,1"))
                     (rule "castedGetAny" (formula "20") (term "0"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "true_left" (formula "20"))
                     (rule "shift_paren_or" (formula "22") (term "0,1,0"))
                     (rule "equalityToSeqGetAndSeqLenLeft" (formula "10") (inst "iv=iv"))
                     (rule "andLeft" (formula "10"))
                     (rule "lenOfSeqSub" (formula "11") (term "1,1,0,0"))
                     (rule "polySimp_elimSub" (formula "11") (term "1,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "11") (term "1,1,1,0,0"))
                     (rule "lenOfSeqSub" (formula "10") (term "0"))
                     (rule "polySimp_elimSub" (formula "10") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "10") (term "1,0"))
                     (rule "lenOfSeqSubEQ" (formula "10") (term "1") (ifseqformula "12"))
                     (rule "eqSymm" (formula "10"))
                     (rule "polySimp_elimSub" (formula "10") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "10") (term "1,0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "true_left" (formula "10"))
                     (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,1,0,0"))
                     (rule "polySimp_addComm1" (formula "10") (term "0,0,1,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                     (rule "applyEq" (formula "10") (term "0,0,1,0") (ifseqformula "11"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "true_left" (formula "10"))
                     (rule "applyEq_and_gen2" (formula "19") (term "1,0,1,0"))
                     (rule "applyEq_and_gen2" (formula "7") (term "1,0,1,0"))
                     (rule "ifEqualsNull" (formula "7") (term "0,0,1,0,1,0"))
                     (rule "nnf_notOr" (formula "7") (term "0,1,0,1,0"))
                     (rule "nnf_notAnd" (formula "7") (term "1,0,1,0,1,0"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "nnf_notAnd" (formula "7") (term "0,0,1,0,1,0"))
                     (rule "nnf_notAnd" (formula "7") (term "0,0,0,1,0,1,0"))
                     (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0,0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,0,1,0,1,0"))
                     (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,0,1,0,1,0"))
                     (rule "add_literals" (formula "7") (term "0,0,0,1,0,0,0,1,0,1,0"))
                     (rule "add_zero_left" (formula "7") (term "0,0,1,0,0,0,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0,0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0,1,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0,0,1,0,1,0"))
                     (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0,0,1,0,1,0"))
                     (rule "add_zero_right" (formula "7") (term "0,0,0,0,0,0,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0,0,1,0,1,0"))
                     (rule "mul_literals" (formula "7") (term "1,0,0,0,0,1,0,1,0"))
                     (rule "applyEq_and_gen2" (formula "8") (term "1,0,1,0"))
                     (rule "ifEqualsNull" (formula "8") (term "0,0,1,0,1,0"))
                     (rule "nnf_notOr" (formula "8") (term "0,1,0,1,0"))
                     (rule "nnf_notAnd" (formula "8") (term "1,0,1,0,1,0"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "nnf_notAnd" (formula "8") (term "0,0,1,0,1,0"))
                     (rule "nnf_notAnd" (formula "8") (term "0,0,0,1,0,1,0"))
                     (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0,0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0,0,1,0,0,0,1,0,1,0"))
                     (rule "mul_literals" (formula "8") (term "0,0,1,0,0,1,0,0,0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "8") (term "1,0,1,0,0,1,0,0,0,1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,0,1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,1,0,0,0,1,0,1,0"))
                     (rule "add_literals" (formula "8") (term "0,0,0,0,1,0,0,0,1,0,1,0"))
                     (rule "add_zero_left" (formula "8") (term "0,0,0,1,0,0,0,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "0,1,1,0,0,0,1,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,0,1,0,1,0"))
                     (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0,0,1,0,1,0"))
                     (rule "add_zero_right" (formula "8") (term "0,0,0,0,0,0,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,0,1,0,1,0"))
                     (rule "mul_literals" (formula "8") (term "1,0,0,0,0,1,0,1,0"))
                     (rule "cnf_rightDist" (formula "20"))
                     (rule "andLeft" (formula "20"))
                     (rule "commute_or_2" (formula "23") (term "0,0,1,0"))
                     (rule "shift_paren_and" (formula "18") (term "0,1,0"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "castedGetAny" (formula "18") (term "1,0,0,1,0,1,0"))
                     (rule "castedGetAny" (formula "18") (term "0,0,0,0,0,1,0"))
                     (rule "castedGetAny" (formula "18") (term "1,0,1,1,0,0,1,0"))
                     (rule "castedGetAny" (formula "18") (term "0,0,1,0,0,1,0"))
                     (rule "cnf_rightDist" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "cnf_rightDist" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "commute_or" (formula "21"))
                     (rule "cnf_rightDist" (formula "20"))
                     (rule "andLeft" (formula "20"))
                     (rule "cnf_rightDist" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "cnf_rightDist" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "commute_or" (formula "21"))
                     (rule "commute_or" (formula "7") (term "1,0,1,0,1,0"))
                     (rule "cnf_rightDist" (formula "18") (term "0"))
                     (rule "distr_forallAnd" (formula "18"))
                     (rule "andLeft" (formula "18"))
                     (rule "shift_paren_or" (formula "19") (term "0"))
                     (rule "cnf_rightDist" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "cnf_rightDist" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "commute_or" (formula "23"))
                     (rule "cnf_rightDist" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "commute_or" (formula "22"))
                     (rule "commute_and_2" (formula "21") (term "1"))
                     (rule "commute_or_2" (formula "7") (term "0,0,1,0,1,0"))
                     (rule "cnf_rightDist" (formula "18") (term "0"))
                     (rule "distr_forallAnd" (formula "18"))
                     (rule "andLeft" (formula "18"))
                     (rule "shift_paren_or" (formula "19") (term "0"))
                     (rule "commute_or" (formula "8") (term "1,0,1,0,1,0"))
                     (rule "cnf_rightDist" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "cnf_rightDist" (formula "23"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "cnf_rightDist" (formula "23"))
                     (rule "andLeft" (formula "23"))
                     (rule "commute_or" (formula "23"))
                     (rule "shift_paren_and" (formula "21") (term "0,1,0"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "castedGetAny" (formula "21") (term "0,0,1,0,0,1,0"))
                     (rule "castedGetAny" (formula "21") (term "0,0,0,0,0,1,0"))
                     (rule "castedGetAny" (formula "21") (term "1,0,1,1,0,0,1,0"))
                     (rule "commute_or" (formula "35") (term "0,0,0,1,0"))
                     (rule "cnf_rightDist" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "commute_or" (formula "22"))
                     (rule "cnf_rightDist" (formula "23"))
                     (rule "andLeft" (formula "23"))
                     (rule "commute_or" (formula "24"))
                     (rule "cnf_rightDist" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "commute_or" (formula "23"))
                     (rule "cnf_rightDist" (formula "18") (term "0"))
                     (rule "distr_forallAnd" (formula "18"))
                     (rule "andLeft" (formula "18"))
                     (rule "commute_or_2" (formula "18") (term "0"))
                     (rule "shift_paren_or" (formula "19") (term "0"))
                     (rule "commute_or" (formula "18") (term "0,0"))
                     (rule "cnf_rightDist" (formula "25"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "commute_or" (formula "25"))
                     (rule "cnf_rightDist" (formula "23"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "commute_or" (formula "23"))
                     (rule "commute_or_2" (formula "8") (term "0,0,1,0,1,0"))
                     (rule "cnf_rightDist" (formula "22") (term "0"))
                     (rule "distr_forallAnd" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "shift_paren_or" (formula "23") (term "0"))
                     (rule "cnf_rightDist" (formula "22") (term "0"))
                     (rule "distr_forallAnd" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "shift_paren_or" (formula "23") (term "0"))
                     (rule "cnf_rightDist" (formula "22") (term "0"))
                     (rule "distr_forallAnd" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "commute_or_2" (formula "22") (term "0"))
                     (rule "shift_paren_or" (formula "23") (term "0"))
                     (rule "commute_or" (formula "22") (term "0,0"))
                     (rule "ifthenelse_to_or_right" (formula "7") (term "1,1,0,1,0"))
                     (rule "nnf_notAnd" (formula "7") (term "0,0,1,1,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0,1,1,0,1,0"))
                     (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0,1,1,0,1,0"))
                     (rule "add_zero_right" (formula "7") (term "0,0,0,0,0,1,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0,1,1,0,1,0"))
                     (rule "mul_literals" (formula "7") (term "1,0,0,0,1,1,0,1,0"))
                     (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0,1,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,1,1,0,1,0"))
                     (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0,1,1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,1,1,0,1,0"))
                     (rule "add_literals" (formula "7") (term "0,0,0,1,0,0,1,1,0,1,0"))
                     (rule "add_zero_left" (formula "7") (term "0,0,1,0,0,1,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0,1,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,1,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,1,1,0,1,0"))
                     (rule "commute_or" (formula "7") (term "0,0,0,1,0,1,0"))
                     (rule "ifthenelse_to_or_right" (formula "8") (term "1,1,0,1,0"))
                     (rule "nnf_notAnd" (formula "8") (term "0,0,1,1,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,1,1,0,1,0"))
                     (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0,1,1,0,1,0"))
                     (rule "add_zero_right" (formula "8") (term "0,0,0,0,0,1,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,1,1,0,1,0"))
                     (rule "mul_literals" (formula "8") (term "1,0,0,0,1,1,0,1,0"))
                     (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0,1,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,1,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "0,1,0,0,1,0,0,1,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0,0,1,0,0,1,1,0,1,0"))
                     (rule "mul_literals" (formula "8") (term "0,0,1,0,0,1,0,0,1,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "8") (term "1,0,1,0,0,1,0,0,1,1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,1,1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,1,0,0,1,1,0,1,0"))
                     (rule "add_literals" (formula "8") (term "0,0,0,0,1,0,0,1,1,0,1,0"))
                     (rule "add_zero_left" (formula "8") (term "0,0,0,1,0,0,1,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0,1,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,1,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,1,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,1,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,1,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "0,1,1,0,0,1,1,0,1,0"))
                     (rule "cnf_rightDist" (formula "7") (term "1,0,1,0,1,0"))
                     (rule "commute_or" (formula "7") (term "1,1,1,0,1,0"))
                     (rule "cnf_rightDist" (formula "8") (term "1,0,1,0,1,0"))
                     (rule "commute_or" (formula "8") (term "0,0,0,1,0,1,0"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "44") (term "0") (ifseqformula "2"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "45"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "2") (term "0") (ifseqformula "3"))
                     (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "2") (term "1,0") (ifseqformula "3"))
                     (rule "commute_or_2" (formula "9") (term "0,1,1,0,1,0"))
                     (rule "commute_or" (formula "10") (term "1,1,1,0,1,0"))
                     (rule "ifthenelse_split" (formula "9") (term "1,1,0,0"))
                     (branch "self.index >= 1 TRUE"
                        (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "9"))
                        (rule "leq_literals" (formula "8") (term "0"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "commute_or_2" (formula "10") (term "0,1,1,0,1,0"))
                        (rule "commute_or" (formula "9") (term "0,1,0,1,0,1,0"))
                        (rule "commute_or" (formula "10") (term "0,1,0,1,0,1,0"))
                        (rule "commute_or" (formula "9") (term "0,0,1,1,0,1,0"))
                        (rule "all_pull_out3" (formula "44") (term "0"))
                        (rule "shift_paren_or" (formula "44") (term "0,0"))
                        (rule "shift_paren_or" (formula "44") (term "0,0,0"))
                        (rule "shift_paren_or" (formula "44") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "44") (term "0,0,0,0,0"))
                        (rule "commute_or" (formula "44") (term "0,0,0,0,0,0"))
                        (rule "commute_or" (formula "10") (term "0,0,1,1,0,1,0"))
                        (rule "cnf_rightDist" (formula "9") (term "1,1,1,0,1,0"))
                        (rule "commute_or" (formula "9") (term "1,1,1,1,0,1,0"))
                        (rule "cnf_rightDist" (formula "10") (term "1,1,1,0,1,0"))
                        (rule "commute_or" (formula "10") (term "1,1,1,1,0,1,0"))
                        (rule "cut_direct" (formula "38") (term "0"))
                        (branch "CUT: self.list.tail = null TRUE"
                            (builtin "One Step Simplification" (formula "39"))
                           (rule "true_left" (formula "39"))
                           (rule "replace_known_left" (formula "31") (term "0,0") (ifseqformula "38"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "38"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "37"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "true_left" (formula "34"))
                           (rule "replace_known_left" (formula "39") (term "0") (ifseqformula "36"))
                            (builtin "One Step Simplification" (formula "39"))
                           (rule "true_left" (formula "39"))
                           (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "36"))
                            (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "30")))
                           (rule "true_left" (formula "32"))
                           (rule "replace_known_left" (formula "29") (term "0,1") (ifseqformula "35"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "replace_known_left" (formula "33") (term "1") (ifseqformula "30"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "true_left" (formula "33"))
                           (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "30"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "true_left" (formula "35"))
                           (rule "replace_known_left" (formula "36") (term "0") (ifseqformula "30"))
                            (builtin "One Step Simplification" (formula "36"))
                           (rule "true_left" (formula "36"))
                           (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "30"))
                            (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "29")))
                           (rule "true_left" (formula "28"))
                           (rule "replace_known_left" (formula "30") (term "0,1") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "28")))
                           (rule "true_left" (formula "30"))
                           (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "true_left" (formula "32"))
                           (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "applyEq" (formula "22") (term "0,1,0,0,0,0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "32") (term "0,0,0,0,0,0,0,0,0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "31") (term "0,1,0,0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "21") (term "0,1,0,1,0,0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "33") (term "0,1,1,0,0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "23") (term "0,0,0,0,0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "31") (term "0,1,0,0,0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "32") (term "0,1,0,0,0,0,0,0,0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "20") (term "0,0,0,0,0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "eqSymm" (formula "17"))
                           (rule "applyEq" (formula "21") (term "0,0,0,0,0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "17"))
                           (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                           (rule "qeq_literals" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "applyEq" (formula "18") (term "0") (ifseqformula "16"))
                           (rule "leq_literals" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "applyEq" (formula "20") (term "1,1,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "12") (term "2,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "30") (term "1,1,0,0,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "18") (term "1,1,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "10") (term "1,1,1,0,0") (ifseqformula "16"))
                           (rule "add_zero_right" (formula "10") (term "1,1,0,0"))
                           (rule "applyEq" (formula "10") (term "1,1,0,1,1,0,1,0,1,0") (ifseqformula "16"))
                           (rule "add_zero_right" (formula "10") (term "1,0,1,1,0,1,0,1,0"))
                           (rule "applyEq" (formula "19") (term "1,1,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "14") (term "0") (ifseqformula "16"))
                           (rule "inEqSimp_homoInEq1" (formula "14"))
                           (rule "times_zero_2" (formula "14") (term "1,0"))
                           (rule "add_zero_right" (formula "14") (term "0"))
                           (rule "applyEq" (formula "10") (term "1,1,1,0,1,1,0,1,0") (ifseqformula "16"))
                           (rule "add_zero_right" (formula "10") (term "1,1,0,1,1,0,1,0"))
                           (rule "applyEq" (formula "29") (term "1,1,1,0") (ifseqformula "16"))
                           (rule "add_literals" (formula "29") (term "1,1,0"))
                           (rule "applyEq" (formula "10") (term "1,1,1,1,1,1,1,0,1,0") (ifseqformula "16"))
                           (rule "add_zero_right" (formula "10") (term "1,1,1,1,1,1,0,1,0"))
                           (rule "applyEq" (formula "31") (term "1,1,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "30") (term "1,1,0,0,0,0,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "10") (term "1,1,1,0,0,1,0,1,0") (ifseqformula "16"))
                           (rule "add_zero_right" (formula "10") (term "1,1,0,0,1,0,1,0"))
                           (rule "applyEq" (formula "17") (term "1") (ifseqformula "16"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "14"))
                           (rule "mul_literals" (formula "14") (term "1"))
                           (rule "inEqSimp_subsumption0" (formula "13") (ifseqformula "14"))
                           (rule "leq_literals" (formula "13") (term "0"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "true_left" (formula "13"))
                           (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "13"))
                           (rule "qeq_literals" (formula "8") (term "0"))
                            (builtin "One Step Simplification" (formula "8"))
                           (rule "closeFalse" (formula "8"))
                        )
                        (branch "CUT: self.list.tail = null FALSE"
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "replace_known_right" (formula "31") (term "0,0") (ifseqformula "46"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "true_left" (formula "31"))
                           (rule "replace_known_right" (formula "28") (term "1") (ifseqformula "45"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "notLeft" (formula "28"))
                           (rule "replace_known_right" (formula "29") (term "0,1") (ifseqformula "45"))
                            (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "44")))
                           (rule "true_left" (formula "29"))
                           (rule "replace_known_right" (formula "38") (term "0") (ifseqformula "44"))
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "replace_known_left" (formula "34") (term "1") (ifseqformula "35"))
                            (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "43")))
                           (rule "true_left" (formula "34"))
                           (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "43"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "notLeft" (formula "30"))
                           (rule "replace_known_left" (formula "34") (term "1") (ifseqformula "33"))
                            (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "41")))
                           (rule "true_left" (formula "34"))
                           (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "42"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "replace_known_right" (formula "29") (term "0,1") (ifseqformula "40"))
                            (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "41")))
                           (rule "true_left" (formula "29"))
                           (rule "replace_known_right" (formula "35") (term "0") (ifseqformula "39"))
                            (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "34")))
                           (rule "true_left" (formula "35"))
                           (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "39"))
                            (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "30")))
                           (rule "true_left" (formula "29"))
                           (rule "replace_known_right" (formula "32") (term "0") (ifseqformula "38"))
                            (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "33")))
                           (rule "true_left" (formula "32"))
                           (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "36")))
                           (rule "true_left" (formula "30"))
                           (rule "replace_known_right" (formula "28") (term "1") (ifseqformula "35"))
                            (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "36")))
                           (rule "true_left" (formula "28"))
                           (rule "equalityToSeqGetAndSeqLenRight" (formula "34") (inst "iv=iv"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,1"))
                           (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "17"))
                           (rule "applyEq" (formula "34") (term "0,1,0,0,1,0,0,1") (ifseqformula "17"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,1"))
                           (rule "mul_literals" (formula "34") (term "0,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,1"))
                           (rule "nnf_imp2or" (formula "34") (term "0,1"))
                           (rule "nnf_notAnd" (formula "34") (term "0,0,1"))
                           (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,1"))
                           (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0,1"))
                           (rule "add_zero_right" (formula "34") (term "0,0,0,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,1"))
                           (rule "mul_literals" (formula "34") (term "1,0,0,0,1"))
                           (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,1"))
                           (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,1"))
                           (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,1"))
                           (rule "add_zero_left" (formula "34") (term "0,0,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,1"))
                           (rule "shift_paren_and" (formula "9") (term "0,1,0,1,0"))
                           (rule "shift_paren_and" (formula "10") (term "0,1,0,1,0"))
                           (rule "shift_paren_and" (formula "9") (term "1,1,0,1,0"))
                           (rule "shift_paren_and" (formula "10") (term "1,1,0,1,0"))
                           (rule "allLeft" (formula "33") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                           (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                           (rule "applyEq" (formula "33") (term "1,1,0,0") (ifseqformula "15"))
                           (rule "applyEq" (formula "33") (term "1,0,0") (ifseqformula "3"))
                           (rule "inEqSimp_contradInEq1" (formula "33") (term "1,0") (ifseqformula "8"))
                           (rule "qeq_literals" (formula "33") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "14"))
                           (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                           (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "33") (term "0,0,1"))
                           (rule "leq_literals" (formula "33") (term "0,1"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "shift_paren_and" (formula "9") (term "1,0,1,0"))
                           (rule "shift_paren_and" (formula "10") (term "1,0,1,0"))
                           (rule "allLeft" (formula "26") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
                           (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "34"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "8"))
                           (rule "qeq_literals" (formula "26") (term "0,0"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_contradInEq1" (formula "26") (ifseqformula "14"))
                           (rule "andLeft" (formula "26"))
                           (rule "inEqSimp_homoInEq1" (formula "26"))
                           (rule "polySimp_pullOutFactor1b" (formula "26") (term "0"))
                           (rule "add_literals" (formula "26") (term "1,1,0"))
                           (rule "times_zero_1" (formula "26") (term "1,0"))
                           (rule "add_zero_right" (formula "26") (term "0"))
                           (rule "leq_literals" (formula "26"))
                           (rule "closeFalse" (formula "26"))
                        )
                     )
                     (branch "self.index >= 1 FALSE"
                        (rule "inEqSimp_geqRight" (formula "46"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_subsumption0" (formula "14") (ifseqformula "1"))
                        (rule "leq_literals" (formula "14") (term "0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "true_left" (formula "14"))
                        (rule "inEqSimp_antiSymm" (formula "9") (ifseqformula "1"))
                        (rule "applyEq" (formula "11") (term "1,1,0,0,1,0,1,0") (ifseqformula "9"))
                        (rule "applyEq" (formula "1") (term "0") (ifseqformula "9"))
                        (rule "leq_literals" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "8"))
                        (rule "applyEq" (formula "10") (term "1,1,0,1,1,0,1,0") (ifseqformula "8"))
                        (rule "applyEq" (formula "14") (term "1,1") (ifseqformula "8"))
                        (rule "add_literals" (formula "14") (term "1"))
                        (rule "applyEq" (formula "9") (term "0") (ifseqformula "8"))
                        (rule "qeq_literals" (formula "9"))
                        (rule "true_left" (formula "9"))
                        (rule "applyEq" (formula "12") (term "1,0") (ifseqformula "8"))
                        (rule "applyEq" (formula "9") (term "1,1,0,1,1,0,1,0,1,0") (ifseqformula "8"))
                        (rule "add_zero_right" (formula "9") (term "1,0,1,1,0,1,0,1,0"))
                        (rule "applyEq" (formula "11") (term "2,0") (ifseqformula "8"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "eqSymm" (formula "11"))
                        (rule "applyEq" (formula "9") (term "1,1,1,1,1,1,1,0,1,0") (ifseqformula "8"))
                        (rule "add_literals" (formula "9") (term "1,1,1,1,1,1,0,1,0"))
                        (rule "applyEq" (formula "38") (term "0,1") (ifseqformula "14"))
                        (rule "eqSymm" (formula "38") (term "1"))
                        (rule "applyEq" (formula "37") (term "0,1") (ifseqformula "14"))
                        (rule "eqSymm" (formula "37") (term "1"))
                        (rule "applyEq" (formula "36") (term "0,1") (ifseqformula "14"))
                        (rule "eqSymm" (formula "36") (term "1"))
                        (rule "applyEq" (formula "10") (term "0,0,1,1,0,0") (ifseqformula "8"))
                        (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                        (rule "add_zero_left" (formula "10") (term "1,1,0,0"))
                        (rule "applyEq" (formula "10") (term "0,0,1,1,0,0,1,1,0,1,0") (ifseqformula "8"))
                        (rule "times_zero_2" (formula "10") (term "0,1,1,0,0,1,1,0,1,0"))
                        (rule "add_zero_left" (formula "10") (term "1,1,0,0,1,1,0,1,0"))
                        (rule "applyEq" (formula "10") (term "0,1,0,1,1,1,1,1,1,0,1,0") (ifseqformula "8"))
                        (rule "times_zero_2" (formula "10") (term "1,0,1,1,1,1,1,1,0,1,0"))
                        (rule "add_zero_right" (formula "10") (term "0,1,1,1,1,1,1,0,1,0"))
                        (rule "applyEq" (formula "10") (term "0,0,1,1,0,0,1,0,1,0") (ifseqformula "8"))
                        (rule "times_zero_2" (formula "10") (term "0,1,1,0,0,1,0,1,0"))
                        (rule "add_zero_left" (formula "10") (term "1,1,0,0,1,0,1,0"))
                        (rule "applyEq" (formula "10") (term "0,1,0,0,0,0,0,0,1,0,1,0") (ifseqformula "8"))
                        (rule "add_zero_left" (formula "10") (term "1,0,0,0,0,0,0,1,0,1,0"))
                        (rule "applyEq" (formula "10") (term "0,1,0,1,0,1,1,0,1,0,1,0") (ifseqformula "8"))
                        (rule "times_zero_2" (formula "10") (term "1,0,1,0,1,1,0,1,0,1,0"))
                        (rule "add_zero_right" (formula "10") (term "0,1,0,1,1,0,1,0,1,0"))
                        (rule "applyEq" (formula "10") (term "0,1,1,1,0,1,1,0,1,0") (ifseqformula "8"))
                        (rule "add_zero_left" (formula "10") (term "1,1,1,0,1,1,0,1,0"))
                        (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "13"))
                        (rule "leq_literals" (formula "15") (term "0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "inEqSimp_or_tautInEq0" (formula "9") (term "0,0"))
                        (rule "add_zero_right" (formula "9") (term "1,1,0,0"))
                        (rule "qeq_literals" (formula "9") (term "1,0,0"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "true_left" (formula "9"))
                        (rule "commute_or" (formula "36"))
                        (rule "commute_or" (formula "35"))
                        (rule "commute_or" (formula "9") (term "0,1,0,1,0,1,0"))
                        (rule "all_pull_out3" (formula "41") (term "0"))
                        (rule "shift_paren_or" (formula "41") (term "0,0"))
                        (rule "shift_paren_or" (formula "41") (term "0,0,0"))
                        (rule "shift_paren_or" (formula "41") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "41") (term "0,0,0,0,0"))
                        (rule "commute_or_2" (formula "9") (term "0,1,1,0,1,0"))
                        (rule "cut_direct" (formula "28") (term "0,0"))
                        (branch "CUT: self.list.tail = null TRUE"
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "replace_known_left" (formula "31") (term "0,1") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "28")))
                           (rule "true_left" (formula "31"))
                           (rule "replace_known_left" (formula "38") (term "0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "true_left" (formula "38"))
                           (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "true_left" (formula "32"))
                           (rule "replace_known_left" (formula "34") (term "1") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "true_left" (formula "34"))
                           (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "replace_known_left" (formula "26") (term "0,1") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "true_left" (formula "35"))
                           (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "true_left" (formula "31"))
                           (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "26")))
                           (rule "true_left" (formula "25"))
                           (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "true_left" (formula "31"))
                           (rule "replace_known_left" (formula "28") (term "0,1") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "25")))
                           (rule "true_left" (formula "28"))
                           (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "25"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "25"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "25"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "applyEq" (formula "29") (term "0,1,0,1,0,0,0,0,0,0") (ifseqformula "27"))
                           (rule "applyEq" (formula "18") (term "0,1,0,1,0,0,0") (ifseqformula "27"))
                           (rule "applyEq" (formula "19") (term "0,1,0,0,0,0,0") (ifseqformula "27"))
                           (rule "applyEq" (formula "28") (term "0,1,0,0,0,0") (ifseqformula "27"))
                           (rule "applyEq" (formula "17") (term "0,0,0,0,0,0") (ifseqformula "27"))
                           (rule "applyEq" (formula "28") (term "0,1,0,0,0") (ifseqformula "27"))
                           (rule "applyEq" (formula "18") (term "0,0,0,0,0,0") (ifseqformula "27"))
                           (rule "applyEq" (formula "20") (term "0,0,0,0,0,0") (ifseqformula "27"))
                           (rule "applyEq" (formula "29") (term "0,0,0,1,0,0,0,0,0,0") (ifseqformula "27"))
                           (rule "applyEq" (formula "30") (term "0,1,1,0,0,0") (ifseqformula "27"))
                           (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "27"))
                           (rule "eqSymm" (formula "13"))
                           (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "eqSymm" (formula "14"))
                           (rule "applyEq" (formula "20") (term "1,1,0") (ifseqformula "14"))
                           (rule "applyEq" (formula "19") (term "1,1,0") (ifseqformula "14"))
                           (rule "applyEq" (formula "29") (term "1,1,0,0,0,0,0") (ifseqformula "14"))
                           (rule "applyEq" (formula "9") (term "1,1,0,0") (ifseqformula "14"))
                           (rule "applyEq" (formula "29") (term "1,1,0,0,0") (ifseqformula "14"))
                           (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "14"))
                           (rule "applyEq" (formula "30") (term "1,1,0") (ifseqformula "14"))
                           (rule "applyEq" (formula "28") (term "1,1,1,0") (ifseqformula "14"))
                           (rule "add_literals" (formula "28") (term "1,1,0"))
                           (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "14"))
                           (rule "applyEq" (formula "17") (term "1,1,0") (ifseqformula "14"))
                           (rule "applyEq" (formula "16") (term "0") (ifseqformula "14"))
                           (rule "leq_literals" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "applyEq" (formula "9") (term "1,1,0,1,1,0,1,0") (ifseqformula "14"))
                           (rule "applyEq" (formula "2") (term "1,0,1") (ifseqformula "13"))
                           (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "13"))
                           (rule "applyEq" (formula "9") (term "1,1,0,0,1,0,1,0") (ifseqformula "14"))
                           (rule "applyEq" (formula "11") (term "2,0") (ifseqformula "14"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "eqSymm" (formula "11"))
                           (rule "applyEq" (formula "12") (term "0") (ifseqformula "14"))
                           (rule "qeq_literals" (formula "12"))
                           (rule "closeFalse" (formula "12"))
                        )
                        (branch "CUT: self.list.tail = null FALSE"
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "replace_known_right" (formula "34") (term "1") (ifseqformula "42"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "42"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "notLeft" (formula "29"))
                           (rule "replace_known_right" (formula "36") (term "0") (ifseqformula "42"))
                            (builtin "One Step Simplification" (formula "36"))
                           (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "42"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "replace_known_right" (formula "27") (term "0,1") (ifseqformula "42"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "41"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "notLeft" (formula "25"))
                           (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "31"))
                            (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "40")))
                           (rule "true_left" (formula "32"))
                           (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "31"))
                            (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "38")))
                           (rule "true_left" (formula "30"))
                           (rule "replace_known_right" (formula "26") (term "0,1") (ifseqformula "38"))
                            (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "37")))
                           (rule "true_left" (formula "26"))
                           (rule "replace_known_right" (formula "32") (term "0") (ifseqformula "37"))
                            (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "31")))
                           (rule "true_left" (formula "32"))
                           (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "31"))
                            (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "35")))
                           (rule "true_left" (formula "30"))
                           (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "34")))
                           (rule "true_left" (formula "26"))
                           (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "34")))
                           (rule "true_left" (formula "27"))
                           (rule "replace_known_right" (formula "25") (term "0,0") (ifseqformula "32"))
                            (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "33")))
                           (rule "true_left" (formula "25"))
                           (rule "applyEq" (formula "31") (term "0") (ifseqformula "26"))
                           (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "31"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "equalityToSeqGetAndSeqLenRight" (formula "32") (inst "iv=iv"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,1"))
                           (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "14"))
                           (rule "applyEq" (formula "32") (term "0,1,0,0,1,0,0,1") (ifseqformula "14"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,1"))
                           (rule "mul_literals" (formula "32") (term "0,1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,1"))
                           (rule "inEqSimp_contradEq7" (formula "32") (term "0") (ifseqformula "12"))
                           (rule "times_zero_1" (formula "32") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "32") (term "0,0,0"))
                           (rule "leq_literals" (formula "32") (term "0,0"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "false_right" (formula "32"))
                           (rule "commute_or" (formula "29") (term "0,0,0,0,0,0"))
                           (rule "commute_or" (formula "9") (term "0,0,1,1,0,1,0"))
                           (rule "cnf_rightDist" (formula "9") (term "1,1,1,0,1,0"))
                           (rule "shift_paren_and" (formula "9") (term "0,1,0,1,0"))
                           (rule "commute_or" (formula "9") (term "1,1,1,1,0,1,0"))
                           (rule "allLeft" (formula "19") (inst "t=add(Z(neglit(1(#))),
    int::select(heap,
                LinkedList::select(heap,
                                   self,
                                   LinkedListIterator::$list),
                LinkedList::$size))"))
                           (rule "inEqSimp_homoInEq0" (formula "19") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,0,1,0"))
                           (rule "mul_literals" (formula "19") (term "0,1,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "19") (term "0,1,0"))
                           (rule "add_literals" (formula "19") (term "0,0,1,0"))
                           (rule "add_zero_left" (formula "19") (term "0,1,0"))
                           (rule "inEqSimp_homoInEq1" (formula "19") (term "1"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,1"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,0,1"))
                           (rule "mul_literals" (formula "19") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "19") (term "0,1"))
                           (rule "polySimp_addComm0" (formula "19") (term "0,0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,1"))
                           (rule "add_literals" (formula "19") (term "1,1,0,1"))
                           (rule "times_zero_1" (formula "19") (term "1,0,1"))
                           (rule "add_zero_right" (formula "19") (term "0,1"))
                           (rule "leq_literals" (formula "19") (term "1"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "applyEq" (formula "19") (term "1,0,0,0") (ifseqformula "28"))
                           (rule "inEqSimp_invertInEq1" (formula "19") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "0,1"))
                           (rule "times_zero_2" (formula "19") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "19") (term "0,1"))
                           (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "12"))
                           (rule "qeq_literals" (formula "19") (term "0,1"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "notLeft" (formula "19"))
                           (rule "allLeft" (formula "19") (inst "t=Z(0(#))"))
                           (rule "leq_literals" (formula "19") (term "1,0"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                           (rule "applyEq" (formula "19") (term "1,0,0,0") (ifseqformula "13"))
                           (rule "replace_known_left" (formula "19") (term "0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "inEqSimp_subsumption0" (formula "16") (ifseqformula "19"))
                           (rule "leq_literals" (formula "16") (term "0"))
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "18"))
                           (rule "qeq_literals" (formula "12") (term "0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "closeFalse" (formula "12"))
                        )
                     )
                  )
               )
            )
            (branch "Case 2"
               (rule "allRight" (formula "17") (inst "sk=f_0") (userinteraction))
               (rule "allRight" (formula "17") (inst "sk=o_0") (userinteraction))
               (rule "orRight" (formula "17") (userinteraction))
               (rule "orRight" (formula "17") (userinteraction))
               (rule "JML_represents_clause_for_LinkedListIterator_footprint" (formula "17") (term "2") (userinteraction))
               (rule "eqSymm" (formula "19"))
               (rule "eqSymm" (formula "13"))
               (rule "eqSymm" (formula "10"))
               (rule "eqSymm" (formula "11"))
               (rule "castedGetAny" (formula "13") (term "0"))
               (rule "lenOfSeqSubEQ" (formula "5") (term "0") (ifseqformula "11"))
               (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "12"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "polySimp_elimSub" (formula "5") (term "0"))
               (rule "polySimp_addComm0" (formula "5") (term "0"))
               (rule "lenOfSeqSubEQ" (formula "9") (term "1,1,0,0") (ifseqformula "11"))
               (rule "replace_known_left" (formula "9") (term "0,1,1,0,0") (ifseqformula "12"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "polySimp_elimSub" (formula "9") (term "1,1,0,0"))
               (rule "polySimp_addComm0" (formula "9") (term "1,1,0,0"))
               (rule "lenOfSeqSubEQ" (formula "8") (term "1,1,0,0") (ifseqformula "10"))
               (rule "polySimp_elimSub" (formula "8") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "8") (term "1,1,1,1,0,0"))
               (rule "add_zero_right" (formula "8") (term "1,1,1,0,0"))
               (rule "lenOfSeqSubEQ" (formula "19") (term "2,3,0,0") (ifseqformula "11"))
               (rule "replace_known_left" (formula "19") (term "0,2,3,0,0") (ifseqformula "12"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "polySimp_elimSub" (formula "19") (term "2,3,0,0"))
               (rule "polySimp_addComm0" (formula "19") (term "2,3,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "12"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "12") (term "0"))
               (rule "inEqSimp_gtToGeq" (formula "5"))
               (rule "times_zero_1" (formula "5") (term "1,0,0"))
               (rule "add_zero_right" (formula "5") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "5") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulAssoc" (formula "9") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "8") (term "0,1,1,0,0"))
               (rule "add_zero_right" (formula "8") (term "0,0,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "7"))
               (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "6"))
               (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "12"))
               (rule "polySimp_mulLiterals" (formula "12") (term "0"))
               (rule "polySimp_elimOne" (formula "12") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "5"))
               (rule "polySimp_mulComm0" (formula "5") (term "1"))
               (rule "polySimp_rightDist" (formula "5") (term "1"))
               (rule "mul_literals" (formula "5") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
               (rule "polySimp_elimOne" (formula "5") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
               (rule "polySimp_rightDist" (formula "8") (term "0,1,1,0,0"))
               (rule "mul_literals" (formula "8") (term "0,0,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
               (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,1,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "7") (term "0,0,1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "7") (term "0,0,1,1,1,0,0"))
               (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "11"))
               (rule "inEqSimp_homoInEq0" (formula "6") (term "0"))
               (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0"))
               (rule "add_literals" (formula "6") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "6") (term "1,0,0"))
               (rule "add_zero_right" (formula "6") (term "0,0"))
               (rule "qeq_literals" (formula "6") (term "0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "true_left" (formula "6"))
               (rule "elementOfUnion" (formula "15"))
               (rule "orRight" (formula "15"))
               (rule "elementOfSingleton" (formula "16"))
               (rule "getOfSeqSubEQ" (formula "6") (term "1,0,1,0,1,0") (ifseqformula "8"))
               (rule "castDel" (formula "6") (term "2,1,0,1,0,1,0"))
               (rule "add_zero_right" (formula "6") (term "1,1,1,0,1,0,1,0"))
               (rule "polySimp_elimSub" (formula "6") (term "1,1,0,1,0,1,0,1,0"))
               (rule "times_zero_2" (formula "6") (term "1,1,1,0,1,0,1,0,1,0"))
               (rule "add_zero_right" (formula "6") (term "1,1,0,1,0,1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,1,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,1,0,1,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,1,0,1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,1,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,1,0,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,1,0,1,0,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,1,0,1,0,1,0"))
               (rule "mul_literals" (formula "6") (term "0,1,1,0,1,0,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,1,0,1,0,1,0"))
               (rule "elementOfUnion" (formula "15"))
               (rule "orRight" (formula "15"))
               (rule "elementOfSingleton" (formula "16"))
               (rule "getOfSeqSubEQ" (formula "7") (term "1,0,1,0,1,0") (ifseqformula "9"))
               (rule "castDel" (formula "7") (term "2,1,0,1,0,1,0"))
               (rule "polySimp_elimSub" (formula "7") (term "1,1,0,1,0,1,0,1,0"))
               (rule "polySimp_addComm0" (formula "7") (term "1,1,1,0,1,0,1,0"))
               (rule "polySimp_addComm0" (formula "7") (term "1,1,0,1,0,1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,1,0,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,1,0,1,0,1,0"))
               (rule "polySimp_mulAssoc" (formula "7") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "7") (term "0,0,1,0,0,1,0,1,0,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "7") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "7") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
               (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,1,0,1,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,1,0,1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,1,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,1,0,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "7") (term "1,1,0,1,0,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,1,0,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,1,0,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "7") (term "0,1,1,0,1,0,1,0,1,0"))
               (rule "mul_literals" (formula "7") (term "0,0,1,1,0,1,0,1,0,1,0"))
               (rule "elementOfUnion" (formula "15"))
               (rule "orRight" (formula "15"))
               (rule "elementOfSingleton" (formula "16"))
               (rule "pullOutSelect" (formula "20") (term "0") (inst "selectSK=f_0_0"))
               (rule "simplifySelectOfStore" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "21"))
               (rule "eqSymm" (formula "1") (term "0,0,0"))
               (rule "eqSymm" (formula "1") (term "1,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "19"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "simplifySelectOfStore" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "1") (term "0,0,0"))
               (rule "eqSymm" (formula "1") (term "1,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "18"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "simplifySelectOfStore" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "1") (term "1,0,0"))
               (rule "eqSymm" (formula "1") (term "0,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "17"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "simplifySelectOfStore" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "1") (term "0,0,0"))
               (rule "eqSymm" (formula "1") (term "1,0,0"))
               (rule "elementOfUnion" (formula "16"))
               (rule "orRight" (formula "16"))
               (rule "elementOfSingleton" (formula "17"))
               (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "17"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "self.index < self.list.values.length FALSE"
            (rule "eqSymm" (formula "11"))
            (rule "eqSymm" (formula "10"))
            (rule "eqSymm" (formula "17") (term "0,0,0,0"))
            (rule "eqSymm" (formula "17") (term "1,0,0,1"))
            (rule "eqSymm" (formula "17") (term "1,0,0,0"))
            (rule "lenOfSeqSubEQ" (formula "5") (term "0") (ifseqformula "11"))
            (rule "replace_known_right" (formula "5") (term "0,0") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "irrflConcrete2" (formula "5"))
            (rule "closeFalse" (formula "5"))
         )
      )
      (branch "Null Reference (l = null)"
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
         (rule "false_right" (formula "9") (userinteraction))
         (rule "closeFalse" (formula "1") (userinteraction))
      )
   )
   (branch "Null Reference (n_2 = null)"
      (rule "false_right" (formula "9") (userinteraction))
       (builtin "One Step Simplification" (formula "1"))
      (rule "Class_invariant_axiom_for_LinkedListIterator" (formula "7") (inst "i=i") (inst "f=f") (inst "i_0=i_0") (inst "f_0=f_0") (userinteraction))
      (rule "andLeft" (formula "7"))
      (rule "notLeft" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "eqSymm" (formula "11"))
      (rule "eqSymm" (formula "13") (term "1"))
      (rule "eqSymm" (formula "12"))
      (rule "replace_known_left" (formula "13") (term "2") (ifseqformula "1"))
      (rule "castedGetAny" (formula "13") (term "0,1"))
      (rule "lenOfSeqSubEQ" (formula "6") (term "0") (ifseqformula "12"))
      (rule "polySimp_elimSub" (formula "6") (term "1,0"))
      (rule "polySimp_addComm0" (formula "6") (term "1,0"))
      (rule "lenOfSeqSubEQ" (formula "10") (term "1,1,0,0") (ifseqformula "12"))
      (rule "polySimp_elimSub" (formula "10") (term "1,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "10") (term "1,1,1,0,0"))
      (rule "lenOfSeqSubEQ" (formula "9") (term "1,1,0,0") (ifseqformula "11"))
      (rule "polySimp_elimSub" (formula "9") (term "1,1,1,0,0"))
      (rule "times_zero_2" (formula "9") (term "1,1,1,1,0,0"))
      (rule "add_zero_right" (formula "9") (term "1,1,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "13") (term "0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
      (rule "polySimp_addComm1" (formula "13") (term "0,0"))
      (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0"))
      (rule "polySimp_addComm1" (formula "6") (term "0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,1,0,0"))
      (rule "polySimp_addComm1" (formula "10") (term "0,0,1,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "9") (term "0,1,1,0,0"))
      (rule "add_zero_right" (formula "9") (term "0,0,1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,1,0,0"))
      (rule "inEqSimp_gtToGeq" (formula "6"))
      (rule "times_zero_1" (formula "6") (term "1,0,0"))
      (rule "add_zero_right" (formula "6") (term "0,0"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "8"))
      (rule "inEqSimp_commuteLeq" (formula "7"))
      (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
      (rule "applyEq" (formula "13") (term "1,1") (ifseqformula "1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "0,0"))
      (rule "polySimp_elimOne" (formula "13") (term "0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,1,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "0,0,1,0"))
      (rule "polySimp_elimOne" (formula "6") (term "0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,1,0,0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,1,0,0,1,0,0"))
      (rule "polySimp_elimOne" (formula "9") (term "0,0,0,1,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "6"))
      (rule "mul_literals" (formula "6") (term "1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,1,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "10") (term "0,0,1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
      (rule "getOfSeqSubEQ" (formula "10") (term "1,0,1,0,1,0") (ifseqformula "12"))
      (rule "castDel" (formula "10") (term "2,1,0,1,0,1,0"))
      (rule "polySimp_elimSub" (formula "10") (term "1,1,0,1,0,1,0,1,0"))
      (rule "polySimp_addComm0" (formula "10") (term "1,1,1,0,1,0,1,0"))
      (rule "polySimp_addComm0" (formula "10") (term "1,1,0,1,0,1,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,1,0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,1,0,1,0,1,0"))
      (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,0,1,0,1,0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "10") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,1,0,1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,1,0,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,1,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,1,0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,1,0,1,0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,1,0,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,1,0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "10") (term "0,1,1,0,1,0,1,0,1,0"))
      (rule "mul_literals" (formula "10") (term "0,0,1,1,0,1,0,1,0,1,0"))
      (rule "getOfSeqSubEQ" (formula "9") (term "1,0,1,0,1,0") (ifseqformula "11"))
      (rule "castDel" (formula "9") (term "2,1,0,1,0,1,0"))
      (rule "add_zero_right" (formula "9") (term "1,1,1,0,1,0,1,0"))
      (rule "polySimp_elimSub" (formula "9") (term "1,1,0,1,0,1,0,1,0"))
      (rule "mul_literals" (formula "9") (term "1,1,1,0,1,0,1,0,1,0"))
      (rule "add_zero_right" (formula "9") (term "1,1,0,1,0,1,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,1,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,1,0,1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,1,0,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,1,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,1,0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "9") (term "1,1,0,1,0,1,0,1,0"))
      (rule "mul_literals" (formula "9") (term "0,1,1,0,1,0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,1,0,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,1,0,1,0,1,0"))
      (rule "nnf_imp2or" (formula "10") (term "0"))
      (rule "nnf_imp2or" (formula "9") (term "0"))
      (rule "nnf_notAnd" (formula "10") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
      (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
      (rule "add_literals" (formula "10") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
      (rule "mul_literals" (formula "10") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
      (rule "nnf_notAnd" (formula "9") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
      (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
      (rule "add_literals" (formula "9") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
      (rule "mul_literals" (formula "9") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
      (rule "commute_and" (formula "10") (term "0,0,1,0"))
      (rule "commute_and" (formula "10") (term "1,0,1,0"))
      (rule "commute_and" (formula "9") (term "1,0,1,0"))
      (rule "commute_and" (formula "9") (term "0,0,1,0"))
      (rule "applyEq_and_gen2" (formula "10") (term "1,0,1,0"))
      (rule "ifEqualsNull" (formula "10") (term "0,0,1,0,1,0"))
      (rule "nnf_notOr" (formula "10") (term "0,1,0,1,0"))
      (rule "nnf_notAnd" (formula "10") (term "0,0,1,0,1,0"))
      (rule "nnf_notAnd" (formula "10") (term "1,0,1,0,1,0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "nnf_notAnd" (formula "10") (term "0,0,0,1,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,0,1,0,1,0"))
      (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0,0,1,0,1,0"))
      (rule "add_zero_right" (formula "10") (term "0,0,0,0,0,0,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,1,0,1,0"))
      (rule "mul_literals" (formula "10") (term "1,0,0,0,0,1,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "10") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
      (rule "mul_literals" (formula "10") (term "0,0,1,0,0,1,0,0,0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0,0,1,0,0,0,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,0,1,0,0,1,0,0,0,1,0,1,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0,1,0,1,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,1,0,0,0,1,0,1,0"))
      (rule "add_literals" (formula "10") (term "0,0,0,0,1,0,0,0,1,0,1,0"))
      (rule "add_zero_left" (formula "10") (term "0,0,0,1,0,0,0,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,0,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "0,1,1,0,0,0,1,0,1,0"))
      (rule "applyEq_and_gen2" (formula "9") (term "1,0,1,0"))
      (rule "ifEqualsNull" (formula "9") (term "0,0,1,0,1,0"))
      (rule "nnf_notOr" (formula "9") (term "0,1,0,1,0"))
      (rule "nnf_notAnd" (formula "9") (term "1,0,1,0,1,0"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "nnf_notAnd" (formula "9") (term "0,0,1,0,1,0"))
      (rule "nnf_notAnd" (formula "9") (term "0,0,0,1,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,0,1,0,1,0"))
      (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0,0,1,0,1,0"))
      (rule "add_zero_right" (formula "9") (term "0,0,0,0,0,0,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,1,0,1,0"))
      (rule "mul_literals" (formula "9") (term "1,0,0,0,0,1,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0,1,0,1,0"))
      (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
      (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0,1,0,1,0"))
      (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,0,1,0,1,0"))
      (rule "add_zero_left" (formula "9") (term "0,0,1,0,0,0,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,1,0,1,0"))
      (rule "commute_or" (formula "10") (term "1,0,1,0,1,0"))
      (rule "commute_or_2" (formula "10") (term "0,0,1,0,1,0"))
      (rule "commute_or" (formula "9") (term "1,0,1,0,1,0"))
      (rule "commute_or_2" (formula "9") (term "0,0,1,0,1,0"))
      (rule "ifthenelse_split_for" (formula "13"))
      (branch "self.list.values.length >= 1 + self.index TRUE"
         (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "13"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "replace_known_left" (formula "10") (term "0,1,1,0,0") (ifseqformula "13"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "inEqSimp_homoInEq1" (formula "6"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,0"))
         (rule "polySimp_mulAssoc" (formula "6") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,1,0"))
         (rule "polySimp_elimOne" (formula "6") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "6") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0"))
         (rule "polySimp_elimOne" (formula "6") (term "0"))
         (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "12"))
         (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
         (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
         (rule "add_literals" (formula "7") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "7") (term "1,0,0"))
         (rule "add_zero_right" (formula "7") (term "0,0"))
         (rule "qeq_literals" (formula "7") (term "0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "true_left" (formula "7"))
         (rule "commute_or" (formula "7") (term "0,0,0,1,0,1,0"))
         (rule "commute_or" (formula "8") (term "0,0,0,1,0,1,0"))
         (rule "equalityToSeqGetAndSeqLenLeft" (formula "9") (inst "iv=iv"))
         (rule "andLeft" (formula "9"))
         (rule "lenOfSeqSub" (formula "9") (term "0"))
         (rule "polySimp_elimSub" (formula "9") (term "1,0"))
         (rule "mul_literals" (formula "9") (term "1,1,0"))
         (rule "add_zero_right" (formula "9") (term "1,0"))
         (rule "lenOfSeqSub" (formula "10") (term "1,1,0,0"))
         (rule "polySimp_elimSub" (formula "10") (term "1,1,1,0,0"))
         (rule "times_zero_2" (formula "10") (term "1,1,1,1,0,0"))
         (rule "add_zero_right" (formula "10") (term "1,1,1,0,0"))
         (rule "lenOfSeqSubEQ" (formula "9") (term "1") (ifseqformula "11"))
         (rule "eqSymm" (formula "9"))
         (rule "polySimp_elimSub" (formula "9") (term "1,0"))
         (rule "mul_literals" (formula "9") (term "1,1,0"))
         (rule "add_zero_right" (formula "9") (term "1,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "0,1,1,0,0"))
         (rule "add_zero_right" (formula "9") (term "0,0,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
         (rule "applyEq" (formula "9") (term "0,0,1,0") (ifseqformula "10"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "equalityToSeqGetAndSeqLenLeft" (formula "10") (inst "iv=iv"))
         (rule "andLeft" (formula "10"))
         (rule "lenOfSeqSub" (formula "10") (term "0"))
         (rule "polySimp_elimSub" (formula "10") (term "1,0"))
         (rule "polySimp_addComm0" (formula "10") (term "1,0"))
         (rule "lenOfSeqSub" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_elimSub" (formula "11") (term "1,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "11") (term "1,1,1,0,0"))
         (rule "lenOfSeqSubEQ" (formula "10") (term "1") (ifseqformula "12"))
         (rule "eqSymm" (formula "10"))
         (rule "polySimp_elimSub" (formula "10") (term "1,0"))
         (rule "polySimp_addComm0" (formula "10") (term "1,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,1,0,0"))
         (rule "polySimp_addComm1" (formula "10") (term "0,0,1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
         (rule "applyEq" (formula "10") (term "0,0,1,0") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "lenNonNegative" (formula "10") (term "2,0"))
         (rule "inEqSimp_commuteLeq" (formula "10"))
         (rule "cnf_rightDist" (formula "7") (term "1,0,1,0,1,0"))
         (rule "cnf_rightDist" (formula "8") (term "1,0,1,0,1,0"))
         (rule "ifthenelse_to_or_right" (formula "7") (term "1,1,0,1,0"))
         (rule "nnf_notAnd" (formula "7") (term "0,0,1,1,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0,1,1,0,1,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,1,1,0,1,0"))
         (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0,1,1,0,1,0"))
         (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,1,1,0,1,0"))
         (rule "add_literals" (formula "7") (term "0,0,0,1,0,0,1,1,0,1,0"))
         (rule "add_zero_left" (formula "7") (term "0,0,1,0,0,1,1,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0,1,1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,1,1,0,1,0"))
         (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,1,1,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0,1,1,0,1,0"))
         (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0,1,1,0,1,0"))
         (rule "add_zero_right" (formula "7") (term "0,0,0,0,0,1,1,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0,1,1,0,1,0"))
         (rule "mul_literals" (formula "7") (term "1,0,0,0,1,1,0,1,0"))
         (rule "commute_or" (formula "7") (term "1,1,1,0,1,0"))
         (rule "ifthenelse_to_or_right" (formula "8") (term "1,1,0,1,0"))
         (rule "nnf_notAnd" (formula "8") (term "0,0,1,1,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0,1,1,0,1,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,1,1,0,1,0"))
         (rule "polySimp_rightDist" (formula "8") (term "0,1,0,0,1,0,0,1,1,0,1,0"))
         (rule "mul_literals" (formula "8") (term "0,0,1,0,0,1,0,0,1,1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0,0,1,0,0,1,1,0,1,0"))
         (rule "polySimp_elimOne" (formula "8") (term "1,0,1,0,0,1,0,0,1,1,0,1,0"))
         (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,1,1,0,1,0"))
         (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,1,0,0,1,1,0,1,0"))
         (rule "add_literals" (formula "8") (term "0,0,0,0,1,0,0,1,1,0,1,0"))
         (rule "add_zero_left" (formula "8") (term "0,0,0,1,0,0,1,1,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0,1,1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,1,1,0,1,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,1,1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,1,1,0,1,0"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,1,1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "0,1,1,0,0,1,1,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,1,1,0,1,0"))
         (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0,1,1,0,1,0"))
         (rule "add_zero_right" (formula "8") (term "0,0,0,0,0,1,1,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,1,1,0,1,0"))
         (rule "mul_literals" (formula "8") (term "1,0,0,0,1,1,0,1,0"))
         (rule "commute_or_2" (formula "7") (term "0,1,1,0,1,0"))
         (rule "commute_or" (formula "8") (term "1,1,1,0,1,0"))
         (rule "commute_or" (formula "7") (term "0,1,0,1,0,1,0"))
         (rule "commute_or" (formula "8") (term "0,1,0,1,0,1,0"))
         (rule "commute_or_2" (formula "8") (term "0,1,1,0,1,0"))
         (rule "ifthenelse_split" (formula "7") (term "1,1,0,0"))
         (branch "self.index >= 1 TRUE"
            (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "7"))
            (rule "leq_literals" (formula "6") (term "0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "commute_or" (formula "7") (term "0,0,1,1,0,1,0"))
            (rule "commute_or" (formula "8") (term "0,0,1,1,0,1,0"))
            (rule "cnf_rightDist" (formula "7") (term "1,1,1,0,1,0"))
            (rule "commute_or" (formula "7") (term "1,1,1,1,0,1,0"))
            (rule "cnf_rightDist" (formula "8") (term "1,1,1,0,1,0"))
            (rule "commute_or" (formula "8") (term "1,1,1,1,0,1,0"))
            (rule "shift_paren_and" (formula "7") (term "0,1,0,1,0"))
            (rule "shift_paren_and" (formula "8") (term "0,1,0,1,0"))
            (rule "shift_paren_and" (formula "7") (term "1,1,0,1,0"))
            (rule "shift_paren_and" (formula "7") (term "1,0,1,0"))
            (rule "shift_paren_and" (formula "8") (term "1,1,0,1,0"))
            (rule "shift_paren_and" (formula "8") (term "1,0,1,0"))
            (rule "shift_paren_and" (formula "7") (term "0,1,0,1,0"))
            (rule "shift_paren_and" (formula "7") (term "0,1,0"))
            (rule "shift_paren_and" (formula "7") (term "0,0,1,0"))
            (rule "shift_paren_and" (formula "8") (term "0,1,0,1,0"))
            (rule "shift_paren_and" (formula "8") (term "0,1,0"))
            (rule "shift_paren_and" (formula "8") (term "0,0,1,0"))
            (rule "shift_paren_and" (formula "7") (term "0,0,0,1,0"))
            (rule "shift_paren_and" (formula "8") (term "0,0,0,1,0"))
            (rule "seqGetAlphaCast" (formula "13") (term "0"))
            (rule "castedGetAny" (formula "13") (term "0"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "true_left" (formula "13"))
            (rule "shift_paren_and" (formula "7") (term "0,0,0,0,1,0"))
            (rule "shift_paren_and" (formula "8") (term "0,0,0,0,1,0"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "1,0,0") (ifseqformula "2"))
            (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "1") (term "0") (ifseqformula "2"))
            (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "shift_paren_and" (formula "7") (term "0,0,0,0,0,1,0"))
            (rule "ex_pull_out3" (formula "7") (term "0"))
            (rule "cnf_rightDist" (formula "7") (term "0,0"))
            (rule "shift_paren_or" (formula "7") (term "1,0,0"))
            (rule "commute_or_2" (formula "7") (term "0,1,0,0"))
            (rule "inEqSimp_or_tautInEq1" (formula "7") (term "1,0,0"))
            (rule "inEqSimp_homoInEq1" (formula "7") (term "1,1,0,0"))
            (rule "polySimp_pullOutFactor1" (formula "7") (term "0,1,1,0,0"))
            (rule "add_literals" (formula "7") (term "1,0,1,1,0,0"))
            (rule "times_zero_1" (formula "7") (term "0,1,1,0,0"))
            (rule "leq_literals" (formula "7") (term "1,1,0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "cnf_rightDist" (formula "7") (term "0,0"))
            (rule "shift_paren_or" (formula "7") (term "1,0,0"))
            (rule "inEqSimp_or_tautInEq3" (formula "7") (term "0,1,0,0"))
            (rule "add_zero_right" (formula "7") (term "1,1,0,1,0,0"))
            (rule "qeq_literals" (formula "7") (term "1,0,1,0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "cnf_rightDist" (formula "7") (term "0,0"))
            (rule "shift_paren_or" (formula "7") (term "1,0,0"))
            (rule "commute_or_2" (formula "7") (term "0,1,0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
            (rule "commute_or_2" (formula "7") (term "1,0,0,0"))
            (rule "shift_paren_or" (formula "7") (term "0,1,0,0,0"))
            (rule "commute_or" (formula "7") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_or_tautInEq1" (formula "7") (term "0,1,0,0,0"))
            (rule "inEqSimp_homoInEq1" (formula "7") (term "1,0,1,0,0,0"))
            (rule "polySimp_pullOutFactor1" (formula "7") (term "0,1,0,1,0,0,0"))
            (rule "add_literals" (formula "7") (term "1,0,1,0,1,0,0,0"))
            (rule "times_zero_1" (formula "7") (term "0,1,0,1,0,0,0"))
            (rule "leq_literals" (formula "7") (term "1,0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
            (rule "commute_or_2" (formula "7") (term "1,0,0,0"))
            (rule "shift_paren_or" (formula "7") (term "0,1,0,0,0"))
            (rule "inEqSimp_or_tautInEq2" (formula "7") (term "0,0,1,0,0,0"))
            (rule "add_zero_right" (formula "7") (term "1,1,0,0,1,0,0,0"))
            (rule "qeq_literals" (formula "7") (term "1,0,0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
            (rule "shift_paren_or" (formula "7") (term "1,0,0,0"))
            (rule "commute_or_2" (formula "7") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "cnf_rightDist" (formula "7") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "7") (term "0,0,0,0,0"))
            (rule "shift_paren_or" (formula "7") (term "1,0,0,0,0"))
            (rule "commute_or" (formula "7") (term "0,0,0,0,0,0"))
            (rule "shift_paren_and" (formula "8") (term "0,0,0,0,0,1,0"))
            (rule "ex_pull_out3" (formula "8") (term "0"))
            (rule "cnf_rightDist" (formula "8") (term "0,0"))
            (rule "shift_paren_or" (formula "8") (term "1,0,0"))
            (rule "commute_or_2" (formula "8") (term "0,1,0,0"))
            (rule "inEqSimp_or_tautInEq1" (formula "8") (term "1,0,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "1,1,1,0,0"))
            (rule "inEqSimp_homoInEq1" (formula "8") (term "1,1,0,0"))
            (rule "polySimp_pullOutFactor1" (formula "8") (term "0,1,1,0,0"))
            (rule "add_literals" (formula "8") (term "1,0,1,1,0,0"))
            (rule "times_zero_1" (formula "8") (term "0,1,1,0,0"))
            (rule "leq_literals" (formula "8") (term "1,1,0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "cnf_rightDist" (formula "8") (term "0,0"))
            (rule "shift_paren_or" (formula "8") (term "1,0,0"))
            (rule "inEqSimp_or_tautInEq3" (formula "8") (term "0,1,0,0"))
            (rule "add_zero_right" (formula "8") (term "1,1,0,1,0,0"))
            (rule "qeq_literals" (formula "8") (term "1,0,1,0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "cnf_rightDist" (formula "8") (term "0,0"))
            (rule "shift_paren_or" (formula "8") (term "1,0,0"))
            (rule "commute_or_2" (formula "8") (term "0,1,0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
            (rule "commute_or_2" (formula "8") (term "1,0,0,0"))
            (rule "shift_paren_or" (formula "8") (term "0,1,0,0,0"))
            (rule "commute_or" (formula "8") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_or_tautInEq1" (formula "8") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "1,1,0,1,0,0,0"))
            (rule "inEqSimp_homoInEq1" (formula "8") (term "1,0,1,0,0,0"))
            (rule "polySimp_pullOutFactor1" (formula "8") (term "0,1,0,1,0,0,0"))
            (rule "add_literals" (formula "8") (term "1,0,1,0,1,0,0,0"))
            (rule "times_zero_1" (formula "8") (term "0,1,0,1,0,0,0"))
            (rule "leq_literals" (formula "8") (term "1,0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
            (rule "commute_or_2" (formula "8") (term "1,0,0,0"))
            (rule "shift_paren_or" (formula "8") (term "0,1,0,0,0"))
            (rule "inEqSimp_or_tautInEq2" (formula "8") (term "0,0,1,0,0,0"))
            (rule "add_zero_right" (formula "8") (term "1,1,0,0,1,0,0,0"))
            (rule "qeq_literals" (formula "8") (term "1,0,0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
            (rule "shift_paren_or" (formula "8") (term "1,0,0,0"))
            (rule "commute_or_2" (formula "8") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "cnf_rightDist" (formula "8") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "8") (term "0,0,0,0,0"))
            (rule "shift_paren_or" (formula "8") (term "1,0,0,0,0"))
            (rule "commute_or" (formula "8") (term "0,0,0,0,0,0"))
            (rule "commute_and_2" (formula "7") (term "0,0,0"))
            (rule "commute_and_2" (formula "7") (term "0,0"))
            (rule "commute_and_2" (formula "8") (term "0,0,0"))
            (rule "commute_and_2" (formula "8") (term "0,0"))
            (rule "commute_and" (formula "7") (term "0,0,0,0"))
            (rule "commute_and" (formula "8") (term "0,0,0,0"))
            (rule "Partial_inv_axiom_for_JML_class_invariant_nr_2_in_LinkedList" (formula "15") (inst "i=i") (inst "i_0=i_0") (inst "j=j") (inst "i_1=i_1") (inst "i_2=i_2") (inst "f=f") (inst "i_3=i_3") (inst "n=n_3"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "translateJavaSubInt" (formula "15") (term "1,0,1,1,1,1,0,0,0"))
            (rule "translateJavaSubInt" (formula "15") (term "1,1,0,0,1,0,0"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "15"))
            (rule "eqSymm" (formula "22") (term "1,1,0,1,0"))
            (rule "eqSymm" (formula "22") (term "0,1,0,1,0"))
            (rule "eqSymm" (formula "21") (term "1,0"))
            (rule "eqSymm" (formula "20") (term "1,1"))
            (rule "eqSymm" (formula "20") (term "1,0,1"))
            (rule "eqSymm" (formula "16"))
            (rule "polySimp_elimSub" (formula "21") (term "1,1,0,0"))
            (rule "mul_literals" (formula "21") (term "1,1,1,0,0"))
            (rule "polySimp_elimSub" (formula "20") (term "1,0,0,1,1"))
            (rule "mul_literals" (formula "20") (term "1,1,0,0,1,1"))
            (rule "polySimp_addComm0" (formula "21") (term "1,0,0,1,0"))
            (rule "polySimp_addComm0" (formula "21") (term "1,1,0,0"))
            (rule "polySimp_addComm0" (formula "20") (term "1,0,0,1,1"))
            (rule "castedGetAny" (formula "23") (term "1,1,1,0"))
            (rule "castedGetAny" (formula "22") (term "1,0,1,0,1,0"))
            (rule "castedGetAny" (formula "22") (term "0,0,1,0,1,0"))
            (rule "castedGetAny" (formula "21") (term "1,1,1,0"))
            (rule "castedGetAny" (formula "20") (term "0,1,0,1"))
            (rule "castedGetAny" (formula "21") (term "0,1,0"))
            (rule "eqSymm" (formula "21") (term "1,0"))
            (rule "castedGetAny" (formula "20") (term "0,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
            (rule "applyEq" (formula "20") (term "1,1,0,1,1") (ifseqformula "15"))
            (rule "applyEq" (formula "8") (term "1,1,1,1,0,0") (ifseqformula "16"))
            (rule "applyEq" (formula "13") (term "0") (ifseqformula "16"))
            (rule "applyEq" (formula "12") (term "2,0") (ifseqformula "16"))
            (rule "applyEq" (formula "8") (term "1,1,1,1,0,0,0,0") (ifseqformula "16"))
            (rule "applyEq" (formula "17") (term "0") (ifseqformula "15"))
            (rule "applyEq" (formula "8") (term "1,1,1,1,0,0,0") (ifseqformula "16"))
            (rule "applyEq" (formula "8") (term "1,1,1,0,0,0,0,0") (ifseqformula "16"))
            (rule "applyEq" (formula "11") (term "0") (ifseqformula "16"))
            (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
            (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
            (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
            (rule "applyEq" (formula "21") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
            (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "15"))
            (rule "applyEq" (formula "16") (term "1") (ifseqformula "15"))
            (rule "applyEq" (formula "18") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
            (rule "applyEq" (formula "13") (term "0") (ifseqformula "15"))
            (rule "applyEq" (formula "12") (term "2,0") (ifseqformula "15"))
            (rule "applyEq" (formula "8") (term "1,1,1,1,0,0,0,0") (ifseqformula "15"))
            (rule "applyEq" (formula "8") (term "1,1,1,1,0,0") (ifseqformula "15"))
            (rule "applyEq" (formula "11") (term "0") (ifseqformula "15"))
            (rule "applyEq" (formula "8") (term "1,1,1,1,0,0,0") (ifseqformula "15"))
            (rule "applyEq" (formula "8") (term "1,1,1,0,0,0,0,0") (ifseqformula "15"))
            (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
            (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
            (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,1,0"))
            (rule "mul_literals" (formula "22") (term "0,1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
            (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "17"))
            (rule "polySimp_rightDist" (formula "13") (term "0,0"))
            (rule "mul_literals" (formula "13") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "13") (term "0"))
            (rule "add_literals" (formula "13") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "13"))
            (rule "polySimp_mulLiterals" (formula "13") (term "0"))
            (rule "polySimp_elimOne" (formula "13") (term "0"))
            (rule "nnf_imp2or" (formula "23") (term "1,0,1,0"))
            (rule "nnf_imp2or" (formula "22") (term "0"))
            (rule "nnf_imp2or" (formula "19") (term "0"))
            (rule "nnf_imp2or" (formula "20") (term "0"))
            (rule "nnf_imp2or" (formula "24") (term "0"))
            (rule "nnf_imp2or" (formula "23") (term "0"))
            (rule "nnf_notAnd" (formula "22") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
            (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
            (rule "mul_literals" (formula "22") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "19") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
            (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
            (rule "mul_literals" (formula "19") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "20") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
            (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
            (rule "mul_literals" (formula "20") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "24") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
            (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
            (rule "mul_literals" (formula "24") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "23") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
            (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
            (rule "mul_literals" (formula "23") (term "1,0,0,0"))
            (rule "nnf_imp2or" (formula "23") (term "0,1,0"))
            (rule "nnf_notAnd" (formula "23") (term "0,0,1,0"))
            (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,1,0"))
            (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,1,0"))
            (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0,1,0"))
            (rule "add_zero_right" (formula "23") (term "0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,1,0"))
            (rule "mul_literals" (formula "23") (term "1,0,0,0,1,0"))
            (rule "commute_and" (formula "21") (term "0,0"))
            (rule "commute_and" (formula "21") (term "0,0,0,0,1"))
            (rule "commute_or_2" (formula "22") (term "0"))
            (rule "commute_or_2" (formula "24") (term "0"))
            (rule "commute_and" (formula "19") (term "1,0,1,0"))
            (rule "commute_and" (formula "19") (term "0,0,1,0"))
            (rule "commute_and" (formula "20") (term "0,0,1,0"))
            (rule "commute_and" (formula "20") (term "1,0,1,0"))
            (rule "commute_or" (formula "22") (term "0,0"))
            (rule "commute_or" (formula "24") (term "0,0"))
            (rule "commute_and_2" (formula "21") (term "0"))
            (rule "cnf_rightDist" (formula "21"))
            (rule "andLeft" (formula "21"))
            (rule "cnf_rightDist" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "cnf_rightDist" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "commute_or" (formula "22"))
            (rule "cnf_rightDist" (formula "21"))
            (rule "andLeft" (formula "21"))
            (rule "cnf_rightDist" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "cnf_rightDist" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "commute_or" (formula "22"))
            (rule "shift_paren_or" (formula "29") (term "0,1,0"))
            (rule "cnf_rightDist" (formula "21"))
            (rule "andLeft" (formula "21"))
            (rule "cnf_rightDist" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "commute_or" (formula "23"))
            (rule "cnf_rightDist" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "commute_or" (formula "22"))
            (rule "commute_and_2" (formula "21") (term "1"))
            (rule "cnf_rightDist" (formula "21"))
            (rule "andLeft" (formula "21"))
            (rule "cnf_rightDist" (formula "22"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "cnf_rightDist" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "commute_or" (formula "22"))
            (rule "cnf_rightDist" (formula "21"))
            (rule "andLeft" (formula "21"))
            (rule "commute_or" (formula "21"))
            (rule "cnf_rightDist" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "commute_or" (formula "23"))
            (rule "cnf_rightDist" (formula "21"))
            (rule "andLeft" (formula "21"))
            (rule "commute_or" (formula "22"))
            (rule "cnf_rightDist" (formula "23"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "commute_or" (formula "23"))
            (rule "cnf_rightDist" (formula "21"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "commute_or" (formula "21"))
            (rule "commute_or_2" (formula "37") (term "0,0,1,0"))
            (rule "applyEq_and_gen2" (formula "20") (term "1,0,1,0"))
            (rule "lenNonNegative" (formula "16") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "16"))
            (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
            (rule "shift_paren_and" (formula "19") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "castedGetAny" (formula "19") (term "1,0,0,1,0,1,0"))
            (rule "castedGetAny" (formula "19") (term "1,0,1,1,0,0,1,0"))
            (rule "castedGetAny" (formula "19") (term "0,0,0,0,0,1,0"))
            (rule "castedGetAny" (formula "19") (term "0,0,1,0,0,1,0"))
            (rule "cnf_rightDist" (formula "19") (term "0"))
            (rule "distr_forallAnd" (formula "19"))
            (rule "andLeft" (formula "19"))
            (rule "shift_paren_or" (formula "20") (term "0"))
            (rule "cnf_rightDist" (formula "19") (term "0"))
            (rule "distr_forallAnd" (formula "19"))
            (rule "andLeft" (formula "19"))
            (rule "shift_paren_or" (formula "20") (term "0"))
            (rule "cnf_rightDist" (formula "19") (term "0"))
            (rule "distr_forallAnd" (formula "19"))
            (rule "andLeft" (formula "19"))
            (rule "commute_or_2" (formula "19") (term "0"))
            (rule "shift_paren_or" (formula "20") (term "0"))
            (rule "commute_or" (formula "19") (term "0,0"))
            (rule "commute_or" (formula "40") (term "0,0,0,1,0"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "12") (inst "iv=iv"))
            (rule "andLeft" (formula "12"))
            (rule "lenOfSeqSub" (formula "12") (term "0"))
            (rule "polySimp_elimSub" (formula "12") (term "1,0"))
            (rule "polySimp_addComm0" (formula "12") (term "1,0"))
            (rule "lenOfSeqSub" (formula "13") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "13") (term "1,1,1,0,0"))
            (rule "polySimp_addComm0" (formula "13") (term "1,1,1,0,0"))
            (rule "lenOfSeqSubEQ" (formula "12") (term "1") (ifseqformula "14"))
            (rule "eqSymm" (formula "12"))
            (rule "polySimp_elimSub" (formula "12") (term "1,0"))
            (rule "polySimp_addComm0" (formula "12") (term "1,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "true_left" (formula "12"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,1,0,0"))
            (rule "polySimp_addComm1" (formula "12") (term "0,0,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
            (rule "applyEq" (formula "12") (term "0,0,1,0") (ifseqformula "13"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "true_left" (formula "12"))
            (rule "shift_paren_and" (formula "23") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "castedGetAny" (formula "23") (term "0,0,0,0,0,1,0"))
            (rule "castedGetAny" (formula "23") (term "1,0,1,1,0,0,1,0"))
            (rule "castedGetAny" (formula "23") (term "0,0,1,0,0,1,0"))
            (rule "cnf_rightDist" (formula "23") (term "0"))
            (rule "distr_forallAnd" (formula "23"))
            (rule "andLeft" (formula "23"))
            (rule "shift_paren_or" (formula "24") (term "0"))
            (rule "cnf_rightDist" (formula "23") (term "0"))
            (rule "distr_forallAnd" (formula "23"))
            (rule "andLeft" (formula "23"))
            (rule "shift_paren_or" (formula "24") (term "0"))
            (rule "cnf_rightDist" (formula "23") (term "0"))
            (rule "distr_forallAnd" (formula "23"))
            (rule "andLeft" (formula "23"))
            (rule "commute_or_2" (formula "23") (term "0"))
            (rule "shift_paren_or" (formula "24") (term "0"))
            (rule "commute_or" (formula "23") (term "0,0"))
            (rule "all_pull_out3" (formula "43") (term "0"))
            (rule "shift_paren_or" (formula "43") (term "0,0"))
            (rule "shift_paren_or" (formula "43") (term "0,0,0"))
            (rule "shift_paren_or" (formula "43") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "43") (term "0,0,0,0,0"))
            (rule "commute_or" (formula "43") (term "0,0,0,0,0,0"))
            (rule "cut_direct" (formula "30") (term "0,0"))
            (branch "CUT: self.list.tail = null TRUE"
                (builtin "One Step Simplification" (formula "31"))
               (rule "replace_known_left" (formula "41") (term "0") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "41"))
               (rule "true_left" (formula "41"))
               (rule "replace_known_left" (formula "27") (term "1") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "true_left" (formula "27"))
               (rule "replace_known_left" (formula "35") (term "1") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "35"))
               (rule "true_left" (formula "35"))
               (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "29"))
                (builtin "One Step Simplification" (formula "34"))
               (rule "true_left" (formula "34"))
               (rule "replace_known_left" (formula "38") (term "0") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "38"))
               (rule "true_left" (formula "38"))
               (rule "replace_known_left" (formula "31") (term "0,1") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "31"))
               (rule "replace_known_left" (formula "36") (term "0") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "36"))
               (rule "true_left" (formula "36"))
               (rule "replace_known_left" (formula "32") (term "0,1") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "29")))
               (rule "true_left" (formula "32"))
               (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "29"))
                (builtin "One Step Simplification" (formula "34"))
               (rule "true_left" (formula "34"))
               (rule "replace_known_left" (formula "28") (term "0,1") (ifseqformula "29"))
                (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "31")))
               (rule "true_left" (formula "28"))
               (rule "replace_known_left" (formula "27") (term "1") (ifseqformula "29"))
                (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "30")))
               (rule "true_left" (formula "27"))
               (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "29"))
                (builtin "One Step Simplification" (formula "32"))
               (rule "true_left" (formula "32"))
               (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "29"))
                (builtin "One Step Simplification" (formula "31"))
               (rule "true_left" (formula "31"))
               (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "29"))
                (builtin "One Step Simplification" (formula "30"))
               (rule "true_left" (formula "30"))
               (rule "applyEq" (formula "31") (term "0,1,0,0,0,0,0,0,0,0") (ifseqformula "28"))
               (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "28"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "eqSymm" (formula "16"))
               (rule "applyEq" (formula "30") (term "0,1,0,0,0") (ifseqformula "28"))
               (rule "applyEq" (formula "30") (term "0,1,0,0,0,0") (ifseqformula "28"))
               (rule "applyEq" (formula "21") (term "0,1,0,0,0,0,0") (ifseqformula "28"))
               (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "28"))
               (rule "applyEq" (formula "20") (term "0,0,0,0,0,0") (ifseqformula "28"))
               (rule "applyEq" (formula "32") (term "0,1,1,0,0,0") (ifseqformula "28"))
               (rule "applyEq" (formula "20") (term "0,1,0,1,0,0,0") (ifseqformula "28"))
               (rule "applyEq" (formula "31") (term "0,0,0,0,0,0,0,0,0,0") (ifseqformula "28"))
               (rule "applyEq" (formula "22") (term "0,0,0,0,0,0") (ifseqformula "28"))
               (rule "applyEq" (formula "19") (term "0,0,0,0,0,0") (ifseqformula "28"))
               (rule "applyEq" (formula "31") (term "1,1,0,0,0,0,0") (ifseqformula "16"))
               (rule "applyEq" (formula "12") (term "2,0") (ifseqformula "16"))
               (rule "applyEq" (formula "18") (term "0") (ifseqformula "16"))
               (rule "leq_literals" (formula "18"))
               (rule "true_left" (formula "18"))
               (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "16"))
               (rule "applyEq" (formula "8") (term "1,1,1,1,0,0") (ifseqformula "16"))
               (rule "add_zero_right" (formula "8") (term "1,1,1,0,0"))
               (rule "applyEq" (formula "11") (term "0") (ifseqformula "16"))
               (rule "qeq_literals" (formula "11"))
               (rule "true_left" (formula "11"))
               (rule "applyEq" (formula "18") (term "1,1,0") (ifseqformula "15"))
               (rule "applyEq" (formula "8") (term "1,1,1,0,0,0,0,0") (ifseqformula "15"))
               (rule "add_zero_right" (formula "8") (term "1,1,0,0,0,0,0"))
               (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "15"))
               (rule "applyEq" (formula "8") (term "1,1,1,1,0,0,0") (ifseqformula "15"))
               (rule "add_zero_right" (formula "8") (term "1,1,1,0,0,0"))
               (rule "applyEq" (formula "23") (term "1,1,0") (ifseqformula "15"))
               (rule "applyEq" (formula "17") (term "1,1,0") (ifseqformula "15"))
               (rule "applyEq" (formula "20") (term "1,1,0") (ifseqformula "15"))
               (rule "applyEq" (formula "29") (term "1,1,0,0,0") (ifseqformula "15"))
               (rule "applyEq" (formula "30") (term "1,1,0") (ifseqformula "15"))
               (rule "applyEq" (formula "13") (term "0") (ifseqformula "15"))
               (rule "inEqSimp_homoInEq1" (formula "13"))
               (rule "mul_literals" (formula "13") (term "1,0"))
               (rule "add_zero_right" (formula "13") (term "0"))
               (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "15"))
               (rule "applyEq" (formula "8") (term "1,1,1,1,0,0,0,0") (ifseqformula "15"))
               (rule "add_zero_right" (formula "8") (term "1,1,1,0,0,0,0"))
               (rule "applyEq" (formula "28") (term "1,1,1,0") (ifseqformula "15"))
               (rule "add_zero_right" (formula "28") (term "1,1,0"))
               (rule "applyEq" (formula "19") (term "1,1,0") (ifseqformula "15"))
               (rule "applyEq" (formula "16") (term "1") (ifseqformula "15"))
               (rule "inEqSimp_sepPosMonomial0" (formula "13"))
               (rule "mul_literals" (formula "13") (term "1"))
               (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "13"))
               (rule "qeq_literals" (formula "6") (term "0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "closeFalse" (formula "6"))
            )
            (branch "CUT: self.list.tail = null FALSE"
                (builtin "One Step Simplification" (formula "30"))
               (rule "true_left" (formula "30"))
               (rule "replace_known_right" (formula "36") (term "0") (ifseqformula "45"))
                (builtin "One Step Simplification" (formula "36"))
               (rule "replace_known_right" (formula "33") (term "0") (ifseqformula "45"))
                (builtin "One Step Simplification" (formula "33"))
               (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "45"))
                (builtin "One Step Simplification" (formula "31"))
               (rule "notLeft" (formula "31"))
               (rule "replace_known_right" (formula "27") (term "1") (ifseqformula "45"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "notLeft" (formula "27"))
               (rule "replace_known_right" (formula "28") (term "0,1") (ifseqformula "45"))
                (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "43")))
               (rule "true_left" (formula "28"))
               (rule "replace_known_right" (formula "36") (term "0") (ifseqformula "44"))
                (builtin "One Step Simplification" (formula "36"))
               (rule "replace_known_left" (formula "34") (term "1") (ifseqformula "33"))
                (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "43")))
               (rule "true_left" (formula "34"))
               (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "33"))
                (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "41")))
               (rule "true_left" (formula "32"))
               (rule "replace_known_right" (formula "35") (term "0") (ifseqformula "41"))
                (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "34")))
               (rule "true_left" (formula "35"))
               (rule "replace_known_right" (formula "27") (term "1") (ifseqformula "40"))
                (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "39")))
               (rule "true_left" (formula "27"))
               (rule "replace_known_right" (formula "30") (term "1") (ifseqformula "39"))
                (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "29")))
               (rule "true_left" (formula "30"))
               (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "37"))
                (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "32")))
               (rule "true_left" (formula "31"))
               (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "29"))
                (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "36")))
               (rule "true_left" (formula "28"))
               (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "35"))
                (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "36")))
               (rule "true_left" (formula "27"))
               (rule "equalityToSeqGetAndSeqLenRight" (formula "35") (inst "iv=iv"))
                (builtin "One Step Simplification" (formula "35"))
               (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1"))
               (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1"))
               (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "16"))
               (rule "applyEq" (formula "35") (term "0,1,0,0,1,0,0,1") (ifseqformula "16"))
               (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1"))
               (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1"))
               (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1"))
               (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1"))
               (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1"))
               (rule "nnf_imp2or" (formula "35") (term "0,1"))
               (rule "nnf_notAnd" (formula "35") (term "0,0,1"))
               (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,1"))
               (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0,1"))
               (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,1"))
               (rule "mul_literals" (formula "35") (term "1,0,0,0,1"))
               (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,1"))
               (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1"))
               (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1"))
               (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1"))
               (rule "add_zero_left" (formula "35") (term "0,0,1,0,0,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,1"))
               (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,1"))
               (rule "allLeft" (formula "19") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
               (rule "replace_known_left" (formula "19") (term "0,0,0") (ifseqformula "15"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "19") (term "0") (ifseqformula "6"))
               (rule "qeq_literals" (formula "19") (term "0,0"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "inEqSimp_contradInEq0" (formula "14") (ifseqformula "19"))
               (rule "andLeft" (formula "14"))
               (rule "inEqSimp_homoInEq1" (formula "14"))
               (rule "polySimp_pullOutFactor1b" (formula "14") (term "0"))
               (rule "add_literals" (formula "14") (term "1,1,0"))
               (rule "times_zero_1" (formula "14") (term "1,0"))
               (rule "add_zero_right" (formula "14") (term "0"))
               (rule "leq_literals" (formula "14"))
               (rule "closeFalse" (formula "14"))
            )
         )
         (branch "self.index >= 1 FALSE"
            (rule "inEqSimp_geqRight" (formula "15"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_antiSymm" (formula "7") (ifseqformula "1"))
            (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "applyEq" (formula "8") (term "0") (ifseqformula "7"))
            (rule "qeq_literals" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "7"))
            (rule "applyEq" (formula "1") (term "0") (ifseqformula "7"))
            (rule "leq_literals" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "applyEq" (formula "7") (term "1,1,0,1,1,0,1,0,1,0") (ifseqformula "6"))
            (rule "add_literals" (formula "7") (term "1,0,1,1,0,1,0,1,0"))
            (rule "applyEq" (formula "7") (term "1,1,0,0,1,0,1,0") (ifseqformula "6"))
            (rule "applyEq" (formula "12") (term "1,1") (ifseqformula "6"))
            (rule "add_zero_right" (formula "12") (term "1"))
            (rule "applyEq" (formula "9") (term "2,0") (ifseqformula "6"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "eqSymm" (formula "9"))
            (rule "applyEq" (formula "7") (term "1,1,0,1,1,0,1,0") (ifseqformula "6"))
            (rule "applyEq" (formula "7") (term "1,1,1,1,1,1,1,0,1,0") (ifseqformula "6"))
            (rule "add_zero_right" (formula "7") (term "1,1,1,1,1,1,0,1,0"))
            (rule "applyEq" (formula "8") (term "0,1,1,1,0,0,1,0,1,0") (ifseqformula "11"))
            (rule "applyEq" (formula "8") (term "0,1,1,1,0,0") (ifseqformula "11"))
            (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "11"))
            (rule "applyEq" (formula "8") (term "0,0,0,0,0,0,0,1,0,1,0") (ifseqformula "11"))
            (rule "applyEq" (formula "8") (term "0,1,1,1,0,1,1,0,1,0") (ifseqformula "11"))
            (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "11"))
            (rule "applyEq" (formula "7") (term "0,1,1,0,0,1,1,0,1,0") (ifseqformula "11"))
            (rule "applyEq" (formula "7") (term "0,0,0,0,0,0,0,1,0,1,0") (ifseqformula "11"))
            (rule "applyEq" (formula "8") (term "0,1,1,1,1,1,1,1,0,1,0") (ifseqformula "11"))
            (rule "applyEq" (formula "8") (term "0,1,1,0,0,1,1,0,1,0") (ifseqformula "11"))
            (rule "applyEq" (formula "8") (term "0,1,1,0,1,1,0,1,0,1,0") (ifseqformula "11"))
            (rule "applyEq" (formula "8") (term "0,1,0,0,0,0,0,0,1,0,1,0") (ifseqformula "6"))
            (rule "add_zero_left" (formula "8") (term "1,0,0,0,0,0,0,1,0,1,0"))
            (rule "applyEq" (formula "8") (term "0,0,1,1,0,1,1,0,1,0") (ifseqformula "6"))
            (rule "times_zero_2" (formula "8") (term "0,1,1,0,1,1,0,1,0"))
            (rule "add_zero_left" (formula "8") (term "1,1,0,1,1,0,1,0"))
            (rule "applyEq" (formula "8") (term "0,0,1,1,0,0") (ifseqformula "6"))
            (rule "times_zero_2" (formula "8") (term "0,1,1,0,0"))
            (rule "add_zero_left" (formula "8") (term "1,1,0,0"))
            (rule "applyEq" (formula "8") (term "0,0,1,1,0,0,1,0,1,0") (ifseqformula "6"))
            (rule "times_zero_2" (formula "8") (term "0,1,1,0,0,1,0,1,0"))
            (rule "add_zero_left" (formula "8") (term "1,1,0,0,1,0,1,0"))
            (rule "applyEq" (formula "8") (term "0,1,0,1,0,1,1,0,1,0,1,0") (ifseqformula "6"))
            (rule "times_zero_2" (formula "8") (term "1,0,1,0,1,1,0,1,0,1,0"))
            (rule "add_zero_right" (formula "8") (term "0,1,0,1,1,0,1,0,1,0"))
            (rule "applyEq" (formula "8") (term "0,1,0,1,1,1,1,1,1,0,1,0") (ifseqformula "6"))
            (rule "times_zero_2" (formula "8") (term "1,0,1,1,1,1,1,1,0,1,0"))
            (rule "add_literals" (formula "8") (term "0,1,1,1,1,1,1,0,1,0"))
            (rule "applyEq" (formula "8") (term "0,1,1,1,0,0,1,1,0,1,0") (ifseqformula "6"))
            (rule "add_zero_left" (formula "8") (term "1,1,1,0,0,1,1,0,1,0"))
            (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "12"))
            (rule "leq_literals" (formula "10") (term "0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "inEqSimp_or_tautInEq0" (formula "7") (term "0,0"))
            (rule "add_zero_right" (formula "7") (term "1,1,0,0"))
            (rule "qeq_literals" (formula "7") (term "1,0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "true_left" (formula "7"))
            (rule "commute_or" (formula "7") (term "0,0,1,1,0,1,0"))
            (rule "cnf_rightDist" (formula "7") (term "1,1,1,0,1,0"))
            (rule "commute_or" (formula "7") (term "1,1,1,1,0,1,0"))
            (rule "shift_paren_and" (formula "7") (term "0,1,0,1,0"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "0") (ifseqformula "2"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "2") (term "0") (ifseqformula "3"))
            (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "shift_paren_and" (formula "8") (term "1,1,0,1,0"))
            (rule "shift_paren_and" (formula "8") (term "1,0,1,0"))
            (rule "shift_paren_and" (formula "8") (term "0,1,0,1,0"))
            (rule "shift_paren_and" (formula "8") (term "0,1,0"))
            (rule "shift_paren_and" (formula "8") (term "0,0,1,0"))
            (rule "shift_paren_and" (formula "8") (term "0,0,0,1,0"))
            (rule "shift_paren_and" (formula "8") (term "0,0,0,0,1,0"))
            (rule "shift_paren_and" (formula "8") (term "0,0,0,0,0,1,0"))
            (rule "ex_pull_out3" (formula "8") (term "0"))
            (rule "cnf_rightDist" (formula "8") (term "0,0"))
            (rule "shift_paren_or" (formula "8") (term "1,0,0"))
            (rule "commute_or_2" (formula "8") (term "0,1,0,0"))
            (rule "inEqSimp_or_tautInEq1" (formula "8") (term "1,0,0"))
            (rule "inEqSimp_homoInEq1" (formula "8") (term "1,1,0,0"))
            (rule "polySimp_pullOutFactor1" (formula "8") (term "0,1,1,0,0"))
            (rule "add_literals" (formula "8") (term "1,0,1,1,0,0"))
            (rule "times_zero_1" (formula "8") (term "0,1,1,0,0"))
            (rule "leq_literals" (formula "8") (term "1,1,0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "cnf_rightDist" (formula "8") (term "0,0"))
            (rule "shift_paren_or" (formula "8") (term "1,0,0"))
            (rule "inEqSimp_or_tautInEq3" (formula "8") (term "0,1,0,0"))
            (rule "add_zero_right" (formula "8") (term "1,1,0,1,0,0"))
            (rule "qeq_literals" (formula "8") (term "1,0,1,0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "cnf_rightDist" (formula "8") (term "0,0"))
            (rule "shift_paren_or" (formula "8") (term "1,0,0"))
            (rule "commute_or_2" (formula "8") (term "0,1,0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
            (rule "commute_or_2" (formula "8") (term "1,0,0,0"))
            (rule "shift_paren_or" (formula "8") (term "0,1,0,0,0"))
            (rule "commute_or" (formula "8") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_or_tautInEq1" (formula "8") (term "0,1,0,0,0"))
            (rule "inEqSimp_homoInEq1" (formula "8") (term "1,0,1,0,0,0"))
            (rule "polySimp_pullOutFactor1" (formula "8") (term "0,1,0,1,0,0,0"))
            (rule "add_literals" (formula "8") (term "1,0,1,0,1,0,0,0"))
            (rule "times_zero_1" (formula "8") (term "0,1,0,1,0,0,0"))
            (rule "leq_literals" (formula "8") (term "1,0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
            (rule "commute_or_2" (formula "8") (term "1,0,0,0"))
            (rule "shift_paren_or" (formula "8") (term "0,1,0,0,0"))
            (rule "inEqSimp_or_tautInEq2" (formula "8") (term "0,0,1,0,0,0"))
            (rule "add_zero_right" (formula "8") (term "1,1,0,0,1,0,0,0"))
            (rule "qeq_literals" (formula "8") (term "1,0,0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
            (rule "shift_paren_or" (formula "8") (term "1,0,0,0"))
            (rule "commute_or_2" (formula "8") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "cnf_rightDist" (formula "8") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "8") (term "0,0,0,0,0"))
            (rule "shift_paren_or" (formula "8") (term "1,0,0,0,0"))
            (rule "commute_or" (formula "8") (term "0,0,0,0,0,0"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "10") (inst "iv=iv"))
            (rule "andLeft" (formula "10"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
            (rule "applyEq" (formula "11") (term "0,0,1,0,0,1,0,0") (ifseqformula "12"))
            (rule "applyEq" (formula "11") (term "0,0,1,0") (ifseqformula "12"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "11"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "seqGetAlphaCast" (formula "12") (term "0"))
            (rule "castedGetAny" (formula "12") (term "0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "true_left" (formula "12"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "9") (inst "iv=iv"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
            (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "11"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "true_left" (formula "9"))
            (rule "applyEq" (formula "9") (term "0,0,1,0") (ifseqformula "10"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "true_left" (formula "9"))
            (rule "lenNonNegative" (formula "11") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "11"))
            (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "12"))
            (rule "leq_literals" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "commute_and_2" (formula "8") (term "0,0,0"))
            (rule "commute_and_2" (formula "8") (term "0,0"))
            (rule "commute_and" (formula "8") (term "0,0,0,0"))
            (rule "Partial_inv_axiom_for_JML_class_invariant_nr_2_in_LinkedList" (formula "13") (inst "i=i") (inst "i_0=i_0") (inst "j=j") (inst "i_1=i_1") (inst "i_2=i_2") (inst "f=f") (inst "i_3=i_3") (inst "n=n_3"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "translateJavaSubInt" (formula "13") (term "1,0,1,1,1,1,0,0,0"))
            (rule "translateJavaSubInt" (formula "13") (term "1,1,0,0,1,0,0"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "eqSymm" (formula "20") (term "1,1,0,1,0"))
            (rule "eqSymm" (formula "20") (term "0,1,0,1,0"))
            (rule "eqSymm" (formula "19") (term "1,0"))
            (rule "eqSymm" (formula "18") (term "1,0,1"))
            (rule "eqSymm" (formula "18") (term "1,1"))
            (rule "eqSymm" (formula "14"))
            (rule "polySimp_elimSub" (formula "19") (term "1,1,0,0"))
            (rule "mul_literals" (formula "19") (term "1,1,1,0,0"))
            (rule "polySimp_elimSub" (formula "18") (term "1,0,0,1,1"))
            (rule "mul_literals" (formula "18") (term "1,1,0,0,1,1"))
            (rule "polySimp_addComm0" (formula "19") (term "1,0,0,1,0"))
            (rule "polySimp_addComm0" (formula "19") (term "1,1,0,0"))
            (rule "polySimp_addComm0" (formula "18") (term "1,0,0,1,1"))
            (rule "castedGetAny" (formula "21") (term "1,1,1,0"))
            (rule "castedGetAny" (formula "20") (term "1,0,1,0,1,0"))
            (rule "castedGetAny" (formula "20") (term "0,0,1,0,1,0"))
            (rule "castedGetAny" (formula "19") (term "1,1,1,0"))
            (rule "castedGetAny" (formula "18") (term "0,1,0,1"))
            (rule "castedGetAny" (formula "19") (term "0,1,0"))
            (rule "eqSymm" (formula "19") (term "1,0"))
            (rule "castedGetAny" (formula "18") (term "0,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
            (rule "applyEq" (formula "21") (term "0,0,1,0") (ifseqformula "10"))
            (rule "applyEq" (formula "17") (term "0,0,1,0,0,1,0,0") (ifseqformula "10"))
            (rule "applyEq" (formula "15") (term "0") (ifseqformula "13"))
            (rule "applyEq" (formula "17") (term "0,1,0,1,0,1,0") (ifseqformula "10"))
            (rule "applyEq" (formula "21") (term "0,0,1,0,0,1,0,0") (ifseqformula "10"))
            (rule "applyEq" (formula "18") (term "0,1,0,1") (ifseqformula "12"))
            (rule "eqSymm" (formula "18") (term "1,0,1"))
            (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "10"))
            (rule "eqSymm" (formula "14"))
            (rule "applyEq" (formula "18") (term "1,1,0,1,1") (ifseqformula "13"))
            (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "13"))
            (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "13"))
            (rule "applyEq" (formula "16") (term "0,1,0,0,1,0,0") (ifseqformula "13"))
            (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "13"))
            (rule "applyEq" (formula "13") (term "0") (ifseqformula "14"))
            (rule "applyEq" (formula "8") (term "1,1,1,0,0") (ifseqformula "13"))
            (rule "applyEq" (formula "8") (term "1,1,0,0,0,0,0") (ifseqformula "13"))
            (rule "applyEq" (formula "11") (term "0") (ifseqformula "13"))
            (rule "applyEq" (formula "8") (term "1,1,1,0,0,0,0") (ifseqformula "13"))
            (rule "applyEq" (formula "8") (term "1,1,1,0,0,0") (ifseqformula "13"))
            (rule "applyEq" (formula "14") (term "1") (ifseqformula "13"))
            (rule "apply_eq_monomials" (formula "21") (term "1,0,0,1,0,0") (ifseqformula "13"))
            (rule "polySimp_rightDist" (formula "21") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "21") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "21") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "21") (term "1,1,1,0,0,1,0,0"))
            (rule "times_zero_1" (formula "21") (term "1,1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "21") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
            (rule "applyEq" (formula "17") (term "0,1,0,0,1,0,0") (ifseqformula "13"))
            (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1,0"))
            (rule "mul_literals" (formula "20") (term "0,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
            (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
            (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
            (rule "nnf_imp2or" (formula "20") (term "1,0,1,0"))
            (rule "nnf_imp2or" (formula "19") (term "0"))
            (rule "nnf_imp2or" (formula "16") (term "0"))
            (rule "nnf_imp2or" (formula "21") (term "0"))
            (rule "nnf_imp2or" (formula "17") (term "0"))
            (rule "nnf_imp2or" (formula "20") (term "0"))
            (rule "nnf_notAnd" (formula "19") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
            (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "19") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
            (rule "mul_literals" (formula "19") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "16") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
            (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "16") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
            (rule "mul_literals" (formula "16") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "21") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
            (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
            (rule "mul_literals" (formula "21") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "17") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
            (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "17") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
            (rule "mul_literals" (formula "17") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "20") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
            (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "20") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
            (rule "mul_literals" (formula "20") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
            (rule "nnf_imp2or" (formula "20") (term "0,1,0"))
            (rule "nnf_notAnd" (formula "20") (term "0,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,1,0"))
            (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0,1,0"))
            (rule "add_literals" (formula "20") (term "0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,1,0"))
            (rule "mul_literals" (formula "20") (term "1,0,0,0,1,0"))
            (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,1,0"))
            (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,1,0"))
            (rule "commute_and" (formula "18") (term "0,0"))
            (rule "commute_and_2" (formula "18") (term "0,1"))
            (rule "commute_or_2" (formula "19") (term "0"))
            (rule "commute_or_2" (formula "21") (term "0"))
            (rule "commute_and" (formula "16") (term "1,0,1,0"))
            (rule "commute_and" (formula "16") (term "0,0,1,0"))
            (rule "commute_and" (formula "17") (term "1,0,1,0"))
            (rule "commute_and" (formula "17") (term "0,0,1,0"))
            (rule "commute_or" (formula "19") (term "0,0"))
            (rule "commute_or" (formula "21") (term "0,0"))
            (rule "commute_and_2" (formula "18") (term "0"))
            (rule "cnf_rightDist" (formula "18"))
            (rule "andLeft" (formula "18"))
            (rule "cnf_rightDist" (formula "19"))
            (rule "andLeft" (formula "19"))
            (rule "cnf_rightDist" (formula "19"))
            (rule "andLeft" (formula "19"))
            (rule "commute_or" (formula "19"))
            (rule "cnf_rightDist" (formula "18"))
            (rule "andLeft" (formula "18"))
            (rule "cnf_rightDist" (formula "19"))
            (rule "andLeft" (formula "19"))
            (rule "commute_or" (formula "20"))
            (rule "cnf_rightDist" (formula "19"))
            (rule "andLeft" (formula "19"))
            (rule "commute_or" (formula "19"))
            (rule "shift_paren_or" (formula "26") (term "0,1,0"))
            (rule "commute_and_2" (formula "18") (term "1"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "andLeft" (formula "18"))
            (rule "andLeft" (formula "18"))
            (rule "replace_known_left" (formula "25") (term "0") (ifseqformula "19"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "true_left" (formula "25"))
            (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "true_left" (formula "23"))
            (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "19"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "true_left" (formula "22"))
            (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "18"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "true_left" (formula "22"))
            (rule "replace_known_left" (formula "21") (term "0") (ifseqformula "18"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "true_left" (formula "21"))
            (rule "replace_known_left" (formula "21") (term "0") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "true_left" (formula "21"))
            (rule "applyEq" (formula "22") (term "0,1,0,1,0,0,1,0") (ifseqformula "20"))
            (rule "applyEq" (formula "22") (term "0,0,0,1,0,0,1,0") (ifseqformula "20"))
            (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "eqSymm" (formula "14"))
            (rule "applyEq" (formula "23") (term "0,1,1,0,0,0") (ifseqformula "20"))
            (rule "applyEq" (formula "21") (term "0,1,0,0,0,0") (ifseqformula "20"))
            (rule "applyEq" (formula "16") (term "0,1,1,1,0,1,0") (ifseqformula "20"))
            (rule "applyEq" (formula "21") (term "0,1,0,0,0") (ifseqformula "20"))
            (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "20"))
            (rule "applyEq" (formula "15") (term "0") (ifseqformula "14"))
            (rule "leq_literals" (formula "15"))
            (rule "true_left" (formula "15"))
            (rule "applyEq" (formula "8") (term "1,1,1,0,0") (ifseqformula "14"))
            (rule "applyEq" (formula "8") (term "1,1,1,0,0,0") (ifseqformula "14"))
            (rule "applyEq" (formula "20") (term "1,1,1,0") (ifseqformula "14"))
            (rule "add_zero_right" (formula "20") (term "1,1,0"))
            (rule "applyEq" (formula "8") (term "1,1,0,0,0,0,0") (ifseqformula "14"))
            (rule "applyEq" (formula "21") (term "1,1,0,0,0,1,0") (ifseqformula "14"))
            (rule "applyEq" (formula "15") (term "1,1,0,0") (ifseqformula "14"))
            (rule "applyEq" (formula "16") (term "1,1,0,0") (ifseqformula "14"))
            (rule "applyEq" (formula "11") (term "0") (ifseqformula "14"))
            (rule "qeq_literals" (formula "11"))
            (rule "closeFalse" (formula "11"))
         )
      )
      (branch "self.list.values.length >= 1 + self.index FALSE"
         (rule "true_left" (formula "13"))
         (rule "replace_known_right" (formula "10") (term "0,1,1,0,0") (ifseqformula "14"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "replace_known_right" (formula "6") (term "0,0") (ifseqformula "14"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "qeq_literals" (formula "6"))
         (rule "closeFalse" (formula "6"))
      )
   )
)
(branch "Null Reference (n = null)"
    (builtin "One Step Simplification" (formula "1"))
   (rule "false_right" (formula "9") (userinteraction))
   (rule "Class_invariant_axiom_for_LinkedListIterator" (formula "7") (inst "i=i") (inst "f=f") (inst "i_0=i_0") (inst "f_0=f_0") (userinteraction))
   (rule "andLeft" (formula "7"))
   (rule "notLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "eqSymm" (formula "11"))
   (rule "eqSymm" (formula "13") (term "1"))
   (rule "eqSymm" (formula "12"))
   (rule "replace_known_left" (formula "13") (term "2") (ifseqformula "1"))
   (rule "castedGetAny" (formula "13") (term "0,1"))
   (rule "lenOfSeqSubEQ" (formula "10") (term "1,1,0,0") (ifseqformula "12"))
   (rule "polySimp_elimSub" (formula "10") (term "1,1,1,0,0"))
   (rule "polySimp_addComm0" (formula "10") (term "1,1,1,0,0"))
   (rule "lenOfSeqSubEQ" (formula "9") (term "1,1,0,0") (ifseqformula "11"))
   (rule "polySimp_elimSub" (formula "9") (term "1,1,1,0,0"))
   (rule "times_zero_2" (formula "9") (term "1,1,1,1,0,0"))
   (rule "add_zero_right" (formula "9") (term "1,1,1,0,0"))
   (rule "lenOfSeqSubEQ" (formula "6") (term "0") (ifseqformula "12"))
   (rule "polySimp_elimSub" (formula "6") (term "1,0"))
   (rule "polySimp_addComm0" (formula "6") (term "1,0"))
   (rule "inEqSimp_ltToLeq" (formula "13") (term "0"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
   (rule "polySimp_addComm1" (formula "13") (term "0,0"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,1,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,1,0,0"))
   (rule "polySimp_addComm1" (formula "10") (term "0,0,1,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "0,1,1,0,0"))
   (rule "add_zero_right" (formula "9") (term "0,0,1,1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0"))
   (rule "polySimp_addComm1" (formula "6") (term "0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_gtToGeq" (formula "6"))
   (rule "times_zero_1" (formula "6") (term "1,0,0"))
   (rule "add_zero_right" (formula "6") (term "0,0"))
   (rule "inEqSimp_commuteLeq" (formula "8"))
   (rule "inEqSimp_commuteLeq" (formula "7"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
   (rule "applyEq" (formula "13") (term "1,1") (ifseqformula "1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0"))
   (rule "polySimp_mulLiterals" (formula "13") (term "0,0"))
   (rule "polySimp_elimOne" (formula "13") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,1,0"))
   (rule "polySimp_mulLiterals" (formula "6") (term "0,0,1,0"))
   (rule "polySimp_elimOne" (formula "6") (term "0,0,1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,1,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "10") (term "0,0,1,1,1,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,1,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "0,0,1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "0,0,1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "6"))
   (rule "mul_literals" (formula "6") (term "1"))
   (rule "getOfSeqSubEQ" (formula "10") (term "1,0,1,0,1,0") (ifseqformula "12"))
   (rule "castDel" (formula "10") (term "2,1,0,1,0,1,0"))
   (rule "polySimp_elimSub" (formula "10") (term "1,1,0,1,0,1,0,1,0"))
   (rule "polySimp_addComm0" (formula "10") (term "1,1,1,0,1,0,1,0"))
   (rule "polySimp_addComm0" (formula "10") (term "1,1,0,1,0,1,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,1,0,1,0,1,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,1,0,1,0,1,0"))
   (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,0,1,0,1,0,1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
   (rule "polySimp_elimOne" (formula "10") (term "0,1,0,0,1,0,1,0,1,0,1,0"))
   (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,1,0,1,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,1,0,1,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,1,0,1,0,1,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,1,0,1,0,1,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,1,0,1,0,1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,1,0,1,0,1,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,1,0,1,0,1,0"))
   (rule "polySimp_rightDist" (formula "10") (term "0,1,1,0,1,0,1,0,1,0"))
   (rule "mul_literals" (formula "10") (term "0,0,1,1,0,1,0,1,0,1,0"))
   (rule "getOfSeqSubEQ" (formula "9") (term "1,0,1,0,1,0") (ifseqformula "11"))
   (rule "castDel" (formula "9") (term "2,1,0,1,0,1,0"))
   (rule "add_zero_right" (formula "9") (term "1,1,1,0,1,0,1,0"))
   (rule "polySimp_elimSub" (formula "9") (term "1,1,0,1,0,1,0,1,0"))
   (rule "mul_literals" (formula "9") (term "1,1,1,0,1,0,1,0,1,0"))
   (rule "add_zero_right" (formula "9") (term "1,1,0,1,0,1,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,1,0,1,0,1,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,1,0,1,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,1,0,1,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,1,0,1,0,1,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,1,0,1,0,1,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,1,0,1,0,1,0,1,0"))
   (rule "mul_literals" (formula "9") (term "0,1,1,0,1,0,1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,1,0,1,0,1,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,1,0,1,0,1,0"))
   (rule "nnf_imp2or" (formula "10") (term "0"))
   (rule "nnf_imp2or" (formula "9") (term "0"))
   (rule "nnf_notAnd" (formula "10") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
   (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "10") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
   (rule "mul_literals" (formula "10") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "9") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
   (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "9") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
   (rule "mul_literals" (formula "9") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
   (rule "commute_and" (formula "10") (term "1,0,1,0"))
   (rule "commute_and" (formula "10") (term "0,0,1,0"))
   (rule "commute_and" (formula "9") (term "0,0,1,0"))
   (rule "commute_and" (formula "9") (term "1,0,1,0"))
   (rule "applyEq_and_gen2" (formula "10") (term "1,0,1,0"))
   (rule "ifEqualsNull" (formula "10") (term "0,0,1,0,1,0"))
   (rule "nnf_notOr" (formula "10") (term "0,1,0,1,0"))
   (rule "nnf_notAnd" (formula "10") (term "1,0,1,0,1,0"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "nnf_notAnd" (formula "10") (term "0,0,1,0,1,0"))
   (rule "nnf_notAnd" (formula "10") (term "0,0,0,1,0,1,0"))
   (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0,1,0,1,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0,1,0,1,0"))
   (rule "polySimp_rightDist" (formula "10") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
   (rule "mul_literals" (formula "10") (term "0,0,1,0,0,1,0,0,0,1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0,0,1,0,0,0,1,0,1,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,0,1,0,0,1,0,0,0,1,0,1,0"))
   (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0,1,0,1,0"))
   (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,1,0,0,0,1,0,1,0"))
   (rule "add_literals" (formula "10") (term "0,0,0,0,1,0,0,0,1,0,1,0"))
   (rule "add_zero_left" (formula "10") (term "0,0,0,1,0,0,0,1,0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0,1,0,1,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,0,1,0,1,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,0,1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,0,1,0,1,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,0,1,0,1,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "0,1,1,0,0,0,1,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,0,1,0,1,0"))
   (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,0,1,0,1,0"))
   (rule "add_zero_right" (formula "10") (term "0,0,0,0,0,0,1,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,1,0,1,0"))
   (rule "mul_literals" (formula "10") (term "1,0,0,0,0,1,0,1,0"))
   (rule "applyEq_and_gen2" (formula "9") (term "1,0,1,0"))
   (rule "ifEqualsNull" (formula "9") (term "0,0,1,0,1,0"))
   (rule "nnf_notOr" (formula "9") (term "0,1,0,1,0"))
   (rule "nnf_notAnd" (formula "9") (term "0,0,1,0,1,0"))
   (rule "nnf_notAnd" (formula "9") (term "1,0,1,0,1,0"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "nnf_notAnd" (formula "9") (term "0,0,0,1,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,0,1,0,1,0"))
   (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0,0,1,0,1,0"))
   (rule "add_zero_right" (formula "9") (term "0,0,0,0,0,0,1,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,1,0,1,0"))
   (rule "mul_literals" (formula "9") (term "1,0,0,0,0,1,0,1,0"))
   (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,0,1,0,1,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0,1,0,1,0"))
   (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
   (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0,1,0,1,0"))
   (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,0,1,0,1,0"))
   (rule "add_zero_left" (formula "9") (term "0,0,1,0,0,0,1,0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,0,1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,1,0,1,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,1,0,1,0"))
   (rule "commute_or" (formula "10") (term "1,0,1,0,1,0"))
   (rule "commute_or_2" (formula "10") (term "0,0,1,0,1,0"))
   (rule "commute_or" (formula "9") (term "1,0,1,0,1,0"))
   (rule "commute_or_2" (formula "9") (term "0,0,1,0,1,0"))
   (rule "ifthenelse_split_for" (formula "13"))
   (branch "self.list.values.length >= 1 + self.index TRUE"
      (rule "replace_known_left" (formula "10") (term "0,1,1,0,0") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "inEqSimp_homoInEq1" (formula "6"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,0"))
      (rule "polySimp_mulAssoc" (formula "6") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "0,1,0"))
      (rule "polySimp_elimOne" (formula "6") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "6") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "6"))
      (rule "polySimp_mulLiterals" (formula "6") (term "0"))
      (rule "polySimp_elimOne" (formula "6") (term "0"))
      (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "12"))
      (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
      (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
      (rule "add_literals" (formula "7") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "7") (term "1,0,0"))
      (rule "add_zero_right" (formula "7") (term "0,0"))
      (rule "qeq_literals" (formula "7") (term "0"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "true_left" (formula "7"))
      (rule "commute_or" (formula "7") (term "0,0,0,1,0,1,0"))
      (rule "commute_or" (formula "8") (term "0,0,0,1,0,1,0"))
      (rule "equalityToSeqGetAndSeqLenLeft" (formula "9") (inst "iv=iv"))
      (rule "andLeft" (formula "9"))
      (rule "lenOfSeqSub" (formula "9") (term "0"))
      (rule "polySimp_elimSub" (formula "9") (term "1,0"))
      (rule "mul_literals" (formula "9") (term "1,1,0"))
      (rule "add_zero_right" (formula "9") (term "1,0"))
      (rule "lenOfSeqSub" (formula "10") (term "1,1,0,0"))
      (rule "polySimp_elimSub" (formula "10") (term "1,1,1,0,0"))
      (rule "times_zero_2" (formula "10") (term "1,1,1,1,0,0"))
      (rule "add_zero_right" (formula "10") (term "1,1,1,0,0"))
      (rule "lenOfSeqSubEQ" (formula "9") (term "1") (ifseqformula "11"))
      (rule "eqSymm" (formula "9"))
      (rule "polySimp_elimSub" (formula "9") (term "1,0"))
      (rule "mul_literals" (formula "9") (term "1,1,0"))
      (rule "add_zero_right" (formula "9") (term "1,0"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "inEqSimp_ltToLeq" (formula "9") (term "0,1,1,0,0"))
      (rule "add_zero_right" (formula "9") (term "0,0,1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
      (rule "applyEq" (formula "9") (term "0,0,1,0") (ifseqformula "10"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "equalityToSeqGetAndSeqLenLeft" (formula "10") (inst "iv=iv"))
      (rule "andLeft" (formula "10"))
      (rule "lenOfSeqSub" (formula "10") (term "0"))
      (rule "polySimp_elimSub" (formula "10") (term "1,0"))
      (rule "polySimp_addComm0" (formula "10") (term "1,0"))
      (rule "lenOfSeqSub" (formula "11") (term "1,1,0,0"))
      (rule "polySimp_elimSub" (formula "11") (term "1,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "11") (term "1,1,1,0,0"))
      (rule "lenOfSeqSubEQ" (formula "10") (term "1") (ifseqformula "12"))
      (rule "eqSymm" (formula "10"))
      (rule "polySimp_elimSub" (formula "10") (term "1,0"))
      (rule "polySimp_addComm0" (formula "10") (term "1,0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "true_left" (formula "10"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,1,0,0"))
      (rule "polySimp_addComm1" (formula "10") (term "0,0,1,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
      (rule "applyEq" (formula "10") (term "0,0,1,0") (ifseqformula "11"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "true_left" (formula "10"))
      (rule "lenNonNegative" (formula "10") (term "2,0"))
      (rule "inEqSimp_commuteLeq" (formula "10"))
      (rule "cnf_rightDist" (formula "7") (term "1,0,1,0,1,0"))
      (rule "cnf_rightDist" (formula "8") (term "1,0,1,0,1,0"))
      (rule "ifthenelse_to_or_right" (formula "7") (term "1,1,0,1,0"))
      (rule "nnf_notAnd" (formula "7") (term "0,0,1,1,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0,1,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,1,1,0,1,0"))
      (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0,1,1,0,1,0"))
      (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,1,1,0,1,0"))
      (rule "add_literals" (formula "7") (term "0,0,0,1,0,0,1,1,0,1,0"))
      (rule "add_zero_left" (formula "7") (term "0,0,1,0,0,1,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0,1,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,1,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,1,1,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0,1,1,0,1,0"))
      (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0,1,1,0,1,0"))
      (rule "add_zero_right" (formula "7") (term "0,0,0,0,0,1,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0,1,1,0,1,0"))
      (rule "mul_literals" (formula "7") (term "1,0,0,0,1,1,0,1,0"))
      (rule "commute_or" (formula "7") (term "1,1,1,0,1,0"))
      (rule "ifthenelse_to_or_right" (formula "8") (term "1,1,0,1,0"))
      (rule "nnf_notAnd" (formula "8") (term "0,0,1,1,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0,1,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,1,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "8") (term "0,1,0,0,1,0,0,1,1,0,1,0"))
      (rule "mul_literals" (formula "8") (term "0,0,1,0,0,1,0,0,1,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0,0,1,0,0,1,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "8") (term "1,0,1,0,0,1,0,0,1,1,0,1,0"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,1,1,0,1,0"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,1,0,0,1,1,0,1,0"))
      (rule "add_literals" (formula "8") (term "0,0,0,0,1,0,0,1,1,0,1,0"))
      (rule "add_zero_left" (formula "8") (term "0,0,0,1,0,0,1,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0,1,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,1,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,1,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,1,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,1,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "0,1,1,0,0,1,1,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,1,1,0,1,0"))
      (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0,1,1,0,1,0"))
      (rule "add_zero_right" (formula "8") (term "0,0,0,0,0,1,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,1,1,0,1,0"))
      (rule "mul_literals" (formula "8") (term "1,0,0,0,1,1,0,1,0"))
      (rule "commute_or_2" (formula "7") (term "0,1,1,0,1,0"))
      (rule "commute_or" (formula "8") (term "1,1,1,0,1,0"))
      (rule "commute_or" (formula "7") (term "0,1,0,1,0,1,0"))
      (rule "commute_or" (formula "8") (term "0,1,0,1,0,1,0"))
      (rule "commute_or_2" (formula "8") (term "0,1,1,0,1,0"))
      (rule "ifthenelse_split" (formula "7") (term "1,1,0,0"))
      (branch "self.index >= 1 TRUE"
         (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "7"))
         (rule "leq_literals" (formula "6") (term "0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "true_left" (formula "6"))
         (rule "commute_or" (formula "7") (term "0,0,1,1,0,1,0"))
         (rule "commute_or" (formula "8") (term "0,0,1,1,0,1,0"))
         (rule "cnf_rightDist" (formula "7") (term "1,1,1,0,1,0"))
         (rule "commute_or" (formula "7") (term "1,1,1,1,0,1,0"))
         (rule "cnf_rightDist" (formula "8") (term "1,1,1,0,1,0"))
         (rule "commute_or" (formula "8") (term "1,1,1,1,0,1,0"))
         (rule "shift_paren_and" (formula "7") (term "0,1,0,1,0"))
         (rule "shift_paren_and" (formula "8") (term "0,1,0,1,0"))
         (rule "shift_paren_and" (formula "7") (term "1,1,0,1,0"))
         (rule "shift_paren_and" (formula "7") (term "1,0,1,0"))
         (rule "shift_paren_and" (formula "8") (term "1,1,0,1,0"))
         (rule "shift_paren_and" (formula "8") (term "1,0,1,0"))
         (rule "shift_paren_and" (formula "7") (term "0,1,0,1,0"))
         (rule "shift_paren_and" (formula "7") (term "0,1,0"))
         (rule "shift_paren_and" (formula "7") (term "0,0,1,0"))
         (rule "shift_paren_and" (formula "8") (term "0,1,0,1,0"))
         (rule "shift_paren_and" (formula "8") (term "0,1,0"))
         (rule "shift_paren_and" (formula "8") (term "0,0,1,0"))
         (rule "shift_paren_and" (formula "7") (term "0,0,0,1,0"))
         (rule "shift_paren_and" (formula "8") (term "0,0,0,1,0"))
         (rule "seqGetAlphaCast" (formula "13") (term "0"))
         (rule "castedGetAny" (formula "13") (term "0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "true_left" (formula "13"))
         (rule "shift_paren_and" (formula "7") (term "0,0,0,0,1,0"))
         (rule "shift_paren_and" (formula "8") (term "0,0,0,0,1,0"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1") (ifseqformula "2"))
         (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "16"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "1") (term "0") (ifseqformula "2"))
         (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "shift_paren_and" (formula "7") (term "0,0,0,0,0,1,0"))
         (rule "ex_pull_out3" (formula "7") (term "0"))
         (rule "cnf_rightDist" (formula "7") (term "0,0"))
         (rule "shift_paren_or" (formula "7") (term "1,0,0"))
         (rule "commute_or_2" (formula "7") (term "0,1,0,0"))
         (rule "inEqSimp_or_tautInEq1" (formula "7") (term "1,0,0"))
         (rule "inEqSimp_homoInEq1" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_pullOutFactor1" (formula "7") (term "0,1,1,0,0"))
         (rule "add_literals" (formula "7") (term "1,0,1,1,0,0"))
         (rule "times_zero_1" (formula "7") (term "0,1,1,0,0"))
         (rule "leq_literals" (formula "7") (term "1,1,0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "cnf_rightDist" (formula "7") (term "0,0"))
         (rule "shift_paren_or" (formula "7") (term "1,0,0"))
         (rule "inEqSimp_or_tautInEq3" (formula "7") (term "0,1,0,0"))
         (rule "add_zero_right" (formula "7") (term "1,1,0,1,0,0"))
         (rule "qeq_literals" (formula "7") (term "1,0,1,0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "cnf_rightDist" (formula "7") (term "0,0"))
         (rule "shift_paren_or" (formula "7") (term "1,0,0"))
         (rule "commute_or_2" (formula "7") (term "0,1,0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
         (rule "commute_or_2" (formula "7") (term "1,0,0,0"))
         (rule "shift_paren_or" (formula "7") (term "0,1,0,0,0"))
         (rule "commute_or" (formula "7") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_or_tautInEq1" (formula "7") (term "0,1,0,0,0"))
         (rule "inEqSimp_homoInEq1" (formula "7") (term "1,0,1,0,0,0"))
         (rule "polySimp_pullOutFactor1" (formula "7") (term "0,1,0,1,0,0,0"))
         (rule "add_literals" (formula "7") (term "1,0,1,0,1,0,0,0"))
         (rule "times_zero_1" (formula "7") (term "0,1,0,1,0,0,0"))
         (rule "leq_literals" (formula "7") (term "1,0,1,0,0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
         (rule "commute_or_2" (formula "7") (term "1,0,0,0"))
         (rule "shift_paren_or" (formula "7") (term "0,1,0,0,0"))
         (rule "inEqSimp_or_tautInEq2" (formula "7") (term "0,0,1,0,0,0"))
         (rule "add_zero_right" (formula "7") (term "1,1,0,0,1,0,0,0"))
         (rule "qeq_literals" (formula "7") (term "1,0,0,1,0,0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
         (rule "shift_paren_or" (formula "7") (term "1,0,0,0"))
         (rule "commute_or_2" (formula "7") (term "0,1,0,0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "cnf_rightDist" (formula "7") (term "0,0,0,0"))
         (rule "commute_or_2" (formula "7") (term "0,0,0,0,0"))
         (rule "shift_paren_or" (formula "7") (term "1,0,0,0,0"))
         (rule "commute_or" (formula "7") (term "0,0,0,0,0,0"))
         (rule "shift_paren_and" (formula "8") (term "0,0,0,0,0,1,0"))
         (rule "ex_pull_out3" (formula "8") (term "0"))
         (rule "cnf_rightDist" (formula "8") (term "0,0"))
         (rule "shift_paren_or" (formula "8") (term "1,0,0"))
         (rule "commute_or_2" (formula "8") (term "0,1,0,0"))
         (rule "inEqSimp_or_tautInEq1" (formula "8") (term "1,0,0"))
         (rule "polySimp_addAssoc" (formula "8") (term "1,1,1,0,0"))
         (rule "inEqSimp_homoInEq1" (formula "8") (term "1,1,0,0"))
         (rule "polySimp_pullOutFactor1" (formula "8") (term "0,1,1,0,0"))
         (rule "add_literals" (formula "8") (term "1,0,1,1,0,0"))
         (rule "times_zero_1" (formula "8") (term "0,1,1,0,0"))
         (rule "leq_literals" (formula "8") (term "1,1,0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "cnf_rightDist" (formula "8") (term "0,0"))
         (rule "shift_paren_or" (formula "8") (term "1,0,0"))
         (rule "inEqSimp_or_tautInEq3" (formula "8") (term "0,1,0,0"))
         (rule "add_zero_right" (formula "8") (term "1,1,0,1,0,0"))
         (rule "qeq_literals" (formula "8") (term "1,0,1,0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "cnf_rightDist" (formula "8") (term "0,0"))
         (rule "shift_paren_or" (formula "8") (term "1,0,0"))
         (rule "commute_or_2" (formula "8") (term "0,1,0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
         (rule "commute_or_2" (formula "8") (term "1,0,0,0"))
         (rule "shift_paren_or" (formula "8") (term "0,1,0,0,0"))
         (rule "commute_or" (formula "8") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_or_tautInEq1" (formula "8") (term "0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "8") (term "1,1,0,1,0,0,0"))
         (rule "inEqSimp_homoInEq1" (formula "8") (term "1,0,1,0,0,0"))
         (rule "polySimp_pullOutFactor1" (formula "8") (term "0,1,0,1,0,0,0"))
         (rule "add_literals" (formula "8") (term "1,0,1,0,1,0,0,0"))
         (rule "times_zero_1" (formula "8") (term "0,1,0,1,0,0,0"))
         (rule "leq_literals" (formula "8") (term "1,0,1,0,0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
         (rule "commute_or_2" (formula "8") (term "1,0,0,0"))
         (rule "shift_paren_or" (formula "8") (term "0,1,0,0,0"))
         (rule "inEqSimp_or_tautInEq2" (formula "8") (term "0,0,1,0,0,0"))
         (rule "add_zero_right" (formula "8") (term "1,1,0,0,1,0,0,0"))
         (rule "qeq_literals" (formula "8") (term "1,0,0,1,0,0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
         (rule "shift_paren_or" (formula "8") (term "1,0,0,0"))
         (rule "commute_or_2" (formula "8") (term "0,1,0,0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "cnf_rightDist" (formula "8") (term "0,0,0,0"))
         (rule "commute_or_2" (formula "8") (term "0,0,0,0,0"))
         (rule "shift_paren_or" (formula "8") (term "1,0,0,0,0"))
         (rule "commute_or" (formula "8") (term "0,0,0,0,0,0"))
         (rule "commute_and_2" (formula "7") (term "0,0,0"))
         (rule "commute_and_2" (formula "7") (term "0,0"))
         (rule "commute_and_2" (formula "8") (term "0,0,0"))
         (rule "commute_and_2" (formula "8") (term "0,0"))
         (rule "commute_and" (formula "7") (term "0,0,0,0"))
         (rule "commute_and" (formula "8") (term "0,0,0,0"))
         (rule "Partial_inv_axiom_for_JML_class_invariant_nr_2_in_LinkedList" (formula "15") (inst "i=i") (inst "i_0=i_0") (inst "j=j") (inst "i_1=i_1") (inst "i_2=i_2") (inst "f=f") (inst "i_3=i_3") (inst "n=n_1"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "translateJavaSubInt" (formula "15") (term "1,0,1,1,1,1,0,0,0"))
         (rule "translateJavaSubInt" (formula "15") (term "1,1,0,0,1,0,0"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "15"))
         (rule "eqSymm" (formula "22") (term "1,1,0,1,0"))
         (rule "eqSymm" (formula "22") (term "0,1,0,1,0"))
         (rule "eqSymm" (formula "21") (term "1,0"))
         (rule "eqSymm" (formula "20") (term "1,1"))
         (rule "eqSymm" (formula "20") (term "1,0,1"))
         (rule "eqSymm" (formula "16"))
         (rule "polySimp_elimSub" (formula "21") (term "1,1,0,0"))
         (rule "mul_literals" (formula "21") (term "1,1,1,0,0"))
         (rule "polySimp_elimSub" (formula "20") (term "1,0,0,1,1"))
         (rule "mul_literals" (formula "20") (term "1,1,0,0,1,1"))
         (rule "polySimp_addComm0" (formula "21") (term "1,0,0,1,0"))
         (rule "polySimp_addComm0" (formula "21") (term "1,1,0,0"))
         (rule "polySimp_addComm0" (formula "20") (term "1,0,0,1,1"))
         (rule "castedGetAny" (formula "23") (term "1,1,1,0"))
         (rule "castedGetAny" (formula "22") (term "1,0,1,0,1,0"))
         (rule "castedGetAny" (formula "22") (term "0,0,1,0,1,0"))
         (rule "castedGetAny" (formula "21") (term "1,1,1,0"))
         (rule "castedGetAny" (formula "20") (term "0,1,0,1"))
         (rule "castedGetAny" (formula "21") (term "0,1,0"))
         (rule "eqSymm" (formula "21") (term "1,0"))
         (rule "castedGetAny" (formula "20") (term "0,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
         (rule "applyEq" (formula "20") (term "1,1,0,1,1") (ifseqformula "15"))
         (rule "applyEq" (formula "8") (term "1,1,1,1,0,0") (ifseqformula "16"))
         (rule "applyEq" (formula "11") (term "2,0") (ifseqformula "16"))
         (rule "applyEq" (formula "12") (term "0") (ifseqformula "16"))
         (rule "applyEq" (formula "10") (term "0") (ifseqformula "16"))
         (rule "applyEq" (formula "8") (term "1,1,1,0,0,0,0,0") (ifseqformula "16"))
         (rule "applyEq" (formula "8") (term "1,1,1,1,0,0,0,0") (ifseqformula "16"))
         (rule "applyEq" (formula "17") (term "0") (ifseqformula "15"))
         (rule "applyEq" (formula "8") (term "1,1,1,1,0,0,0") (ifseqformula "16"))
         (rule "applyEq" (formula "16") (term "1") (ifseqformula "15"))
         (rule "applyEq" (formula "21") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
         (rule "applyEq" (formula "18") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
         (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
         (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "15"))
         (rule "applyEq" (formula "10") (term "0") (ifseqformula "15"))
         (rule "applyEq" (formula "11") (term "2,0") (ifseqformula "15"))
         (rule "applyEq" (formula "8") (term "1,1,1,1,0,0") (ifseqformula "15"))
         (rule "applyEq" (formula "12") (term "0") (ifseqformula "15"))
         (rule "applyEq" (formula "8") (term "1,1,1,0,0,0,0,0") (ifseqformula "15"))
         (rule "applyEq" (formula "8") (term "1,1,1,1,0,0,0") (ifseqformula "15"))
         (rule "applyEq" (formula "8") (term "1,1,1,1,0,0,0,0") (ifseqformula "15"))
         (rule "apply_eq_monomials" (formula "23") (term "1,0,0,1,0,0") (ifseqformula "16"))
         (rule "polySimp_rightDist" (formula "23") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0,0,1,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "23") (term "1,0,0,1,0,0"))
         (rule "add_literals" (formula "23") (term "1,1,1,0,0,1,0,0"))
         (rule "times_zero_1" (formula "23") (term "1,1,0,0,1,0,0"))
         (rule "add_zero_right" (formula "23") (term "1,0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
         (rule "apply_eq_monomials" (formula "19") (term "1,0,0,1,0,0") (ifseqformula "16"))
         (rule "polySimp_rightDist" (formula "19") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "19") (term "1,0,1,0,0,1,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "19") (term "1,0,0,1,0,0"))
         (rule "add_literals" (formula "19") (term "1,1,1,0,0,1,0,0"))
         (rule "times_zero_1" (formula "19") (term "1,1,0,0,1,0,0"))
         (rule "add_zero_right" (formula "19") (term "1,0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,1,0"))
         (rule "mul_literals" (formula "22") (term "0,1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
         (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "17"))
         (rule "polySimp_rightDist" (formula "12") (term "0,0"))
         (rule "mul_literals" (formula "12") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "12") (term "0"))
         (rule "add_literals" (formula "12") (term "0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "12"))
         (rule "polySimp_mulLiterals" (formula "12") (term "0"))
         (rule "polySimp_elimOne" (formula "12") (term "0"))
         (rule "nnf_imp2or" (formula "23") (term "1,0,1,0"))
         (rule "nnf_imp2or" (formula "22") (term "0"))
         (rule "nnf_imp2or" (formula "19") (term "0"))
         (rule "nnf_imp2or" (formula "24") (term "0"))
         (rule "nnf_imp2or" (formula "20") (term "0"))
         (rule "nnf_imp2or" (formula "23") (term "0"))
         (rule "nnf_notAnd" (formula "22") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
         (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
         (rule "mul_literals" (formula "22") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "19") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
         (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
         (rule "mul_literals" (formula "19") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "24") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
         (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
         (rule "mul_literals" (formula "24") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "20") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
         (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
         (rule "mul_literals" (formula "20") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "23") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
         (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
         (rule "mul_literals" (formula "23") (term "1,0,0,0"))
         (rule "nnf_imp2or" (formula "23") (term "0,1,0"))
         (rule "nnf_notAnd" (formula "23") (term "0,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,1,0"))
         (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,1,0"))
         (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,1,0"))
         (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,1,0"))
         (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0,1,0"))
         (rule "add_zero_right" (formula "23") (term "0,0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,1,0"))
         (rule "mul_literals" (formula "23") (term "1,0,0,0,1,0"))
         (rule "commute_and" (formula "21") (term "0,0"))
         (rule "commute_and" (formula "21") (term "0,0,0,0,1"))
         (rule "commute_or_2" (formula "22") (term "0"))
         (rule "commute_or_2" (formula "24") (term "0"))
         (rule "commute_and" (formula "19") (term "1,0,1,0"))
         (rule "commute_and" (formula "19") (term "0,0,1,0"))
         (rule "commute_and" (formula "20") (term "1,0,1,0"))
         (rule "commute_and" (formula "20") (term "0,0,1,0"))
         (rule "commute_or" (formula "22") (term "0,0"))
         (rule "commute_or" (formula "24") (term "0,0"))
         (rule "commute_and_2" (formula "21") (term "0"))
         (rule "cnf_rightDist" (formula "21"))
         (rule "andLeft" (formula "21"))
         (rule "cnf_rightDist" (formula "22"))
         (rule "andLeft" (formula "22"))
         (rule "cnf_rightDist" (formula "22"))
         (rule "andLeft" (formula "22"))
         (rule "commute_or" (formula "22"))
         (rule "cnf_rightDist" (formula "21"))
         (rule "andLeft" (formula "21"))
         (rule "cnf_rightDist" (formula "22"))
         (rule "andLeft" (formula "22"))
         (rule "cnf_rightDist" (formula "22"))
         (rule "andLeft" (formula "22"))
         (rule "commute_or" (formula "22"))
         (rule "shift_paren_or" (formula "29") (term "0,1,0"))
         (rule "cnf_rightDist" (formula "21"))
         (rule "andLeft" (formula "21"))
         (rule "cnf_rightDist" (formula "22"))
         (rule "andLeft" (formula "22"))
         (rule "commute_or" (formula "23"))
         (rule "cnf_rightDist" (formula "22"))
         (rule "andLeft" (formula "22"))
         (rule "commute_or" (formula "22"))
         (rule "commute_and_2" (formula "21") (term "1"))
         (rule "cnf_rightDist" (formula "21"))
         (rule "andLeft" (formula "21"))
         (rule "cnf_rightDist" (formula "22"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "cnf_rightDist" (formula "22"))
         (rule "andLeft" (formula "22"))
         (rule "commute_or" (formula "22"))
         (rule "cnf_rightDist" (formula "21"))
         (rule "andLeft" (formula "21"))
         (rule "commute_or" (formula "21"))
         (rule "cnf_rightDist" (formula "22"))
         (rule "andLeft" (formula "22"))
         (rule "commute_or" (formula "23"))
         (rule "cnf_rightDist" (formula "21"))
         (rule "andLeft" (formula "21"))
         (rule "commute_or" (formula "22"))
         (rule "cnf_rightDist" (formula "23"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "commute_or" (formula "23"))
         (rule "cnf_rightDist" (formula "21"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "commute_or" (formula "21"))
         (rule "commute_or_2" (formula "37") (term "0,0,1,0"))
         (rule "applyEq_and_gen2" (formula "20") (term "1,0,1,0"))
         (rule "lenNonNegative" (formula "16") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "16"))
         (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
         (rule "shift_paren_and" (formula "19") (term "0,1,0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "castedGetAny" (formula "19") (term "1,0,0,1,0,1,0"))
         (rule "castedGetAny" (formula "19") (term "1,0,1,1,0,0,1,0"))
         (rule "castedGetAny" (formula "19") (term "0,0,0,0,0,1,0"))
         (rule "castedGetAny" (formula "19") (term "0,0,1,0,0,1,0"))
         (rule "cnf_rightDist" (formula "19") (term "0"))
         (rule "distr_forallAnd" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "shift_paren_or" (formula "20") (term "0"))
         (rule "cnf_rightDist" (formula "19") (term "0"))
         (rule "distr_forallAnd" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "shift_paren_or" (formula "20") (term "0"))
         (rule "cnf_rightDist" (formula "19") (term "0"))
         (rule "distr_forallAnd" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "commute_or_2" (formula "19") (term "0"))
         (rule "shift_paren_or" (formula "20") (term "0"))
         (rule "commute_or" (formula "19") (term "0,0"))
         (rule "commute_or" (formula "40") (term "0,0,0,1,0"))
         (rule "equalityToSeqGetAndSeqLenLeft" (formula "11") (inst "iv=iv"))
         (rule "andLeft" (formula "11"))
         (rule "lenOfSeqSub" (formula "11") (term "0"))
         (rule "polySimp_elimSub" (formula "11") (term "1,0"))
         (rule "polySimp_addComm0" (formula "11") (term "1,0"))
         (rule "lenOfSeqSub" (formula "12") (term "1,1,0,0"))
         (rule "polySimp_elimSub" (formula "12") (term "1,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "12") (term "1,1,1,0,0"))
         (rule "lenOfSeqSubEQ" (formula "11") (term "1") (ifseqformula "13"))
         (rule "eqSymm" (formula "11"))
         (rule "polySimp_elimSub" (formula "11") (term "1,0"))
         (rule "polySimp_addComm0" (formula "11") (term "1,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,1,0,0"))
         (rule "polySimp_addComm1" (formula "11") (term "0,0,1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
         (rule "applyEq" (formula "11") (term "0,0,1,0") (ifseqformula "12"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "shift_paren_and" (formula "23") (term "0,1,0"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "castedGetAny" (formula "23") (term "0,0,0,0,0,1,0"))
         (rule "castedGetAny" (formula "23") (term "1,0,1,1,0,0,1,0"))
         (rule "castedGetAny" (formula "23") (term "0,0,1,0,0,1,0"))
         (rule "cnf_rightDist" (formula "23") (term "0"))
         (rule "distr_forallAnd" (formula "23"))
         (rule "andLeft" (formula "23"))
         (rule "shift_paren_or" (formula "24") (term "0"))
         (rule "cnf_rightDist" (formula "23") (term "0"))
         (rule "distr_forallAnd" (formula "23"))
         (rule "andLeft" (formula "23"))
         (rule "shift_paren_or" (formula "24") (term "0"))
         (rule "cnf_rightDist" (formula "23") (term "0"))
         (rule "distr_forallAnd" (formula "23"))
         (rule "andLeft" (formula "23"))
         (rule "commute_or_2" (formula "23") (term "0"))
         (rule "shift_paren_or" (formula "24") (term "0"))
         (rule "commute_or" (formula "23") (term "0,0"))
         (rule "all_pull_out3" (formula "43") (term "0"))
         (rule "shift_paren_or" (formula "43") (term "0,0"))
         (rule "shift_paren_or" (formula "43") (term "0,0,0"))
         (rule "shift_paren_or" (formula "43") (term "0,0,0,0"))
         (rule "commute_or_2" (formula "43") (term "0,0,0,0,0"))
         (rule "commute_or" (formula "43") (term "0,0,0,0,0,0"))
         (rule "cut_direct" (formula "30") (term "0,0"))
         (branch "CUT: self.list.tail = null TRUE"
             (builtin "One Step Simplification" (formula "31"))
            (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "31"))
             (builtin "One Step Simplification" (formula "28"))
            (rule "true_left" (formula "28"))
            (rule "replace_known_left" (formula "27") (term "1") (ifseqformula "29"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "true_left" (formula "27"))
            (rule "replace_known_left" (formula "33") (term "0") (ifseqformula "28"))
             (builtin "One Step Simplification" (formula "33"))
            (rule "true_left" (formula "33"))
            (rule "replace_known_left" (formula "38") (term "0") (ifseqformula "28"))
             (builtin "One Step Simplification" (formula "38"))
            (rule "true_left" (formula "38"))
            (rule "replace_known_left" (formula "27") (term "0,1") (ifseqformula "28"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "replace_known_left" (formula "33") (term "1") (ifseqformula "29"))
             (builtin "One Step Simplification" (formula "33"))
            (rule "true_left" (formula "33"))
            (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "29"))
             (builtin "One Step Simplification" (formula "35"))
            (rule "true_left" (formula "35"))
            (rule "replace_known_left" (formula "30") (term "0,1") (ifseqformula "29"))
             (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "27")))
            (rule "true_left" (formula "30"))
            (rule "replace_known_left" (formula "30") (term "0,1") (ifseqformula "29"))
             (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "28")))
            (rule "true_left" (formula "30"))
            (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "29"))
             (builtin "One Step Simplification" (formula "34"))
            (rule "true_left" (formula "34"))
            (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "28"))
             (builtin "One Step Simplification" (formula "32"))
            (rule "true_left" (formula "32"))
            (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "27"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "true_left" (formula "30"))
            (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "27"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "true_left" (formula "31"))
            (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "27"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "true_left" (formula "30"))
            (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "29"))
            (rule "applyEq" (formula "19") (term "0,0,0,0,0,0") (ifseqformula "29"))
            (rule "applyEq" (formula "32") (term "0,1,1,0,0,0") (ifseqformula "29"))
            (rule "applyEq" (formula "30") (term "0,1,0,0,0") (ifseqformula "29"))
            (rule "applyEq" (formula "20") (term "0,1,0,1,0,0,0") (ifseqformula "29"))
            (rule "applyEq" (formula "21") (term "0,1,0,0,0,0,0") (ifseqformula "29"))
            (rule "applyEq" (formula "20") (term "0,0,0,0,0,0") (ifseqformula "29"))
            (rule "applyEq" (formula "30") (term "0,1,0,0,0,0") (ifseqformula "29"))
            (rule "applyEq" (formula "31") (term "0,0,0,0,0,0,0,0,0,0") (ifseqformula "29"))
            (rule "applyEq" (formula "22") (term "0,0,0,0,0,0") (ifseqformula "29"))
            (rule "applyEq" (formula "31") (term "0,1,0,0,0,0,0,0,0,0") (ifseqformula "29"))
            (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "29"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "eqSymm" (formula "16"))
            (rule "applyEq" (formula "8") (term "1,1,1,1,0,0,0,0") (ifseqformula "16"))
            (rule "add_zero_right" (formula "8") (term "1,1,1,0,0,0,0"))
            (rule "applyEq" (formula "23") (term "1,1,0") (ifseqformula "16"))
            (rule "applyEq" (formula "30") (term "1,1,1,0") (ifseqformula "16"))
            (rule "add_zero_right" (formula "30") (term "1,1,0"))
            (rule "applyEq" (formula "8") (term "1,1,1,0,0,0,0,0") (ifseqformula "16"))
            (rule "add_zero_right" (formula "8") (term "1,1,0,0,0,0,0"))
            (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "16"))
            (rule "applyEq" (formula "20") (term "1,1,0") (ifseqformula "16"))
            (rule "applyEq" (formula "10") (term "0") (ifseqformula "16"))
            (rule "qeq_literals" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "applyEq" (formula "12") (term "0") (ifseqformula "15"))
            (rule "inEqSimp_homoInEq1" (formula "12"))
            (rule "mul_literals" (formula "12") (term "1,0"))
            (rule "add_zero_right" (formula "12") (term "0"))
            (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "15"))
            (rule "applyEq" (formula "8") (term "1,1,1,1,0,0") (ifseqformula "15"))
            (rule "add_zero_right" (formula "8") (term "1,1,1,0,0"))
            (rule "applyEq" (formula "31") (term "1,1,0") (ifseqformula "15"))
            (rule "applyEq" (formula "10") (term "2,0") (ifseqformula "15"))
            (rule "applyEq" (formula "17") (term "0") (ifseqformula "15"))
            (rule "leq_literals" (formula "17"))
            (rule "true_left" (formula "17"))
            (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "15"))
            (rule "applyEq" (formula "19") (term "1,1,0") (ifseqformula "15"))
            (rule "applyEq" (formula "23") (term "1,1,0") (ifseqformula "15"))
            (rule "applyEq" (formula "17") (term "1,1,0") (ifseqformula "15"))
            (rule "applyEq" (formula "8") (term "1,1,1,1,0,0,0") (ifseqformula "15"))
            (rule "add_zero_right" (formula "8") (term "1,1,1,0,0,0"))
            (rule "applyEq" (formula "29") (term "1,1,0,0,0") (ifseqformula "15"))
            (rule "applyEq" (formula "29") (term "1,1,0,0,0,0,0") (ifseqformula "15"))
            (rule "applyEq" (formula "16") (term "1") (ifseqformula "15"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12"))
            (rule "mul_literals" (formula "12") (term "1"))
            (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "12"))
            (rule "leq_literals" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "6"))
            (rule "qeq_literals" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "closeFalse" (formula "11"))
         )
         (branch "CUT: self.list.tail = null FALSE"
             (builtin "One Step Simplification" (formula "30"))
            (rule "true_left" (formula "30"))
            (rule "replace_known_right" (formula "33") (term "0") (ifseqformula "45"))
             (builtin "One Step Simplification" (formula "33"))
            (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "45"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "notLeft" (formula "31"))
            (rule "replace_known_right" (formula "27") (term "1") (ifseqformula "45"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "notLeft" (formula "27"))
            (rule "replace_known_right" (formula "34") (term "0") (ifseqformula "45"))
             (builtin "One Step Simplification" (formula "34"))
            (rule "replace_known_right" (formula "37") (term "0") (ifseqformula "45"))
             (builtin "One Step Simplification" (formula "37"))
            (rule "replace_known_right" (formula "28") (term "0,1") (ifseqformula "45"))
             (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "43")))
            (rule "true_left" (formula "28"))
            (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "30"))
             (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "43")))
            (rule "true_left" (formula "31"))
            (rule "replace_known_left" (formula "29") (term "1") (ifseqformula "30"))
             (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "41")))
            (rule "true_left" (formula "29"))
            (rule "replace_known_right" (formula "32") (term "0") (ifseqformula "41"))
             (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "31")))
            (rule "true_left" (formula "32"))
            (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "31"))
             (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "39")))
            (rule "true_left" (formula "30"))
            (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "38"))
             (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "32")))
            (rule "true_left" (formula "31"))
            (rule "replace_known_right" (formula "32") (term "0") (ifseqformula "38"))
             (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "31")))
            (rule "true_left" (formula "32"))
            (rule "replace_known_right" (formula "27") (term "1") (ifseqformula "37"))
             (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "36")))
            (rule "true_left" (formula "27"))
            (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "35"))
             (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "36")))
            (rule "true_left" (formula "27"))
            (rule "equalityToSeqGetAndSeqLenRight" (formula "35") (inst "iv=iv"))
             (builtin "One Step Simplification" (formula "35"))
            (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1"))
            (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1"))
            (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "16"))
            (rule "applyEq" (formula "35") (term "0,1,0,0,1,0,0,1") (ifseqformula "16"))
            (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1"))
            (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1"))
            (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1"))
            (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1"))
            (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1"))
            (rule "nnf_imp2or" (formula "35") (term "0,1"))
            (rule "nnf_notAnd" (formula "35") (term "0,0,1"))
            (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,1"))
            (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0,1"))
            (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,1"))
            (rule "mul_literals" (formula "35") (term "1,0,0,0,1"))
            (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,1"))
            (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1"))
            (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1"))
            (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1"))
            (rule "add_zero_left" (formula "35") (term "0,0,1,0,0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,1"))
            (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,1"))
            (rule "allLeft" (formula "19") (inst "t=int::select(heap, self, LinkedListIterator::$index)"))
            (rule "replace_known_left" (formula "19") (term "0,0,0") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "19") (term "0") (ifseqformula "6"))
            (rule "qeq_literals" (formula "19") (term "0,0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "inEqSimp_contradInEq1" (formula "19") (ifseqformula "13"))
            (rule "andLeft" (formula "19"))
            (rule "inEqSimp_homoInEq1" (formula "19"))
            (rule "polySimp_pullOutFactor1b" (formula "19") (term "0"))
            (rule "add_literals" (formula "19") (term "1,1,0"))
            (rule "times_zero_1" (formula "19") (term "1,0"))
            (rule "add_zero_right" (formula "19") (term "0"))
            (rule "leq_literals" (formula "19"))
            (rule "closeFalse" (formula "19"))
         )
      )
      (branch "self.index >= 1 FALSE"
         (rule "inEqSimp_geqRight" (formula "15"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "inEqSimp_antiSymm" (formula "7") (ifseqformula "1"))
         (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "7"))
         (rule "applyEq" (formula "9") (term "1,1,1,1,1,1,1,0,1,0") (ifseqformula "7"))
         (rule "add_literals" (formula "9") (term "1,1,1,1,1,1,0,1,0"))
         (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "7"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "applyEq" (formula "9") (term "1,1,0,1,1,0,1,0") (ifseqformula "7"))
         (rule "applyEq" (formula "8") (term "0") (ifseqformula "7"))
         (rule "qeq_literals" (formula "8"))
         (rule "true_left" (formula "8"))
         (rule "applyEq" (formula "1") (term "0") (ifseqformula "7"))
         (rule "leq_literals" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "applyEq" (formula "7") (term "1,1,0,0,1,0,1,0") (ifseqformula "6"))
         (rule "applyEq" (formula "9") (term "2,0") (ifseqformula "6"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "eqSymm" (formula "9"))
         (rule "applyEq" (formula "7") (term "1,1,0,1,1,0,1,0,1,0") (ifseqformula "6"))
         (rule "add_zero_right" (formula "7") (term "1,0,1,1,0,1,0,1,0"))
         (rule "applyEq" (formula "12") (term "1,1") (ifseqformula "6"))
         (rule "add_zero_right" (formula "12") (term "1"))
         (rule "applyEq" (formula "8") (term "0,1,1,1,1,1,1,1,0,1,0") (ifseqformula "11"))
         (rule "applyEq" (formula "8") (term "0,1,1,1,0,0") (ifseqformula "11"))
         (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "11"))
         (rule "applyEq" (formula "8") (term "0,1,1,1,0,0,1,0,1,0") (ifseqformula "11"))
         (rule "applyEq" (formula "7") (term "0,1,1,0,0,1,1,0,1,0") (ifseqformula "11"))
         (rule "applyEq" (formula "7") (term "0,0,0,0,0,0,0,1,0,1,0") (ifseqformula "11"))
         (rule "applyEq" (formula "8") (term "0,1,1,0,0,1,1,0,1,0") (ifseqformula "11"))
         (rule "applyEq" (formula "8") (term "0,1,1,1,0,1,1,0,1,0") (ifseqformula "11"))
         (rule "applyEq" (formula "8") (term "0,0,0,0,0,0,0,1,0,1,0") (ifseqformula "11"))
         (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "11"))
         (rule "applyEq" (formula "8") (term "0,1,1,0,1,1,0,1,0,1,0") (ifseqformula "11"))
         (rule "applyEq" (formula "8") (term "0,1,0,1,0,1,1,0,1,0,1,0") (ifseqformula "6"))
         (rule "times_zero_2" (formula "8") (term "1,0,1,0,1,1,0,1,0,1,0"))
         (rule "add_literals" (formula "8") (term "0,1,0,1,1,0,1,0,1,0"))
         (rule "applyEq" (formula "8") (term "0,0,1,1,0,0,1,0,1,0") (ifseqformula "6"))
         (rule "times_zero_2" (formula "8") (term "0,1,1,0,0,1,0,1,0"))
         (rule "add_zero_left" (formula "8") (term "1,1,0,0,1,0,1,0"))
         (rule "applyEq" (formula "8") (term "0,0,1,1,0,0") (ifseqformula "6"))
         (rule "times_zero_2" (formula "8") (term "0,1,1,0,0"))
         (rule "add_zero_left" (formula "8") (term "1,1,0,0"))
         (rule "applyEq" (formula "8") (term "0,0,1,1,0,1,1,0,1,0") (ifseqformula "6"))
         (rule "times_zero_2" (formula "8") (term "0,1,1,0,1,1,0,1,0"))
         (rule "add_zero_left" (formula "8") (term "1,1,0,1,1,0,1,0"))
         (rule "applyEq" (formula "8") (term "0,1,0,1,1,1,1,1,1,0,1,0") (ifseqformula "6"))
         (rule "times_zero_2" (formula "8") (term "1,0,1,1,1,1,1,1,0,1,0"))
         (rule "add_literals" (formula "8") (term "0,1,1,1,1,1,1,0,1,0"))
         (rule "applyEq" (formula "8") (term "0,1,0,0,0,0,0,0,1,0,1,0") (ifseqformula "6"))
         (rule "add_zero_left" (formula "8") (term "1,0,0,0,0,0,0,1,0,1,0"))
         (rule "applyEq" (formula "8") (term "0,1,1,1,0,0,1,1,0,1,0") (ifseqformula "6"))
         (rule "add_zero_left" (formula "8") (term "1,1,1,0,0,1,1,0,1,0"))
         (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "12"))
         (rule "leq_literals" (formula "10") (term "0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "inEqSimp_or_tautInEq0" (formula "7") (term "0,0"))
         (rule "add_zero_right" (formula "7") (term "1,1,0,0"))
         (rule "qeq_literals" (formula "7") (term "1,0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "true_left" (formula "7"))
         (rule "commute_or" (formula "7") (term "0,0,1,1,0,1,0"))
         (rule "cnf_rightDist" (formula "7") (term "1,1,1,0,1,0"))
         (rule "commute_or" (formula "7") (term "1,1,1,1,0,1,0"))
         (rule "shift_paren_and" (formula "7") (term "0,1,0,1,0"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1") (ifseqformula "2"))
         (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "14"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "1") (term "0") (ifseqformula "2"))
         (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "shift_paren_and" (formula "7") (term "1,1,0,1,0"))
         (rule "shift_paren_and" (formula "7") (term "1,0,1,0"))
         (rule "shift_paren_and" (formula "7") (term "0,1,0,1,0"))
         (rule "shift_paren_and" (formula "7") (term "0,1,0"))
         (rule "shift_paren_and" (formula "7") (term "0,0,1,0"))
         (rule "shift_paren_and" (formula "7") (term "0,0,0,1,0"))
         (rule "shift_paren_and" (formula "7") (term "0,0,0,0,1,0"))
         (rule "shift_paren_and" (formula "7") (term "0,0,0,0,0,1,0"))
         (rule "ex_pull_out3" (formula "7") (term "0"))
         (rule "cnf_rightDist" (formula "7") (term "0,0"))
         (rule "shift_paren_or" (formula "7") (term "1,0,0"))
         (rule "commute_or_2" (formula "7") (term "0,1,0,0"))
         (rule "inEqSimp_or_tautInEq1" (formula "7") (term "1,0,0"))
         (rule "inEqSimp_homoInEq1" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_pullOutFactor1" (formula "7") (term "0,1,1,0,0"))
         (rule "add_literals" (formula "7") (term "1,0,1,1,0,0"))
         (rule "times_zero_1" (formula "7") (term "0,1,1,0,0"))
         (rule "leq_literals" (formula "7") (term "1,1,0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "cnf_rightDist" (formula "7") (term "0,0"))
         (rule "shift_paren_or" (formula "7") (term "1,0,0"))
         (rule "inEqSimp_or_tautInEq3" (formula "7") (term "0,1,0,0"))
         (rule "add_zero_right" (formula "7") (term "1,1,0,1,0,0"))
         (rule "qeq_literals" (formula "7") (term "1,0,1,0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "cnf_rightDist" (formula "7") (term "0,0"))
         (rule "shift_paren_or" (formula "7") (term "1,0,0"))
         (rule "commute_or_2" (formula "7") (term "0,1,0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
         (rule "commute_or_2" (formula "7") (term "1,0,0,0"))
         (rule "shift_paren_or" (formula "7") (term "0,1,0,0,0"))
         (rule "commute_or" (formula "7") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_or_tautInEq1" (formula "7") (term "0,1,0,0,0"))
         (rule "inEqSimp_homoInEq1" (formula "7") (term "1,0,1,0,0,0"))
         (rule "polySimp_pullOutFactor1" (formula "7") (term "0,1,0,1,0,0,0"))
         (rule "add_literals" (formula "7") (term "1,0,1,0,1,0,0,0"))
         (rule "times_zero_1" (formula "7") (term "0,1,0,1,0,0,0"))
         (rule "leq_literals" (formula "7") (term "1,0,1,0,0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
         (rule "commute_or_2" (formula "7") (term "1,0,0,0"))
         (rule "shift_paren_or" (formula "7") (term "0,1,0,0,0"))
         (rule "inEqSimp_or_tautInEq2" (formula "7") (term "0,0,1,0,0,0"))
         (rule "add_zero_right" (formula "7") (term "1,1,0,0,1,0,0,0"))
         (rule "qeq_literals" (formula "7") (term "1,0,0,1,0,0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
         (rule "shift_paren_or" (formula "7") (term "1,0,0,0"))
         (rule "commute_or_2" (formula "7") (term "0,1,0,0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "cnf_rightDist" (formula "7") (term "0,0,0,0"))
         (rule "commute_or_2" (formula "7") (term "0,0,0,0,0"))
         (rule "shift_paren_or" (formula "7") (term "1,0,0,0,0"))
         (rule "commute_or" (formula "7") (term "0,0,0,0,0,0"))
         (rule "seqGetAlphaCast" (formula "11") (term "0"))
         (rule "castedGetAny" (formula "11") (term "0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "equalityToSeqGetAndSeqLenLeft" (formula "9") (inst "iv=iv"))
         (rule "andLeft" (formula "9"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
         (rule "applyEq" (formula "10") (term "0,0,1,0") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "10"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "equalityToSeqGetAndSeqLenLeft" (formula "8") (inst "iv=iv"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
         (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "10"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "true_left" (formula "8"))
         (rule "applyEq" (formula "8") (term "0,0,1,0") (ifseqformula "9"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "true_left" (formula "8"))
         (rule "lenNonNegative" (formula "10") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "10"))
         (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "11"))
         (rule "leq_literals" (formula "10") (term "0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "commute_and_2" (formula "7") (term "0,0,0"))
         (rule "commute_and_2" (formula "7") (term "0,0"))
         (rule "commute_and" (formula "7") (term "0,0,0,0"))
         (rule "Partial_inv_axiom_for_JML_class_invariant_nr_2_in_LinkedList" (formula "13") (inst "i=i") (inst "i_0=i_0") (inst "j=j") (inst "i_1=i_1") (inst "i_2=i_2") (inst "f=f") (inst "i_3=i_3") (inst "n=n_1"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "translateJavaSubInt" (formula "13") (term "1,1,0,0,1,0,0"))
         (rule "translateJavaSubInt" (formula "13") (term "1,0,1,1,1,1,0,0,0"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "eqSymm" (formula "20") (term "0,1,0,1,0"))
         (rule "eqSymm" (formula "20") (term "1,1,0,1,0"))
         (rule "eqSymm" (formula "19") (term "1,0"))
         (rule "eqSymm" (formula "18") (term "1,0,1"))
         (rule "eqSymm" (formula "18") (term "1,1"))
         (rule "eqSymm" (formula "14"))
         (rule "polySimp_elimSub" (formula "19") (term "1,1,0,0"))
         (rule "mul_literals" (formula "19") (term "1,1,1,0,0"))
         (rule "polySimp_elimSub" (formula "18") (term "1,0,0,1,1"))
         (rule "mul_literals" (formula "18") (term "1,1,0,0,1,1"))
         (rule "polySimp_addComm0" (formula "19") (term "1,0,0,1,0"))
         (rule "polySimp_addComm0" (formula "19") (term "1,1,0,0"))
         (rule "polySimp_addComm0" (formula "18") (term "1,0,0,1,1"))
         (rule "castedGetAny" (formula "21") (term "1,1,1,0"))
         (rule "castedGetAny" (formula "20") (term "0,0,1,0,1,0"))
         (rule "castedGetAny" (formula "20") (term "1,0,1,0,1,0"))
         (rule "castedGetAny" (formula "19") (term "1,1,1,0"))
         (rule "castedGetAny" (formula "18") (term "0,1,0,1"))
         (rule "castedGetAny" (formula "19") (term "0,1,0"))
         (rule "eqSymm" (formula "19") (term "1,0"))
         (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
         (rule "castedGetAny" (formula "18") (term "0,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
         (rule "applyEq" (formula "21") (term "0,0,1,0,0,1,0,0") (ifseqformula "9"))
         (rule "applyEq" (formula "21") (term "0,0,1,0") (ifseqformula "9"))
         (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "9"))
         (rule "eqSymm" (formula "14"))
         (rule "applyEq" (formula "15") (term "0") (ifseqformula "13"))
         (rule "applyEq" (formula "18") (term "1,1,0,1,1") (ifseqformula "13"))
         (rule "applyEq" (formula "18") (term "0,1,0,1") (ifseqformula "11"))
         (rule "eqSymm" (formula "18") (term "1,0,1"))
         (rule "applyEq" (formula "17") (term "0,0,1,0,0,1,0,0") (ifseqformula "9"))
         (rule "applyEq" (formula "17") (term "0,1,0,1,0,1,0") (ifseqformula "9"))
         (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "13"))
         (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "13"))
         (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "13"))
         (rule "applyEq" (formula "16") (term "0,1,0,0,1,0,0") (ifseqformula "13"))
         (rule "applyEq" (formula "13") (term "0") (ifseqformula "14"))
         (rule "applyEq" (formula "7") (term "1,1,1,0,0,0,0") (ifseqformula "13"))
         (rule "applyEq" (formula "7") (term "1,1,1,0,0") (ifseqformula "13"))
         (rule "applyEq" (formula "10") (term "0") (ifseqformula "13"))
         (rule "applyEq" (formula "7") (term "1,1,0,0,0,0,0") (ifseqformula "13"))
         (rule "applyEq" (formula "7") (term "1,1,1,0,0,0") (ifseqformula "13"))
         (rule "applyEq" (formula "21") (term "0,1,0,0,1,0,0") (ifseqformula "13"))
         (rule "applyEq" (formula "14") (term "1") (ifseqformula "13"))
         (rule "applyEq" (formula "17") (term "0,1,0,0,1,0,0") (ifseqformula "13"))
         (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1,0"))
         (rule "mul_literals" (formula "20") (term "0,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
         (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
         (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
         (rule "nnf_imp2or" (formula "20") (term "1,0,1,0"))
         (rule "nnf_imp2or" (formula "19") (term "0"))
         (rule "nnf_imp2or" (formula "16") (term "0"))
         (rule "nnf_imp2or" (formula "21") (term "0"))
         (rule "nnf_imp2or" (formula "17") (term "0"))
         (rule "nnf_imp2or" (formula "20") (term "0"))
         (rule "nnf_notAnd" (formula "19") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
         (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "19") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
         (rule "mul_literals" (formula "19") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "16") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
         (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "16") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
         (rule "mul_literals" (formula "16") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "21") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
         (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
         (rule "mul_literals" (formula "21") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "17") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
         (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "17") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
         (rule "mul_literals" (formula "17") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "20") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
         (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "20") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
         (rule "mul_literals" (formula "20") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
         (rule "nnf_imp2or" (formula "20") (term "0,1,0"))
         (rule "nnf_notAnd" (formula "20") (term "0,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,1,0"))
         (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0,1,0"))
         (rule "add_literals" (formula "20") (term "0,0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,1,0"))
         (rule "mul_literals" (formula "20") (term "1,0,0,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,1,0"))
         (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,1,0"))
         (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,1,0"))
         (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,1,0"))
         (rule "commute_and" (formula "18") (term "0,0"))
         (rule "commute_and_2" (formula "18") (term "0,1"))
         (rule "commute_or_2" (formula "19") (term "0"))
         (rule "commute_or_2" (formula "21") (term "0"))
         (rule "commute_and" (formula "16") (term "0,0,1,0"))
         (rule "commute_and" (formula "16") (term "1,0,1,0"))
         (rule "commute_and" (formula "17") (term "1,0,1,0"))
         (rule "commute_and" (formula "17") (term "0,0,1,0"))
         (rule "commute_or" (formula "19") (term "0,0"))
         (rule "commute_or" (formula "21") (term "0,0"))
         (rule "commute_and_2" (formula "18") (term "0"))
         (rule "cnf_rightDist" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "cnf_rightDist" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "cnf_rightDist" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "commute_or" (formula "19"))
         (rule "cnf_rightDist" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "cnf_rightDist" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "commute_or" (formula "20"))
         (rule "cnf_rightDist" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "commute_or" (formula "19"))
         (rule "shift_paren_or" (formula "26") (term "0,1,0"))
         (rule "commute_and_2" (formula "18") (term "1"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "18"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "true_left" (formula "24"))
         (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "19"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "true_left" (formula "24"))
         (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "20"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "true_left" (formula "24"))
         (rule "replace_known_left" (formula "21") (term "0") (ifseqformula "18"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "true_left" (formula "21"))
         (rule "replace_known_left" (formula "21") (term "0") (ifseqformula "19"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "true_left" (formula "21"))
         (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "20"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "true_left" (formula "21"))
         (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "20"))
         (rule "applyEq" (formula "21") (term "0,1,0,0,0,0") (ifseqformula "20"))
         (rule "applyEq" (formula "22") (term "0,0,0,1,0,0,1,0") (ifseqformula "20"))
         (rule "applyEq" (formula "23") (term "0,1,1,0,0,0") (ifseqformula "20"))
         (rule "applyEq" (formula "21") (term "0,1,0,0,0") (ifseqformula "20"))
         (rule "applyEq" (formula "22") (term "0,1,0,1,0,0,1,0") (ifseqformula "20"))
         (rule "applyEq" (formula "16") (term "0,1,1,1,0,1,0") (ifseqformula "20"))
         (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "20"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "eqSymm" (formula "14"))
         (rule "applyEq" (formula "17") (term "1,1,0,0") (ifseqformula "14"))
         (rule "applyEq" (formula "16") (term "1,1,0,0") (ifseqformula "14"))
         (rule "applyEq" (formula "21") (term "1,1,1,0") (ifseqformula "14"))
         (rule "add_zero_right" (formula "21") (term "1,1,0"))
         (rule "applyEq" (formula "10") (term "0") (ifseqformula "14"))
         (rule "qeq_literals" (formula "10"))
         (rule "closeFalse" (formula "10"))
      )
   )
   (branch "self.list.values.length >= 1 + self.index FALSE"
      (rule "true_left" (formula "13"))
      (rule "replace_known_right" (formula "10") (term "0,1,1,0,0") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "replace_known_right" (formula "6") (term "0,0") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "qeq_literals" (formula "6"))
      (rule "closeFalse" (formula "6"))
   )
)
)
}
