\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Jun 15 12:20:48 BST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:off , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=1000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_OFF
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "..";

\proofObligation "#Proof Obligation Settings
#Wed Jun 15 12:20:48 BST 2022
contract=Main[Main\\:\\:useFiles(LinkedList)].JML normal_behavior operation contract.0
name=Main[Main\\:\\:useFiles(LinkedList)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "JOTA" ) (keyVersion "666bcb0c95"))
(keyLog "1" (keyUser "JOTA" ) (keyVersion "666bcb0c95"))
(keyLog "2" (keyUser "JOTA" ) (keyVersion "666bcb0c95"))
(keyLog "3" (keyUser "JOTA" ) (keyVersion "666bcb0c95"))
(keyLog "4" (keyUser "JOTA" ) (keyVersion "666bcb0c95"))
(keyLog "5" (keyUser "JOTA" ) (keyVersion "666bcb0c95"))
(keyLog "6" (keyUser "JOTA" ) (keyVersion "666bcb0c95"))
(keyLog "7" (keyUser "JOTA" ) (keyVersion "666bcb0c95"))
(keyLog "8" (keyUser "JOTA" ) (keyVersion "666bcb0c95"))
(keyLog "9" (keyUser "JOTA" ) (keyVersion "666bcb0c95"))
(keyLog "10" (keyUser "JOTA" ) (keyVersion "666bcb0c95"))
(keyLog "11" (keyUser "JOTA" ) (keyVersion "666bcb0c95"))
(keyLog "12" (keyUser "JOTA" ) (keyVersion "666bcb0c95"))
(keyLog "13" (keyUser "JOTA" ) (keyVersion "666bcb0c95"))

(autoModeTime "13416")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "eqSymm" (formula "8") (term "1,0,0,1,0,1"))
(rule "eqSymm" (formula "6") (term "1,1,0,1,0"))
(rule "eqSymm" (formula "6") (term "0,1,0,1,0"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "7"))
 (builtin "One Step Simplification" (formula "2"))
(rule "castedGetAny" (formula "8") (term "1,1,0,2,0,0,0,0,1,0,1"))
(rule "castedGetAny" (formula "6") (term "0,0,1,0,1,0"))
(rule "castedGetAny" (formula "6") (term "1,0,1,0,1,0"))
(rule "elementOfInfiniteUnion" (formula "8") (term "0,0,0,0,1,0,1"))
 (builtin "One Step Simplification" (formula "8"))
(rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,0,0,0,0,1,0,1"))
(rule "assignment" (formula "8") (term "1"))
 (builtin "One Step Simplification" (formula "8"))
(rule "commute_and" (formula "6") (term "0,0"))
(rule "commute_and" (formula "5") (term "0,0"))
(rule "commute_and" (formula "5") (term "0,0,1,0"))
(rule "commute_or" (formula "5") (term "1,0,0,1,0"))
(rule "commute_or" (formula "5") (term "1,0,0,1,0"))
(rule "commute_and" (formula "6") (term "0,0,1,0"))
(rule "commute_and" (formula "5") (term "0,0,1,0,1,0"))
(rule "applyEq_and_gen2" (formula "5") (term "0,0,1,0,1,0"))
(rule "commute_and_2" (formula "5") (term "0,1,0,1,0"))
(rule "commute_and_2" (formula "5") (term "1,0,1,0"))
(rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_useFiles,savedHeapBefore_useFiles"))
 (builtin "One Step Simplification" (formula "8"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "it"))
(rule "shift_paren_and" (formula "5") (term "0,1,0"))
 (builtin "One Step Simplification" (formula "5"))
(rule "castedGetAny" (formula "5") (term "0,0,1,0,0,1,0"))
(rule "castedGetAny" (formula "5") (term "0,0,0,0,0,1,0"))
(rule "castedGetAny" (formula "5") (term "1,0,1,1,0,0,1,0"))
(rule "castedGetAny" (formula "5") (term "1,0,1,1,0,1,0"))
(rule "castedGetAny" (formula "5") (term "1,1,0,1,0,1,0"))
(rule "commute_and_2" (formula "5") (term "0,1,0"))
(rule "shift_paren_and" (formula "5") (term "0,0,1,0"))
(rule "shift_paren_and" (formula "5") (term "0,0,0,1,0"))
(rule "commute_and_2" (formula "5") (term "1,0"))
(rule "commute_and_2" (formula "5") (term "0,1,0"))
(rule "commute_and_2" (formula "5") (term "0,0,1,0"))
 (builtin "Use Operation Contract" (formula "8") (newnames "heapBefore_iterator,result_21,exc_25,heapAfter_iterator,anon_heap_iterator") (contract "LinkedList[LinkedList::iterator()].JML normal_behavior operation contract.0"))
(branch "Post (iterator)"
    (builtin "One Step Simplification" (formula "10"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1,1,0") (ifseqformula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "16"))
   (rule "notLeft" (formula "11"))
   (rule "notLeft" (formula "11"))
   (rule "andLeft" (formula "15"))
   (rule "notLeft" (formula "16"))
   (rule "replace_known_right" (formula "9") (term "0,1") (ifseqformula "18"))
    (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "17")))
   (rule "assignment" (formula "20") (term "1"))
    (builtin "One Step Simplification" (formula "20"))
   (rule "pullOutSelect" (formula "12") (term "0") (inst "selectSK=LinkedListIterator_seen_0"))
   (rule "simplifySelectOfAnonEQ" (formula "12") (ifseqformula "8"))
    (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "18")) (ifInst ""  (formula "19")))
   (rule "hideAuxiliaryEq" (formula "12"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "12") (term "0"))
   (rule "pullOutSelect" (formula "13") (term "1") (inst "selectSK=LinkedList_values_0"))
   (rule "simplifySelectOfAnonEQ" (formula "14") (ifseqformula "8"))
    (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "18")) (ifInst ""  (formula "19")))
   (rule "simplifySelectOfAnonEQ" (formula "13") (ifseqformula "8"))
    (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "20")) (ifInst ""  (formula "2")))
   (rule "hideAuxiliaryEq" (formula "14"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "13") (term "1"))
   (rule "eqSymm" (formula "13"))
   (rule "pullOutSelect" (formula "14") (term "0") (inst "selectSK=LinkedListIterator_list_0"))
   (rule "simplifySelectOfAnonEQ" (formula "14") (ifseqformula "8"))
    (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "18")) (ifInst ""  (formula "19")))
   (rule "hideAuxiliaryEq" (formula "14"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_6" (formula "14") (term "0"))
    (builtin "Use Operation Contract" (formula "20") (newnames "heapBefore_recursive,exc_26,heapAfter_recursive,anon_heap_recursive") (contract "Main[Main::recursive(LinkedList,LinkedListIterator)].JML normal_behavior operation contract.0"))
   (branch "Post (recursive)"
       (builtin "One Step Simplification" (formula "18"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "replaceKnownSelect_taclet0_2" (formula "18") (term "0,1,1,0,0,1,1,0,0"))
      (rule "replaceKnownSelect_taclet0_2" (formula "18") (term "0,0,1,1,0,1,1,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "18") (term "0,1,1,0,0,1,1,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "18") (term "0,0,1,1,0,1,1,0,0"))
      (rule "andLeft" (formula "18"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1,0,0,0,1,0,1,0,0,0,1") (ifseqformula "18"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "0,1,0,0,0,1,0,1,0,0,0,1") (ifseqformula "8"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "20"))
      (rule "eqSymm" (formula "24") (term "1,1,0,1,0"))
      (rule "eqSymm" (formula "24") (term "0,1,0,1,0"))
      (rule "castedGetAny" (formula "18") (term "1,1,0,1,1,0"))
      (rule "castedGetAny" (formula "24") (term "1,0,1,0,1,0"))
      (rule "castedGetAny" (formula "24") (term "0,0,1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
      (rule "pullOutSelect" (formula "25") (term "0") (inst "selectSK=LinkedListIterator_to_see_0"))
      (rule "simplifySelectOfAnonEQ" (formula "25") (ifseqformula "18"))
       (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "27")))
      (rule "replaceKnownSelect_taclet0_2" (formula "25") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "25") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0,1,0,0") (ifseqformula "8"))
      (rule "replace_known_left" (formula "25") (term "1,0,1,0,0") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "28")))
      (rule "applyEqRigid" (formula "25") (term "1") (ifseqformula "26"))
      (rule "elementOfUnion" (formula "25") (term "0,0"))
      (rule "elementOfInfiniteUnion" (formula "25") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "25"))
      (rule "pullOutSelect" (formula "24") (term "0,1,1,0,0") (inst "selectSK=LinkedListIterator_seen_1"))
      (rule "simplifySelectOfAnonEQ" (formula "24") (ifseqformula "18"))
       (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "28")))
      (rule "replaceKnownSelect_taclet0_0" (formula "24") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "24") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "0,1,0,0") (ifseqformula "8"))
      (rule "replaceKnownSelect_taclet00_8" (formula "23") (term "0,1,1,0,0"))
      (rule "replaceKnownSelect_taclet00_8" (formula "25") (term "0,1,0,1,0,1,0"))
      (rule "replaceKnownSelect_taclet00_8" (formula "25") (term "0,0,0,1,0,1,0"))
      (rule "replaceKnownSelect_taclet00_8" (formula "25") (term "0,1,1,0,0,1,0"))
      (rule "replaceKnownSelect_taclet00_8" (formula "23") (term "0,1,0,0,0,1,0,1,0"))
      (rule "replace_known_right" (formula "24") (term "0,0,1,0,0") (ifseqformula "29"))
       (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "9")))
      (rule "elementOfUnion" (formula "24") (term "0,0"))
      (rule "elementOfInfiniteUnion" (formula "24") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "24"))
      (rule "pullOutSelect" (formula "22") (term "0") (inst "selectSK=LinkedListIterator_list_1"))
      (rule "simplifySelectOfAnonEQ" (formula "22") (ifseqformula "18"))
       (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "29")))
      (rule "replaceKnownSelect_taclet0_5" (formula "22") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_6" (formula "22") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "0,1,0,0") (ifseqformula "8"))
      (rule "eqSymm" (formula "23"))
      (rule "hideAuxiliaryEq" (formula "23"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_10" (formula "22") (term "1"))
      (rule "replace_known_right" (formula "22") (term "0,0,1,0,0") (ifseqformula "29"))
       (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "9")))
      (rule "elementOfUnion" (formula "22") (term "0,0"))
      (rule "elementOfInfiniteUnion" (formula "22") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "commute_and" (formula "25") (term "0,0"))
      (rule "commute_and" (formula "23") (term "0,0"))
      (rule "shift_paren_or" (formula "23") (term "0,0,0,1,0"))
      (rule "methodCallEmpty" (formula "31") (term "1"))
      (rule "commute_and" (formula "18") (term "0,0,1,1,0"))
      (rule "commute_and" (formula "25") (term "0,0,1,0"))
      (rule "commute_and_2" (formula "23") (term "1,0,1,0"))
      (rule "commute_and" (formula "26") (term "0,0,1,0,0"))
      (rule "commute_and" (formula "24") (term "0,0,1,0,0"))
      (rule "commute_and_2" (formula "26") (term "0,1,0,0"))
      (rule "commute_and_2" (formula "24") (term "0,1,0,0"))
      (rule "commute_and" (formula "22") (term "0,0,1,0,0"))
      (rule "commute_and_2" (formula "22") (term "0,1,0,0"))
      (rule "shift_paren_or" (formula "23") (term "0,0,0,0,1,0"))
      (rule "commute_and" (formula "23") (term "0,0,1,0"))
      (rule "tryEmpty" (formula "31") (term "1"))
      (rule "shift_paren_and" (formula "23") (term "0,1,0"))
      (rule "emptyModality" (formula "31") (term "1"))
       (builtin "One Step Simplification" (formula "31"))
      (rule "cut_direct" (formula "22") (term "0,0,0") (userinteraction))
      (branch "CUT: (result_21, LinkedListIterator::$list) in result_21.footprint @heapAfter_iterator TRUE"
          (builtin "One Step Simplification" (formula "23"))
         (rule "cut_direct" (formula "25") (term "0,0,0") (userinteraction))
         (branch "CUT: (result_21, LinkedListIterator::$seen) in result_21.footprint @heapAfter_iterator TRUE"
             (builtin "One Step Simplification" (formula "26"))
            (rule "cut_direct" (formula "28") (term "0,0,0") (userinteraction))
            (branch "CUT: (result_21, LinkedListIterator::$to_see) in result_21.footprint @heapAfter_iterator TRUE"
                (builtin "One Step Simplification" (formula "29"))
               (rule "eqTermCut" (formula "34") (term "0,1,1,0,0,0") (inst "s=Seq::select(heap, list, LinkedList::$values)") (userinteraction))
               (branch "Assume list.values@heapAfter_recursive = list.values"
                  (rule "eqTermCut" (formula "27") (term "1") (inst "s=Seq::select(heap, list, LinkedList::$values)") (userinteraction))
                  (branch "Assume LinkedListIterator_seen_1<<selectSK>> = list.values"
                     (rule "applyEq" (formula "36") (term "0,1,1,0,0,0") (ifseqformula "1") (userinteraction))
                     (rule "applyEq" (formula "36") (term "0,1,0,0,0,1,0,1,0,0") (ifseqformula "1") (userinteraction))
                     (rule "applyEqReverse" (formula "27") (term "0") (ifseqformula "28") (userinteraction))
                     (rule "andRight" (formula "36") (userinteraction))
                     (branch "Case 1"
                         (builtin "SMTRule")
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "36") (inst "sk=f_0") (userinteraction))
                        (rule "allRight" (formula "36") (inst "sk=o_0") (userinteraction))
                        (rule "orRight" (formula "36") (userinteraction))
                        (rule "orRight" (formula "36") (userinteraction))
                        (rule "selectOfAnonEQ" (formula "38") (term "1") (ifseqformula "19") (userinteraction))
                        (rule "applyEq" (formula "38") (term "0,1,1,0,1,2,0,0,0,1") (ifseqformula "14") (userinteraction))
                        (rule "applyEq" (formula "38") (term "0,1,0,0,0,1,2,0,0,0,1") (ifseqformula "14") (userinteraction))
                         (builtin "One Step Simplification" (formula "38"))
                        (rule "selectOfAnonEQ" (formula "38") (term "2,1") (ifseqformula "9") (userinteraction))
                         (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "37")))
                        (rule "elementOfUnion" (formula "38") (term "0,0,0,1") (userinteraction))
                        (rule "elementOfInfiniteUnion" (formula "38") (term "1,0,0,0,1") (userinteraction))
                         (builtin "One Step Simplification" (formula "38"))
                        (rule "ifthenelse_split" (formula "38") (term "1") (userinteraction))
                        (branch " ( (o_0, f_0) in result_21.footprint @heapAfter_iterator | exists int i; ( i < list.values.length & i >= 0 & (o_0, f_0) in (FileReader)list.values[i].footprint @heapAfter_iterator)) & !f_0 = java.lang.Object::<created> | !o_0 = null & !o_0.<created>@heapAfter_iterator = TRUE TRUE"
                           (rule "orLeft" (formula "1") (userinteraction))
                           (branch " ( (o_0, f_0) in result_21.footprint @heapAfter_iterator | exists int i; ( i < list.values.length & i >= 0 & (o_0, f_0) in (FileReader)list.values[i].footprint @heapAfter_iterator)) & !f_0 = java.lang.Object::<created>"
                              (rule "andLeft" (formula "1") (userinteraction))
                              (rule "orLeft" (formula "1") (userinteraction))
                              (branch "(o_0, f_0) in result_21.footprint@heapAfter_iterator"
                                 (rule "JML_represents_clause_for_LinkedListIterator_footprint" (formula "1") (term "2") (userinteraction))
                                 (rule "elementOfUnion" (formula "1") (userinteraction))
                                 (rule "elementOfUnion" (formula "1") (term "0") (userinteraction))
                                 (rule "elementOfUnion" (formula "1") (term "0,0") (userinteraction))
                                 (rule "elementOfUnion" (formula "1") (term "0,0,0") (userinteraction))
                                 (rule "notLeft" (formula "2"))
                                 (rule "applyEqReverse" (formula "30") (term "0,0,0,1,0,1,0") (ifseqformula "29"))
                                 (rule "applyEqReverse" (formula "30") (term "0,1,0,1,0,1,0") (ifseqformula "29"))
                                 (rule "applyEqReverse" (formula "26") (term "0,1,0,0,0") (ifseqformula "29"))
                                 (rule "applyEqReverse" (formula "26") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "29"))
                                 (rule "applyEqReverse" (formula "30") (term "0,1,0,0,0,1,0") (ifseqformula "29"))
                                 (rule "applyEqReverse" (formula "30") (term "0,1,0,0,0") (ifseqformula "29"))
                                 (rule "hideAuxiliaryEq" (formula "29"))
                                 (rule "eqSymm" (formula "39"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                                 (rule "elementOfSingleton" (formula "1") (term "1,0"))
                                 (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "37") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "29") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "29") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,0,0"))
                                 (rule "applyEq" (formula "26") (term "0,0,1,0,0,0,0,0") (ifseqformula "28"))
                                 (rule "applyEq" (formula "20") (term "0,0,1,0,0,0,0,0,1,1,0") (ifseqformula "15"))
                                 (rule "applyEq" (formula "20") (term "0,1,1,0,1,1,0") (ifseqformula "15"))
                                 (rule "applyEq" (formula "29") (term "0,0,1,0,0,0,0,0") (ifseqformula "28"))
                                 (rule "applyEq" (formula "29") (term "0,0,1,0,0,0,0,0,1,0") (ifseqformula "28"))
                                 (rule "applyEq" (formula "29") (term "0,0,0,1,0,1,0") (ifseqformula "28"))
                                 (rule "applyEq" (formula "26") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "28"))
                                 (rule "applyEq" (formula "29") (term "0,1,0,1,0,1,0") (ifseqformula "28"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,1,0"))
                                 (rule "mul_literals" (formula "8") (term "0,1,0,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "36") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "26") (term "0,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,0,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,1,1,0"))
                                 (rule "elementOfSubsetImpliesElementOfSuperset" (formula "29") (ifseqformula "13"))
                                  (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "34")) (ifInst ""  (formula "35")))
                                 (rule "true_left" (formula "29"))
                                 (rule "elementOfSubsetImpliesElementOfSuperset" (formula "27") (ifseqformula "13"))
                                  (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "34")) (ifInst ""  (formula "35")))
                                 (rule "true_left" (formula "27"))
                                 (rule "elementOfSubsetImpliesElementOfSuperset" (formula "24") (ifseqformula "13"))
                                  (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "34")) (ifInst ""  (formula "35")))
                                 (rule "true_left" (formula "24"))
                                 (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=LinkedList_values_1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "21"))
                                  (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "36")))
                                 (rule "replaceKnownSelect_taclet0_3" (formula "2") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "2") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0") (ifseqformula "11"))
                                 (rule "eqSymm" (formula "3"))
                                 (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "replace_known_left" (formula "2") (term "0,0,1,0,0") (ifseqformula "4"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "applyEq" (formula "2") (term "2,0") (ifseqformula "15"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "elementOfUnion" (formula "2") (term "0,0"))
                                 (rule "elementOfInfiniteUnion" (formula "2") (term "1,0,0"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "nnf_ex2all" (formula "36"))
                                 (rule "nnf_imp2or" (formula "9") (term "1,0,1,0"))
                                 (rule "nnf_imp2or" (formula "8") (term "0"))
                                 (rule "nnf_imp2or" (formula "27") (term "0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0"))
                                 (rule "nnf_imp2or" (formula "9") (term "0"))
                                 (rule "nnf_notAnd" (formula "8") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "8") (term "1,0,0"))
                                 (rule "mul_literals" (formula "8") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "8") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                                 (rule "mul_literals" (formula "8") (term "1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "8") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "8") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "8") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "8") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "27") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "27") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "27") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "27") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "27") (term "1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "27") (term "1,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "27") (term "1,0,0"))
                                 (rule "mul_literals" (formula "27") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "27") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
                                 (rule "mul_literals" (formula "27") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "9") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0"))
                                 (rule "mul_literals" (formula "9") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "9") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                                 (rule "mul_literals" (formula "9") (term "1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "9") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "9") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "9") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "9") (term "1,0,0,0"))
                                 (rule "nnf_imp2or" (formula "9") (term "0,1,0"))
                                 (rule "nnf_notAnd" (formula "9") (term "0,0,1,0"))
                                 (rule "inEqSimp_notLeq" (formula "9") (term "0,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0,1,0"))
                                 (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0,1,0"))
                                 (rule "add_literals" (formula "9") (term "0,0,0,0,0,0,1,0"))
                                 (rule "add_zero_left" (formula "9") (term "0,0,0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "9") (term "1,0,0,0,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0,1,0"))
                                 (rule "add_zero_right" (formula "9") (term "0,0,1,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,1,0"))
                                 (rule "mul_literals" (formula "9") (term "1,1,0,0,1,0"))
                                 (rule "commute_and" (formula "2") (term "1"))
                                 (rule "commute_and" (formula "2") (term "1,0"))
                                 (rule "commute_and" (formula "2") (term "1,0,0"))
                                 (rule "commute_and" (formula "2") (term "0,0,0,0"))
                                 (rule "commute_and" (formula "2") (term "1,0,0,0"))
                                 (rule "commute_or" (formula "8") (term "0,0"))
                                 (rule "commute_or_2" (formula "1") (term "0"))
                                 (rule "commute_or" (formula "27") (term "0,0"))
                                 (rule "commute_or" (formula "9") (term "0,0"))
                                 (rule "commute_and" (formula "21") (term "0,0,1,1,0"))
                                 (rule "commute_and_2" (formula "3") (term "0,1,0,0"))
                                 (rule "commute_or" (formula "1") (term "0,0"))
                                 (rule "cnf_rightDist" (formula "8") (term "0"))
                                 (rule "distr_forallAnd" (formula "8"))
                                 (rule "andLeft" (formula "8"))
                                 (rule "shift_paren_or" (formula "9") (term "0"))
                                 (rule "shift_paren_or" (formula "10") (term "0,1,0"))
                                 (rule "commute_and" (formula "28") (term "0,1,0,0,1,0"))
                                 (rule "cnf_rightDist" (formula "8") (term "0"))
                                 (rule "distr_forallAnd" (formula "8"))
                                 (rule "andLeft" (formula "8"))
                                 (rule "commute_or" (formula "9") (term "0"))
                                 (rule "cnf_rightDist" (formula "8") (term "0"))
                                 (rule "distr_forallAnd" (formula "8"))
                                 (rule "andLeft" (formula "8"))
                                 (rule "shift_paren_or" (formula "9") (term "0"))
                                 (rule "cnf_rightDist" (formula "8") (term "0"))
                                 (rule "distr_forallAnd" (formula "8"))
                                 (rule "andLeft" (formula "8"))
                                 (rule "shift_paren_or" (formula "9") (term "0"))
                                 (rule "commute_or_2" (formula "13") (term "0,0,1,0"))
                                 (rule "cnf_rightDist" (formula "8") (term "0"))
                                 (rule "distr_forallAnd" (formula "8"))
                                 (rule "andLeft" (formula "8"))
                                 (rule "commute_or_2" (formula "8") (term "0"))
                                 (rule "shift_paren_or" (formula "9") (term "0"))
                                 (rule "commute_or" (formula "8") (term "0,0"))
                                 (rule "orLeft" (formula "2"))
                                 (branch " f_0 = LinkedListIterator::$list & o_0 = result_21 | f_0 = LinkedListIterator::$curr & o_0 = result_21 | f_0 = LinkedListIterator::$index & o_0 = result_21 | f_0 = LinkedListIterator::$seen & o_0 = result_21"
                                    (rule "applyEq_and_gen2" (formula "32") (term "0,1,0,0,1,0"))
                                    (rule "commute_or" (formula "14") (term "0,0,0,1,0"))
                                    (rule "commute_or_2" (formula "14") (term "0,0,1,0"))
                                    (rule "orLeft" (formula "2"))
                                    (branch " f_0 = LinkedListIterator::$list & o_0 = result_21 | f_0 = LinkedListIterator::$curr & o_0 = result_21 | f_0 = LinkedListIterator::$index & o_0 = result_21"
                                       (rule "cnf_rightDist" (formula "2") (term "0"))
                                       (rule "commute_or" (formula "2") (term "0,0"))
                                       (rule "cnf_rightDist" (formula "2") (term "1,0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "commute_or" (formula "2") (term "0,1,0"))
                                       (rule "commute_and" (formula "2") (term "1,0"))
                                       (rule "cnf_rightDist" (formula "2") (term "0,0"))
                                       (rule "commute_and_2" (formula "2") (term "0"))
                                       (rule "commute_or" (formula "2") (term "1,0"))
                                       (rule "orLeft" (formula "2"))
                                       (branch " ( f_0 = LinkedListIterator::$curr | f_0 = LinkedListIterator::$list) & ( o_0 = result_21 & (f_0 = LinkedListIterator::$list | o_0 = result_21)) & (f_0 = LinkedListIterator::$curr | o_0 = result_21)"
                                          (rule "andLeft" (formula "2"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "andLeft" (formula "3"))
                                          (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "3"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "3"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "applyEq" (formula "1") (term "0,0,0,0,0") (ifseqformula "3"))
                                          (rule "applyEq" (formula "43") (term "1,0,0,1") (ifseqformula "3"))
                                          (rule "replace_known_right" (formula "43") (term "0,1") (ifseqformula "41"))
                                           (builtin "One Step Simplification" (formula "43"))
                                          (rule "notRight" (formula "43"))
                                          (rule "applyEq" (formula "44") (term "1,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "44") (term "1,1") (ifseqformula "4"))
                                          (rule "applyEq" (formula "4") (term "0") (ifseqformula "1"))
                                          (rule "eqSymm" (formula "4"))
                                          (rule "close" (formula "41") (ifseqformula "4"))
                                       )
                                       (branch "f_0 = LinkedListIterator::$index & o_0 = result_21"
                                          (rule "andLeft" (formula "2"))
                                          (rule "applyEqRigid" (formula "39") (term "0") (ifseqformula "2"))
                                           (builtin "One Step Simplification" (formula "39"))
                                          (rule "false_right" (formula "39"))
                                          (rule "applyEqRigid" (formula "43") (term "2,1") (ifseqformula "2"))
                                          (rule "narrowSelectType" (formula "43") (term "1") (ifseqformula "5"))
                                          (rule "applyEqRigid" (formula "43") (term "2,0") (ifseqformula "2"))
                                          (rule "narrowSelectType" (formula "43") (term "0") (ifseqformula "26"))
                                          (rule "applyEqRigid" (formula "1") (term "1,0,0,0,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "42") (term "1,0,0,1") (ifseqformula "3"))
                                          (rule "replace_known_right" (formula "42") (term "0,1") (ifseqformula "40"))
                                           (builtin "One Step Simplification" (formula "42"))
                                          (rule "notRight" (formula "42"))
                                          (rule "applyEq" (formula "2") (term "0,0,0,0,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "1") (term "0") (ifseqformula "4"))
                                          (rule "close" (formula "40") (ifseqformula "1"))
                                       )
                                    )
                                    (branch "f_0 = LinkedListIterator::$seen & o_0 = result_21"
                                       (rule "andLeft" (formula "2"))
                                       (rule "applyEq" (formula "44") (term "1,1") (ifseqformula "3"))
                                       (rule "applyEqRigid" (formula "39") (term "0") (ifseqformula "2"))
                                        (builtin "One Step Simplification" (formula "39"))
                                       (rule "false_right" (formula "39"))
                                       (rule "applyEqRigid" (formula "43") (term "2,1") (ifseqformula "2"))
                                       (rule "narrowSelectType" (formula "43") (term "1") (ifseqformula "5"))
                                       (rule "applyEq" (formula "43") (term "2,0") (ifseqformula "2"))
                                       (rule "narrowSelectType" (formula "43") (term "0") (ifseqformula "26"))
                                       (rule "applyEq" (formula "1") (term "0,0,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "1") (term "1,0,0,0,0") (ifseqformula "2"))
                                       (rule "applyEq" (formula "42") (term "1,0,0,1") (ifseqformula "3"))
                                       (rule "replace_known_right" (formula "42") (term "0,1") (ifseqformula "40"))
                                        (builtin "One Step Simplification" (formula "42"))
                                       (rule "notRight" (formula "42"))
                                       (rule "applyEq" (formula "43") (term "1,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "4") (term "0") (ifseqformula "1"))
                                       (rule "eqSymm" (formula "4"))
                                       (rule "close" (formula "40") (ifseqformula "4"))
                                    )
                                 )
                                 (branch "f_0 = LinkedListIterator::$to_see & o_0 = result_21"
                                    (rule "andLeft" (formula "2"))
                                    (rule "applyEq" (formula "1") (term "1,0,0,0,0") (ifseqformula "2"))
                                    (rule "applyEq" (formula "44") (term "2,0") (ifseqformula "2"))
                                    (rule "narrowSelectType" (formula "44") (term "0") (ifseqformula "26"))
                                    (rule "eqSymm" (formula "44"))
                                    (rule "applyEq" (formula "43") (term "0,0,0") (ifseqformula "3"))
                                    (rule "replace_known_right" (formula "43") (term "0,0") (ifseqformula "40"))
                                     (builtin "One Step Simplification" (formula "43"))
                                    (rule "notRight" (formula "43"))
                                    (rule "applyEq" (formula "2") (term "0,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEqRigid" (formula "40") (term "0") (ifseqformula "3"))
                                     (builtin "One Step Simplification" (formula "40"))
                                    (rule "false_right" (formula "40"))
                                    (rule "applyEq" (formula "43") (term "1,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "43") (term "1,1") (ifseqformula "4"))
                                    (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "4"))
                                    (rule "close" (formula "41") (ifseqformula "1"))
                                 )
                              )
                              (branch "exists int i; ( i < list.values.length & i >= 0 & (o_0, f_0) in (FileReader)list.values[i].footprint @heapAfter_iterator)"
                                 (rule "exLeft" (formula "1") (inst "sk=i_0") (userinteraction))
                                 (rule "andLeft" (formula "1") (userinteraction))
                                 (rule "andLeft" (formula "1") (userinteraction))
                                 (rule "JML_represents_clause_for_FileReader_footprint" (formula "3") (term "2") (userinteraction))
                                 (rule "JML_represents_clause_for_FileReader_footprint" (formula "40") (term "2,1,0") (userinteraction))
                                 (rule "notLeft" (formula "4"))
                                 (rule "applyEqReverse" (formula "32") (term "0,1,0,0,0") (ifseqformula "31"))
                                 (rule "applyEqReverse" (formula "28") (term "0,1,0,0,0") (ifseqformula "31"))
                                 (rule "applyEqReverse" (formula "28") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "31"))
                                 (rule "applyEqReverse" (formula "32") (term "0,1,0,0,0,1,0") (ifseqformula "31"))
                                 (rule "applyEqReverse" (formula "32") (term "0,1,0,1,0,1,0") (ifseqformula "31"))
                                 (rule "applyEqReverse" (formula "32") (term "0,0,0,1,0,1,0") (ifseqformula "31"))
                                 (rule "hideAuxiliaryEq" (formula "31"))
                                 (rule "eqSymm" (formula "41"))
                                 (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "31") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "31") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,0,0,0,1,0"))
                                 (rule "applyEq" (formula "22") (term "0,0,1,0,0,0,0,0,1,1,0") (ifseqformula "17"))
                                 (rule "applyEq" (formula "31") (term "0,1,0,1,0,1,0") (ifseqformula "30"))
                                 (rule "applyEq" (formula "31") (term "0,0,1,0,0,0,0,0") (ifseqformula "30"))
                                 (rule "applyEq" (formula "22") (term "0,1,1,0,1,1,0") (ifseqformula "17"))
                                 (rule "applyEq" (formula "28") (term "0,0,1,0,0,0,0,0") (ifseqformula "30"))
                                 (rule "applyEq" (formula "31") (term "0,0,1,0,0,0,0,0,1,0") (ifseqformula "30"))
                                 (rule "applyEq" (formula "31") (term "0,0,0,1,0,1,0") (ifseqformula "30"))
                                 (rule "applyEq" (formula "28") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "30"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "38") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,1,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,0,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "22") (term "0,1,0,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,0"))
                                 (rule "elementOfUnion" (formula "3"))
                                 (rule "elementOfSingleton" (formula "3") (term "1"))
                                 (rule "eqSymm" (formula "3") (term "0,1"))
                                 (rule "elementOfSingleton" (formula "3") (term "0"))
                                 (rule "eqSymm" (formula "3") (term "0,0"))
                                 (rule "elementOfUnion" (formula "38") (term "1,0"))
                                 (rule "elementOfSingleton" (formula "38") (term "0,1,0"))
                                 (rule "eqSymm" (formula "38") (term "0,0,1,0"))
                                 (rule "elementOfSingleton" (formula "38") (term "1,1,0"))
                                 (rule "eqSymm" (formula "38") (term "0,1,1,0"))
                                 (rule "elementOfSubsetImpliesElementOfSuperset" (formula "31") (ifseqformula "15"))
                                  (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "36")) (ifInst ""  (formula "37")))
                                 (rule "true_left" (formula "31"))
                                 (rule "elementOfSubsetImpliesElementOfSuperset" (formula "26") (ifseqformula "15"))
                                  (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "36")) (ifInst ""  (formula "37")))
                                 (rule "true_left" (formula "26"))
                                 (rule "elementOfSubsetImpliesElementOfSuperset" (formula "29") (ifseqformula "15"))
                                  (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "36")) (ifInst ""  (formula "37")))
                                 (rule "true_left" (formula "29"))
                                 (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=LinkedList_values_1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "23"))
                                  (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "38")))
                                 (rule "replaceKnownSelect_taclet0_3" (formula "4") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "4") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "4") (term "0,1,0,0") (ifseqformula "13"))
                                 (rule "eqSymm" (formula "5"))
                                 (rule "applyEqReverse" (formula "4") (term "1") (ifseqformula "5"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "replace_known_left" (formula "4") (term "0,0,1,0,0") (ifseqformula "6"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "applyEq" (formula "4") (term "2,0") (ifseqformula "17"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "elementOfUnion" (formula "4") (term "0,0"))
                                 (rule "elementOfInfiniteUnion" (formula "4") (term "1,0,0"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "nnf_ex2all" (formula "38"))
                                 (rule "nnf_imp2or" (formula "11") (term "1,0,1,0"))
                                 (rule "nnf_imp2or" (formula "10") (term "0"))
                                 (rule "nnf_imp2or" (formula "29") (term "0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0"))
                                 (rule "nnf_imp2or" (formula "11") (term "0"))
                                 (rule "nnf_notAnd" (formula "10") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "10") (term "1,0,0"))
                                 (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "10") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                                 (rule "mul_literals" (formula "10") (term "1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "10") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "10") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "10") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "10") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "29") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "29") (term "1,0,0"))
                                 (rule "mul_literals" (formula "29") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "29") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
                                 (rule "mul_literals" (formula "29") (term "1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "29") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "29") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "29") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "29") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "29") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "29") (term "1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "29") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                 (rule "nnf_notOr" (formula "1") (term "1,0"))
                                 (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "11") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "11") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0"))
                                 (rule "nnf_imp2or" (formula "11") (term "0,1,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,1,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "1,1,0"))
                                 (rule "nnf_notAnd" (formula "11") (term "0,0,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0,1,0"))
                                 (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0,1,0"))
                                 (rule "add_zero_right" (formula "11") (term "0,0,1,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0"))
                                 (rule "mul_literals" (formula "11") (term "1,1,0,0,1,0"))
                                 (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,1,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,1,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,1,0"))
                                 (rule "add_zero_left" (formula "11") (term "0,0,0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0,1,0"))
                                 (rule "commute_and" (formula "4") (term "1"))
                                 (rule "commute_and" (formula "4") (term "0"))
                                 (rule "commute_or" (formula "10") (term "0,0"))
                                 (rule "commute_or" (formula "29") (term "0,0"))
                                 (rule "commute_and" (formula "23") (term "0,0,1,1,0"))
                                 (rule "commute_or" (formula "11") (term "0,0"))
                                 (rule "commute_and_2" (formula "5") (term "0,1,0,0"))
                                 (rule "cnf_rightDist" (formula "1") (term "0"))
                                 (rule "distr_forallAnd" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "commute_or_2" (formula "2") (term "0"))
                                 (rule "shift_paren_or" (formula "1") (term "0"))
                                 (rule "commute_or_2" (formula "1") (term "0,0"))
                                 (rule "cnf_rightDist" (formula "5"))
                                 (rule "andLeft" (formula "5"))
                                 (rule "commute_or" (formula "5"))
                                 (rule "cnf_rightDist" (formula "6"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "andLeft" (formula "6"))
                                 (rule "replace_known_left" (formula "5") (term "1,1") (ifseqformula "7"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "replace_known_left" (formula "6") (term "0") (ifseqformula "7"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "shift_paren_or" (formula "2") (term "0,0"))
                                 (rule "cnf_rightDist" (formula "12") (term "0"))
                                 (rule "distr_forallAnd" (formula "12"))
                                 (rule "andLeft" (formula "12"))
                                 (rule "shift_paren_or" (formula "13") (term "0"))
                                 (rule "commute_or" (formula "1") (term "0,0,0"))
                                 (rule "commute_and" (formula "32") (term "0,1,0,0,1,0"))
                                 (rule "commute_or" (formula "14") (term "0,0,1,0"))
                                 (rule "cnf_rightDist" (formula "12") (term "0"))
                                 (rule "distr_forallAnd" (formula "12"))
                                 (rule "andLeft" (formula "12"))
                                 (rule "commute_or" (formula "13") (term "0"))
                                 (rule "cnf_rightDist" (formula "12") (term "0"))
                                 (rule "distr_forallAnd" (formula "12"))
                                 (rule "andLeft" (formula "12"))
                                 (rule "shift_paren_or" (formula "13") (term "0"))
                                 (rule "cnf_rightDist" (formula "12") (term "0"))
                                 (rule "distr_forallAnd" (formula "12"))
                                 (rule "andLeft" (formula "12"))
                                 (rule "shift_paren_or" (formula "13") (term "0"))
                                 (rule "shift_paren_or" (formula "17") (term "0,1,0"))
                                 (rule "cnf_rightDist" (formula "12") (term "0"))
                                 (rule "distr_forallAnd" (formula "12"))
                                 (rule "andLeft" (formula "12"))
                                 (rule "commute_or_2" (formula "12") (term "0"))
                                 (rule "shift_paren_or" (formula "13") (term "0"))
                                 (rule "commute_or" (formula "12") (term "0,0"))
                                 (rule "commute_or_2" (formula "18") (term "0,0,1,0"))
                                 (rule "applyEq_and_gen2" (formula "36") (term "0,1,0,0,1,0"))
                                 (rule "commute_and" (formula "7") (term "0,0,1,0,0"))
                                 (rule "cut_direct" (formula "46") (term "0,0"))
                                 (branch "CUT: o_0 = null TRUE"
                                     (builtin "One Step Simplification" (formula "47"))
                                    (rule "false_right" (formula "47"))
                                    (rule "applyEqRigid" (formula "47") (term "1,1") (ifseqformula "1"))
                                    (rule "applyEq" (formula "3") (term "1,0,0,0,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "47") (term "1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "7") (term "1") (ifseqformula "1"))
                                    (rule "commute_or" (formula "19") (term "0,0,0,1,0"))
                                    (rule "equalityToSeqGetAndSeqLenLeft" (formula "26") (inst "iv=iv"))
                                    (rule "andLeft" (formula "26"))
                                    (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                                    (rule "applyEq" (formula "27") (term "0,0,1,0,0,1,0,0") (ifseqformula "28"))
                                    (rule "applyEq" (formula "27") (term "0,0,1,0") (ifseqformula "28"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "true_left" (formula "27"))
                                    (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "27"))
                                     (builtin "One Step Simplification" (formula "26"))
                                    (rule "true_left" (formula "26"))
                                    (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "38"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "38") (term "1") (ifseqformula "21"))
                                    (rule "replace_known_right" (formula "38") (term "0,1") (ifseqformula "46"))
                                     (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "45")) (ifInst ""  (formula "22")))
                                    (rule "true_left" (formula "38"))
                                    (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "35"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "35") (term "1") (ifseqformula "21"))
                                    (rule "replace_known_right" (formula "35") (term "0,1") (ifseqformula "46"))
                                     (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "45")) (ifInst ""  (formula "22")))
                                    (rule "true_left" (formula "35"))
                                    (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "40"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "1") (ifseqformula "21"))
                                    (rule "replace_known_right" (formula "40") (term "0,1") (ifseqformula "46"))
                                     (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "45")) (ifInst ""  (formula "22")))
                                    (rule "true_left" (formula "40"))
                                    (rule "equalityToSeqGetAndSeqLenLeft" (formula "42") (inst "iv=iv"))
                                     (builtin "One Step Simplification" (formula "42"))
                                    (rule "andLeft" (formula "42"))
                                    (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0"))
                                    (rule "applyEqRigid" (formula "42") (term "0,0") (ifseqformula "44"))
                                     (builtin "One Step Simplification" (formula "42"))
                                    (rule "true_left" (formula "42"))
                                    (rule "applyEq" (formula "42") (term "0,0,1,0") (ifseqformula "43"))
                                     (builtin "One Step Simplification" (formula "42"))
                                    (rule "true_left" (formula "42"))
                                    (rule "equalityToSeqGetAndSeqLenLeft" (formula "25") (inst "iv=iv"))
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "andLeft" (formula "25"))
                                    (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                                    (rule "applyEq" (formula "26") (term "0,0,1,0") (ifseqformula "27"))
                                     (builtin "One Step Simplification" (formula "26"))
                                    (rule "true_left" (formula "26"))
                                    (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "26"))
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "true_left" (formula "25"))
                                    (rule "equalityToSeqGetAndSeqLenLeft" (formula "41") (inst "iv=iv"))
                                     (builtin "One Step Simplification" (formula "41"))
                                    (rule "andLeft" (formula "41"))
                                    (rule "inEqSimp_ltToLeq" (formula "42") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "42") (term "0,0,0"))
                                    (rule "applyEq" (formula "42") (term "0,0,1,0,0,1,0,0") (ifseqformula "43"))
                                     (builtin "One Step Simplification" (formula "42"))
                                    (rule "mul_literals" (formula "42") (term "1,0,0,1,0,0"))
                                    (rule "add_zero_right" (formula "42") (term "0,0,1,0,0"))
                                    (rule "applyEq" (formula "41") (term "0,0") (ifseqformula "43"))
                                     (builtin "One Step Simplification" (formula "41"))
                                    (rule "true_left" (formula "41"))
                                    (rule "applyEq" (formula "41") (term "0,0,1,0") (ifseqformula "42"))
                                     (builtin "One Step Simplification" (formula "41"))
                                    (rule "true_left" (formula "41"))
                                    (rule "equalityToSeqGetAndSeqLenLeft" (formula "39") (inst "iv=iv"))
                                    (rule "andLeft" (formula "39"))
                                    (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0"))
                                    (rule "applyEq" (formula "39") (term "0,0") (ifseqformula "41"))
                                     (builtin "One Step Simplification" (formula "39"))
                                    (rule "true_left" (formula "39"))
                                    (rule "applyEq" (formula "39") (term "0,0,1,0,0,1,0,0") (ifseqformula "40"))
                                    (rule "applyEq" (formula "39") (term "0,0,1,0") (ifseqformula "40"))
                                     (builtin "One Step Simplification" (formula "39"))
                                    (rule "true_left" (formula "39"))
                                    (rule "commute_and_2" (formula "8") (term "0,1,0,0"))
                                    (rule "commute_and_2" (formula "37") (term "1,0,0,1,0"))
                                    (rule "lenNonNegative" (formula "4") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "4"))
                                    (rule "cut_direct" (formula "2") (term "0,1,0"))
                                    (branch "CUT: f_0 = FileReader::$state TRUE"
                                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "15")))
                                       (rule "true_left" (formula "3"))
                                       (rule "replace_known_left" (formula "7") (term "1") (ifseqformula "2"))
                                        (builtin "One Step Simplification" (formula "7"))
                                       (rule "true_left" (formula "7"))
                                       (rule "applyEq" (formula "3") (term "0,0,1,0") (ifseqformula "2"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "applyEq" (formula "46") (term "2,0") (ifseqformula "2"))
                                       (rule "narrowSelectType" (formula "46") (term "0") (ifseqformula "29"))
                                       (rule "eqSymm" (formula "46"))
                                       (rule "applyEq" (formula "42") (term "0") (ifseqformula "2"))
                                        (builtin "One Step Simplification" (formula "42"))
                                       (rule "false_right" (formula "42"))
                                       (rule "applyEq" (formula "45") (term "2,0") (ifseqformula "2"))
                                       (rule "narrowSelectType" (formula "45") (term "0") (ifseqformula "8"))
                                       (rule "eqSymm" (formula "45"))
                                       (rule "all_pull_out3" (formula "18") (term "0"))
                                       (rule "shift_paren_or" (formula "18") (term "0,0"))
                                       (rule "shift_paren_or" (formula "18") (term "0,0,0"))
                                       (rule "shift_paren_or" (formula "18") (term "0,0,0,0"))
                                       (rule "commute_or_2" (formula "18") (term "0,0,0,0,0"))
                                       (rule "commute_or" (formula "18") (term "0,0,0,0,0,0"))
                                       (rule "allLeft" (formula "12") (inst "t=i_0"))
                                       (rule "replace_known_left" (formula "12") (term "0,0,0") (ifseqformula "6"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "4"))
                                       (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
                                       (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "12") (term "0,0,1"))
                                       (rule "leq_literals" (formula "12") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "inEqSimp_contradInEq1" (formula "12") (ifseqformula "5"))
                                       (rule "qeq_literals" (formula "12") (term "0"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "closeFalse" (formula "12"))
                                    )
                                    (branch "CUT: f_0 = FileReader::$state FALSE"
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "true_left" (formula "2"))
                                       (rule "replace_known_right" (formula "6") (term "1") (ifseqformula "43"))
                                        (builtin "One Step Simplification" (formula "6"))
                                       (rule "replace_known_left" (formula "2") (term "0,1,0") (ifseqformula "6"))
                                        (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "13")))
                                       (rule "true_left" (formula "2"))
                                       (rule "applyEq" (formula "43") (term "0") (ifseqformula "5"))
                                        (builtin "One Step Simplification" (formula "43"))
                                       (rule "false_right" (formula "43"))
                                       (rule "applyEqRigid" (formula "46") (term "2,0") (ifseqformula "5"))
                                       (rule "narrowSelectType" (formula "46") (term "0") (ifseqformula "29"))
                                       (rule "eqSymm" (formula "46"))
                                       (rule "applyEq" (formula "42") (term "0") (ifseqformula "5"))
                                        (builtin "One Step Simplification" (formula "42"))
                                       (rule "false_right" (formula "42"))
                                       (rule "applyEqRigid" (formula "45") (term "2,0") (ifseqformula "5"))
                                       (rule "narrowSelectType" (formula "45") (term "0") (ifseqformula "8"))
                                       (rule "eqSymm" (formula "45"))
                                       (rule "all_pull_out3" (formula "18") (term "0"))
                                       (rule "shift_paren_or" (formula "18") (term "0,0"))
                                       (rule "shift_paren_or" (formula "18") (term "0,0,0"))
                                       (rule "shift_paren_or" (formula "18") (term "0,0,0,0"))
                                       (rule "commute_or_2" (formula "18") (term "0,0,0,0,0"))
                                       (rule "commute_or" (formula "18") (term "0,0,0,0,0,0"))
                                       (rule "allLeft" (formula "12") (inst "t=i_0"))
                                       (rule "replace_known_left" (formula "12") (term "0,0,0") (ifseqformula "6"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "3"))
                                       (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
                                       (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "12") (term "0,0,1"))
                                       (rule "leq_literals" (formula "12") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "inEqSimp_contradInEq1" (formula "12") (ifseqformula "4"))
                                       (rule "qeq_literals" (formula "12") (term "0"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "closeFalse" (formula "12"))
                                    )
                                 )
                                 (branch "CUT: o_0 = null FALSE"
                                     (builtin "One Step Simplification" (formula "47"))
                                    (rule "notRight" (formula "47"))
                                    (rule "commute_or" (formula "19") (term "0,0,0,1,0"))
                                    (rule "equalityToSeqGetAndSeqLenLeft" (formula "26") (inst "iv=iv"))
                                    (rule "andLeft" (formula "26"))
                                    (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                                    (rule "applyEq" (formula "27") (term "0,0,1,0") (ifseqformula "28"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "true_left" (formula "27"))
                                    (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "27"))
                                     (builtin "One Step Simplification" (formula "26"))
                                    (rule "true_left" (formula "26"))
                                    (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "38"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "38") (term "1") (ifseqformula "21"))
                                    (rule "replace_known_right" (formula "38") (term "0") (ifseqformula "45"))
                                     (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "46")) (ifInst ""  (formula "22")))
                                    (rule "true_left" (formula "38"))
                                    (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "35"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "35") (term "1") (ifseqformula "21"))
                                    (rule "replace_known_right" (formula "35") (term "0") (ifseqformula "45"))
                                     (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "46")) (ifInst ""  (formula "22")))
                                    (rule "true_left" (formula "35"))
                                    (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "40"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "1") (ifseqformula "21"))
                                    (rule "replace_known_right" (formula "40") (term "0") (ifseqformula "45"))
                                     (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "46")) (ifInst ""  (formula "22")))
                                    (rule "true_left" (formula "40"))
                                    (rule "equalityToSeqGetAndSeqLenLeft" (formula "42") (inst "iv=iv"))
                                     (builtin "One Step Simplification" (formula "42"))
                                    (rule "andLeft" (formula "42"))
                                    (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0"))
                                    (rule "applyEq" (formula "43") (term "0,0,1,0,0,1,0,0") (ifseqformula "44"))
                                     (builtin "One Step Simplification" (formula "43"))
                                    (rule "mul_literals" (formula "43") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "43") (term "0,0,1,0,0"))
                                    (rule "applyEq" (formula "42") (term "0,0") (ifseqformula "44"))
                                     (builtin "One Step Simplification" (formula "42"))
                                    (rule "true_left" (formula "42"))
                                    (rule "applyEq" (formula "42") (term "0,0,1,0") (ifseqformula "43"))
                                     (builtin "One Step Simplification" (formula "42"))
                                    (rule "true_left" (formula "42"))
                                    (rule "equalityToSeqGetAndSeqLenLeft" (formula "41") (inst "iv=iv"))
                                     (builtin "One Step Simplification" (formula "41"))
                                    (rule "andLeft" (formula "41"))
                                    (rule "inEqSimp_ltToLeq" (formula "42") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "42") (term "0,0,0"))
                                    (rule "applyEq" (formula "42") (term "0,0,1,0") (ifseqformula "43"))
                                     (builtin "One Step Simplification" (formula "42"))
                                    (rule "true_left" (formula "42"))
                                    (rule "applyEq" (formula "41") (term "0,0") (ifseqformula "42"))
                                     (builtin "One Step Simplification" (formula "41"))
                                    (rule "true_left" (formula "41"))
                                    (rule "equalityToSeqGetAndSeqLenLeft" (formula "25") (inst "iv=iv"))
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "andLeft" (formula "25"))
                                    (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                                    (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "27"))
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "true_left" (formula "25"))
                                    (rule "applyEq" (formula "25") (term "0,0,1,0") (ifseqformula "26"))
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "true_left" (formula "25"))
                                    (rule "equalityToSeqGetAndSeqLenLeft" (formula "39") (inst "iv=iv"))
                                    (rule "andLeft" (formula "39"))
                                    (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0"))
                                    (rule "applyEq" (formula "39") (term "0,0") (ifseqformula "41"))
                                     (builtin "One Step Simplification" (formula "39"))
                                    (rule "true_left" (formula "39"))
                                    (rule "applyEq" (formula "39") (term "0,0,1,0,0,1,0,0") (ifseqformula "40"))
                                    (rule "applyEq" (formula "39") (term "0,0,1,0") (ifseqformula "40"))
                                     (builtin "One Step Simplification" (formula "39"))
                                    (rule "true_left" (formula "39"))
                                    (rule "commute_and_2" (formula "8") (term "0,1,0,0"))
                                    (rule "commute_and_2" (formula "37") (term "1,0,0,1,0"))
                                    (rule "lenNonNegative" (formula "4") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "4"))
                                    (rule "cut_direct" (formula "2") (term "0,1,0"))
                                    (branch "CUT: f_0 = FileReader::$state TRUE"
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "replace_known_left" (formula "8") (term "1") (ifseqformula "2"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "true_left" (formula "8"))
                                       (rule "applyEq" (formula "44") (term "0") (ifseqformula "2"))
                                        (builtin "One Step Simplification" (formula "44"))
                                       (rule "false_right" (formula "44"))
                                       (rule "applyEq" (formula "4") (term "0,0,1,0") (ifseqformula "2"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "applyEqRigid" (formula "47") (term "2,1") (ifseqformula "2"))
                                       (rule "narrowSelectType" (formula "47") (term "1") (ifseqformula "9"))
                                       (rule "applyEqRigid" (formula "47") (term "2,0") (ifseqformula "2"))
                                       (rule "narrowSelectType" (formula "47") (term "0") (ifseqformula "30"))
                                       (rule "all_pull_out3" (formula "19") (term "0"))
                                       (rule "shift_paren_or" (formula "19") (term "0,0"))
                                       (rule "shift_paren_or" (formula "19") (term "0,0,0"))
                                       (rule "shift_paren_or" (formula "19") (term "0,0,0,0"))
                                       (rule "commute_or_2" (formula "19") (term "0,0,0,0,0"))
                                       (rule "commute_or" (formula "19") (term "0,0,0,0,0,0"))
                                        (builtin "Use Dependency Contract" (formula "24") (term "0") (ifInst ""  (formula "21") (term "0")) (ifInst ""  (formula "21")) (contract "LinkedListIterator[LinkedListIterator::$footprint()].JML accessible clause.0"))
                                       (rule "wellFormedAnonEQ" (formula "43") (term "1,1,0,0") (ifseqformula "21"))
                                       (rule "replace_known_left" (formula "43") (term "0,1,0,0") (ifseqformula "9"))
                                        (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "44")) (ifInst ""  (formula "45")) (ifInst ""  (formula "9")) (ifInst ""  (formula "20")))
                                       (rule "true_left" (formula "43"))
                                       (rule "shift_paren_and" (formula "37") (term "0,0,1,0"))
                                       (rule "commute_and_2" (formula "37") (term "0,0,0,1,0"))
                                       (rule "seqGetAlphaCast" (formula "7") (term "0"))
                                       (rule "castedGetAny" (formula "7") (term "0"))
                                        (builtin "One Step Simplification" (formula "7"))
                                       (rule "true_left" (formula "7"))
                                       (rule "shift_paren_and" (formula "37") (term "0,0,0,0,1,0"))
                                       (rule "commute_and_2" (formula "37") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "37"))
                                       (rule "castedGetAny" (formula "37") (term "0,0,0,0,1,0,0,1,0"))
                                       (rule "castedGetAny" (formula "37") (term "1,0,1,0,0,1,0,0,1,0"))
                                       (rule "castedGetAny" (formula "37") (term "1,1,0,0,0,1,0"))
                                       (rule "castedGetAny" (formula "37") (term "1,0,1,0,1,0,0,1,0"))
                                       (rule "castedGetAny" (formula "37") (term "1,0,1,0,1,0"))
                                       (rule "castedGetAny" (formula "37") (term "1,0,1,1,0,0,1,0"))
                                       (rule "castedGetAny" (formula "37") (term "0,0,0,0,0,0,0,1,0"))
                                       (rule "cnf_rightDist" (formula "37") (term "0"))
                                       (rule "distr_forallAnd" (formula "37"))
                                       (rule "andLeft" (formula "37"))
                                       (rule "shift_paren_or" (formula "38") (term "0"))
                                       (rule "cnf_rightDist" (formula "37") (term "0"))
                                       (rule "distr_forallAnd" (formula "37"))
                                       (rule "andLeft" (formula "37"))
                                       (rule "commute_or" (formula "38") (term "0"))
                                       (rule "cnf_rightDist" (formula "37") (term "0"))
                                       (rule "distr_forallAnd" (formula "37"))
                                       (rule "andLeft" (formula "37"))
                                       (rule "shift_paren_or" (formula "38") (term "0"))
                                       (rule "cnf_rightDist" (formula "37") (term "0"))
                                       (rule "distr_forallAnd" (formula "37"))
                                       (rule "andLeft" (formula "37"))
                                       (rule "shift_paren_or" (formula "38") (term "0"))
                                       (rule "cnf_rightDist" (formula "37") (term "0"))
                                       (rule "distr_forallAnd" (formula "37"))
                                       (rule "andLeft" (formula "37"))
                                       (rule "commute_or_2" (formula "37") (term "0"))
                                       (rule "shift_paren_or" (formula "38") (term "0"))
                                       (rule "commute_or" (formula "37") (term "0,0"))
                                       (rule "allLeft" (formula "3") (inst "t=i_0"))
                                       (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "8"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "inEqSimp_commuteGeq" (formula "3") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "7"))
                                       (rule "qeq_literals" (formula "3") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "6"))
                                       (rule "andLeft" (formula "3"))
                                       (rule "inEqSimp_homoInEq1" (formula "3"))
                                       (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                       (rule "add_literals" (formula "3") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "3") (term "1,0"))
                                       (rule "add_zero_right" (formula "3") (term "0"))
                                       (rule "leq_literals" (formula "3"))
                                       (rule "closeFalse" (formula "3"))
                                    )
                                    (branch "CUT: f_0 = FileReader::$state FALSE"
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "true_left" (formula "2"))
                                       (rule "replace_known_right" (formula "6") (term "1") (ifseqformula "43"))
                                        (builtin "One Step Simplification" (formula "6"))
                                       (rule "replace_known_left" (formula "2") (term "0,1,0") (ifseqformula "6"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "applyEqRigid" (formula "44") (term "0") (ifseqformula "6"))
                                        (builtin "One Step Simplification" (formula "44"))
                                       (rule "false_right" (formula "44"))
                                       (rule "applyEqRigid" (formula "48") (term "2,1") (ifseqformula "6"))
                                       (rule "narrowSelectType" (formula "48") (term "1") (ifseqformula "9"))
                                       (rule "applyEqRigid" (formula "43") (term "0") (ifseqformula "6"))
                                        (builtin "One Step Simplification" (formula "43"))
                                       (rule "false_right" (formula "43"))
                                       (rule "applyEqRigid" (formula "47") (term "2,0") (ifseqformula "6"))
                                       (rule "narrowSelectType" (formula "47") (term "0") (ifseqformula "30"))
                                       (rule "all_pull_out3" (formula "19") (term "0"))
                                       (rule "shift_paren_or" (formula "19") (term "0,0"))
                                       (rule "shift_paren_or" (formula "19") (term "0,0,0"))
                                       (rule "shift_paren_or" (formula "19") (term "0,0,0,0"))
                                       (rule "commute_or_2" (formula "19") (term "0,0,0,0,0"))
                                       (rule "commute_or" (formula "19") (term "0,0,0,0,0,0"))
                                        (builtin "Use Dependency Contract" (formula "38") (term "2") (ifInst ""  (formula "21") (term "0")) (ifInst ""  (formula "21")) (contract "LinkedListIterator[LinkedListIterator::$footprint()].JML accessible clause.0"))
                                       (rule "wellFormedAnonEQ" (formula "43") (term "1,1,0,0") (ifseqformula "21"))
                                       (rule "replace_known_left" (formula "43") (term "0,1,0,0") (ifseqformula "9"))
                                        (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "44")) (ifInst ""  (formula "45")) (ifInst ""  (formula "9")) (ifInst ""  (formula "20")))
                                       (rule "true_left" (formula "43"))
                                       (rule "shift_paren_and" (formula "37") (term "0,0,1,0"))
                                       (rule "commute_and_2" (formula "37") (term "0,0,0,1,0"))
                                       (rule "seqGetAlphaCast" (formula "7") (term "0"))
                                       (rule "castedGetAny" (formula "7") (term "0"))
                                        (builtin "One Step Simplification" (formula "7"))
                                       (rule "true_left" (formula "7"))
                                       (rule "shift_paren_and" (formula "37") (term "0,0,0,0,1,0"))
                                       (rule "commute_and_2" (formula "37") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "37"))
                                       (rule "castedGetAny" (formula "37") (term "0,0,0,0,0,0,0,1,0"))
                                       (rule "castedGetAny" (formula "37") (term "1,0,1,0,0,1,0,0,1,0"))
                                       (rule "castedGetAny" (formula "37") (term "0,0,0,0,1,0,0,1,0"))
                                       (rule "castedGetAny" (formula "37") (term "1,1,0,0,0,1,0"))
                                       (rule "castedGetAny" (formula "37") (term "1,0,1,0,1,0,0,1,0"))
                                       (rule "castedGetAny" (formula "37") (term "1,0,1,1,0,0,1,0"))
                                       (rule "castedGetAny" (formula "37") (term "1,0,1,0,1,0"))
                                       (rule "cnf_rightDist" (formula "37") (term "0"))
                                       (rule "distr_forallAnd" (formula "37"))
                                       (rule "andLeft" (formula "37"))
                                       (rule "shift_paren_or" (formula "38") (term "0"))
                                       (rule "cnf_rightDist" (formula "37") (term "0"))
                                       (rule "distr_forallAnd" (formula "37"))
                                       (rule "andLeft" (formula "37"))
                                       (rule "commute_or" (formula "38") (term "0"))
                                       (rule "cnf_rightDist" (formula "37") (term "0"))
                                       (rule "distr_forallAnd" (formula "37"))
                                       (rule "andLeft" (formula "37"))
                                       (rule "shift_paren_or" (formula "38") (term "0"))
                                       (rule "cnf_rightDist" (formula "37") (term "0"))
                                       (rule "distr_forallAnd" (formula "37"))
                                       (rule "andLeft" (formula "37"))
                                       (rule "shift_paren_or" (formula "38") (term "0"))
                                       (rule "cnf_rightDist" (formula "37") (term "0"))
                                       (rule "distr_forallAnd" (formula "37"))
                                       (rule "andLeft" (formula "37"))
                                       (rule "commute_or_2" (formula "37") (term "0"))
                                       (rule "shift_paren_or" (formula "38") (term "0"))
                                       (rule "commute_or" (formula "37") (term "0,0"))
                                       (rule "allLeft" (formula "2") (inst "t=i_0"))
                                       (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "8"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "inEqSimp_commuteGeq" (formula "2") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "6"))
                                       (rule "qeq_literals" (formula "2") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "2"))
                                       (rule "andLeft" (formula "5"))
                                       (rule "inEqSimp_homoInEq1" (formula "5"))
                                       (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
                                       (rule "add_literals" (formula "5") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "5") (term "1,0"))
                                       (rule "add_zero_right" (formula "5") (term "0"))
                                       (rule "leq_literals" (formula "5"))
                                       (rule "closeFalse" (formula "5"))
                                    )
                                 )
                              )
                           )
                           (branch "!o_0 = null & !o_0.<created>@heapAfter_iterator = TRUE"
                              (rule "andLeft" (formula "1") (userinteraction))
                              (rule "replace_known_left" (formula "39") (term "0") (ifseqformula "1") (userinteraction))
                               (builtin "One Step Simplification" (formula "39"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0") (ifseqformula "11"))
                              (rule "notRight" (formula "39"))
                              (rule "notLeft" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "orRight" (formula "34"))
                              (rule "close" (formula "34") (ifseqformula "1"))
                           )
                        )
                        (branch " ( (o_0, f_0) in result_21.footprint @heapAfter_iterator | exists int i; ( i < list.values.length & i >= 0 & (o_0, f_0) in (FileReader)list.values[i].footprint @heapAfter_iterator)) & !f_0 = java.lang.Object::<created> | !o_0 = null & !o_0.<created>@heapAfter_iterator = TRUE FALSE"
                            (builtin "One Step Simplification" (formula "39"))
                           (rule "closeTrue" (formula "39"))
                        )
                     )
                  )
                  (branch "Assume LinkedListIterator_seen_1<<selectSK>> != list.values"
                     (rule "notLeft" (formula "27") (userinteraction))
                     (rule "hide_right" (formula "36") (userinteraction))
                     (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "27") (userinteraction))
                     (rule "applyEq" (formula "32") (term "0") (ifseqformula "27") (userinteraction))
                     (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "27") (userinteraction))
                     (rule "Class_invariant_axiom_for_LinkedListIterator" (formula "21") (inst "i=i") (inst "f=f") (inst "i_0=i_0") (inst "f_0=f_0") (userinteraction))
                     (rule "andLeft" (formula "21"))
                     (rule "notLeft" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "replaceKnownSelect_taclet00_9" (formula "26") (term "1,0,1") (userinteraction))
                     (rule "replaceKnownAuxiliaryConstant_taclet00_10" (formula "26") (term "1,0,1") (userinteraction))
                     (rule "applyEq" (formula "26") (term "0,1") (ifseqformula "1") (userinteraction))
                     (rule "replaceKnownSelect_taclet00_7" (formula "26") (term "0") (userinteraction))
                     (rule "applyEqRigid" (formula "26") (term "0") (ifseqformula "38") (userinteraction))
                     (rule "replaceKnownSelect_taclet00_9" (formula "25") (term "1,0,1") (userinteraction))
                     (rule "replaceKnownAuxiliaryConstant_taclet00_10" (formula "25") (term "1,0,1") (userinteraction))
                     (rule "applyEq" (formula "25") (term "0,1") (ifseqformula "1") (userinteraction))
                     (rule "replaceKnownSelect_taclet00_8" (formula "25") (term "0") (userinteraction))
                     (rule "applyEqReverse" (formula "25") (term "0") (ifseqformula "34") (userinteraction))
                     (rule "applyEq" (formula "40") (term "0") (ifseqformula "25") (userinteraction))
                     (rule "hide_right" (formula "39") (userinteraction))
                     (rule "hide_right" (formula "40") (userinteraction))
                     (rule "hide_right" (formula "40") (userinteraction))
                     (rule "hide_right" (formula "40") (userinteraction))
                     (rule "replaceKnownSelect_taclet00_9" (formula "27") (term "1,0,1,0") (userinteraction))
                     (rule "replaceKnownAuxiliaryConstant_taclet00_10" (formula "27") (term "1,0,1,0") (userinteraction))
                     (rule "applyEq" (formula "27") (term "0,1,0") (ifseqformula "1") (userinteraction))
                     (rule "ifthenelse_split_for" (formula "27") (userinteraction))
                     (branch " result_21.index@heapAfter_recursive < list.values.length TRUE"
                        (rule "equalityToSeqGetAndSeqLen" (formula "26") (inst "iv=iv") (userinteraction))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "andLeft" (formula "26") (userinteraction))
                        (rule "lenOfSeqSub" (formula "26") (term "1") (userinteraction))
                        (rule "replaceKnownSelect_taclet00_9" (formula "26") (term "1,0,1,0,1") (userinteraction))
                        (rule "replaceKnownAuxiliaryConstant_taclet00_10" (formula "26") (term "1,0,1,0,1") (userinteraction))
                        (rule "applyEq" (formula "26") (term "0,1,0,1") (ifseqformula "1") (userinteraction))
                        (rule "replace_known_left" (formula "26") (term "0,1") (ifseqformula "28") (userinteraction))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "replaceKnownSelect_taclet00_9" (formula "26") (term "1,0,0,1") (userinteraction))
                        (rule "replaceKnownAuxiliaryConstant_taclet00_10" (formula "26") (term "1,0,0,1") (userinteraction))
                        (rule "applyEq" (formula "26") (term "0,0,1") (ifseqformula "1") (userinteraction))
                        (rule "replaceKnownSelect_taclet00_9" (formula "30") (term "1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet00_10" (formula "30") (term "1"))
                        (rule "replaceKnownSelect_taclet00_9" (formula "22") (term "1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet00_10" (formula "22") (term "1,0,1"))
                        (rule "replaceKnownSelect_taclet00_9" (formula "29") (term "1,0,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet00_10" (formula "29") (term "1,0,0,1"))
                        (rule "replaceKnownSelect_taclet00_7" (formula "24") (term "0,1,1,0,0"))
                        (rule "replaceKnownSelect_taclet00_8" (formula "23") (term "0,1,1,0,0"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "1,0,0,0,1,0") (ifseqformula "19"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "1,0,0,0,1,0") (ifseqformula "19"))
                        (rule "replaceKnownSelect_taclet00_9" (formula "27") (term "1,0,2,0,1,1,0"))
                        (rule "replaceKnownSelect_taclet00_7" (formula "24") (term "0,1,0,1,0,1,0"))
                        (rule "replaceKnownSelect_taclet00_8" (formula "23") (term "0,1,0,1,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet00_10" (formula "27") (term "1,0,2,0,1,1,0"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "0,1,0,0,0,1,0") (ifseqformula "9"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,1,0,0,0,1,0") (ifseqformula "9"))
                        (rule "applyEqReverse" (formula "36") (term "0,1,0,1,0,1,0") (ifseqformula "35"))
                        (rule "applyEqReverse" (formula "33") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "35"))
                        (rule "applyEqReverse" (formula "23") (term "0,1,0,1,0,1,0") (ifseqformula "35"))
                        (rule "applyEqReverse" (formula "23") (term "0,1,1,0,0") (ifseqformula "35"))
                        (rule "applyEqReverse" (formula "36") (term "0,0,0,1,0,1,0") (ifseqformula "35"))
                        (rule "applyEqReverse" (formula "36") (term "0,1,0,0,0") (ifseqformula "35"))
                        (rule "applyEqReverse" (formula "36") (term "0,1,0,0,0,1,0") (ifseqformula "35"))
                        (rule "applyEqReverse" (formula "33") (term "0,1,0,0,0") (ifseqformula "35"))
                        (rule "hideAuxiliaryEq" (formula "35"))
                        (rule "eqSymm" (formula "26"))
                        (rule "eqSymm" (formula "25"))
                        (rule "eqSymm" (formula "29"))
                        (rule "eqSymm" (formula "27") (term "1,0"))
                        (rule "polySimp_elimSub" (formula "26") (term "0"))
                        (rule "polySimp_addComm0" (formula "26") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "28"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "28") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                        (rule "mul_literals" (formula "27") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "27") (term "0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                        (rule "castedGetAny" (formula "29") (term "0"))
                        (rule "lenOfSeqSubEQ" (formula "23") (term "1,1,0,0") (ifseqformula "25"))
                        (rule "polySimp_elimSub" (formula "23") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "23") (term "1,1,1,1,0,0"))
                        (rule "add_zero_right" (formula "23") (term "1,1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "35") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "35") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "33") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0,0,0"))
                        (rule "lenOfSeqSubEQ" (formula "35") (term "0,1,0,0,0,0,0") (ifseqformula "25"))
                        (rule "polySimp_elimSub" (formula "35") (term "1,0,1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "35") (term "1,1,0,1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "35") (term "1,0,1,0,0,0,0,0"))
                        (rule "lenOfSeqSubEQ" (formula "33") (term "0,1,0,0,0,0,0") (ifseqformula "25"))
                        (rule "polySimp_elimSub" (formula "33") (term "1,0,1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "33") (term "1,1,0,1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "33") (term "1,0,1,0,0,0,0,0"))
                        (rule "lenOfSeqSubEQ" (formula "35") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "25"))
                        (rule "polySimp_elimSub" (formula "35") (term "1,0,1,0,0,0,0,0,1,0"))
                        (rule "mul_literals" (formula "35") (term "1,1,0,1,0,0,0,0,0,1,0"))
                        (rule "add_zero_right" (formula "35") (term "1,0,1,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "21"))
                        (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "22"))
                        (rule "inEqSimp_ltToLeq" (formula "23") (term "0,1,1,0,0"))
                        (rule "add_zero_right" (formula "23") (term "0,0,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "35") (term "0,0,1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "35") (term "0,0,0,1,0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "33") (term "0,0,1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "33") (term "0,0,0,1,0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0,1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "35") (term "0,0,1,0,0,0,0,0,1,0"))
                        (rule "add_zero_right" (formula "35") (term "0,0,0,1,0,0,0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,1,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                        (rule "applyEq" (formula "24") (term "0,0,1,0,0,1,0,0") (ifseqformula "38"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "times_zero_2" (formula "24") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "24") (term "0,0,1,0,0"))
                        (rule "applyEq" (formula "19") (term "0,0,1,0,0,0,0,0,1,1,0") (ifseqformula "14"))
                        (rule "applyEq" (formula "19") (term "0,1,1,0,1,1,0") (ifseqformula "14"))
                        (rule "applyEqRigid" (formula "24") (term "0,1,0,1,0,1,0") (ifseqformula "38"))
                        (rule "polySimp_sepPosMonomial" (formula "26"))
                        (rule "polySimp_mulLiterals" (formula "26") (term "1"))
                        (rule "polySimp_elimOne" (formula "26") (term "1"))
                        (rule "applyEq" (formula "28") (term "0,1,0") (ifseqformula "26"))
                        (rule "polySimp_pullOutFactor1b" (formula "28") (term "0"))
                        (rule "add_literals" (formula "28") (term "1,1,0"))
                        (rule "times_zero_1" (formula "28") (term "1,0"))
                        (rule "add_zero_right" (formula "28") (term "0"))
                        (rule "leq_literals" (formula "28"))
                        (rule "closeFalse" (formula "28"))
                     )
                     (branch " result_21.index@heapAfter_recursive < list.values.length FALSE"
                        (rule "eqTermCut" (formula "40") (term "2,0") (inst "s=seqLen(Seq::select(heap, list, LinkedList::$values))") (userinteraction))
                        (branch "Assume result_21.index@heapAfter_recursive = list.values.length"
                           (rule "applyEq" (formula "41") (term "2,0") (ifseqformula "1") (userinteraction))
                           (rule "hide_right" (formula "40") (userinteraction))
                            (builtin "One Step Simplification" (formula "40"))
                           (rule "closeTrue" (formula "40"))
                        )
                        (branch "Assume result_21.index@heapAfter_recursive != list.values.length"
                           (rule "notLeft" (formula "1") (userinteraction))
                           (rule "replaceKnownSelect_taclet00_9" (formula "28") (term "1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet00_10" (formula "28") (term "1"))
                           (rule "replaceKnownSelect_taclet00_9" (formula "22") (term "1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet00_10" (formula "22") (term "1,0,1"))
                           (rule "replaceKnownSelect_taclet00_9" (formula "26") (term "1,0,2,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet00_10" (formula "26") (term "1,0,2,1"))
                           (rule "replaceKnownSelect_taclet00_7" (formula "24") (term "0,1,1,0,0"))
                           (rule "replaceKnownSelect_taclet00_8" (formula "23") (term "0,1,1,0,0"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "1,0,0,0,1,0") (ifseqformula "19"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "1,0,0,0,1,0") (ifseqformula "19"))
                           (rule "replaceKnownSelect_taclet00_8" (formula "23") (term "0,1,0,1,0,1,0"))
                           (rule "replaceKnownSelect_taclet00_7" (formula "24") (term "0,1,0,1,0,1,0"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,1,0,0,0,1,0") (ifseqformula "9"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "0,1,0,0,0,1,0") (ifseqformula "9"))
                           (rule "applyEqReverse" (formula "31") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "33"))
                           (rule "applyEqReverse" (formula "34") (term "0,1,0,0,0") (ifseqformula "33"))
                           (rule "applyEqReverse" (formula "31") (term "0,1,0,0,0") (ifseqformula "33"))
                           (rule "applyEqReverse" (formula "34") (term "0,1,0,0,0,1,0") (ifseqformula "33"))
                           (rule "applyEqReverse" (formula "34") (term "0,0,0,1,0,1,0") (ifseqformula "33"))
                           (rule "applyEqReverse" (formula "34") (term "0,1,0,1,0,1,0") (ifseqformula "33"))
                           (rule "applyEqReverse" (formula "23") (term "0,1,0,1,0,1,0") (ifseqformula "33"))
                           (rule "applyEqReverse" (formula "23") (term "0,1,1,0,0") (ifseqformula "33"))
                           (rule "hideAuxiliaryEq" (formula "33"))
                           (rule "eqSymm" (formula "37"))
                           (rule "eqSymm" (formula "25"))
                           (rule "eqSymm" (formula "26"))
                           (rule "inEqSimp_ltRight" (formula "38"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                           (rule "lenOfSeqSubEQ" (formula "32") (term "1,0,0,0") (ifseqformula "26"))
                           (rule "polySimp_elimSub" (formula "32") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "32") (term "1,1,1,0,0,0"))
                           (rule "add_zero_right" (formula "32") (term "1,1,0,0,0"))
                           (rule "lenOfSeqSubEQ" (formula "34") (term "1,0,0,0,1,0") (ifseqformula "26"))
                           (rule "polySimp_elimSub" (formula "34") (term "1,1,0,0,0,1,0"))
                           (rule "mul_literals" (formula "34") (term "1,1,1,0,0,0,1,0"))
                           (rule "add_zero_right" (formula "34") (term "1,1,0,0,0,1,0"))
                           (rule "lenOfSeqSubEQ" (formula "34") (term "1,0,0,0") (ifseqformula "26"))
                           (rule "polySimp_elimSub" (formula "34") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "34") (term "1,1,1,0,0,0"))
                           (rule "add_zero_right" (formula "34") (term "1,1,0,0,0"))
                           (rule "lenOfSeqSubEQ" (formula "24") (term "1,1,0,0") (ifseqformula "26"))
                           (rule "polySimp_elimSub" (formula "24") (term "1,1,1,0,0"))
                           (rule "times_zero_2" (formula "24") (term "1,1,1,1,0,0"))
                           (rule "add_zero_right" (formula "24") (term "1,1,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "22"))
                           (rule "inEqSimp_ltToLeq" (formula "32") (term "0,1,0,0,0"))
                           (rule "add_zero_right" (formula "32") (term "0,0,1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "34") (term "0,1,0,0,0,1,0"))
                           (rule "add_zero_right" (formula "34") (term "0,0,1,0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "23"))
                           (rule "inEqSimp_ltToLeq" (formula "34") (term "0,1,0,0,0"))
                           (rule "add_zero_right" (formula "34") (term "0,0,1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "24") (term "0,1,1,0,0"))
                           (rule "add_zero_right" (formula "24") (term "0,0,1,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "32") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "34") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "34") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                           (rule "applyEqRigid" (formula "25") (term "0,1,0,1,0,1,0") (ifseqformula "37"))
                           (rule "applyEq" (formula "20") (term "0,0,1,0,0,0,0,0,1,1,0") (ifseqformula "15"))
                           (rule "applyEqRigid" (formula "25") (term "0,0,1,0,0,1,0,0") (ifseqformula "37"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "times_zero_2" (formula "25") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "25") (term "0,0,1,0,0"))
                           (rule "applyEq" (formula "20") (term "0,1,1,0,1,1,0") (ifseqformula "15"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,1,0"))
                           (rule "mul_literals" (formula "8") (term "0,1,0,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "32") (term "0,0,1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "0,0,0,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "32") (term "0,0,0,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0,1,0"))
                           (rule "mul_literals" (formula "34") (term "0,1,0,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "34") (term "0,0,1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "34") (term "0,0,0,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "34") (term "0,0,0,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,1,1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0,0,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,1,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                           (rule "mul_literals" (formula "25") (term "1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "32") (term "0,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "34") (term "0,1,1,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "34") (term "0,0,1,1,0,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "34") (term "0,0,1,1,0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "34") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,1,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "0,0,1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "24") (term "0,0,1,1,1,0,0"))
                           (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "38"))
                           (rule "inEqSimp_contradEq3" (formula "38") (ifseqformula "1"))
                           (rule "polySimp_mulComm0" (formula "38") (term "1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0"))
                           (rule "add_literals" (formula "38") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "38") (term "1,0,0"))
                           (rule "add_zero_right" (formula "38") (term "0,0"))
                           (rule "qeq_literals" (formula "38") (term "0"))
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "false_right" (formula "38"))
                           (rule "equalityToSeqGetAndSeqLenRight" (formula "38") (inst "iv=iv"))
                           (rule "lenOfSeqSub" (formula "38") (term "1,1,0,0,1"))
                           (rule "polySimp_elimSub" (formula "38") (term "1,1,1,0,0,1"))
                           (rule "times_zero_2" (formula "38") (term "1,1,1,1,0,0,1"))
                           (rule "add_zero_right" (formula "38") (term "1,1,1,0,0,1"))
                           (rule "lenOfSeqSub" (formula "38") (term "0,0"))
                           (rule "polySimp_elimSub" (formula "38") (term "1,0,0"))
                           (rule "mul_literals" (formula "38") (term "1,1,0,0"))
                           (rule "add_zero_right" (formula "38") (term "1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "38") (term "0,1,1,0,0,1"))
                           (rule "add_zero_right" (formula "38") (term "0,0,1,1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0,0"))
                           (rule "add_zero_right" (formula "38") (term "0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "38") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "38") (term "0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "38") (term "0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,1"))
                           (rule "mul_literals" (formula "38") (term "0,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "38") (term "0,1,1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "38") (term "0,0,1,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "38") (term "0,0,1,1,1,0,0,1"))
                           (rule "pullOutSelect" (formula "28") (term "0") (inst "selectSK=LinkedListIterator_curr_0"))
                           (rule "simplifySelectOfAnonEQ" (formula "28") (ifseqformula "20"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "28") (term "0,1,1,0,0") (ifseqformula "10"))
                           (rule "replace_known_left" (formula "28") (term "1,0,1,1,0,0") (ifseqformula "11"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "applyEq" (formula "28") (term "1") (ifseqformula "29"))
                           (rule "ifEqualsNull" (formula "28"))
                           (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=LinkedList_values_1"))
                           (rule "applyEq" (formula "28") (term "0,2,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "2"))
                           (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "21"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "replaceKnownSelect_taclet0_3" (formula "2") (term "2,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "2") (term "2,0"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,1,0,0") (ifseqformula "11"))
                           (rule "eqSymm" (formula "3"))
                           (rule "applyEqReverse" (formula "28") (term "0,2,0") (ifseqformula "3"))
                           (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "3"))
                           (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "replace_known_left" (formula "2") (term "0,0,1,1,0,0") (ifseqformula "4"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "applyEq" (formula "2") (term "2,0") (ifseqformula "15"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "23"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_literals" (formula "1") (term "0"))
                           (rule "leq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                  )
               )
               (branch "Assume list.values@heapAfter_recursive != list.values"
                  (rule "notLeft" (formula "1") (userinteraction))
                  (rule "hide_right" (formula "35") (userinteraction))
                  (rule "selectOfAnonEQ" (formula "31") (term "0") (ifseqformula "18") (userinteraction))
                  (rule "replaceKnownSelect_taclet0_3" (formula "31") (term "2,0") (userinteraction))
                  (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "31") (term "2,0") (userinteraction))
                  (rule "applyEq" (formula "31") (term "2,0") (ifseqformula "13") (userinteraction))
                  (rule "ifthenelse_split" (formula "31") (term "0") (userinteraction))
                  (branch " (list, LinkedList::$values) in result_21.footprint @heapAfter_iterator cup infiniteUnion{int i;}(if ( i < result_21.to_see@anon_heap_iterator<<anonHeapFunction>>.length & i >= 0) then ((FileReader)result_21.to_see@anon_heap_iterator<<anonHeapFunction>>[i].footprint @heapAfter_iterator) else ({})) & !LinkedList::$values = java.lang.Object::<created> | (list, LinkedList::$values) in freshLocs(heapAfter_iterator) TRUE"
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")))
                     (rule "orLeft" (formula "1") (userinteraction))
                     (branch "(list, LinkedList::$values) in result_21.footprint @heapAfter_iterator cup infiniteUnion{int i;}(if ( i < result_21.to_see@anon_heap_iterator<<anonHeapFunction>>.length & i >= 0) then ((FileReader)result_21.to_see@anon_heap_iterator<<anonHeapFunction>>[i].footprint @heapAfter_iterator) else ({}))"
                        (rule "elementOfUnion" (formula "1") (userinteraction))
                        (rule "orLeft" (formula "1") (userinteraction))
                        (branch "(list, LinkedList::$values) in result_21.footprint @heapAfter_iterator"
                           (rule "JML_represents_clause_for_LinkedListIterator_footprint" (formula "1") (term "2") (userinteraction))
                           (rule "elementOfUnion" (formula "1"))
                           (rule "elementOfSingleton" (formula "1") (term "1"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "elementOfUnion" (formula "1"))
                           (rule "elementOfSingleton" (formula "1") (term "1"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "elementOfUnion" (formula "1"))
                           (rule "elementOfSingleton" (formula "1") (term "1"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "elementOfUnion" (formula "1"))
                           (rule "elementOfSingleton" (formula "1") (term "0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "elementOfSingleton" (formula "1"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "(list, LinkedList::$values) in infiniteUnion{int i;}(if ( i < result_21.to_see@anon_heap_iterator<<anonHeapFunction>>.length & i >= 0) then ((FileReader)result_21.to_see@anon_heap_iterator<<anonHeapFunction>>[i].footprint @heapAfter_iterator) else ({}))"
                           (rule "elementOfInfiniteUnion" (formula "1") (userinteraction))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "exLeft" (formula "1") (inst "sk=i_0") (userinteraction))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "JML_represents_clause_for_FileReader_footprint" (formula "3") (term "2") (userinteraction))
                           (rule "elementOfUnion" (formula "3") (userinteraction))
                           (rule "applyEqReverse" (formula "27") (term "0,1,0,0,0") (ifseqformula "29"))
                           (rule "applyEqReverse" (formula "27") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "29"))
                           (rule "applyEqReverse" (formula "30") (term "0,0,0,1,0,1,0") (ifseqformula "29"))
                           (rule "applyEqReverse" (formula "30") (term "0,1,0,0,0") (ifseqformula "29"))
                           (rule "applyEqReverse" (formula "30") (term "0,1,0,1,0,1,0") (ifseqformula "29"))
                           (rule "applyEqReverse" (formula "30") (term "0,1,0,0,0,1,0") (ifseqformula "29"))
                           (rule "hideAuxiliaryEq" (formula "29"))
                           (rule "elementOfSingleton" (formula "3") (term "1"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "elementOfSingleton" (formula "3"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "closeFalse" (formula "3"))
                        )
                     )
                     (branch "!list.<created>@heapAfter_iterator = TRUE"
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0") (ifseqformula "9"))
                        (rule "notLeft" (formula "1"))
                        (rule "orRight" (formula "31"))
                        (rule "close" (formula "31") (ifseqformula "2"))
                     )
                  )
                  (branch " (list, LinkedList::$values) in result_21.footprint @heapAfter_iterator cup infiniteUnion{int i;}(if ( i < result_21.to_see@anon_heap_iterator<<anonHeapFunction>>.length & i >= 0) then ((FileReader)result_21.to_see@anon_heap_iterator<<anonHeapFunction>>[i].footprint @heapAfter_iterator) else ({})) & !LinkedList::$values = java.lang.Object::<created> | (list, LinkedList::$values) in freshLocs(heapAfter_iterator) FALSE"
                      (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "35")))
                     (rule "hide_right" (formula "31") (userinteraction))
                      (builtin "One Step Simplification" (formula "31"))
                     (rule "closeTrue" (formula "31"))
                  )
               )
            )
            (branch "CUT: (result_21, LinkedListIterator::$to_see) in result_21.footprint @heapAfter_iterator FALSE"
               (rule "JML_represents_clause_for_LinkedListIterator_footprint" (formula "30") (term "2") (userinteraction))
               (rule "elementOfUnion" (formula "30"))
               (rule "orRight" (formula "30"))
               (rule "elementOfSingleton" (formula "31"))
                (builtin "One Step Simplification" (formula "31"))
               (rule "closeTrue" (formula "31"))
            )
         )
         (branch "CUT: (result_21, LinkedListIterator::$seen) in result_21.footprint @heapAfter_iterator FALSE"
            (rule "JML_represents_clause_for_LinkedListIterator_footprint" (formula "29") (term "2") (userinteraction))
            (rule "elementOfUnion" (formula "29"))
            (rule "orRight" (formula "29"))
            (rule "elementOfSingleton" (formula "30"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "false_right" (formula "30"))
            (rule "elementOfUnion" (formula "29"))
            (rule "orRight" (formula "29"))
            (rule "elementOfSingleton" (formula "30"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "closeTrue" (formula "30"))
         )
      )
      (branch "CUT: (result_21, LinkedListIterator::$list) in result_21.footprint @heapAfter_iterator FALSE"
         (rule "JML_represents_clause_for_LinkedListIterator_footprint" (formula "28") (term "2") (userinteraction))
         (rule "elementOfUnion" (formula "28"))
         (rule "orRight" (formula "28"))
         (rule "elementOfSingleton" (formula "29"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "false_right" (formula "29"))
         (rule "elementOfUnion" (formula "28"))
         (rule "orRight" (formula "28"))
         (rule "elementOfSingleton" (formula "29"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "false_right" (formula "29"))
         (rule "elementOfUnion" (formula "28"))
         (rule "orRight" (formula "28"))
         (rule "elementOfSingleton" (formula "29"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "false_right" (formula "29"))
         (rule "elementOfUnion" (formula "28"))
         (rule "orRight" (formula "28"))
         (rule "elementOfSingleton" (formula "29"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "false_right" (formula "29"))
         (rule "elementOfSingleton" (formula "28"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "closeTrue" (formula "28"))
      )
   )
   (branch "Exceptional Post (recursive)"
       (builtin "One Step Simplification" (formula "22"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "replaceKnownSelect_taclet0_2" (formula "18") (term "0,0,1,1,0,1,1,0,0"))
      (rule "replaceKnownSelect_taclet0_2" (formula "18") (term "0,1,1,0,0,1,1,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "18") (term "0,0,1,1,0,1,1,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "18") (term "0,1,1,0,0,1,1,0,0"))
      (rule "andLeft" (formula "18"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1,0") (ifseqformula "18"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "0,1,0") (ifseqformula "8"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1,0,0,0,1,0,1,0,0,0,1") (ifseqformula "18"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "0,1,0,0,0,1,0,1,0,0,0,1") (ifseqformula "8"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "21"))
      (rule "notLeft" (formula "19"))
      (rule "close" (formula "23") (ifseqformula "22"))
   )
   (branch "Pre (recursive)"
       (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "10")) (ifInst ""  (formula "15")) (ifInst ""  (formula "19")) (ifInst ""  (formula "17")) (ifInst ""  (formula "19")) (ifInst ""  (formula "17")))
      (rule "replaceKnownSelect_taclet0_5" (formula "20") (term "0,0,0,0,0,0") (userinteraction))
      (rule "replaceKnownAuxiliaryConstant_taclet0_6" (formula "20") (term "0,0,0,0,0,0") (userinteraction))
      (rule "replace_known_left" (formula "20") (term "0,0,0,0,0") (ifseqformula "14") (userinteraction))
       (builtin "One Step Simplification" (formula "20"))
      (rule "wellFormedAnonEQ" (formula "20") (term "0,0,1") (ifseqformula "8") (userinteraction))
      (rule "selectCreatedOfAnonEQ" (formula "20") (term "0,1,0,1") (ifseqformula "8") (userinteraction))
      (rule "selectCreatedOfAnonEQ" (formula "20") (term "0,1,1") (ifseqformula "8") (userinteraction))
      (rule "replace_known_left" (formula "20") (term "0,0,0,1") (ifseqformula "1") (userinteraction))
      (rule "replace_known_left" (formula "20") (term "1,0,0,1") (ifseqformula "7") (userinteraction))
      (rule "replace_known_left" (formula "20") (term "0,0,1,0,1") (ifseqformula "2") (userinteraction))
      (rule "replace_known_right" (formula "20") (term "0,0,1,1") (ifseqformula "18") (userinteraction))
      (rule "applyEq" (formula "20") (term "2,0,1,1") (ifseqformula "9") (userinteraction))
       (builtin "One Step Simplification" (formula "20"))
      (rule "replaceKnownSelect_taclet0_0" (formula "20") (term "0,1,1,0,0,0,0,0") (userinteraction))
      (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "20") (term "0,1,1,0,0,0,0,0") (userinteraction))
      (rule "applyEq" (formula "20") (term "0,1,1,0,0,0,0,0") (ifseqformula "12") (userinteraction))
       (builtin "One Step Simplification" (formula "20"))
      (rule "replaceKnownSelect_taclet0_0" (formula "20") (term "0,1,1,0,0,1,0") (userinteraction))
      (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "20") (term "0,1,1,0,0,1,0") (userinteraction))
      (rule "applyEq" (formula "20") (term "0,1,1,0,0,1,0") (ifseqformula "12") (userinteraction))
       (builtin "One Step Simplification" (formula "20"))
      (rule "replaceKnownSelect_taclet0_0" (formula "20") (term "0,1,1,0,0,1,0,1,0") (userinteraction))
      (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "20") (term "0,1,1,0,0,1,0,1,0") (userinteraction))
      (rule "applyEq" (formula "20") (term "0,1,1,0,0,1,0,1,0") (ifseqformula "12") (userinteraction))
       (builtin "One Step Simplification" (formula "20"))
      (rule "cut_direct" (formula "20") (term "0,0,0") (userinteraction))
      (branch "CUT: forall int i; ( 0 <= i & i < 0 -> exists FileReader f; ( ( f = null | f.<created>@heapAfter_iterator = TRUE) & !f = null & ( f = result_21.seen@heapAfter_iterator[i] & !f = null & f.state@heapAfter_iterator = 3 & f.<inv>@heapAfter_iterator))) TRUE"
          (builtin "One Step Simplification" (formula "21"))
         (rule "cut_direct" (formula "21") (term "1,0") (userinteraction))
         (branch "CUT: forall int i; ( 0 <= i & i < 0 -> forall int j; ( 0 <= j & j < 0 -> (FileReader)(result_21.seen@heapAfter_iterator[i]) = (FileReader)(result_21.seen@heapAfter_iterator[j]) -> i = j)) TRUE"
             (builtin "One Step Simplification" (formula "22"))
            (rule "replaceKnownSelect_taclet0_2" (formula "22") (term "0,1,1,0,0,0") (userinteraction))
            (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "22") (term "0,1,1,0,0,0") (userinteraction))
            (rule "applyEq" (formula "22") (term "0,1,1,0,0,0") (ifseqformula "15") (userinteraction))
            (rule "replaceKnownSelect_taclet0_2" (formula "22") (term "0,1,0,0,0,1,0,1,0,0") (userinteraction))
            (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "22") (term "0,1,0,0,0,1,0,1,0,0") (userinteraction))
            (rule "applyEq" (formula "22") (term "0,1,0,0,0,1,0,1,0,0") (ifseqformula "15") (userinteraction))
            (rule "replaceKnownSelect_taclet0_2" (formula "22") (term "0,1,1,0,0,1") (userinteraction))
            (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "22") (term "0,1,1,0,0,1") (userinteraction))
            (rule "applyEq" (formula "22") (term "0,1,1,0,0,1") (ifseqformula "15") (userinteraction))
            (rule "replaceKnownSelect_taclet0_2" (formula "22") (term "0,1,1,0,0,1,0,1") (userinteraction))
            (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "22") (term "0,1,1,0,0,1,0,1") (userinteraction))
            (rule "applyEq" (formula "22") (term "0,1,1,0,0,1,0,1") (ifseqformula "15") (userinteraction))
            (rule "replaceKnownSelect_taclet0_2" (formula "22") (term "0,0,0,0,1,0,1,0,1") (userinteraction))
            (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "22") (term "0,0,0,0,1,0,1,0,1") (userinteraction))
            (rule "applyEq" (formula "22") (term "0,0,0,0,1,0,1,0,1") (ifseqformula "15") (userinteraction))
            (rule "replaceKnownSelect_taclet0_2" (formula "22") (term "0,0,1,0,1,0,1,0,1") (userinteraction))
            (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "22") (term "0,0,1,0,1,0,1,0,1") (userinteraction))
            (rule "applyEq" (formula "22") (term "0,0,1,0,1,0,1,0,1") (ifseqformula "15") (userinteraction))
            (rule "andRight" (formula "22") (userinteraction))
            (branch "Case 1"
               (rule "allRight" (formula "22") (inst "sk=i_0") (userinteraction))
               (rule "impRight" (formula "22") (userinteraction))
               (rule "andLeft" (formula "1") (userinteraction))
               (rule "allLeft" (formula "9") (inst "t=i_0") (userinteraction))
               (rule "geq_to_leq" (formula "9") (term "1,0") (userinteraction))
               (rule "replace_known_left" (formula "9") (term "0,0") (ifseqformula "2") (userinteraction))
               (rule "replace_known_left" (formula "9") (term "1,0") (ifseqformula "1") (userinteraction))
                (builtin "One Step Simplification" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "notLeft" (formula "9"))
               (rule "notLeft" (formula "9"))
               (rule "castAdd" (formula "30") (term "1,0,0,0,1,0") (ifseqformula "9") (userinteraction))
               (rule "exRight" (formula "30") (inst "t=(FileReader)(any::seqGet(Seq::select(heap,
                                     list,
                                     LinkedList::$values),
                         i_0))") (userinteraction))
               (rule "hide_right" (formula "31") (userinteraction))
                (builtin "One Step Simplification" (formula "30"))
               (rule "andRight" (formula "30"))
               (branch "Case 1"
                  (rule "andRight" (formula "30"))
                  (branch "Case 1"
                     (rule "orRight" (formula "30"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "31") (ifseqformula "16"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "4") (term "1,0,0,0,1,0") (ifseqformula "16"))
                     (rule "replaceKnownSelect_taclet0_0" (formula "3") (term "0,0,0,0,1,0,1,0"))
                     (rule "replaceKnownSelect_taclet0_0" (formula "3") (term "0,0,1,0,1,0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "3") (term "0,0,0,0,1,0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "3") (term "0,0,1,0,1,0,1,0"))
                     (rule "replaceKnownSelect_taclet0_0" (formula "4") (term "0,1,0,0,0,1,0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "4") (term "0,1,0,0,0,1,0,1,0"))
                     (rule "orRight" (formula "31"))
                     (rule "eqSymm" (formula "3") (term "1,1,0,1,0"))
                     (rule "eqSymm" (formula "3") (term "0,1,0,1,0"))
                     (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "26"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "castedGetAny" (formula "30") (term "0"))
                     (rule "castedGetAny" (formula "30") (term "1,0"))
                     (rule "close" (formula "30") (ifseqformula "12"))
                  )
                  (branch "Case 2"
                     (rule "notRight" (formula "30"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "5") (term "1,0,0,0,1,0") (ifseqformula "17"))
                     (rule "replaceKnownSelect_taclet0_0" (formula "4") (term "0,0,0,0,1,0,1,0"))
                     (rule "replaceKnownSelect_taclet0_0" (formula "4") (term "0,0,1,0,1,0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "4") (term "0,0,0,0,1,0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "4") (term "0,0,1,0,1,0,1,0"))
                     (rule "replaceKnownSelect_taclet0_0" (formula "5") (term "0,1,0,0,0,1,0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "5") (term "0,1,0,0,0,1,0,1,0"))
                     (rule "eqSymm" (formula "4") (term "1,1,0,1,0"))
                     (rule "eqSymm" (formula "4") (term "0,1,0,1,0"))
                     (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "27"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "castedGetAny" (formula "1") (term "0"))
                     (rule "close" (formula "27") (ifseqformula "1"))
                  )
               )
               (branch "Case 2"
                  (rule "andRight" (formula "30"))
                  (branch "Case 1"
                     (rule "andRight" (formula "30"))
                     (branch "Case 1"
                        (rule "notRight" (formula "30"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "5") (term "1,0,0,0,1,0") (ifseqformula "17"))
                        (rule "replaceKnownSelect_taclet0_0" (formula "4") (term "0,0,0,0,1,0,1,0"))
                        (rule "replaceKnownSelect_taclet0_0" (formula "4") (term "0,0,1,0,1,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "4") (term "0,0,0,0,1,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "4") (term "0,0,1,0,1,0,1,0"))
                        (rule "replaceKnownSelect_taclet0_0" (formula "5") (term "0,1,0,0,0,1,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "5") (term "0,1,0,0,0,1,0,1,0"))
                        (rule "eqSymm" (formula "4") (term "1,1,0,1,0"))
                        (rule "eqSymm" (formula "4") (term "0,1,0,1,0"))
                        (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "27"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "castedGetAny" (formula "1") (term "0"))
                        (rule "close" (formula "27") (ifseqformula "1"))
                     )
                     (branch "Case 2"
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "4") (term "1,0,0,0,1,0") (ifseqformula "16"))
                        (rule "replaceKnownSelect_taclet0_0" (formula "3") (term "0,0,1,0,1,0,1,0"))
                        (rule "replaceKnownSelect_taclet0_0" (formula "3") (term "0,0,0,0,1,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "3") (term "0,0,1,0,1,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "3") (term "0,0,0,0,1,0,1,0"))
                        (rule "replaceKnownSelect_taclet0_0" (formula "4") (term "0,1,0,0,0,1,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "4") (term "0,1,0,0,0,1,0,1,0"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,1,0"))
                        (rule "eqSymm" (formula "3") (term "0,1,0,1,0"))
                        (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "26"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "castedGetAny" (formula "30") (term "1,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,1,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,1,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0"))
                        (rule "mul_literals" (formula "3") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,1,0"))
                        (rule "mul_literals" (formula "3") (term "1,0,0,1,0,0,1,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0,1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "1"))
                        (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
                        (rule "applyEq" (formula "4") (term "0,1,0,0,0,1,0,1,0") (ifseqformula "20"))
                        (rule "applyEq" (formula "3") (term "0,1,0,1,0,1,0") (ifseqformula "20"))
                        (rule "applyEq" (formula "3") (term "0,0,0,1,0,1,0") (ifseqformula "20"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
                        (rule "mul_literals" (formula "4") (term "1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0"))
                        (rule "mul_literals" (formula "3") (term "1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,1,0"))
                        (rule "mul_literals" (formula "3") (term "1,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=FileReader_state_0"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")) (ifInst ""  (formula "13")))
                        (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "1"))
                        (rule "close" (formula "31") (ifseqformula "12"))
                     )
                  )
                  (branch "Case 2"
                     (rule "Class_invariant_axiom_for_FileReader" (formula "30") (userinteraction))
                     (rule "Class_invariant_axiom_for_FileReader" (formula "10") (userinteraction))
                     (rule "seqGetAlphaCast" (formula "10") (term "1,0") (userinteraction))
                     (rule "applyEqReverse" (formula "11") (term "1,0") (ifseqformula "10") (userinteraction))
                     (rule "selectOfAnonEQ" (formula "31") (term "0") (ifseqformula "17") (userinteraction))
                      (builtin "One Step Simplification" (formula "31"))
                     (rule "ifthenelse_split" (formula "31") (term "0") (userinteraction))
                     (branch " !(FileReader)(list.values[i_0]) = null & !(FileReader)(list.values[i_0]).<created> = TRUE TRUE"
                        (rule "andLeft" (formula "1") (userinteraction))
                        (rule "hide_right" (formula "33") (userinteraction))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "6") (term "1,0,0,0,1,0") (ifseqformula "19"))
                        (rule "replaceKnownSelect_taclet0_0" (formula "5") (term "0,0,1,0,1,0,1,0"))
                        (rule "replaceKnownSelect_taclet0_0" (formula "5") (term "0,0,0,0,1,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "5") (term "0,0,1,0,1,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "5") (term "0,0,0,0,1,0,1,0"))
                        (rule "replaceKnownSelect_taclet0_0" (formula "6") (term "0,1,0,0,0,1,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "6") (term "0,1,0,0,0,1,0,1,0"))
                        (rule "notLeft" (formula "2"))
                        (rule "notLeft" (formula "1"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,1,0"))
                        (rule "eqSymm" (formula "3") (term "0,1,0,1,0"))
                        (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "29"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "castedGetAny" (formula "10") (term "0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "castedGetAny" (formula "10") (term "1,0"))
                        (rule "castedGetAny" (formula "26") (term "1,0"))
                        (rule "close" (formula "26") (ifseqformula "12"))
                     )
                     (branch " !(FileReader)(list.values[i_0]) = null & !(FileReader)(list.values[i_0]).<created> = TRUE FALSE"
                        (rule "replace_known_left" (formula "32") (ifseqformula "11") (userinteraction))
                        (rule "closeTrue" (formula "32") (userinteraction))
                     )
                  )
               )
            )
            (branch "Case 2"
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,1,0") (ifseqformula "10"))
               (rule "replaceKnownSelect_taclet0_0" (formula "1") (term "0,0,0,0,1,0,1,0"))
               (rule "replaceKnownSelect_taclet0_0" (formula "1") (term "0,0,1,0,1,0,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "1") (term "0,0,0,0,1,0,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "1") (term "0,0,1,0,1,0,1,0"))
               (rule "replaceKnownSelect_taclet0_0" (formula "2") (term "0,1,0,0,0,1,0,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "2") (term "0,1,0,0,0,1,0,1,0"))
               (rule "allRight" (formula "22") (inst "sk=i_0"))
               (rule "impRight" (formula "22"))
               (rule "andLeft" (formula "1"))
               (rule "allRight" (formula "24") (inst "sk=j_0"))
               (rule "impRight" (formula "24"))
               (rule "andLeft" (formula "1"))
               (rule "impRight" (formula "26"))
               (rule "eqSymm" (formula "6") (term "1,1,0,1,0"))
               (rule "eqSymm" (formula "6") (term "0,1,0,1,0"))
               (rule "eqSymm" (formula "27"))
               (rule "eqSymm" (formula "1"))
               (rule "castedGetAny" (formula "6") (term "1,0,1,0,1,0"))
               (rule "castedGetAny" (formula "6") (term "0,0,1,0,1,0"))
               (rule "castedGetAny" (formula "1") (term "1"))
               (rule "castedGetAny" (formula "1") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0"))
               (rule "mul_literals" (formula "6") (term "1,0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "6") (term "0,0,1,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
               (rule "mul_literals" (formula "7") (term "1,0,0,1,0,0"))
               (rule "add_literals" (formula "7") (term "0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
               (rule "mul_literals" (formula "6") (term "1,0,0,1,0,0"))
               (rule "add_literals" (formula "6") (term "0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "5"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "5") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "3") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "4"))
               (rule "inEqSimp_commuteLeq" (formula "2"))
               (rule "applyEq" (formula "7") (term "0,1,0,0,0,1,0,1,0") (ifseqformula "19"))
               (rule "applyEq" (formula "6") (term "0,0,0,1,0,1,0") (ifseqformula "19"))
               (rule "applyEq" (formula "6") (term "0,1,0,1,0,1,0") (ifseqformula "19"))
               (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,1,0"))
               (rule "mul_literals" (formula "6") (term "1,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
               (rule "mul_literals" (formula "7") (term "1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "13") (term "0,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
               (rule "mul_literals" (formula "6") (term "1,1,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "5"))
               (rule "polySimp_mulLiterals" (formula "5") (term "0"))
               (rule "polySimp_elimOne" (formula "5") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
               (rule "polySimp_elimOne" (formula "3") (term "0"))
               (rule "nnf_imp2or" (formula "13") (term "1,0,1,0"))
               (rule "nnf_imp2or" (formula "12") (term "0"))
               (rule "nnf_imp2or" (formula "7") (term "0"))
               (rule "nnf_imp2or" (formula "6") (term "0"))
               (rule "nnf_imp2or" (formula "13") (term "0"))
               (rule "nnf_notAnd" (formula "12") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
               (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
               (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
               (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
               (rule "mul_literals" (formula "12") (term "1,1,0,0"))
               (rule "nnf_notAnd" (formula "7") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
               (rule "mul_literals" (formula "7") (term "1,0,0,1,0,0"))
               (rule "add_literals" (formula "7") (term "0,0,1,0,0"))
               (rule "add_zero_left" (formula "7") (term "0,1,0,0"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "true_left" (formula "7"))
               (rule "nnf_notAnd" (formula "6") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
               (rule "mul_literals" (formula "6") (term "1,0,0,1,0,0"))
               (rule "add_literals" (formula "6") (term "0,0,1,0,0"))
               (rule "add_zero_left" (formula "6") (term "0,1,0,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "true_left" (formula "6"))
               (rule "nnf_notAnd" (formula "11") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0"))
               (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,0"))
               (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
               (rule "mul_literals" (formula "11") (term "1,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
               (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "11") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0"))
               (rule "nnf_imp2or" (formula "11") (term "0,1,0"))
               (rule "nnf_notAnd" (formula "11") (term "0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0,1,0"))
               (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0,1,0"))
               (rule "add_zero_right" (formula "11") (term "0,0,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0"))
               (rule "mul_literals" (formula "11") (term "1,1,0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,1,0"))
               (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,1,0"))
               (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,1,0"))
               (rule "add_zero_left" (formula "11") (term "0,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0,1,0"))
               (rule "commute_or" (formula "10") (term "0,0"))
               (rule "commute_or" (formula "11") (term "0,0"))
               (rule "cnf_rightDist" (formula "10") (term "0"))
               (rule "distr_forallAnd" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "shift_paren_or" (formula "11") (term "0"))
               (rule "cnf_rightDist" (formula "10") (term "0"))
               (rule "distr_forallAnd" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "commute_or" (formula "11") (term "0"))
               (rule "cnf_rightDist" (formula "10") (term "0"))
               (rule "distr_forallAnd" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "shift_paren_or" (formula "11") (term "0"))
               (rule "shift_paren_or" (formula "14") (term "0,1,0"))
               (rule "cnf_rightDist" (formula "10") (term "0"))
               (rule "distr_forallAnd" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "shift_paren_or" (formula "11") (term "0"))
               (rule "cnf_rightDist" (formula "10") (term "0"))
               (rule "distr_forallAnd" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "commute_or_2" (formula "10") (term "0"))
               (rule "shift_paren_or" (formula "11") (term "0"))
               (rule "commute_or" (formula "10") (term "0,0"))
               (rule "commute_or_2" (formula "16") (term "0,0,1,0"))
               (rule "commute_or" (formula "16") (term "0,0,0,1,0"))
               (rule "commute_or_2" (formula "16") (term "0,0,1,0"))
               (rule "equalityToSeqGetAndSeqLenLeft" (formula "22") (inst "iv=iv"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "andLeft" (formula "22"))
               (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
               (rule "applyEq" (formula "23") (term "0,0,1,0") (ifseqformula "24"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "true_left" (formula "23"))
               (rule "applyEq" (formula "22") (term "0,0") (ifseqformula "23"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "true_left" (formula "22"))
               (rule "equalityToSeqGetAndSeqLenLeft" (formula "23") (inst "iv=iv"))
               (rule "andLeft" (formula "23"))
               (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
               (rule "applyEq" (formula "24") (term "0,0,1,0") (ifseqformula "25"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "true_left" (formula "24"))
               (rule "applyEq" (formula "23") (term "0,0") (ifseqformula "24"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "true_left" (formula "23"))
               (rule "seqGetAlphaCast" (formula "1") (term "1"))
               (rule "castedGetAny" (formula "1") (term "0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "seqGetAlphaCast" (formula "1") (term "0"))
               (rule "castedGetAny" (formula "1") (term "0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "all_pull_out3" (formula "16") (term "0"))
               (rule "shift_paren_or" (formula "16") (term "0,0"))
               (rule "shift_paren_or" (formula "16") (term "0,0,0"))
               (rule "shift_paren_or" (formula "16") (term "0,0,0,0"))
               (rule "commute_or_2" (formula "16") (term "0,0,0,0,0"))
               (rule "commute_or" (formula "16") (term "0,0,0,0,0,0"))
               (rule "lenNonNegative" (formula "5") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "5"))
               (rule "allLeft" (formula "17") (inst "t=i_0"))
               (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0,0,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0,0,0,0,0") (ifseqformula "4"))
               (rule "qeq_literals" (formula "17") (term "0,1,0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0,0,0,0") (ifseqformula "6"))
               (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1,0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1,0,0,0,0"))
               (rule "add_literals" (formula "17") (term "1,1,0,0,1,0,0,0,0"))
               (rule "times_zero_1" (formula "17") (term "1,0,0,1,0,0,0,0"))
               (rule "add_literals" (formula "17") (term "0,0,1,0,0,0,0"))
               (rule "leq_literals" (formula "17") (term "0,1,0,0,0,0"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "commute_or_2" (formula "17") (term "0"))
               (rule "allLeft" (formula "11") (inst "t=i_0"))
               (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "6"))
               (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
               (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "11") (term "0,0,1"))
               (rule "leq_literals" (formula "11") (term "0,1"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "4"))
               (rule "qeq_literals" (formula "11") (term "0,1"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "notLeft" (formula "11"))
               (rule "allLeft" (formula "11") (inst "t=j_0"))
               (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
               (rule "applyEq" (formula "11") (term "0,0,0,0") (ifseqformula "1"))
               (rule "replace_known_right" (formula "11") (term "0,0,0") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "true_left" (formula "11"))
               (rule "allLeft" (formula "14") (inst "t=j_0"))
               (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
               (rule "applyEq" (formula "14") (term "1,0,0") (ifseqformula "1"))
               (rule "inEqSimp_contradInEq1" (formula "14") (term "1,0") (ifseqformula "2"))
               (rule "qeq_literals" (formula "14") (term "0,1,0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "3"))
               (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
               (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
               (rule "add_literals" (formula "14") (term "0,0,1"))
               (rule "leq_literals" (formula "14") (term "0,1"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "allLeft" (formula "16") (inst "t=j_0"))
               (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0"))
               (rule "applyEq" (formula "16") (term "1,0,1") (ifseqformula "1"))
               (rule "inEqSimp_contradInEq1" (formula "16") (term "0,0") (ifseqformula "2"))
               (rule "qeq_literals" (formula "16") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "3"))
               (rule "inEqSimp_homoInEq1" (formula "16") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,0"))
               (rule "add_literals" (formula "16") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "16") (term "1,0,0,0"))
               (rule "add_literals" (formula "16") (term "0,0,0"))
               (rule "leq_literals" (formula "16") (term "0,0"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "allLeft" (formula "19") (inst "t=j_0"))
               (rule "replace_known_right" (formula "19") (term "1,0") (ifseqformula "36"))
                (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "1")))
               (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "19") (term "0") (ifseqformula "2"))
               (rule "qeq_literals" (formula "19") (term "0,0"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "19"))
               (rule "andLeft" (formula "3"))
               (rule "inEqSimp_homoInEq1" (formula "3"))
               (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
               (rule "add_literals" (formula "3") (term "1,1,0"))
               (rule "times_zero_1" (formula "3") (term "1,0"))
               (rule "add_zero_right" (formula "3") (term "0"))
               (rule "leq_literals" (formula "3"))
               (rule "closeFalse" (formula "3"))
            )
         )
         (branch "CUT: forall int i; ( 0 <= i & i < 0 -> forall int j; ( 0 <= j & j < 0 -> (FileReader)(result_21.seen@heapAfter_iterator[i]) = (FileReader)(result_21.seen@heapAfter_iterator[j]) -> i = j)) FALSE"
            (rule "allRight" (formula "21") (inst "sk=i_0") (userinteraction))
            (rule "impRight" (formula "21") (userinteraction))
             (builtin "One Step Simplification" (formula "23"))
            (rule "false_right" (formula "23"))
            (rule "replaceKnownSelect_taclet0_0" (formula "22") (term "0,0,0,0,1,0"))
            (rule "replaceKnownSelect_taclet0_0" (formula "22") (term "0,0,1,0,1,0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,1,0") (ifseqformula "10"))
            (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "22") (term "0,0,0,0,1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "22") (term "0,0,1,0,1,0"))
            (rule "replaceKnownSelect_taclet0_0" (formula "2") (term "0,1,0,0,0,1,0,1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "2") (term "0,1,0,0,0,1,0,1,0"))
            (rule "andLeft" (formula "1"))
            (rule "allRight" (formula "23") (inst "sk=j_0"))
            (rule "impRight" (formula "23"))
            (rule "impRight" (formula "24"))
            (rule "andLeft" (formula "2"))
            (rule "eqSymm" (formula "1"))
            (rule "eqSymm" (formula "26"))
            (rule "castedGetAny" (formula "1") (term "1"))
            (rule "castedGetAny" (formula "1") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
            (rule "mul_literals" (formula "6") (term "1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "6") (term "0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "5"))
            (rule "times_zero_1" (formula "5") (term "1,0,0"))
            (rule "add_literals" (formula "5") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "3"))
            (rule "times_zero_1" (formula "3") (term "1,0,0"))
            (rule "add_literals" (formula "3") (term "0,0"))
            (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "4"))
            (rule "inEqSimp_commuteLeq" (formula "2"))
            (rule "applyEq" (formula "6") (term "0,1,0,0,0,1,0,1,0") (ifseqformula "18"))
            (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "18"))
            (rule "eqSymm" (formula "1"))
            (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "18"))
            (rule "eqSymm" (formula "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
            (rule "mul_literals" (formula "6") (term "1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,1,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "5"))
            (rule "mul_literals" (formula "5") (term "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3"))
            (rule "mul_literals" (formula "3") (term "1"))
            (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "5"))
            (rule "qeq_literals" (formula "4") (term "0"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "closeFalse" (formula "4"))
         )
      )
      (branch "CUT: forall int i; ( 0 <= i & i < 0 -> exists FileReader f; ( ( f = null | f.<created>@heapAfter_iterator = TRUE) & !f = null & ( f = result_21.seen@heapAfter_iterator[i] & !f = null & f.state@heapAfter_iterator = 3 & f.<inv>@heapAfter_iterator))) FALSE"
         (rule "allRight" (formula "20") (inst "sk=i_0") (userinteraction))
         (rule "impRight" (formula "20") (userinteraction))
          (builtin "One Step Simplification" (formula "22"))
         (rule "false_right" (formula "22"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "1,0,0,0") (ifseqformula "9"))
         (rule "replaceKnownSelect_taclet0_0" (formula "21") (term "0,1,0,0,0,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "21") (term "0,1,0,0,0,1,0"))
         (rule "andLeft" (formula "1"))
         (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "2"))
         (rule "mul_literals" (formula "2") (term "1,0,0"))
         (rule "add_literals" (formula "2") (term "0,0"))
         (rule "inEqSimp_commuteLeq" (formula "1"))
         (rule "applyEq" (formula "22") (term "0,1,0,0,0,1,0") (ifseqformula "14"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,1,0"))
         (rule "mul_literals" (formula "8") (term "0,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "2"))
         (rule "mul_literals" (formula "2") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
         (rule "qeq_literals" (formula "2") (term "0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "closeFalse" (formula "2"))
      )
   )
)
(branch "Exceptional Post (iterator)"
    (builtin "One Step Simplification" (formula "8"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "andLeft" (formula "8"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1,0") (ifseqformula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "11"))
   (rule "notLeft" (formula "9"))
   (rule "close" (formula "13") (ifseqformula "12"))
)
(branch "Pre (iterator)"
    (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "4")) (ifInst ""  (formula "1")) (ifInst ""  (formula "2")))
   (rule "closeTrue" (formula "8"))
)
(branch "Null reference (_list = null)"
    (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "7")))
   (rule "closeTrue" (formula "8"))
)
)
}
